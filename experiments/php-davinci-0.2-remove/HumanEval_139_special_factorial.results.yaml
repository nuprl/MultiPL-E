language: php
name: HumanEval_139_special_factorial
results:
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar6fvzzb.php:20\n\
    Stack trace:\n#0 /tmp/tmpar6fvzzb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpar6fvzzb.php\
    \ on line 20\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  if ($n == 0) {\n    return\
    \ 1;\n  } else {\n    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n      $result\
    \ *= $i;\n    }\n    return $result * special_factorial($n - 1);\n  }\n}\n\necho\
    \ special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '288'
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar6fvzzb.php:20\n\
    Stack trace:\n#0 /tmp/tmpar6fvzzb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpar6fvzzb.php\
    \ on line 20\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpr_e79cpu.php:11\nStack trace:\n#0 /tmp/tmpr_e79cpu.php(17): special_factorial(4)\n\
    #1 /tmp/tmpr_e79cpu.php(21): candidate(4)\n#2 /tmp/tmpr_e79cpu.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr_e79cpu.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $result = 1;\n    for\
    \ ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9szcznv.php:21\n\
    Stack trace:\n#0 /tmp/tmpb9szcznv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpb9szcznv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  // Your code here\n}\n\
    \nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eeas328.php:17\n\
    Stack trace:\n#0 /tmp/tmp3eeas328.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3eeas328.php\
    \ on line 17\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpr_e79cpu.php:11\nStack trace:\n#0 /tmp/tmpr_e79cpu.php(17): special_factorial(4)\n\
    #1 /tmp/tmpr_e79cpu.php(21): candidate(4)\n#2 /tmp/tmpr_e79cpu.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr_e79cpu.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $result = 1;\n    for\
    \ ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    for ($i = $n -\
    \ 1; $i > 0; $i--) {\n        $result *= $i;\n    }\n    for ($i = $n - 2; $i\
    \ > 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp229fsp7l.php:28\n\
    Stack trace:\n#0 /tmp/tmp229fsp7l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp229fsp7l.php\
    \ on line 28\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpoh1ppu46.php:11\nStack trace:\n#0 /tmp/tmpoh1ppu46.php(17): special_factorial(4)\n\
    #1 /tmp/tmpoh1ppu46.php(21): candidate(4)\n#2 /tmp/tmpoh1ppu46.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoh1ppu46.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  if ($n == 0) {\n    return\
    \ 1;\n  }\n  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmphxvuo5h4.php:14\nStack trace:\n#0 /tmp/tmphxvuo5h4.php(20): special_factorial(4)\n\
    #1 /tmp/tmphxvuo5h4.php(24): candidate(4)\n#2 /tmp/tmphxvuo5h4.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxvuo5h4.php on line 14\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $result = 1;\n    for\
    \ ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9szcznv.php:21\n\
    Stack trace:\n#0 /tmp/tmpb9szcznv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpb9szcznv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpoh1ppu46.php:11\nStack trace:\n#0 /tmp/tmpoh1ppu46.php(17): special_factorial(4)\n\
    #1 /tmp/tmpoh1ppu46.php(21): candidate(4)\n#2 /tmp/tmpoh1ppu46.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoh1ppu46.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpoh1ppu46.php:11\nStack trace:\n#0 /tmp/tmpoh1ppu46.php(17): special_factorial(4)\n\
    #1 /tmp/tmpoh1ppu46.php(21): candidate(4)\n#2 /tmp/tmpoh1ppu46.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoh1ppu46.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  $factorial_n\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n    $factorial_n\
    \ *= $factorial;\n  }\n  return $factorial_n;\n}\n\necho special_factorial(5);\
    \ // should be 120\necho special_factorial(6); // should be 720\necho special_factorial(7);\
    \ // should be 5040\necho special_factorial(8); // should be 40320\necho special_factorial(9);\
    \ // should be 362880\necho special_factorial(10); // should be 3628800\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 345602488320012541132800050565847449600001.8349334722511E+216.6586065841047E+27
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  $factorial_array = [];\n    for ($i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n        $factorial_array[] = $factorial;\n    }\n    return array_product($factorial_array);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycusq8jl.php:23\n\
    Stack trace:\n#0 /tmp/tmpycusq8jl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpycusq8jl.php\
    \ on line 23\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 0
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  if ($n == 0) {\n    return\
    \ 1;\n  }\n  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial\
    \ *= $i;\n  }\n  return $factorial * special_factorial($n - 1);\n}\n\necho special_factorial(3);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12'
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 1; $i > 0;\
    \ $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 2; $i > 0; $i--) {\n    $result\
    \ *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00jhwr6y.php:28\n\
    Stack trace:\n#0 /tmp/tmp00jhwr6y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp00jhwr6y.php\
    \ on line 28\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpoh1ppu46.php:11\nStack trace:\n#0 /tmp/tmpoh1ppu46.php(17): special_factorial(4)\n\
    #1 /tmp/tmpoh1ppu46.php(21): candidate(4)\n#2 /tmp/tmpoh1ppu46.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoh1ppu46.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpoh1ppu46.php:11\nStack trace:\n#0 /tmp/tmpoh1ppu46.php(17): special_factorial(4)\n\
    #1 /tmp/tmpoh1ppu46.php(21): candidate(4)\n#2 /tmp/tmpoh1ppu46.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoh1ppu46.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpoh1ppu46.php:11\nStack trace:\n#0 /tmp/tmpoh1ppu46.php(17): special_factorial(4)\n\
    #1 /tmp/tmpoh1ppu46.php(21): candidate(4)\n#2 /tmp/tmpoh1ppu46.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoh1ppu46.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  $factorial_array\
    \ = array();\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial_array[] = $i;\n\
    \    $factorial *= $i;\n  }\n  return array_product($factorial_array) * $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vc1ht3m.php:23\n\
    Stack trace:\n#0 /tmp/tmp0vc1ht3m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0vc1ht3m.php\
    \ on line 23\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcv_r624.php:21\n\
    Stack trace:\n#0 /tmp/tmprcv_r624.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprcv_r624.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ueai__6.php:21\n\
    Stack trace:\n#0 /tmp/tmp5ueai__6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp5ueai__6.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    for ($i\
    \ = $n - 1; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    for ($i = $n\
    \ - 2; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n\n$n = 5;\necho special_factorial($n);\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "17280\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaivg9vja.php:30\n\
    Stack trace:\n#0 /tmp/tmpaivg9vja.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpaivg9vja.php\
    \ on line 30\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $result = 1;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp7ntm87hc.php:11\nStack trace:\n#0 /tmp/tmp7ntm87hc.php(17): special_factorial(4)\n\
    #1 /tmp/tmp7ntm87hc.php(21): candidate(4)\n#2 /tmp/tmp7ntm87hc.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7ntm87hc.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 1; $i > 0;\
    \ $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 2; $i > 0; $i--) {\n    $result\
    \ *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00jhwr6y.php:28\n\
    Stack trace:\n#0 /tmp/tmp00jhwr6y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp00jhwr6y.php\
    \ on line 28\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpoh1ppu46.php:11\nStack trace:\n#0 /tmp/tmpoh1ppu46.php(17): special_factorial(4)\n\
    #1 /tmp/tmpoh1ppu46.php(21): candidate(4)\n#2 /tmp/tmpoh1ppu46.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoh1ppu46.php on line 11\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 1; $i > 0;\
    \ $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 2; $i > 0; $i--) {\n    $result\
    \ *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00jhwr6y.php:28\n\
    Stack trace:\n#0 /tmp/tmp00jhwr6y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp00jhwr6y.php\
    \ on line 28\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsk980wv.php:21\n\
    Stack trace:\n#0 /tmp/tmpbsk980wv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbsk980wv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr87x3wd0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr87x3wd0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr87x3wd0.php\
    \ on line 21\n"
  timestamp: 1659978797
