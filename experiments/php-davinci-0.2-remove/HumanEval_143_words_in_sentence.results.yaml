language: php
name: HumanEval_143_words_in_sentence
results:
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n  $words = explode(' ', $sentence);\n  $prime_words = [];\n  foreach ($words\
    \ as $word) {\n    if (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n\
    \    }\n  }\n  return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptxr5dcjj.php:16\nStack trace:\n#0 /tmp/tmptxr5dcjj.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptxr5dcjj.php(28): candidate('This is a test')\n#2 /tmp/tmptxr5dcjj.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptxr5dcjj.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpez837gak.php:16\nStack trace:\n#0 /tmp/tmpez837gak.php(23): words_in_sentence(Array)\n\
    #1 /tmp/tmpez837gak.php(27): candidate('This is a test')\n#2 /tmp/tmpez837gak.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpez837gak.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjs6h43oz.php:16\nStack trace:\n#0 /tmp/tmpjs6h43oz.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjs6h43oz.php(28): candidate('This is a test')\n#2 /tmp/tmpjs6h43oz.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjs6h43oz.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $primes[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $primes);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzbnaools.php:17\nStack trace:\n#0 /tmp/tmpzbnaools.php(25): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzbnaools.php(29): candidate('This is a test')\n#2 /tmp/tmpzbnaools.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbnaools.php on line 17\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(' ', $sentence);\n    $res = [];\n    foreach ($arr as\
    \ $word) {\n        if (is_prime(strlen($word))) {\n            $res[] = $word;\n\
    \        }\n    }\n    return implode(' ', $res);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmx0mefj4.php:16\nStack trace:\n#0 /tmp/tmpmx0mefj4.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpmx0mefj4.php(27): candidate('This is a test')\n#2 /tmp/tmpmx0mefj4.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmx0mefj4.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $primes[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $primes);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzbnaools.php:17\nStack trace:\n#0 /tmp/tmpzbnaools.php(25): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzbnaools.php(29): candidate('This is a test')\n#2 /tmp/tmpzbnaools.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbnaools.php on line 17\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $primes[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $primes);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzbnaools.php:17\nStack trace:\n#0 /tmp/tmpzbnaools.php(25): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzbnaools.php(29): candidate('This is a test')\n#2 /tmp/tmpzbnaools.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbnaools.php on line 17\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(' ', $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpk78x9h_8.php:16\nStack trace:\n#0 /tmp/tmpk78x9h_8.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpk78x9h_8.php(28): candidate('This is a test')\n#2 /tmp/tmpk78x9h_8.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpk78x9h_8.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $primes[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $primes);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzbnaools.php:17\nStack trace:\n#0 /tmp/tmpzbnaools.php(25): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzbnaools.php(29): candidate('This is a test')\n#2 /tmp/tmpzbnaools.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbnaools.php on line 17\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $length = strlen($word);\n\
    \        if (in_array($length, $primes)) {\n            $result[] = $word;\n \
    \       }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $primes[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $primes);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzbnaools.php:17\nStack trace:\n#0 /tmp/tmpzbnaools.php(25): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzbnaools.php(29): candidate('This is a test')\n#2 /tmp/tmpzbnaools.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbnaools.php on line 17\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n  $sentence = explode(' ', $sentence);\n  $result = [];\n  foreach ($sentence\
    \ as $word) {\n    if (is_prime(strlen($word))) {\n      $result[] = $word;\n\
    \    }\n  }\n  return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqg7atkm5.php:16\nStack trace:\n#0 /tmp/tmpqg7atkm5.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpqg7atkm5.php(28): candidate('This is a test')\n#2 /tmp/tmpqg7atkm5.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqg7atkm5.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpcbok4vzd.php:16\nStack trace:\n#0 /tmp/tmpcbok4vzd.php(23): words_in_sentence(Array)\n\
    #1 /tmp/tmpcbok4vzd.php(27): candidate('This is a test')\n#2 /tmp/tmpcbok4vzd.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcbok4vzd.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjs6h43oz.php:16\nStack trace:\n#0 /tmp/tmpjs6h43oz.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjs6h43oz.php(28): candidate('This is a test')\n#2 /tmp/tmpjs6h43oz.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjs6h43oz.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpez837gak.php:16\nStack trace:\n#0 /tmp/tmpez837gak.php(23): words_in_sentence(Array)\n\
    #1 /tmp/tmpez837gak.php(27): candidate('This is a test')\n#2 /tmp/tmpez837gak.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpez837gak.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpez837gak.php:16\nStack trace:\n#0 /tmp/tmpez837gak.php(23): words_in_sentence(Array)\n\
    #1 /tmp/tmpez837gak.php(27): candidate('This is a test')\n#2 /tmp/tmpez837gak.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpez837gak.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $primes[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $primes);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzbnaools.php:17\nStack trace:\n#0 /tmp/tmpzbnaools.php(25): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzbnaools.php(29): candidate('This is a test')\n#2 /tmp/tmpzbnaools.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbnaools.php on line 17\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = array();\n    foreach\
    \ ($words as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $primes[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $primes);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0wyqy2jf.php:17\nStack trace:\n#0 /tmp/tmp0wyqy2jf.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0wyqy2jf.php(28): candidate('This is a test')\n#2 /tmp/tmp0wyqy2jf.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0wyqy2jf.php on line 17\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $length = strlen($word);\n\
    \        if (in_array($length, $primes)) {\n            $result[] = $word;\n \
    \       }\n    }\n    return implode(' ', $result);\n}\n\necho words_in_sentence('hello\
    \ world');\necho '<br>';\necho words_in_sentence('hello world this is a test');\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: hello world<br>hello world is
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjs6h43oz.php:16\nStack trace:\n#0 /tmp/tmpjs6h43oz.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjs6h43oz.php(28): candidate('This is a test')\n#2 /tmp/tmpjs6h43oz.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjs6h43oz.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $primes[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $primes);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzbnaools.php:17\nStack trace:\n#0 /tmp/tmpzbnaools.php(25): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzbnaools.php(29): candidate('This is a test')\n#2 /tmp/tmpzbnaools.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbnaools.php on line 17\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpjmga8mug.php:16\nStack trace:\n#0 /tmp/tmpjmga8mug.php(24): words_in_sentence(Array)\n\
    #1 /tmp/tmpjmga8mug.php(28): candidate('This is a test')\n#2 /tmp/tmpjmga8mug.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjmga8mug.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(' ', $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpez837gak.php:16\nStack trace:\n#0 /tmp/tmpez837gak.php(23): words_in_sentence(Array)\n\
    #1 /tmp/tmpez837gak.php(27): candidate('This is a test')\n#2 /tmp/tmpez837gak.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpez837gak.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $length = strlen($word);\n\
    \        if (in_array($length, $primes)) {\n            $result[] = $word;\n \
    \       }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 0
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $length = strlen($word);\n\
    \        if (in_array($length, $primes)) {\n            $result[] = $word;\n \
    \       }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpagnxqfsp.php:16\nStack trace:\n#0 /tmp/tmpagnxqfsp.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpagnxqfsp.php(27): candidate('This is a test')\n#2 /tmp/tmpagnxqfsp.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpagnxqfsp.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if (is_prime($length))\
    \ {\n            $primes[] = $word;\n        }\n    }\n    return implode(' ',\
    \ $primes);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzbnaools.php:17\nStack trace:\n#0 /tmp/tmpzbnaools.php(25): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzbnaools.php(29): candidate('This is a test')\n#2 /tmp/tmpzbnaools.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzbnaools.php on line 17\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqjh_jh80.php:16\nStack trace:\n#0 /tmp/tmpqjh_jh80.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqjh_jh80.php(28): candidate('This is a test')\n#2 /tmp/tmpqjh_jh80.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqjh_jh80.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz05owgpe.php:16\nStack trace:\n#0 /tmp/tmpz05owgpe.php(23): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz05owgpe.php(27): candidate('This is a test')\n#2 /tmp/tmpz05owgpe.php(36):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz05owgpe.php on line 16\n"
  timestamp: 1659978282
- exit_code: 255
  program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Example 2:\n// Constraints:\n// * 1 <=\
    \ len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp0z8d9nkt.php:16\nStack trace:\n#0 /tmp/tmp0z8d9nkt.php(24): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp0z8d9nkt.php(28): candidate('This is a test')\n#2 /tmp/tmp0z8d9nkt.php(37):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0z8d9nkt.php on line 16\n"
  timestamp: 1659978282
