name: HumanEval_155_even_odd_count
language: php
prompt: "<?php\n// Given an integer. return a tuple that has the number of even and\
  \ odd digits respectively.\n// Example:\nfunction even_odd_count($num) {\n"
tests: "function candidate(...$args) {\n    return even_odd_count(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(7) !== array(0, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-78) !== array(1, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3452) !== array(2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(346211) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-345821) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-2) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-45347) !== array(2, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(0) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $n) {\n        if ($n % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
  "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    $str = strval($num);\n\
    \    for ($i = 0; $i < strlen($str); $i++) {\n        if ($str[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = (string)$num;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(123456789));\n\
    echo \"</pre>\";", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n  \
    \      $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    $num = str_split($num);\n    foreach ($num as $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd =\
    \ 0;\n    $num = (string)$num;\n    for ($i = 0; $i < strlen($num); $i++) {\n\
    \        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n  \
    \          $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n",
  "  $even = 0;\n  $odd = 0;\n  while ($num > 0) {\n    $digit = $num % 10;\n    if\
    \ ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n  \
    \  $num = floor($num / 10);\n  }\n  return [$even, $odd];\n}\n", "    $even =\
    \ 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n",
  "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach ($num as $n) {\n\
    \    if ($n % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n\
    \  }\n  return array($even, $odd);\n}\n\necho even_odd_count(1234);\n", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n\nprint_r(even_odd_count(12345));\n\
    print_r(even_odd_count(2468));\nprint_r(even_odd_count(1357));\nprint_r(even_odd_count(0));",
  "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n", "  $even = 0;\n  $odd = 0;\n  $num = (string)$num;\n\
    \  for ($i = 0; $i < strlen($num); $i++) {\n    if ($num[$i] % 2 == 0) {\n   \
    \   $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return [$even, $odd];\n\
    }\n\nprint_r(even_odd_count(12345));\nprint_r(even_odd_count(2468));\nprint_r(even_odd_count(1357));\n\
    print_r(even_odd_count(0));", "    $even = 0;\n    $odd = 0;\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $n) {\n        if ($n % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", " \
    \ $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach ($num as $value)\
    \ {\n    if ($value % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  return [$even, $odd];\n}\n\necho even_odd_count(123456789);\necho\
    \ \"\\n\";\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n      \
    \  $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $num = (string)$num;\n    for ($i = 0; $i <\
    \ strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach ($num as\
    \ $n) {\n    if ($n % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  return [$even, $odd];\n}\n\nprint_r(even_odd_count(1234));\nprint_r(even_odd_count(1235));\n\
    print_r(even_odd_count(1236));\nprint_r(even_odd_count(1237));\nprint_r(even_odd_count(1238));\n\
    print_r(even_odd_count(1239));\nprint_r(even_odd_count(1240));\nprint_r(even_odd_count(1241));\n\
    print_r(even_odd_count(1242));\nprint_r(even_odd_count(1243));\nprint_r(even_odd_count(1244));\n\
    print_r(even_odd_count(1245));\nprint_r(even_odd_count(1246));\nprint_r(even_odd_count(1247));\n\
    print_r(even_odd_count(1248));\nprint_r(even_odd_count(1249));\nprint_r(even_odd_count(1250));\n\
    print_r(even_odd_count(1251));\nprint_r(even_odd_count(1252));\nprint_r(even_odd_count(1253));\n\
    print_r(even_odd_count(1254));\nprint_r(even_odd_count(1255));\nprint_r(even_odd_count(1256));\n\
    print_r(even_odd_count(1257));\nprint_r(even_odd_count(1258));\nprint_r(even_odd_count(1259));\n\
    print_r(even_odd_count(1260));\nprint_r(even_odd_count(1261));\nprint_r(even_odd_count(1262));\n\
    print_r(even_odd_count(1263));\nprint_r(even_odd_count(", "  $even = 0;\n  $odd\
    \ = 0;\n  $num = str_split($num);\n  foreach ($num as $n) {\n    if ($n % 2 ==\
    \ 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return array($even,\
    \ $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n     \
    \   $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n\n$num = 12345;\n$result = even_odd_count($num);\n\
    print_r($result);\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", " \
    \ $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach ($num as $value)\
    \ {\n    if ($value % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  return [$even, $odd];\n}\n\necho \"even_odd_count(12345) = \" .\
    \ even_odd_count(12345) . \"\\n\";\necho \"even_odd_count(2468) = \" . even_odd_count(2468)\
    \ . \"\\n\";\necho \"even_odd_count(1357) = \" . even_odd_count(1357) . \"\\n\"\
    ;\necho \"even_odd_count(0) = \" . even_odd_count(0) . \"\\n\";\n", "    $even_count\
    \ = 0;\n    $odd_count = 0;\n    while ($num > 0) {\n        $remainder = $num\
    \ % 10;\n        if ($remainder % 2 == 0) {\n            $even_count++;\n    \
    \    } else {\n            $odd_count++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even_count, $odd_count);\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n \
    \       if ($digit % 2 == 0) {\n            $even++;\n        } else {\n     \
    \       $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}\n\nprint_r(even_odd_count(1234));\nprint_r(even_odd_count(1235));\n\
    print_r(even_odd_count(1236));\nprint_r(even_odd_count(1237));\nprint_r(even_odd_count(1238));\n\
    print_r(even_odd_count(1239));\nprint_r(even_odd_count(1240));\nprint_r(even_odd_count(1241));\n\
    print_r(even_odd_count(1242));\nprint_r(even_odd_count(1243));\nprint_r(even_odd_count(1244));\n\
    print_r(even_odd_count(1245));\nprint_r(even_odd_count(1246));\nprint_r(even_odd_count(1247));\n\
    print_r(even_odd_count(1248));\nprint_r(even_odd_count(1249));\nprint_r(even_odd_count(1250));\n\
    print_r(even_odd_count(1251));\nprint_r(even_odd_count(1252));\nprint_r(even_odd_count(1253));\n\
    print_r(even_odd_count(1254));\nprint_r(even_odd_count(1255));\nprint_r(even_odd_count(1256));\n\
    print_r(even_odd_count(1257));\nprint_r(even_odd_count(1258));\nprint_r(even_odd_count(1259));\n\
    print_r(even_odd_count(1260));\nprint_r(even_odd_count(1261));\nprint_r(even_odd_count(1262));\n\
    print_r(even_odd_count(1263));\nprint_", "  $even = 0;\n  $odd = 0;\n  $num =\
    \ str_split($num);\n  foreach ($num as $value) {\n    if ($value % 2 == 0) {\n\
    \      $even++;\n    } else {\n      $odd++;\n    }\n  }\n  return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit =\
    \ $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n        $num = (int)($num / 10);\n \
    \   }\n    return array($even, $odd);\n}\n\n$num = 1234;\n$result = even_odd_count($num);\n\
    echo \"Even: $result[0]\\n\";\necho \"Odd: $result[1]\\n\";", "    $even = 0;\n\
    \    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n\
    \        if ($value % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n \
    \       if ($digit % 2 == 0) {\n            $even++;\n        } else {\n     \
    \       $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n\necho \"even_odd_count(123456789): \";\nvar_dump(even_odd_count(123456789));\n\
    echo \"even_odd_count(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345",
  "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach ($num as $digit)\
    \ {\n    if ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  return array($even, $odd);\n}\n\nprint_r(even_odd_count(12345));\n\
    print_r(even_odd_count(2468));\nprint_r(even_odd_count(1357));\nprint_r(even_odd_count(0));\n",
  "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach ($num as $value)\
    \ {\n    if ($value % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  return array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num\
    \ as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $n) {\n        if ($n % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $remainder\
    \ = $num % 10;\n        if ($remainder % 2 == 0) {\n            $even++;\n   \
    \     } else {\n            $odd++;\n        }\n        $num = ($num - $remainder)\
    \ / 10;\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    $num = abs($num);\n    while ($num > 0) {\n        $rem = $num % 10;\n  \
    \      if ($rem % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return [$even,\
    \ $odd];\n}\n\n$num = 12345;\n$result = even_odd_count($num);\necho \"Even: $result[0],\
    \ Odd: $result[1]\";\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit =\
    \ $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n        $num = (int)($num / 10);\n \
    \   }\n    return [$even, $odd];\n}\n\n$num = 12345;\n$result = even_odd_count($num);\n\
    print_r($result);", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n \
    \       $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n\necho\
    \ \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(2468) = \" . implode(', ', even_odd_count(2468))\
    \ . \"\\n\";\necho \"even_odd_count(1357) = \" . implode(', ', even_odd_count(1357))\
    \ . \"\\n\";\necho \"even_odd_count(0) = \" . implode(', ', even_odd_count(0))\
    \ . \"\\n\";", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n      \
    \  $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $digit) {\n        if ($digit % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = (string)$num;\n    for ($i =\
    \ 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n          \
    \  $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num\
    \ as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n\
    }\n\nprint_r(even_odd_count(123456789));\n", "    $even = 0;\n    $odd = 0;\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $digits = str_split($num);\n    foreach ($digits\
    \ as $digit) {\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $n) {\n        if ($n % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num\
    \ as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n\necho implode(',\
    \ ', even_odd_count(12345)) . \"\\n\";\necho implode(', ', even_odd_count(1234))\
    \ . \"\\n\";\necho implode(', ', even_odd_count(123456)) . \"\\n\";\necho implode(',\
    \ ', even_odd_count(1234567)) . \"\\n\";\necho implode(', ', even_odd_count(12345678))\
    \ . \"\\n\";\necho implode(', ', even_odd_count(123456789)) . \"\\n\";\necho implode(',\
    \ ', even_odd_count(1234567890)) . \"\\n\";\necho implode(', ', even_odd_count(12345678901))\
    \ . \"\\n\";\necho implode(', ', even_odd_count(123456789012)) . \"\\n\";\necho\
    \ implode(', ', even_odd_count(1234567890123)) . \"\\n\";\necho implode(', ',\
    \ even_odd_count(12345678901234)) . \"\\n\";\necho implode(', ', even_odd_count(123456789012345))\
    \ . \"\\n\";\necho implode(', ', even_odd_count(1234567890123456)) . \"\\n\";\n\
    echo implode(', ', even_odd_count(12345678901234567)) . \"\\n\";\necho implode(',\
    \ ', even_odd_count(123456789012345678)) . \"\\n\";\necho implode(', ', even_odd_count(1234567890123456789))\
    \ . \"\\n\";\necho implode(', ', even_odd_count(12345678901234567890)) . \"\\\
    n\";\necho implode(', ', even_odd_count(12345678901", "    $even = 0;\n    $odd\
    \ = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n\necho \"even_odd_count(123456789) = \" . json_encode(even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(1234567890123456789) = \" . json_encode(even_odd_count(1234567890123456789))\
    \ . \"\\n\";\necho \"even_odd_count(12345678901234567890123456789) = \" . json_encode(even_odd_count(12345678901234567890123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789012345678901234567890123456789) =\
    \ \" . json_encode(even_odd_count(123456789012345678901234567890123456789)) .\
    \ \"\\n\";\necho \"even_odd_count(1234567890123456789012345678901234567890123456789)\
    \ = \" . json_encode(even_odd_count(1234567890123456789012345678901234567890123456789))\
    \ . \"\\n\";\necho \"even_odd_count(12345678901234567890123456789012345678901234567890123456789)\
    \ = \" . json_encode(even_odd_count(12345678901234567890123456789012345678901234567890123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789012345678901234567890123456789012345678901234567890123456789)\
    \ = \" . json_encode", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num\
    \ as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $n) {\n        if ($n % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = (int)($num / 10);\n    }\n    return array($even, $odd);\n}\n",
  "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach ($num as $num)\
    \ {\n    if ($num % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n \
    \   }\n  }\n  return [$even, $odd];\n}\n\nprint_r(even_odd_count(123456789));\n",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n\necho \"even_odd_count(12345) = \" . implode(', ', even_odd_count(12345))\
    \ . \"\\n\";\necho \"even_odd_count(2468) = \" . implode(', ', even_odd_count(2468))\
    \ . \"\\n\";\necho \"even_odd_count(1357) = \" . implode(', ', even_odd_count(1357))\
    \ . \"\\n\";\necho \"even_odd_count(0) = \" . implode(', ', even_odd_count(0))\
    \ . \"\\n\";\necho \"even_odd_count(1) = \" . implode(', ', even_odd_count(1))\
    \ . \"\\n\";\necho \"even_odd_count(2) = \" . implode(', ', even_odd_count(2))\
    \ . \"\\n\";\necho \"even_odd_count(3) = \" . implode(', ', even_odd_count(3))\
    \ . \"\\n\";\necho \"even_odd_count(4) = \" . implode(', ', even_odd_count(4))\
    \ . \"\\n\";\necho \"even_odd_count(5) = \" . implode(', ', even_odd_count(5))\
    \ . \"\\n\";\necho \"even_odd_count(6) = \" . implode(', ', even_odd_count(6))\
    \ . \"\\n\";\necho \"even_odd_count(7) = \" . implode(', ', even_odd_count(7))\
    \ . \"\\n\";\necho \"even_odd_count(8) = \" . implode(', ', even_odd_count(8))\
    \ . \"\\n\";\necho \"even_odd_count(9) = \" . implode(', ', even_odd_count(9))\
    \ . \"\\n\";\necho \"even_odd_count(10) = \" .", "    $even = 0;\n    $odd = 0;\n\
    \    $arr = str_split($num);\n    foreach ($arr as $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd =\
    \ 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "    $even_count = 0;\n    $odd_count = 0;\n    $num_str = strval($num);\n\
    \    for ($i = 0; $i < strlen($num_str); $i++) {\n        if ($num_str[$i] % 2\
    \ == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    $digits = str_split($num);\n    foreach ($digits as $digit)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "  $even\
    \ = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach ($num as $digit) {\n\
    \    if ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n   \
    \ }\n  }\n  return [$even, $odd];\n}\n", "  $even = 0;\n  $odd = 0;\n  $num =\
    \ abs($num);\n  while ($num > 0) {\n    $digit = $num % 10;\n    if ($digit %\
    \ 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n    $num = ($num\
    \ - $digit) / 10;\n  }\n  return [$even, $odd];\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = (string) $num;\n    for ($i = 0; $i < strlen($num); $i++) {\n\
    \        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n  \
    \          $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n\necho \"\
    even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789)) . \"\
    \\n\";\necho \"even_odd_count(1234) = \" . implode(', ', even_odd_count(1234))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) =", "    $even = 0;\n    $odd =\
    \ 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $arr = str_split($num);\n    foreach ($arr as $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n   \
    \ $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even++;\n        } else {\n       \
    \     $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "    $even =\
    \ 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "   \
    \ $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n\n$num = 12345;\n$result = even_odd_count($num);\necho\
    \ \"Even: \" . $result[0] . \" Odd: \" . $result[1];", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return [$even, $odd];\n}\n\necho \"even_odd_count(123456789) = \" . json_encode(even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(0) = \" . json_encode(even_odd_count(0)) .\
    \ \"\\n\";\necho \"even_odd_count(-123456789) = \" . json_encode(even_odd_count(-123456789))\
    \ . \"\\n\";\n", "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach\
    \ ($num as $value) {\n    if ($value % 2 == 0) {\n      $even++;\n    } else {\n\
    \      $odd++;\n    }\n  }\n  return [$even, $odd];\n}\n", "    $even = 0;\n \
    \   $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $n) {\n     \
    \   if ($n % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n   \
    \ $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num\
    \ % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n\
    \    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return array($even,\
    \ $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n     \
    \   $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = (int)($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    $num = abs($num);\n    while ($num > 0) {\n        $rem = $num % 10;\n  \
    \      if ($rem % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n        $num = $num / 10;\n    }\n    return array($even,\
    \ $odd);\n}\n\n$num = 1234;\n$result = even_odd_count($num);\necho \"Even: \"\
    \ . $result[0] . \" Odd: \" . $result[1];", "    $even = 0;\n    $odd = 0;\n \
    \   $num = str_split($num);\n    foreach ($num as $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd =\
    \ 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n\necho \"even_odd_count(123456789) = \" . implode(\", \", even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(1234567890) = \" . implode(\", \", even_odd_count(1234567890))\
    \ . \"\\n\";\necho \"even_odd_count(12345678901) = \" . implode(\", \", even_odd_count(12345678901))\
    \ . \"\\n\";\necho \"even_odd_count(123456789012) = \" . implode(\", \", even_odd_count(123456789012))\
    \ . \"\\n\";\necho \"even_odd_count(1234567890123) = \" . implode(\", \", even_odd_count(1234567890123))\
    \ . \"\\n\";\necho \"even_odd_count(12345678901234) = \" . implode(\", \", even_odd_count(12345678901234))\
    \ . \"\\n\";\necho \"even_odd_count(123456789012345) = \" . implode(\", \", even_odd_count(123456789012345))\
    \ . \"\\n\";\necho \"even_odd_count(1234567890123456) = \" . implode(\", \", even_odd_count(1234567890123456))\
    \ . \"\\n\";\necho \"even_odd_count(12345678901234567) = \" . implode(\", \",\
    \ even_odd_count(12345678901234567)) . \"\\n\";\necho \"even_odd_count(123456789012345678)\
    \ = \" . implode(\", \", even_odd_count(123456789012345678)) . \"\\n\";\necho\
    \ \"even_odd_count(123456789", "    $even = 0;\n    $odd = 0;\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n\
    \        if ($value % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n", "  \
    \  $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return [$even, $odd];\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(12345));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(1234));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(even_odd_count(12));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(even_odd_count(0));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(1));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(2));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(even_odd_count(3));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(even_odd_count(4));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(5));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(6));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(even_odd_count(7));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(even_odd_count(8));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(9));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(10));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(even_odd_count(11));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(even_odd_count", "    $even = 0;\n    $odd = 0;\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n\
    \        if ($value % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n \
    \       if ($digit % 2 == 0) {\n            $even++;\n        } else {\n     \
    \       $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}\n\n$num = 12345;\n$result = even_odd_count($num);\nprint_r($result);",
  "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num\
    \ % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n\
    \    return [$even, $odd];\n}\n\n$num = 123456789;\n$result = even_odd_count($num);\n\
    print_r($result);\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit =\
    \ $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n        $num = (int)($num / 10);\n \
    \   }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $n) {\n\
    \        if ($n % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n\nprint_r(even_odd_count(123456789));",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num\
    \ as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $n) {\n        if ($n % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $n) {\n        if ($n % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "   \
    \ $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n\nprint_r(even_odd_count(1234));",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n", "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n\
    \  foreach ($num as $digit) {\n    if ($digit % 2 === 0) {\n      $even += 1;\n\
    \    } else {\n      $odd += 1;\n    }\n  }\n  return array($even, $odd);\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num_str = strval($num);\n    for ($i = 0; $i\
    \ < strlen($num_str); $i++) {\n        if ($num_str[$i] % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "  $even = 0;\n\
    \  $odd = 0;\n  $num = (string)$num;\n  $num_arr = str_split($num);\n  foreach\
    \ ($num_arr as $digit) {\n    if ($digit % 2 === 0) {\n      $even++;\n    } else\
    \ {\n      $odd++;\n    }\n  }\n  return [$even, $odd];\n}\n\necho '<pre>';\n\
    print_r(even_odd_count(123456789));\necho '</pre>';\n", "    $even_count = 0;\n\
    \    $odd_count = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n  \
    \      if ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n\
    \            $odd_count++;\n        }\n        $num = floor($num / 10);\n    }\n\
    \    return [$even_count, $odd_count];\n}\n\necho \"even_odd_count(12345) = \"\
    \ . implode(', ', even_odd_count(12345)) . \"\\n\";\necho \"even_odd_count(123456789)\
    \ = \" . implode(', ', even_odd_count(123456789)) . \"\\n\";\necho \"even_odd_count(0)\
    \ = \" . implode(', ', even_odd_count(0)) . \"\\n\";\necho \"even_odd_count(1)\
    \ = \" . implode(', ', even_odd_count(1)) . \"\\n\";\necho \"even_odd_count(2)\
    \ = \" . implode(', ', even_odd_count(2)) . \"\\n\";\necho \"even_odd_count(3)\
    \ = \" . implode(', ', even_odd_count(3)) . \"\\n\";\necho \"even_odd_count(4)\
    \ = \" . implode(', ', even_odd_count(4)) . \"\\n\";\necho \"even_odd_count(5)\
    \ = \" . implode(', ', even_odd_count(5)) . \"\\n\";\necho \"even_odd_count(6)\
    \ = \" . implode(', ', even_odd_count(6)) . \"\\n\";\necho \"even_odd_count(7)\
    \ = \" . implode(', ', even_odd_count(7)) . \"\\n\";\necho \"even_odd_count(8)\
    \ = \" . implode(', ', even_odd_count(8)) . \"\\n\";\necho \"even_odd_count(9)\
    \ = \" . implode(', ', even_odd_count(9)) . \"\\n\";\necho \"even_odd_count(10)\
    \ = \" . implode(', ', even_odd_count(10)) . \"\\n\";", "  $even = 0;\n  $odd\
    \ = 0;\n  $num = abs($num);\n  while ($num > 0) {\n    $digit = $num % 10;\n \
    \   if ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n\
    \    $num = floor($num / 10);\n  }\n  return [$even, $odd];\n}\n\n$num = 12345;\n\
    echo \"The number $num has \" . even_odd_count($num)[0] . \" even and \" . even_odd_count($num)[1]\
    \ . \" odd digits.\";", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    $num = str_split($num);\n    foreach ($num as $digit) {\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd =\
    \ 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return array($even,\
    \ $odd);\n}\n\necho even_odd_count(123456789);\n", "    $even = 0;\n    $odd =\
    \ 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n   \
    \ $odd = 0;\n    while ($num > 0) {\n        $rem = $num % 10;\n        if ($rem\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n\n$num = 1234;\n$result = even_odd_count($num);\necho \"Even: $result[0] Odd:\
    \ $result[1]\";", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $digit) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return array($even,\
    \ $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $n) {\n        if ($n % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $n) {\n        if ($n % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
  "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return [$even, $odd];\n}\n\necho \"even_odd_count(123456789) = \" . json_encode(even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(2468) = \" . json_encode(even_odd_count(2468))\
    \ . \"\\n\";\necho \"even_odd_count(1357) = \" . json_encode(even_odd_count(1357))\
    \ . \"\\n\";\necho \"even_odd_count(0) = \" . json_encode(even_odd_count(0)) .\
    \ \"\\n\";\necho \"even_odd_count(1) = \" . json_encode(even_odd_count(1)) . \"\
    \\n\";\necho \"even_odd_count(2) = \" . json_encode(even_odd_count(2)) . \"\\\
    n\";\necho \"even_odd_count(3) = \" . json_encode(even_odd_count(3)) . \"\\n\"\
    ;\necho \"even_odd_count(4) = \" . json_encode(even_odd_count(4)) . \"\\n\";\n\
    echo \"even_odd_count(5) = \" . json_encode(even_odd_count(5)) . \"\\n\";\necho\
    \ \"even_odd_count(6) = \" . json_encode(even_odd_count(6)) . \"\\n\";\necho \"\
    even_odd_count(7) = \" . json_encode(even_odd_count(7)) . \"\\n\";\necho \"even_odd_count(8)\
    \ = \" . json_encode(even_odd_count(8)) . \"\\n\";\necho \"even_odd_count(9) =\
    \ \" . json_encode(even_odd_count(9)) . \"\\n\";\necho \"even_odd_count(10", " \
    \   $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    for ($i = 0; $i\
    \ < count($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit =\
    \ $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n        $num = floor($num / 10);\n \
    \   }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    $num\
    \ = str_split($num);\n    foreach ($num as $value) {\n        if ($value % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", " \
    \   $even = 0;\n    $odd = 0;\n    $num = (string)$num;\n    for ($i = 0; $i <\
    \ strlen($num); $i++) {\n        if ($num[$i] % 2 === 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = floor($num / 10);\n\
    \    }\n    return [$even, $odd];\n}\n\n$num = 12345;\n$result = even_odd_count($num);\n\
    print_r($result);\n", "    $even = 0;\n    $odd = 0;\n    $num = (string)$num;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = (string)$num;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}\n\necho implode(', ', even_odd_count(123456789))\
    \ . PHP_EOL;\necho implode(', ', even_odd_count
  "  $even = 0;\n  $odd = 0;\n  while ($num > 0) {\n    $digit = $num % 10;\n    if\
    \ ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n  \
    \  $num = floor($num / 10);\n  }\n  return array($even, $odd);\n}\n\n$num = 123456789;\n\
    $result = even_odd_count($num);\nprint_r($result);\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = str_split($num);\n    foreach ($num as $digit) {\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return array($even,\
    \ $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n\
    \    foreach ($num as $n) {\n        if ($n % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n\necho \"even_odd_count(12345)\
    \ = \" . json_encode(even_odd_count(12345)) . \"\\n\";\necho \"even_odd_count(123456789)\
    \ = \" . json_encode(even_odd_count(123456789)) . \"\\n\";\necho \"even_odd_count(0)\
    \ = \" . json_encode(even_odd_count(0)) . \"\\n\";\necho \"even_odd_count(-12345)\
    \ = \" . json_encode(even_odd_count(-12345)) . \"\\n\";\necho \"even_odd_count(-123456789)\
    \ = \" . json_encode(even_odd_count(-123456789)) . \"\\n\";\necho \"even_odd_count(-0)\
    \ = \" . json_encode(even_odd_count(-0)) . \"\\n\";", "  $even = 0;\n  $odd =\
    \ 0;\n  $num = str_split($num);\n  foreach ($num as $key => $value) {\n    if\
    \ ($value % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n  }\n\
    \  return [$even, $odd];\n}\n\nprint_r(even_odd_count(123456789));", "    $even\
    \ = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n \
    \       if ($digit % 2 == 0) {\n            $even++;\n        } else {\n     \
    \       $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}\n\n$num = 12345;\n$result = even_odd_count($num);\necho \"\
    Even: $result[0]\\n\";\necho \"Odd: $result[1]\\n\";", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = (string)$num;\n    for ($i = 0; $i < strlen($num); $i++) {\n\
    \        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n  \
    \          $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n \
    \       if ($digit % 2 == 0) {\n            $even++;\n        } else {\n     \
    \       $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}\n\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(0) = \" . implode(', ', even_odd_count(0))\
    \ . \"\\n\";\necho \"even_odd_count(1) = \" . implode(', ', even_odd_count(1))\
    \ . \"\\n\";\necho \"even_odd_count(2) = \" . implode(', ', even_odd_count(2))\
    \ . \"\\n\";\necho \"even_odd_count
  "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n   \
    \ return [$even, $odd];\n}\n", "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n\
    \  foreach ($num as $value) {\n    if ($value % 2 == 0) {\n      $even++;\n  \
    \  } else {\n      $odd++;\n    }\n  }\n  return [$even, $odd];\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", " \
    \ $even = 0;\n  $odd = 0;\n  $num = (string)$num;\n  for ($i = 0; $i < strlen($num);\
    \ $i++) {\n    if ($num[$i] % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n  }\n  return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n \
    \   $num = str_split($num);\n    foreach ($num as $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}\nprint_r(even_odd_count(123456789));\n",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "\t\
    $even = 0;\n\t$odd = 0;\n\t$num = str_split($num);\n\tforeach ($num as $value)\
    \ {\n\t\tif ($value % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t}\n\treturn [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n  \
    \  $num = str_split($num);\n    foreach ($num as $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even += 1;\n        } else {\n            $odd +=\
    \ 1;\n        }\n    }\n    return [$even, $odd];\n}\n\nprint_r(even_odd_count(12345));\n\
    print_r(even_odd_count(2468));\nprint_r(even_odd_count(1357));\nprint_r(even_odd_count(0));\n",
  "    $even = 0;\n    $odd = 0;\n    $str = strval($num);\n    for ($i = 0; $i <\
    \ strlen($str); $i++) {\n        if ($str[$i] % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return array($even,\
    \ $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = (string)$num;\n   \
    \ for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n\n$num = 12345;\n\
    $result = even_odd_count($num);\nprint_r($result);\n", "    $even = 0;\n    $odd\
    \ = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n\nprint_r(even_odd_count(1234));\n\
    print_r(even_odd_count(0));\nprint_r(even_odd_count(-1234));\nprint_r(even_odd_count(123456789));\n\
    print_r(even_odd_count(1234567890123456789));\nprint_r(even_odd_count(12345678901234567890123456789));\n\
    print_r(even_odd_count(123456789012345678901234567890123456789));\nprint_r(even_odd_count(1234567890123456789012345678901234567890123456789));\n\
    print_r(even_odd_count(12345678901234567890123456789012345678901234567890123456789));\n\
    print_r(even_odd_count(123456789012345678901234567890123456789012345678901234567890123456789));\n\
    print_r(even_odd_count(1234567890123456789012345678901234567890123456789012345678901234567890123456789));\n\
    print_r(even_odd_count(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789));\n\
    print_r(even_odd_count(12345678901234567890123456789012345678901234567890123456789012345678901234567",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as\
    \ $digit) {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return array($even, $odd);\n}\n",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return [$even, $odd];\n}\n\necho even_odd_count(1234);\necho\
    \ \"\\n\";\necho even_odd_count(-1234);\necho \"\\n\";\necho even_odd_count(0);\n\
    echo \"\\n\";\necho even_odd_count(1);\necho \"\\n\";\necho even_odd_count(2);\n\
    echo \"\\n\";\necho even_odd_count(3);\necho \"\\n\";\necho even_odd_count(4);\n\
    echo \"\\n\";\necho even_odd_count(5);\necho \"\\n\";\necho even_odd_count(6);\n\
    echo \"\\n\";\necho even_odd_count(7);\necho \"\\n\";\necho even_odd_count(8);\n\
    echo \"\\n\";\necho even_odd_count(9);\necho \"\\n\";\necho even_odd_count(10);\n\
    echo \"\\n\";\necho even_odd_count(11);\necho \"\\n\";\necho even_odd_count(12);\n\
    echo \"\\n\";\necho even_odd_count(13);\necho \"\\n\";\necho even_odd_count(14);\n\
    echo \"\\n\";\necho even_odd_count(15);\necho \"\\n\";\necho even_odd_count(16);\n\
    echo \"\\n\";\necho even_odd_count(17);\necho \"\\n\";\necho even_odd_count(18);\n\
    echo \"\\n\";\necho even_odd_count(19);\necho \"\\n\";\necho even_odd_count(20);\n\
    echo \"\\n\";\necho even_odd_count(21);\necho \"\\n\";\necho even_odd_count(22);\n\
    echo \"\\n\";\necho even_odd_count(23);\necho \"\\n\";\necho even_odd_count(24);\n\
    echo \"\\n\";\necho even_odd_count", "    $even = 0;\n    $odd = 0;\n    $num\
    \ = str_split($num);\n    for ($i = 0; $i < count($num); $i++) {\n        if ($num[$i]\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = str_split($num);\n    foreach ($num as $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return array($even, $odd);\n}\n", "    $even = 0;\n   \
    \ $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit =\
    \ $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n        $num = floor($num / 10);\n \
    \   }\n    return [$even, $odd];\n}\n\necho implode(', ', even_odd_count(12345))\
    \ . PHP_EOL;\necho implode(', ', even_odd_count(1234)) . PHP_EOL;\necho implode(',\
    \ ', even_odd_count(123456)) . PHP_EOL;\necho implode(', ', even_odd_count(1234567))\
    \ . PHP_EOL;\necho implode(', ', even_odd_count(12345678)) . PHP_EOL;\necho implode(',\
    \ ', even_odd_count(123456789)) . PHP_EOL;\necho implode(', ', even_odd_count(1234567890))\
    \ . PHP_EOL;\necho implode(', ', even_odd_count(12345678901)) . PHP_EOL;\necho\
    \ implode(', ', even_odd_count(123456789012)) . PHP_EOL;\necho implode(', ', even_odd_count(1234567890123))\
    \ . PHP_EOL;\necho implode(', ', even_odd_count(12345678901234)) . PHP_EOL;\n\
    echo implode(', ', even_odd_count(123456789012345)) . PHP_EOL;\necho implode(',\
    \ ', even_odd_count(1234567890123456)) . PHP_EOL;\necho implode(', ', even_odd_count(12345678901234567))\
    \ . PHP_EOL;\necho implode(', ', even_odd_count(123456789012345678)) . PHP_EOL;\n\
    echo implode(', ', even_odd_count(1234567890123456789)) . PHP_EOL;\necho implode(',\
    \ ', even_odd_count(12345678901234567890", "    $even = 0;\n    $odd = 0;\n  \
    \  $num = str_split($num);\n    foreach ($num as $n) {\n        if ($n % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = (int)($num / 10);\n    }\n    return [$even, $odd];\n}\n\n$num = 12345;\n\
    $result = even_odd_count($num);\nprint_r($result);\n", "    $even = 0;\n    $odd\
    \ = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = (int)($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $digits = str_split($num);\n    foreach\
    \ ($digits as $digit) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return array($even,\
    \ $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "    $even\
    \ = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n \
    \       if ($digit % 2 == 0) {\n            $even++;\n        } else {\n     \
    \       $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n\n$num = 12345;\n$result = even_odd_count($num);\necho\
    \ $result[0] . \" \" . $result[1];", "    $even = 0;\n    $odd = 0;\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = $num / 10;\n    }\n    return array($even, $odd);\n}\n\n$num = 12345;\n\
    $result = even_odd_count($num);\necho \"Even: {$result[0]}, Odd: {$result[1]}\"\
    ;\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach\
    \ ($num as $value) {\n        if ($value % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }\n", "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit =\
    \ $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n        $num = (int)($num / 10);\n \
    \   }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    $num\
    \ = str_split($num);\n    foreach ($num as $value) {\n        if ($value % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}\n\nprint_r(even_odd_count(1234));\nprint_r(even_odd_count(1235));\n\
    print_r(even_odd_count(1236));\nprint_r(even_odd_count(1237));\nprint_r(even_odd_count(1238));\n\
    print_r(even_odd_count(1239));\nprint_r(even_odd_count(1240));\nprint_r(even_odd_count(1241));\n\
    print_r(even_odd_count(1242));\nprint_r(even_odd_count(1243));\nprint_r(even_odd_count(1244));\n\
    print_r(even_odd_count(1245));\nprint_r(even_odd_count(1246));\nprint_r(even_odd_count(1247));\n\
    print_r(even_odd_count(1248));\nprint_r(even_odd_count(1249));\nprint_r(even_odd_count(1250));\n\
    print_r(even_odd_count(1251));\nprint_r(even_odd_count(1252));\nprint_r(even_odd_count(1253));\n\
    print_r(even_odd_count(1254));\nprint_r(even_odd_count(1255));\nprint_r(even_odd_count(1256));\n\
    print_r(even_odd_count(1257));\nprint_r(even_odd_count(1258));\nprint_r(even_odd_count(1259));\n\
    print_r(even_odd_count(1260));\nprint_r(even_odd_count(1261));\nprint_r(even_odd_count(1262));\n\
    print_r(even_odd_count(1263));\nprint_r(even_odd_count(", "    $even = 0;\n  \
    \  $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n", "  $even = 0;\n  $odd = 0;\n  $num = str_split($num);\n  foreach ($num as\
    \ $digit) {\n    if ($digit % 2 == 0) {\n      $even += 1;\n    } else {\n   \
    \   $odd += 1;\n    }\n  }\n  return [$even, $odd];\n}\n", "    $even = 0;\n \
    \   $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $n) {\n     \
    \   if ($n % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n    $odd\
    \ = 0;\n    while ($num > 0) {\n        $last_digit = $num % 10;\n        if ($last_digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n", "  $even = 0;\n  $odd = 0;\n  while ($num > 0) {\n    $digit = $num % 10;\n\
    \    if ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n   \
    \ }\n    $num = (int)($num / 10);\n  }\n  return [$even, $odd];\n}\n\necho \"\
    even_odd_count(12345) = \" . implode(', ', even_odd_count(12345)) . \"\\n\";\n\
    echo \"even_odd_count(1234) = \" . implode(', ', even_odd_count(1234)) . \"\\\
    n\";\necho \"even_odd_count(123456) = \" . implode(', ', even_odd_count(123456))\
    \ . \"\\n\";\necho \"even_odd_count(1234567) = \" . implode(', ', even_odd_count(1234567))\
    \ . \"\\n\";\necho \"even_odd_count(12345678) = \" . implode(', ', even_odd_count(12345678))\
    \ . \"\\n\";\necho \"even_odd_count(123456789) = \" . implode(', ', even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count(1234567890) = \" . implode(', ', even_odd_count(1234567890))\
    \ . \"\\n\";\necho \"even_odd_count(12345678901) = \" . implode(', ', even_odd_count(12345678901))\
    \ . \"\\n\";\necho \"even_odd_count(123456789012) = \" . implode(', ', even_odd_count(123456789012))\
    \ . \"\\n\";\necho \"even_odd_count(1234567890123) = \" . implode(', ', even_odd_count(1234567890123))\
    \ . \"\\n\";\necho \"even_odd_count(12345678901234) = \" . implode(', ', even_odd_count(12345678901234))\
    \ . \"\\n\";\necho \"even_odd_count(123456789012345) =", "    $even = 0;\n   \
    \ $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n\
    }\n\nprint_r(even_odd_count(12345));\nprint_r(even_odd_count(1234));\nprint_r(even_odd_count(123456));\n\
    print_r(even_odd_count(12));\nprint_r(even_odd_count(0));\nprint_r(even_odd_count(1));\n\
    print_r(even_odd_count(2));\nprint_r(even_odd_count(3));\nprint_r(even_odd_count(4));\n\
    print_r(even_odd_count(5));\nprint_r(even_odd_count(6));\nprint_r(even_odd_count(7));\n\
    print_r(even_odd_count(8));\nprint_r(even_odd_count(9));\nprint_r(even_odd_count(10));\n\
    print_r(even_odd_count(11));\nprint_r(even_odd_count(12));\nprint_r(even_odd_count(13));\n\
    print_r(even_odd_count(14));\nprint_r(even_odd_count(15));\nprint_r(even_odd_count(16));\n\
    print_r(even_odd_count(17));\nprint_r(even_odd_count(18));\nprint_r(even_odd_count(19));\n\
    print_r(even_odd_count(20));\nprint_r(even_odd_count(21));\nprint_r(even_odd_count(22));\n\
    print_r(even_odd_count(23));\nprint_r(even_odd_count(24));\nprint_r(even_odd_count(25));\n\
    print_r(even_odd_count(26));\nprint_r(even_odd_count(27));\nprint_r", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = str_split($num);\n    foreach ($num as $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n", "   \
    \ $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n", "    $even = 0;\n    $odd = 0;\n    while ($num >\
    \ 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n", "    $even = 0;\n\
    \    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\necho \"even_odd_count(123456789) = \" . implode(\", \", even_odd_count(123456789))\
    \ . \"\\n\";\necho \"even_odd_count
  "    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return [$even, $odd];\n}\n", "    $even = 0;\n    $odd = 0;\n    $num = (string)$num;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
