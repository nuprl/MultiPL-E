name: HumanEval_145_order_by_points
language: php
prompt: "<?php\n// Write a function which sorts the given list of integers\n// in\
  \ ascending order according to the sum of their digits.\n// Note: if there are several\
  \ items with similar sum of their digits,\n// order them based on their index in\
  \ original list.\n// For example:\nfunction order_by_points($nums) {\n"
tests: "function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1,\
  \ -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3,\
  \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !==\
  \ array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10,\
  \ 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($sums);\n    $result = [];\n\
    \    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n", "    $nums_array = [];\n    $sum_array = [];\n\
    \    foreach ($nums as $key => $value) {\n        $sum = 0;\n        $value_array\
    \ = str_split($value);\n        foreach ($value_array as $key2 => $value2) {\n\
    \            $sum += $value2;\n        }\n        $nums_array[$key] = $value;\n\
    \        $sum_array[$key] = $sum;\n    }\n    array_multisort($sum_array, SORT_ASC,\
    \ $nums_array);\n    return $nums_array;\n}\n", "    $sum = [];\n    foreach ($nums\
    \ as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n \
    \   }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", " \
    \   $sums = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key] =\
    \ array_sum(str_split($num));\n    }\n    asort($sums);\n    $result = [];\n \
    \   foreach ($sums as $key => $value) {\n        $result[] = $nums[$key];\n  \
    \  }\n    return $result;\n}\n", "    $points = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $points[$key] = array_sum(str_split($num));\n    }\n   \
    \ asort($points);\n    $result = [];\n    foreach ($points as $key => $point)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n", "  $arr = [];\n  foreach ($nums as $key =>\
    \ $value) {\n    $arr[$key] = array_sum(str_split($value));\n  }\n  asort($arr);\n\
    \  $result = [];\n  foreach ($arr as $key => $value) {\n    $result[] = $nums[$key];\n\
    \  }\n  return $result;\n}\n", "    $sums = [];\n    foreach ($nums as $key =>\
    \ $num) {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    $nums_sum = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $nums_sum[$key] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($nums_sum, SORT_ASC, $nums);\n    return $nums;\n\
    }\n", "    $result = [];\n    $sums = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $sum = 0;\n        $num = str_split($num);\n        foreach ($num\
    \ as $digit) {\n            $sum += $digit;\n        }\n        $sums[$key] =\
    \ $sum;\n    }\n    asort($sums);\n    foreach ($sums as $key => $sum) {\n   \
    \     $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "    $arr =\
    \ [];\n    foreach ($nums as $key => $value) {\n        $sum = 0;\n        $value\
    \ = str_split($value);\n        foreach ($value as $val) {\n            $sum +=\
    \ $val;\n        }\n        $arr[$key] = $sum;\n    }\n    asort($arr);\n    $result\
    \ = [];\n    foreach ($arr as $key => $value) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num = (int)($num / 10);\n        }\n        $result[$key]\
    \ = $sum;\n    }\n    asort($result);\n    $result2 = [];\n    foreach ($result\
    \ as $key => $value) {\n        $result2[] = $nums[$key];\n    }\n    return $result2;\n\
    }\n", "    $nums_with_points = [];\n    foreach ($nums as $key => $num) {\n  \
    \      $points = 0;\n        $num_string = (string)$num;\n        for ($i = 0;\
    \ $i < strlen($num_string); $i++) {\n            $points += (int)$num_string[$i];\n\
    \        }\n        $nums_with_points[$key] = [\n            'num' => $num,\n\
    \            'points' => $points\n        ];\n    }\n    usort($nums_with_points,\
    \ function ($a, $b) {\n        if ($a['points'] == $b['points']) {\n         \
    \   return $a['num'] - $b['num'];\n        }\n        return $a['points'] - $b['points'];\n\
    \    });\n    $result = [];\n    foreach ($nums_with_points as $num_with_points)\
    \ {\n        $result[] = $num_with_points['num'];\n    }\n    return $result;\n\
    }\n\n$nums = [51, 32, 43];\necho implode(', ', order_by_points($nums)); // 32,\
    \ 43, 51\necho '<br>';\n\n$nums = [51, 32, 43, 4, 6, 8, 11, 13, 15];\necho implode(',\
    \ ', order_by_points($nums)); // 4, 6, 8, 11, 13, 15, 32, 43, 51\necho '<br>';\n\
    \n$nums = [42, 2, 62, 3222, 5, 9, 11, 13, 15];\necho implode(', ', order_by_points($nums));\
    \ // 2, 5, 9, 11, 13, 15, 42, 62, 3222\necho '<br>';\n\n$nums = [42, 2, 62, 3222,\
    \ 5, 9, 11, 13, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "    $nums_sum = [];\n    foreach ($nums as\
    \ $key => $value) {\n        $nums_sum[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($nums_sum);\n    $result = [];\n    foreach ($nums_sum as $key\
    \ => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($nums as $key => $num) {\n        $result[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($result);\n    $result = array_keys($result);\n\
    \    $result = array_map(function($num) use ($nums) {\n        return $nums[$num];\n\
    \    }, $result);\n    return $result;\n}\n\nprint_r(order_by_points([5, 3, 1,\
    \ 4, 2]));", "    $sum_nums = [];\n    foreach ($nums as $key => $num) {\n   \
    \     $sum_nums[$key] = array_sum(str_split($num));\n    }\n    asort($sum_nums);\n\
    \    $ordered_nums = [];\n    foreach ($sum_nums as $key => $sum_num) {\n    \
    \    $ordered_nums[] = $nums[$key];\n    }\n    return $ordered_nums;\n}\n", " \
    \   $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key] =\
    \ array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC, $nums);\n\
    \    return $nums;\n}\n", "    $result = [];\n    $sum = [];\n    foreach ($nums\
    \ as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n \
    \   }\n    asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\n$nums = [5, 3, 1, 7, 0, 10,\
    \ 2];\nprint_r(order_by_points($nums));", "    $nums_with_points = [];\n    foreach\
    \ ($nums as $index => $num) {\n        $nums_with_points[$index] = [\n       \
    \     'num' => $num,\n            'points' => array_sum(str_split($num))\n   \
    \     ];\n    }\n    usort($nums_with_points, function ($a, $b) {\n        if\
    \ ($a['points'] == $b['points']) {\n            return $a['num'] - $b['num'];\n\
    \        }\n        return $a['points'] - $b['points'];\n    });\n    return array_column($nums_with_points,\
    \ 'num');\n}\n", "    $arr = [];\n    foreach ($nums as $key => $value) {\n  \
    \      $arr[$key] = array_sum(str_split($value));\n    }\n    asort($arr);\n \
    \   $result = [];\n    foreach ($arr as $key => $value) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "  $nums_with_points = [];\n\
    \  foreach ($nums as $key => $num) {\n    $nums_with_points[$key] = [$num, sum_of_digits($num)];\n\
    \  }\n  usort($nums_with_points, function($a, $b) {\n    if ($a[1] == $b[1]) {\n\
    \      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  $result\
    \ = [];\n  foreach ($nums_with_points as $num_with_points) {\n    $result[] =\
    \ $num_with_points[0];\n  }\n  return $result;\n}\n", "    $sums = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\nvar_dump(order_by_points([5,\
    \ 3, 1, 4, 2])); // [1, 2, 3, 4, 5]\nvar_dump(order_by_points([99, 98, 97, 96,\
    \ 95])); // [95, 96, 97, 98, 99]\nvar_dump(order_by_points([10, 100, 1000, 10000]));\
    \ // [10, 100, 1000, 10000]\nvar_dump(order_by_points([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10])); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvar_dump(order_by_points([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nvar_dump(order_by_points([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,", " \
    \   $arr = [];\n    foreach ($nums as $key => $value) {\n        $arr[$key] =\
    \ array_sum(str_split($value));\n    }\n    asort($arr);\n    $newArr = [];\n\
    \    foreach ($arr as $key => $value) {\n        $newArr[] = $nums[$key];\n  \
    \  }\n    return $newArr;\n}\n", "    $sum = [];\n    foreach ($nums as $key =>\
    \ $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $sums = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $sum = 0;\n        for ($i = 0; $i < strlen($num);\
    \ $i++) {\n            $sum += $num[$i];\n        }\n        $sums[$key] = $sum;\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $sum = [];\n    foreach ($nums as $key => $num) {\n        $sum[$key] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $arr = [];\n    foreach ($nums as $key => $value) {\n        $arr[$key] = $value;\n\
    \        $arr[$key] = array_sum(str_split($value));\n    }\n    asort($arr);\n\
    \    $arr2 = [];\n    foreach ($arr as $key => $value) {\n        $arr2[] = $nums[$key];\n\
    \    }\n    return $arr2;\n}\n", "    $arr = [];\n    foreach ($nums as $key =>\
    \ $value) {\n        $arr[$key] = array_sum(str_split($value));\n    }\n    asort($arr);\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n", "    $nums = array_map(function($num)\
    \ {\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num %\
    \ 10;\n            $num = (int)($num / 10);\n        }\n        return $sum;\n\
    \    }, $nums);\n    asort($nums);\n    return array_keys($nums);\n}\n", "   \
    \ $result = [];\n    foreach ($nums as $key => $num) {\n        $result[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($result);\n    $result = array_keys($result);\n\
    \    foreach ($result as $key => $value) {\n        $result[$key] = $nums[$value];\n\
    \    }\n    return $result;\n}\n", "    $sum = [];\n    foreach ($nums as $key\
    \ => $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n  \
    \  array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", "  $nums_with_points\
    \ = [];\n  foreach ($nums as $index => $num) {\n    $nums_with_points[$index]\
    \ = [\n      'num' => $num,\n      'points' => array_sum(str_split($num))\n  \
    \  ];\n  }\n  usort($nums_with_points, function($a, $b) {\n    if ($a['points']\
    \ == $b['points']) {\n      return $a['index'] - $b['index'];\n    }\n    return\
    \ $a['points'] - $b['points'];\n  });\n  return array_column($nums_with_points,\
    \ 'num');\n}\n", "    $result = [];\n    foreach ($nums as $key => $num) {\n \
    \       $sum = 0;\n        $num = str_split($num);\n        foreach ($num as $number)\
    \ {\n            $sum += $number;\n        }\n        $result[$key] = $sum;\n\
    \    }\n    asort($result);\n    $result2 = [];\n    foreach ($result as $key\
    \ => $value) {\n        $result2[] = $nums[$key];\n    }\n    return $result2;\n\
    }\n", "    $nums_sum = [];\n    foreach ($nums as $key => $num) {\n        $nums_sum[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($nums_sum);\n    $nums_sorted\
    \ = [];\n    foreach ($nums_sum as $key => $num) {\n        $nums_sorted[] = $nums[$key];\n\
    \    }\n    return $nums_sorted;\n}\n", "    $sums = [];\n    foreach ($nums as\
    \ $index => $num) {\n        $sums[$index] = array_sum(str_split($num));\n   \
    \ }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $index => $sum)\
    \ {\n        $result[] = $nums[$index];\n    }\n    return $result;\n}\n", " \
    \   $sums = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key] =\
    \ array_sum(str_split($num));\n    }\n    asort($sums);\n    $result = [];\n \
    \   foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n\
    \    return $result;\n}\n", "    $sums = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    array_multisort($sums,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $nums_sorted = [];\n    $nums_sorted_keys\
    \ = [];\n    $nums_sorted_values = [];\n    foreach ($nums as $key => $value)\
    \ {\n        $nums_sorted[$key] = array_sum(str_split($value));\n    }\n    asort($nums_sorted);\n\
    \    foreach ($nums_sorted as $key => $value) {\n        $nums_sorted_keys[] =\
    \ $key;\n        $nums_sorted_values[] = $value;\n    }\n    $nums_sorted = array_combine($nums_sorted_keys,\
    \ $nums_sorted_values);\n    foreach ($nums_sorted as $key => $value) {\n    \
    \    $nums_sorted[$key] = $nums[$key];\n    }\n    return $nums_sorted;\n}\n\n\
    $nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50];\nprint_r(order_by_points($nums));",
  "    $arr = [];\n    foreach ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $sum_of_digits = array();\n    foreach ($nums as $key => $value) {\n       \
    \ $sum_of_digits[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum_of_digits,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $sum = [];\n    foreach ($nums\
    \ as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n \
    \   }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", " \
    \ $sum = [];\n  foreach ($nums as $key => $value) {\n    $sum[$key] = array_sum(str_split($value));\n\
    \  }\n  asort($sum);\n  $result = [];\n  foreach ($sum as $key => $value) {\n\
    \    $result[] = $nums[$key];\n  }\n  return $result;\n}\n", "    $sum = [];\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $arr = [];\n    foreach ($nums as $key => $num) {\n        $arr[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $arr = [];\n    foreach ($nums as $key => $value) {\n        $sum = array_sum(str_split($value));\n\
    \        $arr[$key] = $sum;\n    }\n    asort($arr);\n    $result = [];\n    foreach\
    \ ($arr as $key => $value) {\n        $result[] = $nums[$key];\n    }\n    return\
    \ $result;\n}\n\n$nums = [50, 3, 6, 1, 10];\nprint_r(order_by_points($nums));",
  "  $nums_with_points = [];\n  foreach ($nums as $index => $num) {\n    $nums_with_points[$index]\
    \ = [\n      'num' => $num,\n      'points' => sum_of_digits($num)\n    ];\n \
    \ }\n  usort($nums_with_points, function($a, $b) {\n    if ($a['points'] == $b['points'])\
    \ {\n      return $a['index'] - $b['index'];\n    }\n    return $a['points'] -\
    \ $b['points'];\n  });\n  return array_column($nums_with_points, 'num');\n}\n",
  "  $nums_sum = [];\n  foreach ($nums as $key => $value) {\n    $sum = 0;\n    $value\
    \ = (string)$value;\n    for ($i=0; $i < strlen($value); $i++) {\n      $sum +=\
    \ $value[$i];\n    }\n    $nums_sum[$key] = $sum;\n  }\n  asort($nums_sum);\n\
    \  $result = [];\n  foreach ($nums_sum as $key => $value) {\n    $result[] = $nums[$key];\n\
    \  }\n  return $result;\n}\n", "    $sum = [];\n    foreach ($nums as $key =>\
    \ $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $sum = [];\n    foreach ($nums\
    \ as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n \
    \   }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", " \
    \   $sums = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n  \
    \      $num = str_split($num);\n        foreach ($num as $digit) {\n         \
    \   $sum += $digit;\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n\n$nums = [50, 2, 1, 9];\nprint_r(order_by_points($nums));",
  "    $nums_with_points = [];\n    foreach ($nums as $key => $num) {\n        $nums_with_points[$key]\
    \ = [\n            'num' => $num,\n            'points' => array_sum(str_split($num))\n\
    \        ];\n    }\n    usort($nums_with_points, function ($a, $b) {\n       \
    \ if ($a['points'] == $b['points']) {\n            return $a['num'] <=> $b['num'];\n\
    \        }\n        return $a['points'] <=> $b['points'];\n    });\n    return\
    \ array_column($nums_with_points, 'num');\n}\n", "    $sums = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    $sum = [];\n    foreach ($nums as $key => $value) {\n   \
    \     $sum[$key] = array_sum(str_split($value));\n    }\n    asort($sum);\n  \
    \  foreach ($sum as $key => $value) {\n        $result[] = $nums[$key];\n    }\n\
    \    return $result;\n}\n", "    $sums = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $result[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($result);\n    $result = array_keys($result);\n    $result =\
    \ array_map(function($value) use ($nums) {\n        return $nums[$value];\n  \
    \  }, $result);\n    return $result;\n}\n", "    $arr = [];\n    foreach ($nums\
    \ as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n \
    \   }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $sum = [];\n    $result = [];\n    foreach ($nums as $key => $value) {\n   \
    \     $sum[$key] = array_sum(str_split($value));\n    }\n    asort($sum);\n  \
    \  foreach ($sum as $key => $value) {\n        $result[] = $nums[$key];\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    $sums = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $sum = 0;\n        $num = str_split($num);\n   \
    \     foreach ($num as $digit) {\n            $sum += $digit;\n        }\n   \
    \     $sums[$key] = $sum;\n    }\n    asort($sums);\n    foreach ($sums as $key\
    \ => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n",
  "    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n   \
    \     $num = str_split($num);\n        foreach ($num as $digit) {\n          \
    \  $sum += $digit;\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    $nums = array_map(function($num)\
    \ {\n        $sum = 0;\n        $num = str_split($num);\n        foreach ($num\
    \ as $digit) {\n            $sum += $digit;\n        }\n        return $sum;\n\
    \    }, $nums);\n    asort($nums);\n    return array_keys($nums);\n}\n", "   \
    \ $nums_sum = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n\
    \        $num_arr = str_split($num);\n        foreach ($num_arr as $num_arr_key\
    \ => $num_arr_value) {\n            $sum += $num_arr_value;\n        }\n     \
    \   $nums_sum[$key] = $sum;\n    }\n    array_multisort($nums_sum, SORT_ASC, $nums);\n\
    \    return $nums;\n}\n", "    $sums = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num %\
    \ 10;\n            $num = (int)($num / 10);\n        }\n        $sums[$key] =\
    \ $sum;\n    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key\
    \ => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n",
  "    $arr = [];\n    foreach ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $sums = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n    \
    \    $num = str_split($num);\n        foreach ($num as $digit) {\n           \
    \ $sum += $digit;\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    $sums = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $sum = 0;\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = floor($num / 10);\n       \
    \ }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result = [];\n\
    \    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n", "    $nums = array_map(function($num) {\n    \
    \    $sum = 0;\n        $num = str_split($num);\n        foreach ($num as $digit)\
    \ {\n            $sum += $digit;\n        }\n        return $sum;\n    }, $nums);\n\
    \    asort($nums);\n    return array_keys($nums);\n}\n", "    $nums_array = array();\n\
    \    foreach ($nums as $key => $value) {\n        $nums_array[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($nums_array);\n    $result = array();\n    foreach ($nums_array\
    \ as $key => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\nprint_r(order_by_points([51, 32, 43]));", "    $sum_of_digits = array();\n\
    \    $result = array();\n    foreach ($nums as $key => $value) {\n        $sum_of_digits[$key]\
    \ = array_sum(str_split($value));\n    }\n    asort($sum_of_digits);\n    foreach\
    \ ($sum_of_digits as $key => $value) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n", "    $arr = [];\n    foreach ($nums as $key =>\
    \ $value) {\n        $arr[$key] = array_sum(str_split($value));\n    }\n    asort($arr);\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}", "    $arr = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $arr[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\n$nums\
    \ = [10, 2, 3, 4, 5, 6, 7, 8, 9];\n\nprint_r(order_by_points($nums));", "    $sums\
    \ = [];\n    $result = [];\n    foreach ($nums as $key => $num) {\n        $sum\
    \ = 0;\n        $num = str_split($num);\n        foreach ($num as $digit) {\n\
    \            $sum += $digit;\n        }\n        $sums[$key] = $sum;\n    }\n\
    \    asort($sums);\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    $nums = array_combine(range(1,\
    \ count($nums)), $nums);\n    $sum = array_map(function($num) {\n        return\
    \ array_sum(str_split($num));\n    }, $nums);\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return array_values($nums);\n}\n", "    $arr = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    foreach ($nums as $key => $num) {\n        $result[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($result);\n    $result = array_keys($result);\n\
    \    $result = array_map(function ($num) use ($nums) {\n        return $nums[$num];\n\
    \    }, $result);\n    return $result;\n}\n", "    $sums = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $sum = 0;\n        $num = (string)$num;\n      \
    \  for ($i = 0; $i < strlen($num); $i++) {\n            $sum += $num[$i];\n  \
    \      }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result =\
    \ [];\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    $sum = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n", "    $sum = array();\n   \
    \ foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $arr = [];\n    foreach ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\n$nums\
    \ = [10, 2, 3, 4, 5, 6, 7, 8, 9];\nprint_r(order_by_points($nums));", "  $sum\
    \ = array_map(function($num) {\n    return array_sum(str_split($num));\n  }, $nums);\n\
    \  array_multisort($sum, SORT_ASC, $nums);\n  return $nums;\n}\n", "    $nums\
    \ = array_map(function($num) {\n        $sum = 0;\n        $num = (string)$num;\n\
    \        for ($i = 0; $i < strlen($num); $i++) {\n            $sum += (int)$num[$i];\n\
    \        }\n        return $sum;\n    }, $nums);\n    $nums = array_combine(range(0,\
    \ count($nums) - 1), $nums);\n    asort($nums);\n    return array_keys($nums);\n\
    }\n", "    $nums_array = [];\n    foreach ($nums as $key => $num) {\n        $nums_array[$key]\
    \ = $num;\n    }\n    $nums_array = array_map('str_split', $nums_array);\n   \
    \ $nums_array = array_map('array_sum', $nums_array);\n    asort($nums_array);\n\
    \    $nums_array = array_keys($nums_array);\n    $nums_array = array_map(function($num)\
    \ use ($nums) {\n        return $nums[$num];\n    }, $nums_array);\n    return\
    \ $nums_array;\n}\n\n$nums = [13, 20, 7, 4];\nprint_r(order_by_points($nums));",
  "    $points = [];\n    foreach ($nums as $key => $num) {\n        $points[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($points);\n    $result = [];\n\
    \    foreach ($points as $key => $point) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        $num = str_split($num);\n        foreach\
    \ ($num as $digit) {\n            $sum += $digit;\n        }\n        $result[$key]\
    \ = $sum;\n    }\n    asort($result);\n    $result = array_keys($result);\n  \
    \  $result = array_map(function($num) use ($nums) {\n        return $nums[$num];\n\
    \    }, $result);\n    return $result;\n}\n", "    $sums = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $sum = 0;\n        $num = (string)$num;\n      \
    \  for ($i = 0; $i < strlen($num); $i++) {\n            $sum += (int)$num[$i];\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = [];\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $arr = [];\n    foreach ($nums as $key\
    \ => $value) {\n        $arr[$key] = array_sum(str_split($value));\n    }\n  \
    \  asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value) {\n \
    \       $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $result[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($result);\n    $result = array_keys($result);\n    $result =\
    \ array_map(function($num) use ($nums) {\n        return $nums[$num];\n    },\
    \ $result);\n    return $result;\n}\n", "    $nums = array_map(function($num)\
    \ {\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num %\
    \ 10;\n            $num = (int)($num / 10);\n        }\n        return $sum;\n\
    \    }, $nums);\n    $nums = array_map(function($num, $index) {\n        return\
    \ [$num, $index];\n    }, $nums, array_keys($nums));\n    usort($nums, function($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return array_map(function($num)\
    \ {\n        return $num[0];\n    }, $nums);\n}\n\nvar_dump(order_by_points([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "    $result = [];\n    $sum = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n", "    $nums = array_map(function($num)\
    \ {\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num %\
    \ 10;\n            $num = floor($num / 10);\n        }\n        return $sum;\n\
    \    }, $nums);\n    $nums = array_combine(range(0, count($nums) - 1), $nums);\n\
    \    asort($nums);\n    return array_keys($nums);\n}\n", "    $nums_sum = [];\n\
    \    foreach ($nums as $key => $num) {\n        $nums_sum[$key] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($nums_sum, SORT_ASC, $nums);\n    return $nums;\n\
    }\n", "    $result = [];\n    $sums = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $sum = 0;\n        $num = str_split($num);\n        foreach ($num\
    \ as $digit) {\n            $sum += $digit;\n        }\n        $sums[$key] =\
    \ $sum;\n    }\n    asort($sums);\n    foreach ($sums as $key => $sum) {\n   \
    \     $result[] = $nums[$key];\n    }\n    return $result;\n}\n\n$nums = [50,\
    \ 2, 1, 9];\nprint_r(order_by_points($nums));", "  $new_nums = [];\n  foreach\
    \ ($nums as $key => $value) {\n    $new_nums[$key] = $value;\n    $new_nums[$key]\
    \ = array_sum(str_split($value));\n  }\n  asort($new_nums);\n  $new_nums = array_keys($new_nums);\n\
    \  foreach ($new_nums as $key => $value) {\n    $new_nums[$key] = $nums[$value];\n\
    \  }\n  return $new_nums;\n}\n\n$nums = [50, 9, 7, 5, 4, 120, 56];\nprint_r(order_by_points($nums));",
  "    $result = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n \
    \       $num = (string)$num;\n        for ($i = 0; $i < strlen($num); $i++) {\n\
    \            $sum += $num[$i];\n        }\n        $result[$key] = $sum;\n   \
    \ }\n    asort($result);\n    $result2 = [];\n    foreach ($result as $key =>\
    \ $value) {\n        $result2[] = $nums[$key];\n    }\n    return $result2;\n\
    }\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(order_by_points($nums));",
  "    $nums_sum = [];\n    foreach ($nums as $key => $num) {\n        $nums_sum[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($nums_sum);\n    $result = [];\n\
    \    foreach ($nums_sum as $key => $num) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $nums = array_map(function($num) {\n \
    \       $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n\
    \            $num = (int)($num / 10);\n        }\n        return $sum;\n    },\
    \ $nums);\n    asort($nums);\n    return array_keys($nums);\n}\n", "    $sum =\
    \ [];\n    foreach ($nums as $key => $num) {\n        $sum[$key] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $result = [];\n    $sum = [];\n    foreach ($nums as $key => $value) {\n  \
    \      $sum[$key] = array_sum(str_split($value));\n    }\n    asort($sum);\n \
    \   foreach ($sum as $key => $value) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n\n$nums = [10, 3, 5, 1, 6, 2, 4];\nprint_r(order_by_points($nums));",
  "    $nums_sum = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n\
    \        $num = str_split($num);\n        foreach ($num as $value) {\n       \
    \     $sum += $value;\n        }\n        $nums_sum[$key] = $sum;\n    }\n   \
    \ asort($nums_sum);\n    $result = [];\n    foreach ($nums_sum as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\nprint_r(order_by_points([5,\
    \ 3, 1, 4, 2])); // [1, 3, 4, 5, 2]\nprint_r(order_by_points([5, 3, 1, 4, 2, 9,\
    \ 8, 7, 6])); // [1, 3, 4, 5, 2, 8, 9, 6, 7]\nprint_r(order_by_points([5, 3, 1,\
    \ 4, 2, 9, 8, 7, 6, 10])); // [1, 3, 4, 5, 2, 8, 9, 6, 7, 10]\nprint_r(order_by_points([5,\
    \ 3, 1, 4, 2, 9, 8, 7, 6, 10, 11])); // [1, 3, 4, 5, 2, 8, 9, 6, 7, 10, 11]\n\
    print_r(order_by_points([5, 3, 1, 4, 2, 9, 8, 7, 6, 10, 11, 12])); // [1, 3, 4,\
    \ 5, 2, 8, 9, 6, 7, 10, 11, 12]\nprint_r(order_by_points([5, 3, 1, 4, 2, 9, 8,\
    \ 7, 6, 10, 11, 12, 13])); // [1, 3, 4, 5, 2, 8, 9, 6, 7, 10, 11, 12, 13]\nprint_r(order_by_points([5,\
    \ 3, 1, 4, 2, 9, 8, 7, 6, 10, 11, 12, 13, 14])); // [1, 3, 4,", "  $nums_sum =\
    \ [];\n  foreach ($nums as $key => $num) {\n    $sum = 0;\n    for ($i = 0; $i\
    \ < strlen($num); $i++) {\n      $sum += $num[$i];\n    }\n    $nums_sum[$key]\
    \ = $sum;\n  }\n  asort($nums_sum);\n  $result = [];\n  foreach ($nums_sum as\
    \ $key => $value) {\n    $result[] = $nums[$key];\n  }\n  return $result;\n}\n",
  "    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $nums_sum = [];\n    foreach ($nums as $key => $num) {\n        $nums_sum[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($nums_sum);\n    $result = [];\n\
    \    foreach ($nums_sum as $key => $num) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    $sum = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n", "    $sum = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "  $arr = [];\n  foreach ($nums as $key => $num) {\n    $sum = 0;\n    for ($i =\
    \ 0; $i < strlen($num); $i++) {\n      $sum += $num[$i];\n    }\n    $arr[$key]\
    \ = $sum;\n  }\n  asort($arr);\n  $result = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $result[] = $nums[$key];\n  }\n  return $result;\n}\n\nprint_r(order_by_points([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "    $sums = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    $sums = [];\n    $result\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    foreach ($sums as $key => $sum) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\nvar_dump(order_by_points([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "    $sums = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n\n$nums = [13, 20, 7, 4];\nprint_r(order_by_points($nums));",
  "    $arr = [];\n    foreach ($nums as $key => $value) {\n        $sum = 0;\n  \
    \      $value = str_split($value);\n        foreach ($value as $val) {\n     \
    \       $sum += $val;\n        }\n        $arr[$key] = $sum;\n    }\n    asort($arr);\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $sum = 0;\n        $value = (string)$value;\n\
    \        for ($i = 0; $i < strlen($value); $i++) {\n            $sum += $value[$i];\n\
    \        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result2\
    \ = [];\n    foreach ($result as $key => $value) {\n        $result2[] = $nums[$key];\n\
    \    }\n    return $result2;\n}\n", "    $sums = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    $sums = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $points = [];\n    foreach ($nums as $index => $num) {\n        $points[$index]\
    \ = array_sum(str_split($num));\n    }\n    asort($points);\n    $result = [];\n\
    \    foreach ($points as $index => $point) {\n        $result[] = $nums[$index];\n\
    \    }\n    return $result;\n}\n", "    $sum = [];\n    foreach ($nums as $key\
    \ => $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n  \
    \  array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", "    $arr\
    \ = [];\n    $arr2 = [];\n    foreach ($nums as $key => $value) {\n        $arr[$key]\
    \ = $value;\n        $arr2[$key] = $value;\n    }\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$i]\
    \ < $arr[$j]) {\n                $temp = $arr[$i];\n                $arr[$i] =\
    \ $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n   \
    \ }\n    for ($i = 0; $i < count($arr); $i++) {\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$i] == $arr[$j]) {\n                $arr[$i] =\
    \ $arr2[$i];\n            }\n        }\n    }\n    return $arr;\n}\n\n$nums =\
    \ [10, 20, 30, 40, 50];\necho \"<pre>\";\nprint_r(order_by_points($nums));\necho\
    \ \"</pre>\";\n", "    $nums_sum = [];\n    foreach ($nums as $key => $num) {\n\
    \        $nums_sum[$key] = array_sum(str_split($num));\n    }\n    array_multisort($nums_sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $nums_array = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $nums_array[$key] = $value;\n    }\n  \
    \  $nums_array = array_map('str_split', $nums_array);\n    $nums_array = array_map('array_sum',\
    \ $nums_array);\n    asort($nums_array);\n    $nums_array = array_keys($nums_array);\n\
    \    $nums_array = array_map(function($value) use ($nums) {\n        return $nums[$value];\n\
    \    }, $nums_array);\n    return $nums_array;\n}\n", "  $nums_by_points = [];\n\
    \  foreach ($nums as $index => $num) {\n    $points = 0;\n    $num_string = (string)\
    \ $num;\n    for ($i = 0; $i < strlen($num_string); $i++) {\n      $points +=\
    \ $num_string[$i];\n    }\n    $nums_by_points[$index] = $points;\n  }\n  asort($nums_by_points);\n\
    \  $sorted_nums = [];\n  foreach ($nums_by_points as $index => $points) {\n  \
    \  $sorted_nums[] = $nums[$index];\n  }\n  return $sorted_nums;\n}\n", "    $points\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $points[$key] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($points, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $nums = array_map(function($num) {\n        $sum = 0;\n        $num = str_split($num);\n\
    \        foreach ($num as $digit) {\n            $sum += $digit;\n        }\n\
    \        return $sum;\n    }, $nums);\n    asort($nums);\n    return array_keys($nums);\n\
    }\n", "    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sum =\
    \ 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n           \
    \ $num = (int)($num / 10);\n        }\n        $sums[$key] = $sum;\n    }\n  \
    \  asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum) {\n \
    \       $result[] = $nums[$key];\n    }\n    return $result;\n}\n\n$nums = [5,\
    \ 3, 4, 1, 2];\necho implode(', ', order_by_points($nums));", "    $nums_with_points\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $nums_with_points[$key]\
    \ = sum_of_digits($num);\n    }\n    asort($nums_with_points);\n    $result =\
    \ [];\n    foreach ($nums_with_points as $key => $num) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    $arr = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $arr = [];\n    foreach ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\n$nums\
    \ = [13, 20, 7, 4];\nprint_r(order_by_points($nums));", "    $nums_with_points\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $nums_with_points[$key]\
    \ = [\n            'num' => $num,\n            'points' => array_sum(str_split($num))\n\
    \        ];\n    }\n    usort($nums_with_points, function ($a, $b) {\n       \
    \ if ($a['points'] == $b['points']) {\n            return $a['num'] - $b['num'];\n\
    \        }\n        return $a['points'] - $b['points'];\n    });\n    return array_column($nums_with_points,\
    \ 'num');\n}\n", "    $sums = [];\n    foreach ($nums as $key => $num) {\n   \
    \     $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n  \
    \  $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $result[$key] = array_sum(str_split($num));\n    }\n   \
    \ asort($result);\n    $result2 = [];\n    foreach ($result as $key => $value)\
    \ {\n        $result2[] = $nums[$key];\n    }\n    return $result2;\n}\n", " \
    \ $sum = [];\n  foreach ($nums as $key => $value) {\n    $sum[$key] = array_sum(str_split($value));\n\
    \  }\n  array_multisort($sum, SORT_ASC, $nums);\n  return $nums;\n}\n", "    $sums\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $nums[$key]\
    \ = str_split($num);\n        foreach ($nums[$key] as $n) {\n            $sum\
    \ += $n;\n        }\n        $sums[$key] = $sum;\n    }\n    array_multisort($sums,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $result = [];\n    $sum = [];\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\n$nums = [5, 3, 1, 7, 0, 10,\
    \ 2];\nprint_r(order_by_points($nums));", "    $nums_arr = [];\n    foreach ($nums\
    \ as $key => $value) {\n        $nums_arr[$key] = $value;\n    }\n    $nums_arr\
    \ = array_map(function($n) {\n        $sum = 0;\n        while ($n > 0) {\n  \
    \          $sum += $n % 10;\n            $n = floor($n / 10);\n        }\n   \
    \     return $sum;\n    }, $nums_arr);\n    array_multisort($nums_arr, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n", "    $result = [];\n    foreach ($nums as\
    \ $key => $num) {\n        $sum = 0;\n        $num = (string)$num;\n        for\
    \ ($i = 0; $i < strlen($num); $i++) {\n            $sum += $num[$i];\n       \
    \ }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result2 =\
    \ [];\n    foreach ($result as $key => $value) {\n        $result2[] = $nums[$key];\n\
    \    }\n    return $result2;\n}\n", "    $sums = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num = floor($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    array_multisort($sums, SORT_ASC, $nums);\n    return $nums;\n\
    }\n", "    $result = [];\n    foreach ($nums as $key => $value) {\n        $sum\
    \ = 0;\n        $value = (string)$value;\n        for ($i = 0; $i < strlen($value);\
    \ $i++) {\n            $sum += $value[$i];\n        }\n        $result[$key] =\
    \ $sum;\n    }\n    asort($result);\n    $result2 = [];\n    foreach ($result\
    \ as $key => $value) {\n        $result2[] = $nums[$key];\n    }\n    return $result2;\n\
    }\n", "    $result = [];\n    $sum = [];\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    asort($sum);\n\
    \    foreach ($sum as $key => $value) {\n        $result[] = $nums[$key];\n  \
    \  }\n    return $result;\n}\n", "    $sums = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n\nvar_dump(order_by_points([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "    $sum = array();\n    foreach ($nums as\
    \ $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n\
    \    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", "    $sums\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $result = [];\n    foreach ($nums as $key => $value) {\n        $result[$key]\
    \ = array_sum(str_split($value));\n    }\n    asort($result);\n    $result = array_keys($result);\n\
    \    foreach ($result as $key => $value) {\n        $result[$key] = $nums[$value];\n\
    \    }\n    return $result;\n}\n", "    $sums = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num = (int)($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    array_multisort($sums, SORT_ASC, $nums);\n    return $nums;\n\
    }\n", "    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sum =\
    \ 0;\n        for ($i = 0; $i < strlen($num); $i++) {\n            $sum += $num[$i];\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = [];\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "  $arr = [];\n  foreach ($nums as $key =>\
    \ $value) {\n    $arr[$key] = array_sum(str_split($value));\n  }\n  asort($arr);\n\
    \  $result = [];\n  foreach ($arr as $key => $value) {\n    $result[] = $nums[$key];\n\
    \  }\n  return $result;\n}", "    $sums = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "  $sum = [];\n  foreach ($nums\
    \ as $key => $value) {\n    $sum[$key] = array_sum(str_split($value));\n  }\n\
    \  array_multisort($sum, SORT_ASC, $nums);\n  return $nums;\n}\n", "    $result\
    \ = [];\n    foreach ($nums as $key => $value) {\n        $sum = 0;\n        $num\
    \ = $value;\n        while ($num > 0) {\n            $sum += $num % 10;\n    \
    \        $num = (int)($num / 10);\n        }\n        $result[$key] = $sum;\n\
    \    }\n    asort($result);\n    $result2 = [];\n    foreach ($result as $key\
    \ => $value) {\n        $result2[] = $nums[$key];\n    }\n    return $result2;\n\
    }\n", "    $arr = [];\n    foreach ($nums as $key => $value) {\n        $arr[$key]\
    \ = $value;\n        $arr[$key] = array_sum(str_split($value));\n    }\n    asort($arr);\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n", "    $sum = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $sum[$key] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    // your code here\n    $sum = [];\n    foreach ($nums as $key => $value) {\n\
    \        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $result = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $sum = 0;\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = floor($num / 10);\n       \
    \ }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result =\
    \ array_keys($result);\n    $sorted = [];\n    foreach ($result as $key) {\n \
    \       $sorted[] = $nums[$key];\n    }\n    return $sorted;\n}\n", "    $sums\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $num\
    \ = (string)$num;\n        for ($i = 0; $i < strlen($num); $i++) {\n         \
    \   $sum += $num[$i];\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    $sums = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\n$nums\
    \ = [13, 20, 7, 4];\nprint_r(order_by_points($nums)); // [20, 4, 13, 7]\n\n$nums\
    \ = [13, 20, 7, 4, 100];\nprint_r(order_by_points($nums)); // [20, 4, 13, 7, 100]\n\
    \n$nums = [13, 20, 7, 4, 100, 50];\nprint_r(order_by_points($nums)); // [20, 4,\
    \ 13, 7, 100, 50]\n\n$nums = [13, 20, 7, 4, 100, 50, 99];\nprint_r(order_by_points($nums));\
    \ // [20, 4, 13, 7, 100, 50, 99]\n\n$nums = [13, 20, 7, 4, 100, 50, 99, 55];\n\
    print_r(order_by_points($nums)); // [20, 4, 13, 7, 100, 50, 99, 55]\n\n$nums =\
    \ [13, 20, 7, 4, 100, 50, 99, 55, 33];\nprint_r(order_by_points($nums)); // [20,\
    \ 4, 13, 7, 100, 50, 99, 55, 33]\n\n$nums = [13, 20, 7, 4, 100, 50, 99, 55, 33,\
    \ 44];\nprint_r(order_by_points($nums)); // [20, 4, 13, 7, 100, 50, 99, 55, 33,\
    \ 44]\n\n$nums = [13, 20, 7, 4, 100, 50, 99, 55, 33, 44, 77];\nprint_r(order_by_points($nums));\
    \ // [20, 4, 13, 7, 100, 50,", "    $sums = [];\n    foreach ($nums as $key =>\
    \ $num) {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n\
    \    $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n", "    // your code here\n}\n",
  "    $sums = [];\n    foreach ($nums as $index => $num) {\n        $sum = 0;\n \
    \       while ($num > 0) {\n            $sum += $num % 10;\n            $num =\
    \ (int)($num / 10);\n        }\n        $sums[$index] = $sum;\n    }\n    array_multisort($sums,\
    \ $nums);\n    return $nums;\n}\n", "  $nums_sorted = [];\n  foreach ($nums as\
    \ $key => $num) {\n    $sum = 0;\n    $num_str = strval($num);\n    for ($i =\
    \ 0; $i < strlen($num_str); $i++) {\n      $sum += intval($num_str[$i]);\n   \
    \ }\n    $nums_sorted[$key] = $sum;\n  }\n  asort($nums_sorted);\n  $nums_sorted_final\
    \ = [];\n  foreach ($nums_sorted as $key => $num) {\n    $nums_sorted_final[]\
    \ = $nums[$key];\n  }\n  return $nums_sorted_final;\n}\n", "    $sum = [];\n \
    \   foreach ($nums as $key => $num) {\n        $sum[$key] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    $nums = [12, 13, 14, 15, 16, 17, 18, 19, 20];\nprint_r(order_by_points($nums));",
  "    $nums_sum = [];\n    foreach ($nums as $key => $num) {\n        $nums_sum[$key]\
    \ = array_sum(str_split($num));\n    }\n    array_multisort($nums_sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n", "  $result = [];\n  $sum = [];\n  foreach\
    \ ($nums as $key => $value) {\n    $sum[$key] = array_sum(str_split($value));\n\
    \  }\n  asort($sum);\n  foreach ($sum as $key => $value) {\n    $result[] = $nums[$key];\n\
    \  }\n  return $result;\n}\n\nprint_r(order_by_points([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]));", "    $sums = [];\n    foreach ($nums as $key => $num) {\n      \
    \  $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n    $result\
    \ = [];\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $result[$key] = array_sum(str_split($num));\n    }\n   \
    \ asort($result);\n    $result = array_keys($result);\n    $result = array_map(function($num)\
    \ use ($nums) {\n        return $nums[$num];\n    }, $result);\n    return $result;\n\
    }\n\n$nums = [13, 20, 7, 4];\necho implode(', ', order_by_points($nums));", " \
    \   $nums_sum = [];\n    foreach ($nums as $key => $value) {\n        $nums_sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    asort($nums_sum);\n    $result =\
    \ [];\n    foreach ($nums_sum as $key => $value) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $arr = [];\n    foreach ($nums as $key\
    \ => $value) {\n        $arr[$key] = array_sum(str_split($value));\n    }\n  \
    \  asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value) {\n \
    \       $result[] = $nums[$key];\n    }\n    return $result;\n}\n\nvar_dump(order_by_points([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "    $sums = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num = floor($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as\
    \ $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n", "    $nums = array_map(function($num) {\n        $sum = 0;\n        for\
    \ ($i = 0; $i < strlen($num); $i++) {\n            $sum += $num[$i];\n       \
    \ }\n        return $sum;\n    }, $nums);\n    asort($nums);\n    return array_keys($nums);\n\
    }\n", "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n", "    $sum = [];\n    foreach ($nums as $key\
    \ => $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n  \
    \  array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", "    $nums_sum\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n        while\
    \ ($num > 0) {\n            $sum += $num % 10;\n            $num = floor($num\
    \ / 10);\n        }\n        $nums_sum[$key] = $sum;\n    }\n    asort($nums_sum);\n\
    \    $result = [];\n    foreach ($nums_sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n", "    $sum = array();\n   \
    \ foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "   \
    \ $nums = array_map(function($num) {\n        $sum = 0;\n        while ($num >\
    \ 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        return $sum;\n    }, $nums);\n    asort($nums);\n    return\
    \ array_keys($nums);\n}\n", "    $nums_with_points = [];\n    foreach ($nums as\
    \ $key => $num) {\n        $nums_with_points[$key] = [\n            'num' => $num,\n\
    \            'points' => sum_of_digits($num)\n        ];\n    }\n    usort($nums_with_points,\
    \ function ($a, $b) {\n        if ($a['points'] == $b['points']) {\n         \
    \   return $a['num'] <=> $b['num'];\n        }\n        return $a['points'] <=>\
    \ $b['points'];\n    });\n    return array_column($nums_with_points, 'num');\n\
    }\n", "    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sum =\
    \ 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n           \
    \ $num = (int)($num / 10);\n        }\n        $sums[$key] = $sum;\n    }\n  \
    \  asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum) {\n \
    \       $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "    $nums_with_points\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $num_str\
    \ = (string)$num;\n        for ($i = 0; $i < strlen($num_str); $i++) {\n     \
    \       $sum += $num_str[$i];\n        }\n        $nums_with_points[$key] = $sum;\n\
    \    }\n    asort($nums_with_points);\n    $result = [];\n    foreach ($nums_with_points\
    \ as $key => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\n$nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(order_by_points($nums));",
  "    $nums = array_map(function($num) {\n        $sum = 0;\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        return $sum;\n    }, $nums);\n    asort($nums);\n    return\
    \ array_keys($nums);\n}\n", "    $sums = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    array_multisort($sums,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $sums = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $sum = 0;\n        while ($num > 0) {\n        \
    \    $sum += $num % 10;\n            $num = (int)($num / 10);\n        }\n   \
    \     $sums[$key] = $sum;\n    }\n    array_multisort($sums, SORT_ASC, $nums);\n\
    \    return $nums;\n}\n", "    $nums = array_map(function($num) {\n        $sum\
    \ = 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n         \
    \   $num = floor($num / 10);\n        }\n        return $sum;\n    }, $nums);\n\
    \    asort($nums);\n    return array_keys($nums);\n}\n", "    // your code here\n\
    }\n$nums = [4, 2, 3, 1, 5, 6, 7, 8, 9, 10];\nprint_r(order_by_points($nums));",
  "    $nums_with_points = [];\n    foreach ($nums as $index => $num) {\n        $nums_with_points[$index]\
    \ = [\n            'points' => sum_of_digits($num),\n            'num' => $num\n\
    \        ];\n    }\n    usort($nums_with_points, function ($a, $b) {\n       \
    \ if ($a['points'] == $b['points']) {\n            return $a['num'] - $b['num'];\n\
    \        }\n        return $a['points'] - $b['points'];\n    });\n    $result\
    \ = [];\n    foreach ($nums_with_points as $num_with_points) {\n        $result[]\
    \ = $num_with_points['num'];\n    }\n    return $result;\n}\n", "    $nums_with_points\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $nums_with_points[$key]\
    \ = [$num, sum_of_digits($num)];\n    }\n    usort($nums_with_points, function\
    \ ($a, $b) {\n        if ($a[1] === $b[1]) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a[1] - $b[1];\n    });\n    return array_column($nums_with_points,\
    \ 0);\n}\n", "    $result = [];\n    foreach ($nums as $key => $value) {\n   \
    \     $result[$key] = array_sum(str_split($value));\n    }\n    asort($result);\n\
    \    $result2 = [];\n    foreach ($result as $key => $value) {\n        $result2[]\
    \ = $nums[$key];\n    }\n    return $result2;\n}\n", "    $points = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $points[$key] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($points, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n",
  "    $arr = [];\n    foreach ($nums as $key => $value) {\n        $sum = 0;\n  \
    \      for ($i = 0; $i < strlen($value); $i++) {\n            $sum += $value[$i];\n\
    \        }\n        $arr[$key] = $sum;\n    }\n    asort($arr);\n    $result =\
    \ [];\n    foreach ($arr as $key => $value) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $sum = [];\n    foreach ($nums as $key\
    \ => $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n  \
    \  array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", "    $nums_with_points\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $nums_with_points[$key]\
    \ = [$num, sum_of_digits($num)];\n    }\n    usort($nums_with_points, function\
    \ ($a, $b) {\n        if ($a[1] === $b[1]) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a[1] - $b[1];\n    });\n    $result = [];\n    foreach\
    \ ($nums_with_points as $num_with_points) {\n        $result[] = $num_with_points[0];\n\
    \    }\n    return $result;\n}\n", "  $nums_sum = [];\n  foreach ($nums as $key\
    \ => $num) {\n    $nums_sum[$key] = array_sum(str_split($num));\n  }\n  array_multisort($nums_sum,\
    \ SORT_ASC, $nums);\n  return $nums;\n}\n", "    $sums = [];\n    foreach ($nums\
    \ as $index => $num) {\n        $sum = 0;\n        $num = str_split($num);\n \
    \       foreach ($num as $digit) {\n            $sum += $digit;\n        }\n \
    \       $sums[$index] = $sum;\n    }\n    asort($sums);\n    $result = [];\n \
    \   foreach ($sums as $index => $sum) {\n        $result[] = $nums[$index];\n\
    \    }\n    return $result;\n}\n", "    $sum = [];\n    foreach ($nums as $key\
    \ => $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n  \
    \  array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", "  $nums_with_points\
    \ = [];\n  foreach ($nums as $key => $num) {\n    $nums_with_points[$key] = [$num,\
    \ sum_of_digits($num)];\n  }\n  usort($nums_with_points, function($a, $b) {\n\
    \    if ($a[1] === $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1]\
    \ - $b[1];\n  });\n  $result = [];\n  foreach ($nums_with_points as $num_with_points)\
    \ {\n    $result[] = $num_with_points[0];\n  }\n  return $result;\n}\n", "   \
    \ $sums = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n    \
    \    for ($i = 0; $i < strlen($num); $i++) {\n            $sum += $num[$i];\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = [];\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n", "    $nums_with_points = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $nums_with_points[$key] = [\n            'num' =>\
    \ $num,\n            'points' => array_sum(str_split($num))\n        ];\n    }\n\
    \    usort($nums_with_points, function ($a, $b) {\n        if ($a['points'] ==\
    \ $b['points']) {\n            return $a['num'] - $b['num'];\n        }\n    \
    \    return $a['points'] - $b['points'];\n    });\n    return array_column($nums_with_points,\
    \ 'num');\n}\n", "    $sums = [];\n    foreach ($nums as $key => $num) {\n   \
    \     $sum = 0;\n        $num = (string)$num;\n        for ($i = 0; $i < strlen($num);\
    \ $i++) {\n            $sum += $num[$i];\n        }\n        $sums[$key] = $sum;\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n", "  $sums\
    \ = [];\n  foreach ($nums as $key => $num) {\n    $sum = 0;\n    for ($i = 0;\
    \ $i < strlen($num); $i++) {\n      $sum += $num[$i];\n    }\n    $sums[$key]\
    \ = $sum;\n  }\n  asort($sums);\n  $result = [];\n  foreach ($sums as $key =>\
    \ $sum) {\n    $result[] = $nums[$key];\n  }\n  return $result;\n}\n", "    $nums_with_points\
    \ = [];\n    foreach ($nums as $key => $num) {\n        $nums_with_points[$key]\
    \ = [\n            'num' => $num,\n            'points' => array_sum(str_split($num))\n\
    \        ];\n    }\n    usort($nums_with_points, function ($a, $b) {\n       \
    \ if ($a['points'] == $b['points']) {\n            return $a['num'] - $b['num'];\n\
    \        }\n        return $a['points'] - $b['points'];\n    });\n    return array_column($nums_with_points,\
    \ 'num');\n}\n\n$nums = [5, 3, 1, 7, 0, 10, 2];\nprint_r(order_by_points($nums));",
  "    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = [];\n    foreach ($sums as $key => $sum)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
