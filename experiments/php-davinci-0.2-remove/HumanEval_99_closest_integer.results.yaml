language: php
name: HumanEval_99_closest_integer
results:
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon323ght.php:26\n\
    Stack trace:\n#0 /tmp/tmpon323ght.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpon323ght.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_ue9_m0.php:28\n\
    Stack trace:\n#0 /tmp/tmps_ue9_m0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps_ue9_m0.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"14.1\") . \"\\n\";\necho closest_integer(\"\
    14.9\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpulndiily.php:37\nStack trace:\n#0 /tmp/tmpulndiily.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpulndiily.php on line 37\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value = round($value);\n    return $value;\n}\necho\
    \ closest_integer(\"14.5\"); // 15\necho \"\\n\";\necho closest_integer(\"-14.5\"\
    ); // -15\necho \"\\n\";\necho closest_integer(\"-14.6\"); // -15\necho \"\\n\"\
    ;\necho closest_integer(\"-14.4\"); // -14\necho \"\\n\";\necho closest_integer(\"\
    -14.0\"); // -14\necho \"\\n\";\necho closest_integer(\"-14.1\"); // -14\necho\
    \ \"\\n\";\necho closest_integer(\"-14.2\"); // -14\necho \"\\n\";\necho closest_integer(\"\
    -14.3\"); // -14\necho \"\\n\";\necho closest_integer(\"-14.7\"); // -15\necho\
    \ \"\\n\";\necho closest_integer(\"-14.8\"); // -15\necho \"\\n\";\necho closest_integer(\"\
    -14.9\"); // -15\necho \"\\n\";\necho closest_integer(\"14.0\"); // 14\necho \"\
    \\n\";\necho closest_integer(\"14.1\"); // 14\necho \"\\n\";\necho closest_integer(\"\
    14.2\"); // 14\necho \"\\n\";\necho closest_integer(\"14.3\"); // 14\necho \"\\\
    n\";\necho closest_integer(\"14.4\"); // 14\necho \"\\n\";\necho closest_integer(\"\
    14.6\"); // 15\necho \"\\n\";\necho closest_integer(\"14.7\"); // 15\necho \"\\\
    n\";\necho closest_integer(\"14.8\"); // 15\necho \"\\n\";\necho closest_integer(\"\
    14.9\"); // 15\necho \"\\n\";\necho closest_integer(\"-14.5\"); // -15\necho \"\
    \\n\";\necho closest_integer(\"-14.6\"); // -15\necho \"\\n\";\necho closest_integer(\"\
    -14.4\"); // -14\necho \"\\n\";\necho closest_integer(\"-14.0\"); // -14\necho\
    \ \"\\n\";\necho closest_integer(\"-14.1\"); // -14\necho \"\\n\";\necho closest_integer(\"\
    -14.2\"); // -14\necho \"\\n\";\necho closest_integer(\"-14.3\");\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n-15\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n14\n14\n14\n14\n\
    14\n15\n15\n15\n15\n-15\n-15\n-14\n-14\n-14\n-14\n-14\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzfl77x2m.php:74\nStack trace:\n#0 /tmp/tmpzfl77x2m.php(81):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzfl77x2m.php on line 74\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $floor_diff = abs($value\
    \ - $floor);\n  $ceil_diff = abs($value - $ceil);\n  if ($floor_diff == $ceil_diff)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $floor_diff < $ceil_diff\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxpknjxw6.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphyfkhg84.php:30\n\
    Stack trace:\n#0 /tmp/tmphyfkhg84.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphyfkhg84.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk01dad_n.php:28\n\
    Stack trace:\n#0 /tmp/tmpk01dad_n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk01dad_n.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = (float)$value;\n\
    \    $num = round($num);\n    return $num;\n}\necho closest_integer(\"14.5\")\
    \ . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1q30jz5v.php on line 49

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  if ($value < 0) {\n    $value = ceil($value);\n  } else {\n    $value = floor($value);\n\
    \  }\n  return $value;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcvk34ld2.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\n\necho closest_integer(\"14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    14\") . \"\\n\";\necho closest_integer(\"-14\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\")\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8wcfr58e.php on line 53

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } elseif\
    \ ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else {\n\
    \        return $value > 0 ? $ceil : $floor;\n    }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\"; // 15\necho closest_integer(\"-14.5\") . \"\\n\"; // -15\n\
    echo closest_integer(\"-14.6\") . \"\\n\"; // -15\necho closest_integer(\"-14.4\"\
    ) . \"\\n\"; // -14\necho closest_integer(\"-14.0\") . \"\\n\"; // -14\necho closest_integer(\"\
    -15.0\") . \"\\n\"; // -15\necho closest_integer(\"15.0\") . \"\\n\"; // 15\n\
    echo closest_integer(\"14.0\") . \"\\n\"; // 14\necho closest_integer(\"14.4\"\
    ) . \"\\n\"; // 14\necho closest_integer(\"14.6\") . \"\\n\"; // 15\necho closest_integer(\"\
    -14.5\") . \"\\n\"; // -15\necho closest_integer(\"-14.6\") . \"\\n\"; // -15\n\
    echo closest_integer(\"-14.4\") . \"\\n\"; // -14\necho closest_integer(\"-14.0\"\
    ) . \"\\n\"; // -14\necho closest_integer(\"-15.0\") . \"\\n\"; // -15\necho closest_integer(\"\
    15.0\") . \"\\n\"; // 15\necho closest_integer(\"14.0\") . \"\\n\"; // 14\necho\
    \ closest_integer(\"14.4\") . \"\\n\"; // 14\necho closest_integer(\"14.6\") .\
    \ \"\\n\"; // 15\necho closest_integer(\"-14.5\") . \"\\n\"; // -15\necho closest_integer(\"\
    -14.6\") . \"\\n\"; // -15\necho closest_integer(\"-14.4\") . \"\\n\"; // -14\n\
    echo closest_integer(\"-14.0\") . \"\\n\"; // -14\necho closest_integer(\"-15.0\"\
    ) .\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcgn7usr7.php on line 47

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = round($value);\n\
    \  return $value;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuf6m4zpo.php:20\n\
    Stack trace:\n#0 /tmp/tmpuf6m4zpo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpuf6m4zpo.php\
    \ on line 20\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value > 0 ? $ceil : $floor;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n14\n-14\n15\n-15\n14\n-14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpl9_i5hte.php:35\nStack trace:\n#0 /tmp/tmpl9_i5hte.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl9_i5hte.php on line 35\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"14\") . \"\\n\";\necho closest_integer(\"\
    -14\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"14\") . \"\\n\";\necho closest_integer(\"\
    -14\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"14\") . \"\\n\";\necho closest_integer(\"\
    -14\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsccyzf9v.php on line 53

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -15.4\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.6\") . \"\\n\";\necho closest_integer(\"-15.7\") . \"\\n\";\necho closest_integer(\"\
    -15.8\") . \"\\n\";\necho closest_integer(\"-15.9\") . \"\\n\";\necho closest_integer(\"\
    -15.10\") . \"\\n\";\necho closest_integer(\"-15.11\") . \"\\n\";\necho closest_integer(\"\
    -15.12\") . \"\\n\";\necho closest_integer(\"-15.13\") . \"\\n\";\necho closest_integer(\"\
    -15.14\") . \"\\n\";\necho closest_integer(\"-15.15\") . \"\\n\";\necho closest_integer(\"\
    -15.16\") . \"\\n\";\necho closest_integer(\"-15.17\") . \"\\n\";\necho closest_integer(\"\
    -15.18\") . \"\\n\";\necho closest_integer(\"-15.19\") . \"\\n\";\necho closest_integer(\"\
    -15.20\") . \"\\n\";\necho closest_integer(\"-15.21\") . \"\\n\";\necho closest_integer(\"\
    -15.22\") . \"\\n\";\necho closest_integer(\"-15.23\") . \"\\n\";\necho closest_integer(\"\
    -15.24\") . \"\\n\";\necho closest_integer(\"-15.25\") . \"\\n\";\necho closest_integer(\"\
    -15.26\") . \"\\n\";\necho closest_integer(\"-15.\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp15f7yw3l.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi7og46w6.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $int = (int)$value;\n  $dec = $value - $int;\n  if ($dec == 0.5) {\n    if\
    \ ($value > 0) {\n      return $int + 1;\n    } else {\n      return $int - 1;\n\
    \    }\n  } elseif ($dec > 0.5) {\n    return $int + 1;\n  } else {\n    return\
    \ $int;\n  }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7mk7xlee.php:34\n\
    Stack trace:\n#0 /tmp/tmp7mk7xlee.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7mk7xlee.php\
    \ on line 34\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = floatval($value);\n\
    \  $floor = floor($num);\n  $ceil = ceil($num);\n  if ($num - $floor < 0.5) {\n\
    \    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\")\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_a685tye.php on line 51

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\n\necho closest_integer(\"14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplzzh0kuh.php on line 57

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $value = round($value);\n    return $value;\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"-14.6\"\
    ) . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsibny44e.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor >=\
    \ 0.5) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbhxdhoy.php:26\n\
    Stack trace:\n#0 /tmp/tmpwbhxdhoy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwbhxdhoy.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor === $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitdn0a8j.php:29\n\
    Stack trace:\n#0 /tmp/tmpitdn0a8j.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpitdn0a8j.php\
    \ on line 29\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdj4upm7.php:21\n\
    Stack trace:\n#0 /tmp/tmpmdj4upm7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmdj4upm7.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$value = floatval($value);\n\
    \t$ceil = ceil($value);\n\t$floor = floor($value);\n\tif ($ceil - $value < $value\
    \ - $floor) {\n\t\treturn $ceil;\n\t} else {\n\t\treturn $floor;\n\t}\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "14\n-15\n14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjemhxs6v.php:30\n\
    Stack trace:\n#0 /tmp/tmpjemhxs6v.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjemhxs6v.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = strval($value);\n\
    \  $value = explode('.', $value);\n  if ($value[1] >= 5) {\n    return $value[0]\
    \ + 1;\n  } else {\n    return $value[0];\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujsjl0pk.php:25\n\
    Stack trace:\n#0 /tmp/tmpujsjl0pk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpujsjl0pk.php\
    \ on line 25\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72esk6_e.php:27\n\
    Stack trace:\n#0 /tmp/tmp72esk6_e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp72esk6_e.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ if ($value - $floor >= 0.5) {\n        return $ceil;\n    } else {\n       \
    \ return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpac1785w7.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ if($value - $floor == 0.5) {\n        if($value < 0) {\n            return $floor;\n\
    \        } else {\n            return $ceil;\n        }\n    } else {\n      \
    \  return round($value);\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\";\n\
    echo closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") .\
    \ \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuu2cik5g.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-14\n14\n-15\n15\n-14\n14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsnzjj5bi.php:34\nStack trace:\n#0 /tmp/tmpsnzjj5bi.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsnzjj5bi.php on line 34\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $ceil = ceil($value);\n  $floor = floor($value);\n  if ($value == $ceil) {\n\
    \    return $ceil;\n  } elseif ($value == $floor) {\n    return $floor;\n  } elseif\
    \ ($value > 0) {\n    if (($value - $floor) < ($ceil - $value)) {\n      return\
    \ $floor;\n    } else {\n      return $ceil;\n    }\n  } else {\n    if (($value\
    \ - $floor) > ($ceil - $value)) {\n      return $floor;\n    } else {\n      return\
    \ $ceil;\n    }\n  }\n}\necho closest_integer(\"14.5\") . \"\\n\"; // 15\necho\
    \ closest_integer(\"-14.5\") . \"\\n\"; // -15\necho closest_integer(\"14.6\"\
    ) . \"\\n\"; // 15\necho closest_integer(\"-14.6\") . \"\\n\"; // -15\necho closest_integer(\"\
    14.4\") . \"\\n\"; // 14\necho closest_integer(\"-14.4\") . \"\\n\"; // -14\n\
    echo closest_integer(\"14.0\") . \"\\n\"; // 14\necho closest_integer(\"-14.0\"\
    ) . \"\\n\"; // -14\necho closest_integer(\"14\") . \"\\n\"; // 14\necho closest_integer(\"\
    -14\") . \"\\n\"; // -14\necho closest_integer(\"14.5\") . \"\\n\"; // 15\necho\
    \ closest_integer(\"-14.5\") . \"\\n\"; // -15\necho closest_integer(\"14.6\"\
    ) . \"\\n\"; // 15\necho closest_integer(\"-14.6\") . \"\\n\"; // -15\necho closest_integer(\"\
    14.4\") . \"\\n\"; // 14\necho closest_integer(\"-14.4\") . \"\\n\"; // -14\n\
    echo closest_integer(\"14.0\") . \"\\n\"; // 14\necho closest_integer(\"-14.0\"\
    ) . \"\\n\"; // -14\necho closest_integer(\"14\") . \"\\n\"; // 14\necho closest_integer(\"\
    -14\") . \"\\n\"; // -14\necho closest_integer(\"14.5\") . \"\\\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkc4sdl8t.php on line 59

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfndtpxac.php:28\n\
    Stack trace:\n#0 /tmp/tmpfndtpxac.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfndtpxac.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = (float)$value;\n\
    \  $num = round($num);\n  return $num;\n}\necho closest_integer(\"14.5\") . \"\
    \\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpc0t3mvz1.php on line 49

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    return round($value);\n\
    }\necho closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\")\
    \ . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.4\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\")\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5s2tkxxy.php on line 44

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk1mfu19q.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\"\
    ;\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -15.6\") . \"\\n\";\necho closest_integer(\"-15.4\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptpevvpow.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor >= $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\"\
    ;\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkuvabwmg.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    if ($value < 0) {\n      return $floor;\n    } else {\n      return\
    \ $ceil;\n    }\n  } else {\n    return round($value);\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdbm062_.php:30\n\
    Stack trace:\n#0 /tmp/tmpmdbm062_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmdbm062_.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\"\
    ;\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"14.6\")\
    \ . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz1mnnt9.php:30\n\
    Stack trace:\n#0 /tmp/tmpbz1mnnt9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbz1mnnt9.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk01dad_n.php:28\n\
    Stack trace:\n#0 /tmp/tmpk01dad_n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk01dad_n.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppzb2km6r.php on line 57

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"14.1\") . \"\\n\";\necho closest_integer(\"\
    14.2\") . \"\\n\";\necho closest_integer(\"14.3\") . \"\\\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0snlxtmc.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5lzjj7ld.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff1 = abs($value - $floor);\n\
    \  $diff2 = abs($value - $ceil);\n  if ($diff1 == $diff2) {\n    return ($value\
    \ < 0) ? $floor : $ceil;\n  }\n  return ($diff1 < $diff2) ? $floor : $ceil;\n\
    }\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n-14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprksvyl1k.php:31\n\
    Stack trace:\n#0 /tmp/tmprksvyl1k.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprksvyl1k.php\
    \ on line 31\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor >=\
    \ 0.5) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbhxdhoy.php:26\n\
    Stack trace:\n#0 /tmp/tmpwbhxdhoy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwbhxdhoy.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int = intval($value);\n\
    \  $dec = $value - $int;\n  if ($dec >= 0.5) {\n    return $int + 1;\n  } else\
    \ {\n    return $int;\n  }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7jwxv89.php:27\n\
    Stack trace:\n#0 /tmp/tmpu7jwxv89.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu7jwxv89.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor > 0.5) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzuevcxjc.php:28\n\
    Stack trace:\n#0 /tmp/tmpzuevcxjc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzuevcxjc.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $number =\
    \ floatval($value);\n    $floor = floor($number);\n    $ceil = ceil($number);\n\
    \    if ($number - $floor < $ceil - $number) {\n        return $floor;\n    }\
    \ else {\n        return $ceil;\n    }\n}\necho closest_integer(\"14.5\") . \"\
    \\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.6\"\
    ) . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    14.1\") . \"\\n\";\necho closest_integer(\"14.2\") . \"\\n\";\necho closest_integer(\"\
    14.3\") . \"\\n\";\necho closest_integer(\"14.7\") . \"\\n\";\necho closest_integer(\"\
    14.8\") . \"\\n\";\necho closest_integer(\"14.9\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n14\n14\n14\n14\n\
    15\n15\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptq1nldp_.php:44\n\
    Stack trace:\n#0 /tmp/tmptq1nldp_.php(51): test()\n#1 {main}\n  thrown in /tmp/tmptq1nldp_.php\
    \ on line 44\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $number = floatval($value);\n\
    \  $number = round($number);\n  return $number;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7w4zpjg.php:21\n\
    Stack trace:\n#0 /tmp/tmpt7w4zpjg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpt7w4zpjg.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = floatval($value);\n\
    \  $ceil = ceil($num);\n  $floor = floor($num);\n  if ($ceil - $num == 0.5) {\n\
    \    return $ceil;\n  } else if ($num - $floor == 0.5) {\n    return $floor;\n\
    \  } else if ($ceil - $num < 0.5) {\n    return $ceil;\n  } else {\n    return\
    \ $floor;\n  }\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqx_xymw_.php on line 58

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else {\n\
    \        return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\";\n\
    echo closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") .\
    \ \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1e65jqjn.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor < 0.5) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rqxyeam.php:28\n\
    Stack trace:\n#0 /tmp/tmp9rqxyeam.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9rqxyeam.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kej5ohn.php:26\n\
    Stack trace:\n#0 /tmp/tmp4kej5ohn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4kej5ohn.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $ceil = ceil($value);\n  $floor = floor($value);\n  $ceil_diff = $ceil - $value;\n\
    \  $floor_diff = $value - $floor;\n  if ($ceil_diff == $floor_diff) {\n    return\
    \ $ceil;\n  } elseif ($ceil_diff < $floor_diff) {\n    return $ceil;\n  } else\
    \ {\n    return $floor;\n  }\n}\necho closest_integer(\"14.5\") . PHP_EOL;\necho\
    \ closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\n\
    echo closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"14.4\") . PHP_EOL;\n\
    echo closest_integer(\"14.6\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\n\
    echo closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") .\
    \ PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4mun4zz4.php on line 49

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $ceil = ceil($value);\n  $floor = floor($value);\n  if ($ceil - $value > $value\
    \ - $floor) {\n    return $floor;\n  } elseif ($ceil - $value < $value - $floor)\
    \ {\n    return $ceil;\n  } else {\n    return $value < 0 ? $floor : $ceil;\n\
    \  }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpteac914k.php:28\n\
    Stack trace:\n#0 /tmp/tmpteac914k.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpteac914k.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($floor == $ceil) {\n\
    \    return $floor;\n  }\n  if ($value < 0) {\n    return $floor;\n  }\n  if ($value\
    \ > 0) {\n    return $ceil;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyg912ld.php:30\n\
    Stack trace:\n#0 /tmp/tmpuyg912ld.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpuyg912ld.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n-15\n-14\n-15\n-15\n-14\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpia3wtrv3.php:34\nStack trace:\n#0 /tmp/tmpia3wtrv3.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpia3wtrv3.php on line 34\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfh6oxiqn.php on line 49

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $ceil = ceil($value);\n  $floor = floor($value);\n  $ceil_diff = $ceil - $value;\n\
    \  $floor_diff = $value - $floor;\n  if ($ceil_diff == $floor_diff) {\n    if\
    \ ($value < 0) {\n      return $floor;\n    } else {\n      return $ceil;\n  \
    \  }\n  } elseif ($ceil_diff < $floor_diff) {\n    return $ceil;\n  } else {\n\
    \    return $floor;\n  }\n}\necho closest_integer(\"14.5\") . \"\\n\"; // 15\n\
    echo closest_integer(\"-14.5\") . \"\\n\"; // -15\necho closest_integer(\"14.4\"\
    ) . \"\\n\"; // 14\necho closest_integer(\"-14.4\") . \"\\n\"; // -14\necho closest_integer(\"\
    14.6\") . \"\\n\"; // 15\necho closest_integer(\"-14.6\") . \"\\n\"; // -15\n\
    echo closest_integer(\"14.5\") . \"\\n\"; // 15\necho closest_integer(\"-14.5\"\
    ) . \"\\n\"; // -15\necho closest_integer(\"14.4\") . \"\\n\"; // 14\necho closest_integer(\"\
    -14.4\") . \"\\n\"; // -14\necho closest_integer(\"14.6\") . \"\\n\"; // 15\n\
    echo closest_integer(\"-14.6\") . \"\\n\"; // -15\necho closest_integer(\"14.5\"\
    ) . \"\\n\"; // 15\necho closest_integer(\"-14.5\") . \"\\n\"; // -15\necho closest_integer(\"\
    14.4\") . \"\\n\"; // 14\necho closest_integer(\"-14.4\") . \"\\n\"; // -14\n\
    echo closest_integer(\"14.6\") . \"\\n\"; // 15\necho closest_integer(\"-14.6\"\
    ) . \"\\n\"; // -15\necho closest_integer(\"14.5\") . \"\\n\"; // 15\necho closest_integer(\"\
    -14.5\") . \"\\n\"; // -15\necho closest_integer(\"14.4\") . \"\\n\"; // 14\n\
    echo closest_integer(\"-14.4\") .\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv93ruw06.php on line 51

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"14.5\");\necho\
    \ \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.4\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho\
    \ closest_integer(\"14.4\");\necho \"\\n\";\necho closest_integer(\"14.6\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpool5v2fu.php on line 78

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diffFloor = abs($value\
    \ - $floor);\n  $diffCeil = abs($value - $ceil);\n  if ($diffFloor == $diffCeil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diffFloor < $diffCeil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n-14\n-15\n-14\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbxhg61s8.php:32\nStack trace:\n#0 /tmp/tmpbxhg61s8.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbxhg61s8.php on line 32\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"14.1\") . \"\\n\";\necho closest_integer(\"\
    14.2\") . \"\\n\";\necho closest_integer(\"14.3\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    14.7\") . \"\\n\";\necho closest_integer(\"14.8\") . \"\\n\";\necho closest_integer(\"\
    14.9\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n14\n14\n14\n14\n\
    14\n15\n15\n15\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps23ofd3x.php:46\n\
    Stack trace:\n#0 /tmp/tmps23ofd3x.php(53): test()\n#1 {main}\n  thrown in /tmp/tmps23ofd3x.php\
    \ on line 46\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value > 0 ? $ceil : $floor;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    -0.5\") . \"\\n\";\necho closest_integer(\"0.5\") . \"\\n\";\necho closest_integer(\"\
    0.0\") . \"\\n\";\necho closest_integer(\"-0.0\") . \"\\n\";\necho closest_integer(\"\
    -0.1\") . \"\\n\";\necho closest_integer(\"0.1\") . \"\\n\";\necho closest_integer(\"\
    -0.9\") . \"\\n\";\necho closest_integer(\"0.9\") . \"\\n\";\necho closest_integer(\"\
    -1.9\") . \"\\n\";\necho closest_integer(\"1.9\") . \"\\n\";\necho closest_integer(\"\
    -1.1\") . \"\\n\";\necho closest_integer(\"1.1\") . \"\\n\";\necho closest_integer(\"\
    -1.0\") . \"\\n\";\necho closest_integer(\"1.0\") . \"\\n\";\necho closest_integer(\"\
    -1.5\") . \"\\n\";\necho closest_integer(\"1.5\") . \"\\n\";\necho closest_integer(\"\
    -1.6\") . \"\\n\";\necho closest_integer(\"1.6\") . \"\\n\";\necho closest_integer(\"\
    -1.4\") . \"\\n\";\necho closest_integer(\"1.4\") . \"\\n\";\necho closest_integer(\"\
    -1.8\") . \"\\n\";\necho closest\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpr_t0ypf7.php on line 50

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ $diffFloor = abs($value - $floor);\n    $diffCeil = abs($value - $ceil);\n \
    \   if ($diffFloor < $diffCeil) {\n        return $floor;\n    } else {\n    \
    \    return $ceil;\n    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8qybcnj.php:28\n\
    Stack trace:\n#0 /tmp/tmpu8qybcnj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpu8qybcnj.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor >= 0.5) {\n        return $ceil;\n    } else {\n    \
    \    return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho\
    \ closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"14.4\") . \"\\\
    n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"14.6\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n14\n-14\n15\n-15\n14\n-14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpask7zwfl.php:34\nStack trace:\n#0 /tmp/tmpask7zwfl.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpask7zwfl.php on line 34\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $int = intval($value);\n  $dec = $value - $int;\n  if ($dec >= 0.5) {\n   \
    \ return $int + 1;\n  } else {\n    return $int;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4y_t72i.php:30\n\
    Stack trace:\n#0 /tmp/tmpq4y_t72i.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq4y_t72i.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kej5ohn.php:26\n\
    Stack trace:\n#0 /tmp/tmp4kej5ohn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4kej5ohn.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_ue9_m0.php:28\n\
    Stack trace:\n#0 /tmp/tmps_ue9_m0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps_ue9_m0.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor < 0.5) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"14.5\"\
    ) . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.4\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.4\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.4\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.4\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfhjuv4_a.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor < 0.5) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"14.5\"\
    ) . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.4\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.0\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.4\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.4\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.4\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_E\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf_8i_wol.php on line 48

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputqv6z5a.php:26\n\
    Stack trace:\n#0 /tmp/tmputqv6z5a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmputqv6z5a.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = $value -\
    \ $floor;\n  $diff_ceil = $ceil - $value;\n  if ($diff_floor < $diff_ceil) {\n\
    \    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rf5un7l.php:28\n\
    Stack trace:\n#0 /tmp/tmp6rf5un7l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6rf5un7l.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor >= $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\"\
    ;\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyo8qtfsa.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else {\n\
    \        return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\";\n\
    echo closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") .\
    \ \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1twu13ao.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\"\
    ;\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"14.9\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "14\n-15\n-14\n14\n-15\n15\n-14\n14\n-14\n14\n-15\n15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo1ibgxf_.php:38\nStack trace:\n#0 /tmp/tmpo1ibgxf_.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo1ibgxf_.php on line 38\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-14\n-15\n-14\n14\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpttexkyrn.php:34\nStack trace:\n#0 /tmp/tmpttexkyrn.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpttexkyrn.php on line 34\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdj4upm7.php:21\n\
    Stack trace:\n#0 /tmp/tmpmdj4upm7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmdj4upm7.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -15.0\") . \"\\n\";\necho closest_integer(\"-15.1\") . \"\\n\";\necho closest_integer(\"\
    -15.2\") . \"\\n\";\necho closest_integer(\"-15.3\") . \"\\n\";\necho closest_integer(\"\
    -15.4\") . \"\\n\";\necho closest_integer(\"-15.5\") . \"\\n\";\necho closest_integer(\"\
    -15.6\") . \"\\n\";\necho closest_integer(\"-15.7\") . \"\\n\";\necho closest_integer(\"\
    -15.8\") . \"\\n\";\necho closest_integer(\"-15.9\") . \"\\n\";\necho closest_integer(\"\
    -16.0\") . \"\\n\";\necho closest_integer(\"-16.1\") . \"\\n\";\necho closest_integer(\"\
    -16.2\") . \"\\n\";\necho closest_integer(\"-16.3\") . \"\\n\";\necho closest_integer(\"\
    -16.4\") . \"\\n\";\necho closest_integer(\"-16.5\") . \"\\n\";\necho closest_integer(\"\
    -16.6\") . \"\\n\";\necho closest_integer(\"-16.7\") . \"\\n\";\necho closest_integer\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplgn0rzep.php on line 49

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor > 0.5) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzuevcxjc.php:28\n\
    Stack trace:\n#0 /tmp/tmpzuevcxjc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzuevcxjc.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    if ($value > 0) {\n      return $ceil;\n    } else {\n      return\
    \ $floor;\n    }\n  } else {\n    return round($value);\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnftl_7i7.php:30\n\
    Stack trace:\n#0 /tmp/tmpnftl_7i7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnftl_7i7.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"-14.6\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9dkj2jam.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\n\
    echo closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"-14.6\") .\
    \ PHP_EOL;\necho closest_integer(\"-14.0\") . PHP_EOL;\necho closest_integer(\"\
    -14.1\") . PHP_EOL;\necho closest_integer(\"-14.2\") . PHP_EOL;\necho closest_integer(\"\
    -14.3\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.7\") . PHP_EOL;\necho closest_integer(\"-14.8\") . PHP_EOL;\necho closest_integer(\"\
    -14.9\") . PHP_EOL;\necho closest_integer(\"-14.10\") . PHP_EOL;\necho closest_integer(\"\
    -14.11\") . PHP_EOL;\necho closest_integer(\"-14.12\") . PHP_EOL;\necho closest_integer(\"\
    -14.13\") . PHP_EOL;\necho closest_integer(\"-14.14\") . PHP_EOL;\necho closest_integer(\"\
    -14.15\") . PHP_EOL;\necho closest_integer(\"-14.16\") . PHP_EOL;\necho closest_integer(\"\
    -14.17\") . PHP_EOL;\necho closest_integer(\"-14.18\") . PHP_EOL;\necho closest_integer(\"\
    -14.19\") . PHP_EOL;\necho closest_integer(\"-14.20\") . PHP_EOL;\necho closest_integer(\"\
    -14.21\") . PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n-15\n-14\n\
    -14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0trm8hd7.php:52\nStack trace:\n#0 /tmp/tmp0trm8hd7.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0trm8hd7.php on line 52\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kej5ohn.php:26\n\
    Stack trace:\n#0 /tmp/tmp4kej5ohn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4kej5ohn.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    if ($value < 0) {\n      return $floor;\n    } else {\n      return\
    \ $ceil;\n    }\n  } else {\n    return round($value);\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37orwy6j.php:30\n\
    Stack trace:\n#0 /tmp/tmp37orwy6j.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp37orwy6j.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    -14.0\") . PHP_EOL;\necho closest_integer(\"-14.1\") . PHP_EOL;\necho closest_integer(\"\
    -14.2\") . PHP_EOL;\necho closest_integer(\"-14.3\") . PHP_EOL;\necho closest_integer(\"\
    -14.4\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.7\") . PHP_EOL;\necho closest_integer(\"\
    -14.8\") . PHP_EOL;\necho closest_integer(\"-14.9\") . PHP_EOL;\necho closest_integer(\"\
    -15.0\") . PHP_EOL;\necho closest_integer(\"-15.1\") . PHP_EOL;\necho closest_integer(\"\
    -15.2\") . PHP_EOL;\necho closest_integer(\"-15.3\") . PHP_EOL;\necho closest_integer(\"\
    -15.4\") . PHP_EOL;\necho closest_integer(\"-15.5\") . PHP_EOL;\necho closest_integer(\"\
    -15.6\") . PHP_EOL;\necho closest_integer(\"-15.7\") . PHP_EOL;\necho closest_integer(\"\
    -15.8\") . PHP_EOL;\necho closest_integer(\"-15.9\") . PHP_EOL;\necho closest_integer(\"\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3bakvrh_.php on line 53

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppwus_dkf.php:35\nStack trace:\n#0 /tmp/tmppwus_dkf.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppwus_dkf.php on line 35\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    if ($value < 0) {\n      return $floor;\n    } else {\n      return\
    \ $ceil;\n    }\n  } else {\n    return round($value);\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n14\n-14\n15\n-15\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpn9i1zwn6.php:36\nStack trace:\n#0 /tmp/tmpn9i1zwn6.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpn9i1zwn6.php on line 36\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = floatval($value);\n\
    \  $num_int = intval($num);\n  $num_dec = $num - $num_int;\n  if ($num_dec >=\
    \ 0.5) {\n    return $num_int + 1;\n  } else {\n    return $num_int;\n  }\n}\n\
    echo closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoz33384r.php:30\n\
    Stack trace:\n#0 /tmp/tmpoz33384r.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoz33384r.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $ceil = ceil($value);\n    $floor = floor($value);\n\
    \    if ($ceil - $value < $value - $floor) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"14.5\");\necho \"\
    \\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.4\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "14\n-15\n-14\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n\
    -15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqqabn7io.php:81\nStack trace:\n\
    #0 /tmp/tmpqqabn7io.php(88): test()\n#1 {main}\n  thrown in /tmp/tmpqqabn7io.php\
    \ on line 81\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1m7lm8k.php:27\n\
    Stack trace:\n#0 /tmp/tmpo1m7lm8k.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpo1m7lm8k.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor >=\
    \ $ceil - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n\
    }\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4h4oub1e.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor >=\
    \ $ceil - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n\
    }\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcc4xcb0.php:30\n\
    Stack trace:\n#0 /tmp/tmpzcc4xcb0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzcc4xcb0.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $ceil = ceil($value);\n  $floor = floor($value);\n  if ($ceil - $value < $value\
    \ - $floor) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\n\
    echo closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"-14.6\") .\
    \ PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "14\n-15\n-14\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n\
    -15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsysqrdqx.php:52\nStack trace:\n#0 /tmp/tmpsysqrdqx.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsysqrdqx.php on line 52\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int = intval($value);\n\
    \  $dec = $value - $int;\n  if ($dec < 0.5) {\n    return $int;\n  } else {\n\
    \    return $int + 1;\n  }\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho\
    \ closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtm1yanj.php:29\n\
    Stack trace:\n#0 /tmp/tmpdtm1yanj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdtm1yanj.php\
    \ on line 29\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgkt7de6.php:27\n\
    Stack trace:\n#0 /tmp/tmpsgkt7de6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsgkt7de6.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpezfcum5o.php on line 50

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppg531fui.php:26\n\
    Stack trace:\n#0 /tmp/tmppg531fui.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppg531fui.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ $diff1 = abs($value - $floor);\n    $diff2 = abs($value - $ceil);\n    if ($diff1\
    \ < $diff2) {\n        return $floor;\n    } else {\n        return $ceil;\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6g7q86u.php:29\n\
    Stack trace:\n#0 /tmp/tmpc6g7q86u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpc6g7q86u.php\
    \ on line 29\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diffFloor = abs($value\
    \ - $floor);\n  $diffCeil = abs($value - $ceil);\n  if ($diffFloor == $diffCeil)\
    \ {\n    return $floor;\n  } elseif ($diffFloor < $diffCeil) {\n    return $floor;\n\
    \  } else {\n    return $ceil;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph10d60wp.php:30\n\
    Stack trace:\n#0 /tmp/tmph10d60wp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmph10d60wp.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $floor < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy9objx9.php:27\n\
    Stack trace:\n#0 /tmp/tmpcy9objx9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcy9objx9.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1m7lm8k.php:27\n\
    Stack trace:\n#0 /tmp/tmpo1m7lm8k.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpo1m7lm8k.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\n\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmpy0i3an.php on line 55

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor >=\
    \ 0.5) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbhxdhoy.php:26\n\
    Stack trace:\n#0 /tmp/tmpwbhxdhoy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwbhxdhoy.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72esk6_e.php:27\n\
    Stack trace:\n#0 /tmp/tmp72esk6_e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp72esk6_e.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = round($value);\n\
    \  if ($num > $value) {\n    $num -= 1;\n  }\n  return $num;\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"14.1\") . \"\\n\";\necho closest_integer(\"\
    14.2\") . \"\\n\";\necho closest_integer(\"14.3\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"14.7\") . \"\\n\";\necho closest_integer(\"\
    14.8\") . \"\\n\";\necho closest_integer(\"14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1plqqtdm.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenf_7q39.php:26\n\
    Stack trace:\n#0 /tmp/tmpenf_7q39.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpenf_7q39.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9pnwpa3q.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdj4upm7.php:21\n\
    Stack trace:\n#0 /tmp/tmpmdj4upm7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmdj4upm7.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = floatval($value);\n\
    \    $num_int = intval($num);\n    if ($num - $num_int >= 0.5) {\n        return\
    \ $num_int + 1;\n    } else {\n        return $num_int;\n    }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69hfmsg_.php:29\n\
    Stack trace:\n#0 /tmp/tmp69hfmsg_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp69hfmsg_.php\
    \ on line 29\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-15.0\") . \"\\n\";\necho closest_integer(\"\
    -15.1\") . \"\\n\";\necho closest_integer(\"-15.2\") . \"\\n\";\necho closest_integer(\"\
    -15.3\") . \"\\n\";\necho closest_integer(\"-15.4\") . \"\\n\";\necho closest_integer(\"\
    -15.5\") . \"\\n\";\necho closest_integer(\"-15.6\") . \"\\n\";\necho closest_integer(\"\
    -15.7\") . \"\\n\";\necho closest_integer(\"-15.8\") . \"\\n\";\necho closest_integer(\"\
    -15.9\") . \"\\n\";\necho closest_integer(\"-16.0\") . \"\\n\";\necho closest_integer(\"\
    -16.1\") . \"\\n\";\necho closest_integer(\"-16.2\") . \"\\n\";\necho closest_integer(\"\
    -16.3\") . \"\\n\";\necho closest_integer(\"-16.4\") . \"\\n\";\necho closest_integer(\"\
    -16\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnnosfq90.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor < 0.5) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsghrqn_o.php:28\n\
    Stack trace:\n#0 /tmp/tmpsghrqn_o.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsghrqn_o.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diffFloor = abs($value\
    \ - $floor);\n  $diffCeil = abs($value - $ceil);\n  if ($diffFloor == $diffCeil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diffFloor < $diffCeil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    14.1\") . \"\\n\";\necho closest_integer(\"14.\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplihk67xn.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvqu931p.php:28\n\
    Stack trace:\n#0 /tmp/tmpqvqu931p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqvqu931p.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value < 0 ? $floor : $ceil;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3y6ic6yj.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk01dad_n.php:28\n\
    Stack trace:\n#0 /tmp/tmpk01dad_n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk01dad_n.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($floor == $ceil) {\n        return $floor;\n    }\n    if ($value - $floor\
    \ < $ceil - $value) {\n        return $floor;\n    }\n    return $ceil;\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"-14.6\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmeu_l9s4.php on line 57

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } elseif ($diff_floor > $diff_ceil) {\n    return $ceil;\n\
    \  } else {\n    return $value < 0 ? $floor : $ceil;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwcbjl_mp.php:30\n\
    Stack trace:\n#0 /tmp/tmpwcbjl_mp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwcbjl_mp.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpz5bd1sq9.php on line 57

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  if ($value >= 0) {\n    return ceil($value);\n  } else {\n    return floor($value);\n\
    \  }\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppevkn0j6.php on line 51

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor >=\
    \ 0.5) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.3\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n14\n-14\n14\n-14\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmplyl5p2fn.php:32\nStack trace:\n#0 /tmp/tmplyl5p2fn.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmplyl5p2fn.php on line 32\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor > 0.5) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\necho closest_integer(\"14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ebjuf72.php:30\n\
    Stack trace:\n#0 /tmp/tmp9ebjuf72.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9ebjuf72.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"-14.6\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpprst218l.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer(\"\
    -14.8\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.7\") . \"\\n\";\necho closest_integer\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfh6oxiqn.php on line 49

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $floor_diff = abs($value\
    \ - $floor);\n  $ceil_diff = abs($value - $ceil);\n  if ($floor_diff == $ceil_diff)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $floor_diff < $ceil_diff\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"14\") . \"\\n\";\necho closest_integer(\"\
    -14\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n14\n-14\n15\n-15\n14\n-14\n14\n-14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjzg9_clt.php:37\nStack trace:\n#0 /tmp/tmpjzg9_clt.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjzg9_clt.php on line 37\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenf_7q39.php:26\n\
    Stack trace:\n#0 /tmp/tmpenf_7q39.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpenf_7q39.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgkt7de6.php:27\n\
    Stack trace:\n#0 /tmp/tmpsgkt7de6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsgkt7de6.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.10\") . \"\\n\";\necho closest_integer(\"\
    -14.11\") . \"\\n\";\necho closest_integer(\"-14.12\") . \"\\n\";\necho closest_integer(\"\
    -14.13\") . \"\\n\";\necho closest_integer(\"-14.14\") . \"\\n\";\necho closest_integer(\"\
    -14.15\") . \"\\n\";\necho closest_integer(\"-14.16\") . \"\\n\";\necho closest_integer(\"\
    -14.17\") . \"\\n\";\necho closest_integer(\"-14.18\") . \"\\n\";\necho closest_integer(\"\
    -14.19\") . \"\\n\";\necho closest_integer(\"-14.20\") . \"\\n\";\necho closest_integer(\"\
    -14.21\") . \"\\n\";\necho closest_integer(\"\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj9unsgqc.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgkt7de6.php:27\n\
    Stack trace:\n#0 /tmp/tmpsgkt7de6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsgkt7de6.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $int = intval($value);\n\
    \  $decimal = $value - $int;\n  if ($decimal >= 0.5) {\n    return $int + 1;\n\
    \  } else {\n    return $int;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2bz4asr.php:28\n\
    Stack trace:\n#0 /tmp/tmpb2bz4asr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb2bz4asr.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor >= 0.5) {\n        return $ceil;\n    } else {\n    \
    \    return $floor;\n    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlgwdjke.php:26\n\
    Stack trace:\n#0 /tmp/tmprlgwdjke.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprlgwdjke.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\necho closest_integer(\"14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkv0ml5k.php:23\n\
    Stack trace:\n#0 /tmp/tmpmkv0ml5k.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmkv0ml5k.php\
    \ on line 23\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\"\
    ;\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.6\"\
    ) . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb31ilepa.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon323ght.php:26\n\
    Stack trace:\n#0 /tmp/tmpon323ght.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpon323ght.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = (int)$value;\n\
    \  $dec = $value - $num;\n  if ($dec >= 0.5) {\n    return $num + 1;\n  } else\
    \ {\n    return $num;\n  }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80nw9xz1.php:27\n\
    Stack trace:\n#0 /tmp/tmp80nw9xz1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp80nw9xz1.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor < $diff_ceil) {\n        return $floor;\n    } else {\n \
    \       return $ceil;\n    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pjh7g6g.php:28\n\
    Stack trace:\n#0 /tmp/tmp9pjh7g6g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9pjh7g6g.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp00n7rgud.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"\
    14.5\") . \"\\n\"; // 15\necho closest_integer(\"-14.5\") . \"\\n\"; // -15\n\
    echo closest_integer(\"-14.6\") . \"\\n\"; // -15\necho closest_integer(\"-14.4\"\
    ) . \"\\n\"; // -14\necho closest_integer(\"-14.0\") . \"\\n\"; // -14\necho closest_integer(\"\
    -14.1\") . \"\\n\"; // -14\necho closest_integer(\"-14.2\") . \"\\n\"; // -14\n\
    echo closest_integer(\"-14.3\") . \"\\n\"; // -14\necho closest_integer(\"-14.4\"\
    ) . \"\\n\"; // -14\necho closest_integer(\"-14.5\") . \"\\n\"; // -15\necho closest_integer(\"\
    -14.6\") . \"\\n\"; // -15\necho closest_integer(\"-14.7\") . \"\\n\"; // -15\n\
    echo closest_integer(\"-14.8\") . \"\\n\"; // -15\necho closest_integer(\"-14.9\"\
    ) . \"\\n\"; // -15\necho closest_integer(\"-15.0\") . \"\\n\"; // -15\necho closest_integer(\"\
    -15.1\") . \"\\n\"; // -15\necho closest_integer(\"-15.2\") . \"\\n\"; // -15\n\
    echo closest_integer(\"-15.3\") . \"\\n\"; // -15\necho closest_integer(\"-15.4\"\
    ) . \"\\n\"; // -15\necho closest_integer(\"-15.5\") . \"\\n\"; // -16\necho closest_integer(\"\
    -15.6\") . \"\\n\"; // -16\necho closest_integer(\"-15.7\") . \"\\n\"; // -16\n\
    echo closest_integer(\"-15.8\") . \"\\n\"; // -16\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n-15\n-15\n\
    -15\n-15\n-15\n-15\n-15\n-16\n-16\n-16\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp977dav6y.php:52\nStack trace:\n#0 /tmp/tmp977dav6y.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp977dav6y.php on line 52\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  if ($value < 0) {\n    $value = ceil($value);\n  } else {\n    $value = floor($value);\n\
    \  }\n  return $value;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjvtvafg.php:25\n\
    Stack trace:\n#0 /tmp/tmpyjvtvafg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyjvtvafg.php\
    \ on line 25\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfndtpxac.php:28\n\
    Stack trace:\n#0 /tmp/tmpfndtpxac.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfndtpxac.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ $ceil - $value) {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $value\
    \ - $floor < $ceil - $value ? $floor : $ceil;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_t6ck_7.php:25\n\
    Stack trace:\n#0 /tmp/tmpa_t6ck_7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpa_t6ck_7.php\
    \ on line 25\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\"\
    ;\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcl6dt3mi.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $value = round($value);\n    return $value;\n}\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.4\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.0\") . PHP_EOL;\necho closest_integer(\"-14.1\") . PHP_EOL;\necho closest_integer(\"\
    -14.9\") . PHP_EOL;\necho closest_integer(\"-14.01\") . PHP_EOL;\necho closest_integer(\"\
    -14.99\") . PHP_EOL;\necho closest_integer(\"-14.001\") . PHP_EOL;\necho closest_integer(\"\
    -14.999\") . PHP_EOL;\necho closest_integer(\"-14.0001\") . PHP_EOL;\necho closest_integer(\"\
    -14.9999\") . PHP_EOL;\necho closest_integer(\"-14.00001\") . PHP_EOL;\necho closest_integer(\"\
    -14.99999\") . PHP_EOL;\necho closest_integer(\"-14.000001\") . PHP_EOL;\necho\
    \ closest_integer(\"-14.999999\") . PHP_EOL;\necho closest_integer(\"-14.0000001\"\
    ) . PHP_EOL;\necho closest_integer(\"-14.9999999\") . PHP_EOL;\necho closest_integer(\"\
    -14.00000001\") . PHP_EOL;\necho closest_integer(\"-14.99999999\") . PHP_EOL;\n\
    echo closest_integer(\"-14.000000001\") . PHP_EOL;\necho closest_integer(\"-14.999999999\"\
    ) . PHP_EOL;\necho closest_integer(\"-14.0000000001\") . PHP_EOL;\necho closest_integer(\"\
    -14.9999999999\") . PHP_EOL;\necho closest_integer(\"-14.00000000001\") . PHP_EOL;\n\
    echo closest_integer(\"-14.99999999999\") . PHP_EOL;\necho closest_integer(\"\
    -14.\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppk4lqp3x.php on line 49

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1m7lm8k.php:27\n\
    Stack trace:\n#0 /tmp/tmpo1m7lm8k.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpo1m7lm8k.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfesv6ix2.php:26\n\
    Stack trace:\n#0 /tmp/tmpfesv6ix2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfesv6ix2.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $floor_diff = abs($value\
    \ - $floor);\n  $ceil_diff = abs($value - $ceil);\n  if ($floor_diff == $ceil_diff)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $floor_diff < $ceil_diff\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxpknjxw6.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kej5ohn.php:26\n\
    Stack trace:\n#0 /tmp/tmp4kej5ohn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4kej5ohn.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diffFloor = abs($value\
    \ - $floor);\n  $diffCeil = abs($value - $ceil);\n  if ($diffFloor == $diffCeil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diffFloor < $diffCeil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplj6wr_2p.php:27\n\
    Stack trace:\n#0 /tmp/tmplj6wr_2p.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplj6wr_2p.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor >=\
    \ 0.5) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbhxdhoy.php:26\n\
    Stack trace:\n#0 /tmp/tmpwbhxdhoy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwbhxdhoy.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n14\n-14\n15\n-15\n14\n-14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzoghcep8.php:35\nStack trace:\n#0 /tmp/tmpzoghcep8.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzoghcep8.php on line 35\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor > $ceil\
    \ - $value) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon323ght.php:26\n\
    Stack trace:\n#0 /tmp/tmpon323ght.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpon323ght.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_ue9_m0.php:28\n\
    Stack trace:\n#0 /tmp/tmps_ue9_m0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps_ue9_m0.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if (abs($value - $floor)\
    \ < abs($value - $ceil)) {\n    return $floor;\n  } else {\n    return $ceil;\n\
    \  }\n}\necho closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\"\
    ) . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    -14.6\") . PHP_EOL;\necho closest_integer(\"-14.0\") . PHP_EOL;\necho closest_integer(\"\
    -14.1\") . PHP_EOL;\necho closest_integer(\"-14.2\") . PHP_EOL;\necho closest_integer(\"\
    -14.3\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.7\") . PHP_EOL;\necho closest_integer(\"-14.8\") . PHP_EOL;\necho closest_integer(\"\
    -14.9\") . PHP_EOL;\necho closest_integer(\"-14.10\") . PHP_EOL;\necho closest_integer(\"\
    -14.11\") . PHP_EOL;\necho closest_integer(\"-14.12\") . PHP_EOL;\necho closest_integer(\"\
    -14.13\") . PHP_EOL;\necho closest_integer(\"-14.14\") . PHP_EOL;\necho closest_integer(\"\
    -14.15\") . PHP_EOL;\necho closest_integer(\"-14.16\") . PHP_EOL;\necho closest_integer(\"\
    -14.17\") . PHP_EOL;\necho closest_integer(\"-14.18\") . PHP_EOL;\necho closest_integer(\"\
    -14.19\") . PHP_EOL;\necho closest_integer(\"-14.20\") . PHP_EOL;\necho closest_integer(\"\
    -14.21\") . PHP\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkvlql08s.php on line 47

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\")\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvn2w7epm.php:21\n\
    Stack trace:\n#0 /tmp/tmpvn2w7epm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvn2w7epm.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor < $ceil - $value) {\n        return $floor;\n    } else\
    \ {\n        return $ceil;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\"\
    ;\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"14.6\")\
    \ . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp4e1gt8t.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.2\") . \"\\n\";\necho closest_integer(\"\
    -14.3\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.8\") . \"\\n\";\necho closest_integer(\"\
    -14.9\") . \"\\n\";\necho closest_integer(\"-14.10\") . \"\\n\";\necho closest_integer(\"\
    -14.11\") . \"\\n\";\necho closest_integer(\"-14.12\") . \"\\n\";\necho closest_integer(\"\
    -14.13\") . \"\\n\";\necho closest_integer(\"-14.14\") . \"\\n\";\necho closest_integer(\"\
    -14.15\") . \"\\n\";\necho closest_integer(\"-14.16\") . \"\\n\";\necho closest_integer(\"\
    -14.17\") . \"\\n\";\necho closest_integer(\"-14.18\") . \"\\n\";\necho closest_integer(\"\
    -14.19\") . \"\\n\";\necho closest_integer(\"-14.20\") . \"\\n\";\necho closest_integer(\"\
    -14.21\") . \"\\n\";\necho closest_integer(\"-\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7fqrgasg.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgkt7de6.php:27\n\
    Stack trace:\n#0 /tmp/tmpsgkt7de6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsgkt7de6.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72esk6_e.php:27\n\
    Stack trace:\n#0 /tmp/tmp72esk6_e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp72esk6_e.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor < 0.5) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rqxyeam.php:28\n\
    Stack trace:\n#0 /tmp/tmp9rqxyeam.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9rqxyeam.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    if ($value < 0) {\n      return $floor;\n    } else {\n      return\
    \ $ceil;\n    }\n  } else {\n    return round($value);\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37orwy6j.php:30\n\
    Stack trace:\n#0 /tmp/tmp37orwy6j.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp37orwy6j.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor >= 0.5) {\n        return $ceil;\n    } else {\n    \
    \    return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho\
    \ closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\\
    n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"-14.0\"\
    ) . \"\\n\";\necho closest_integer(\"14.0\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpabcuso6q.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"-14.6\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjr8sawos.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $integer = (int)$value;\n    $decimal = $value - $integer;\n\
    \    if ($decimal >= 0.5) {\n        return $integer + 1;\n    } else {\n    \
    \    return $integer;\n    }\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpibc1mmn_.php:28\n\
    Stack trace:\n#0 /tmp/tmpibc1mmn_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpibc1mmn_.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value > 0 ? $ceil : $floor;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.0\") . \"\\n\";\necho closest_integer(\"-14.1\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n-14\n-15\n-14\n-14\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpd87dp6gc.php:33\nStack trace:\n#0 /tmp/tmpd87dp6gc.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpd87dp6gc.php on line 33\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ $ceil - $value) {\n    return $value > 0 ? $ceil : $floor;\n  }\n  return $value\
    \ - $floor < $ceil - $value ? $floor : $ceil;\n}\necho closest_integer(\"14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.2\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.3\") . \"\\n\";\necho closest_integer(\"\
    -14.7\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"14.1\") . \"\\n\";\necho closest_integer(\"\
    14.2\") . \"\\n\";\necho closest_integer(\"14.3\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    14.7\") . \"\\n\";\necho closest_integer(\"14.8\") . \"\\n\";\necho closest_integer(\"\
    14.9\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n-15\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n14\n14\n14\n14\n14\n15\n\
    15\n15\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4s49jx9i.php:44\n\
    Stack trace:\n#0 /tmp/tmp4s49jx9i.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4s49jx9i.php\
    \ on line 44\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    if ($value - $floor > $ceil - $value) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"14.5\") . \"\\n\"\
    ;\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"-14.4\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcl6dt3mi.php on line 56

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\n\
    echo closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"-14.6\") .\
    \ PHP_EOL;\necho closest_integer(\"-14.0\") . PHP_EOL;\necho closest_integer(\"\
    -14.1\") . PHP_EOL;\necho closest_integer(\"-14.2\") . PHP_EOL;\necho closest_integer(\"\
    -14.3\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.7\") . PHP_EOL;\necho closest_integer(\"-14.8\") . PHP_EOL;\necho closest_integer(\"\
    -14.9\") . PHP_EOL;\necho closest_integer(\"-14.10\") . PHP_EOL;\necho closest_integer(\"\
    -14.11\") . PHP_EOL;\necho closest_integer(\"-14.12\") . PHP_EOL;\necho closest_integer(\"\
    -14.13\") . PHP_EOL;\necho closest_integer(\"-14.14\") . PHP_EOL;\necho closest_integer(\"\
    -14.15\") . PHP_EOL;\necho closest_integer(\"-14.16\") . PHP_EOL;\necho closest_integer(\"\
    -14.17\") . PHP_EOL;\necho closest_integer(\"-14.18\") . PHP_EOL;\necho closest_integer(\"\
    -14.19\") . PHP_EOL;\necho closest_integer(\"-14.20\") . PHP_EOL;\necho closest_integer(\"\
    -14.21\") . PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n-15\n-14\n\
    -14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0trm8hd7.php:52\nStack trace:\n#0 /tmp/tmp0trm8hd7.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0trm8hd7.php on line 52\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\necho\
    \ closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\\
    n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"-14.6\"\
    ) . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-14\n-15\n-14\n-14\n-15\n-14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9a8q1xc5.php:34\nStack trace:\n#0 /tmp/tmp9a8q1xc5.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9a8q1xc5.php on line 34\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n\t$value = round($value);\n\
    \treturn $value;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsjkiout.php:22\n\
    Stack trace:\n#0 /tmp/tmprsjkiout.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprsjkiout.php\
    \ on line 22\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4714h37b.php:19\n\
    Stack trace:\n#0 /tmp/tmp4714h37b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4714h37b.php\
    \ on line 19\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor < $ceil\
    \ - $value) {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kej5ohn.php:26\n\
    Stack trace:\n#0 /tmp/tmp4kej5ohn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4kej5ohn.php\
    \ on line 26\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if($value - $floor == 0.5)\
    \ {\n    if($value > 0) {\n      return $ceil;\n    } else {\n      return $floor;\n\
    \    }\n  } else {\n    return round($value);\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5ndgqgo.php:30\n\
    Stack trace:\n#0 /tmp/tmpd5ndgqgo.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpd5ndgqgo.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = floatval($value);\n\
    \    $num = round($num);\n    return $num;\n}\necho closest_integer(\"14.5\")\
    \ . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    14.0\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n14\n-14\n15\n-15\n14\n-14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmps4rsv0n4.php:29\nStack trace:\n#0 /tmp/tmps4rsv0n4.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmps4rsv0n4.php on line 29\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $num = floatval($value);\n\
    \    $ceil = ceil($num);\n    $floor = floor($num);\n    if ($ceil - $num == 0.5)\
    \ {\n        return $ceil;\n    } elseif ($num - $floor == 0.5) {\n        return\
    \ $floor;\n    } elseif ($ceil - $num < 0.5) {\n        return $ceil;\n    } else\
    \ {\n        return $floor;\n    }\n}\necho closest_integer(\"14.5\") . PHP_EOL;\n\
    echo closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"-14.4\") .\
    \ PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    14.4\") . PHP_EOL;\necho closest_integer(\"14.6\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg7u1ctu7.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $num = floatval($value);\n\
    \  $num_floor = floor($num);\n  $num_ceil = ceil($num);\n  $num_floor_diff = abs($num\
    \ - $num_floor);\n  $num_ceil_diff = abs($num - $num_ceil);\n  if ($num_floor_diff\
    \ < $num_ceil_diff) {\n    return $num_floor;\n  } else {\n    return $num_ceil;\n\
    \  }\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9tqp5qk.php:30\n\
    Stack trace:\n#0 /tmp/tmpq9tqp5qk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq9tqp5qk.php\
    \ on line 30\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n\
    \    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n\
    \    if ($diff_floor == $diff_ceil) {\n        return $value > 0 ? $ceil : $floor;\n\
    \    }\n    return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdumg2bxe.php:27\n\
    Stack trace:\n#0 /tmp/tmpdumg2bxe.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdumg2bxe.php\
    \ on line 27\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $decimal = $value - floor($value);\n  if ($decimal >= 0.5) {\n    return ceil($value);\n\
    \  } else {\n    return floor($value);\n  }\n}\necho closest_integer(\"14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.49\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7f21wk4p.php:28\n\
    Stack trace:\n#0 /tmp/tmp7f21wk4p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7f21wk4p.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  if ($value - $floor ==\
    \ 0.5) {\n    return $floor;\n  } elseif ($value - $floor > 0.5) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\necho closest_integer(\"14.5\"\
    ) . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.4\") . PHP_EOL;\necho closest_integer(\"-14.4\") . PHP_EOL;\necho closest_integer(\"\
    14.6\") . PHP_EOL;\necho closest_integer(\"-14.6\") . PHP_EOL;\necho closest_integer(\"\
    14.0\") . PHP_EOL;\necho closest_integer(\"-14.0\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk8375ten.php on line 54

    '
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $ceil = ceil($value);\n  $floor = floor($value);\n  if ($ceil - $value == $value\
    \ - $floor) {\n    return $ceil;\n  } elseif ($ceil - $value > $value - $floor)\
    \ {\n    return $floor;\n  } else {\n    return $ceil;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdv_pv_yn.php:28\n\
    Stack trace:\n#0 /tmp/tmpdv_pv_yn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdv_pv_yn.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ (float)$value;\n    $floor = floor($value);\n    $ceil = ceil($value);\n   \
    \ if ($value - $floor == 0.5) {\n        if ($value > 0) {\n            return\
    \ $ceil;\n        } else {\n            return $floor;\n        }\n    } else\
    \ {\n        return round($value);\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuu7v594e.php:31\n\
    Stack trace:\n#0 /tmp/tmpuu7v594e.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuu7v594e.php\
    \ on line 31\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $int = intval($value);\n  $dec = $value - $int;\n  if ($dec >= 0.5) {\n   \
    \ return $int + 1;\n  } else {\n    return $int;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivihwfm_.php:28\n\
    Stack trace:\n#0 /tmp/tmpivihwfm_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpivihwfm_.php\
    \ on line 28\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = (float)$value;\n\
    \  $value = round($value);\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgboh5woc.php:21\n\
    Stack trace:\n#0 /tmp/tmpgboh5woc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgboh5woc.php\
    \ on line 21\n"
  timestamp: 1659730981
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $floor = floor($value);\n  $ceil = ceil($value);\n  $diff_floor = abs($value\
    \ - $floor);\n  $diff_ceil = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil)\
    \ {\n    return $value < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil\
    \ ? $floor : $ceil;\n}\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.0\") . \"\\n\";\necho closest_integer(\"\
    -14.1\") . \"\\n\";\necho closest_integer(\"-14.9\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-15\n-14\n-15\n-14\n-14\n-15\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp4f1271qo.php:34\nStack trace:\n#0 /tmp/tmp4f1271qo.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4f1271qo.php on line 34\n"
  timestamp: 1659730981
