name: HumanEval_100_make_a_pile
language: php
prompt: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n// The first level has n stones.\n// The number of stones in the next\
  \ level is:\n// - the next odd number if n is odd.\n// - the next even number if\
  \ n is even.\n// Return the number of stones in each level in a list, where element\
  \ at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n\
  function make_a_pile($n) {\n"
tests: "function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12, 14,\
  \ 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(8,\
  \ 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  $result = [$n];\n  while ($n > 1) {\n    $n = ($n % 2 == 0) ? $n\
    \ / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nprint_r(make_a_pile(1));\n\
    print_r(make_a_pile(2));\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\n\
    print_r(make_a_pile(5));\nprint_r(make_a_pile(6));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(8));\nprint_r(make_a_pile(9));\nprint_r(make_a_pile(10));\n\
    print_r(make_a_pile(11));\nprint_r(make_a_pile(12));\nprint_r(make_a_pile(13));\n\
    print_r(make_a_pile(14));\nprint_r(make_a_pile(15));\nprint_r(make_a_pile(16));\n\
    print_r(make_a_pile(17));\nprint_r(make_a_pile(18));\nprint_r(make_a_pile(19));\n\
    print_r(make_a_pile(20));\nprint_r(make_a_pile(21));\nprint_r(make_a_pile(22));\n\
    print_r(make_a_pile(23));\nprint_r(make_a_pile(24));\nprint_r(make_a_pile(25));\n\
    print_r(make_a_pile(26));\nprint_r(make_a_pile(27));\nprint_r(make_a_pile(28));\n\
    print_r(make_a_pile(29));\nprint_r(make_a_pile(30));\nprint_r(make_a_pile(31));\n\
    print_r(make_a_pile(32", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $result[] = $n;\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n\
    \        } else {\n            $n = ($n + 1) / 2;\n        }\n    }\n    return\
    \ $result;\n}\n", "  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n  \
    \  if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) /\
    \ 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n", "  $result = [];\n\
    \  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n    $result[] = $n;\n \
    \ }\n  return $result;\n}\n", "    $result = [];\n    $result[] = $n;\n    $i\
    \ = 1;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n\
    \ / 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "  $result = [];\n  $result[] = $n;\n\
    \  while ($n > 1) {\n    if ($n % 2 === 0) {\n      $n = $n / 2;\n    } else {\n\
    \      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\n$tests = [\n  [\n    'input' => 1,\n    'expected' => [1],\n  ],\n  [\n \
    \   'input' => 2,\n    'expected' => [2, 1],\n  ],\n  [\n    'input' => 3,\n \
    \   'expected' => [3, 2, 1],\n  ],\n  [\n    'input' => 4,\n    'expected' =>\
    \ [4, 2, 1],\n  ],\n  [\n    'input' => 5,\n    'expected' => [5, 3, 2, 1],\n\
    \  ],\n  [\n    'input' => 6,\n    'expected' => [6, 3, 2, 1],\n  ],\n  [\n  \
    \  'input' => 7,\n    'expected' => [7, 4, 2, 1],\n  ],\n  [\n    'input' => 8,\n\
    \    'expected' => [8, 4, 2, 1],\n  ],\n  [\n    'input' => 9,\n    'expected'\
    \ => [9, 5, 3, 2, 1],\n  ],\n  [\n    'input' => 10,\n    'expected' => [10, 5,\
    \ 3, 2, 1],\n  ],\n  [\n    'input' => 11,\n    'expected' => [11, 6, 3, 2, 1],\n\
    \  ],\n  [\n    'input' => 12,\n    'expected' => [12, 6, 3, 2, 1],\n  ],\n  [\n\
    \    'input' => 13,\n    'expected' => [13, 7, 4, 2, 1],\n  ],\n  [\n    'input'\
    \ => 14,\n    'expected' => [14, 7, 4, 2, 1],\n  ],\n  [\n    'input' => 15,\n\
    \    'expected'", "  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n  \
    \  if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) /\
    \ 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\necho make_a_pile(1)\
    \ . PHP_EOL;\necho make_a_pile(2) . PHP_EOL;\necho make_a_pile(3) . PHP_EOL;\n\
    echo make_a_pile(4) . PHP_EOL;\necho make_a_pile(5) . PHP_EOL;\necho make_a_pile(6)\
    \ . PHP_EOL;\necho make_a_pile(7) . PHP_EOL;\necho make_a_pile(8) . PHP_EOL;\n\
    echo make_a_pile(9) . PHP_EOL;\necho make_a_pile(10) . PHP_EOL;\necho make_a_pile(11)\
    \ . PHP_EOL;\necho make_a_pile(12) . PHP_EOL;\necho make_a_pile(13) . PHP_EOL;\n\
    echo make_a_pile(14) . PHP_EOL;\necho make_a_pile(15) . PHP_EOL;\necho make_a_pile(16)\
    \ . PHP_EOL;\necho make_a_pile(17) . PHP_EOL;\necho make_a_pile(18) . PHP_EOL;\n\
    echo make_a_pile(19) . PHP_EOL;\necho make_a_pile(20) . PHP_EOL;\necho make_a_pile(21)\
    \ . PHP_EOL;\necho make_a_pile(22) . PHP_EOL;\necho make_a_pile(23) . PHP_EOL;\n\
    echo make_a_pile(24) . PHP_EOL;\necho make_a_pile(25) . PHP_EOL;", "    $arr =\
    \ [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n           \
    \ $arr[] = $n;\n        } else {\n            if ($arr[$i - 1] % 2 == 0) {\n \
    \               $arr[] = $arr[$i - 1] - 1;\n            } else {\n           \
    \     $arr[] = $arr[$i - 1] - 2;\n            }\n        }\n    }\n    return\
    \ $arr;\n}", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n \
    \       if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n     \
    \       $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n   \
    \ return $result;\n}", "    $result = [];\n    $result[] = $n;\n    while ($n\
    \ > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else\
    \ {\n            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    $result[] = $n;\n    while\
    \ ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        }\
    \ else {\n            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    while ($n > 0) {\n\
    \        $result[] = $n;\n        $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    $result[] = $n;\n \
    \   while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n \
    \       } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "    $result = [];\n    $result[] =\
    \ $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n /\
    \ 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $result[] = $n;\n        if ($n % 2 == 0) {\n    \
    \        $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n    \
    \    }\n    }\n    return $result;\n}\n\necho implode(', ', make_a_pile(1)) .\
    \ \"\\n\";\necho implode(', ', make_a_pile(2)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ', make_a_pile(6))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(7)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(8)) . \"\\n\";\necho implode(', ', make_a_pile(9)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(10)) . \"\\n\";\necho implode(', ', make_a_pile(11))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(12)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(13)) . \"\\n\";\necho implode(', ', make_a_pile(14)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(15)) . \"\\n\";\necho implode(', ', make_a_pile(16))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(17)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(18)) . \"\\n\";\necho implode(', ', make_a_pile(19)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(20)) . \"\\n\";\necho implode(', ', make_a_pile(21))\
    \ . \"\\n\";\necho implode(", "    $result = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $n;\n        if ($n % 2 === 0) {\n            $n++;\n\
    \        } else {\n            $n += 2;\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 === 0 ?\
    \ $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nvar_dump(make_a_pile(1)); // [1]\nvar_dump(make_a_pile(2)); // [2, 1]\nvar_dump(make_a_pile(3));\
    \ // [3, 2, 1]\nvar_dump(make_a_pile(4)); // [4, 2, 1]\nvar_dump(make_a_pile(5));\
    \ // [5, 3, 2, 1]\nvar_dump(make_a_pile(6)); // [6, 3, 2, 1]\nvar_dump(make_a_pile(7));\
    \ // [7, 4, 2, 1]\nvar_dump(make_a_pile(8)); // [8, 4, 2, 1]\nvar_dump(make_a_pile(9));\
    \ // [9, 5, 3, 2, 1]\nvar_dump(make_a_pile(10)); // [10, 5, 3, 2, 1]\nvar_dump(make_a_pile(11));\
    \ // [11, 6, 3, 2, 1]\nvar_dump(make_a_pile(12)); // [12, 6, 3, 2, 1]\nvar_dump(make_a_pile(13));\
    \ // [13, 7, 4, 2, 1]\nvar_dump(make_a_pile(14)); // [14, 7, 4, 2, 1]\nvar_dump(make_a_pile(15));\
    \ // [15, 8, 4, 2, 1]\nvar_dump(make_a_pile(16)); // [16, 8, 4, 2, 1]\nvar_dump(make_a_pile(17));\
    \ // [17, 9, 5, 3, 2, 1]\nvar_dump(make_a_pile(18)); // [18, 9, 5, 3, 2, 1]\n\
    var_dump(make", "  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[]\
    \ = $n;\n    if ($n % 2 == 0) {\n      $n += 2;\n    } else {\n      $n += 1;\n\
    \    }\n  }\n  return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 :\
    \ $n + 1;\n    }\n    return $result;\n}\n", "  $result = [];\n  $result[] = $n;\n\
    \  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n\
    \      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n", "    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n    \
    \    $n = ($n % 2 == 0) ? $n - 1 : $n - 2;\n    }\n    return $result;\n}\n",
  "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n %\
    \ 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\n$tests = [\n    [\n        \"input\" => 1,\n        \"expected\" => [1]\n\
    \    ],\n    [\n        \"input\" => 2,\n        \"expected\" => [2, 1]\n    ],\n\
    \    [\n        \"input\" => 3,\n        \"expected\" => [3, 2, 1]\n    ],\n \
    \   [\n        \"input\" => 4,\n        \"expected\" => [4, 2, 1]\n    ],\n  \
    \  [\n        \"input\" => 5,\n        \"expected\" => [5, 3, 2, 1]\n    ],\n\
    \    [\n        \"input\" => 6,\n        \"expected\" => [6, 3, 2, 1]\n    ],\n\
    \    [\n        \"input\" => 7,\n        \"expected\" => [7, 4, 2, 1]\n    ],\n\
    \    [\n        \"input\" => 8,\n        \"expected\" => [8, 4, 2, 1]\n    ],\n\
    \    [\n        \"input\" => 9,\n        \"expected\" => [9, 5, 3, 2, 1]\n   \
    \ ],\n    [\n        \"input\" => 10,\n        \"expected\" => [10, 5, 3, 2, 1]\n\
    \    ],\n    [\n        \"input\" => 11,\n        \"expected\" => [11, 6, 3, 2,\
    \ 1]\n    ],\n    [\n        \"input\" => 12,\n        \"expected\" => [12, 6,\
    \ 3, 2, 1]\n    ],\n    [\n        \"input\" => 13,\n        \"expected\" => [13,\
    \ 7, 4, 2, 1]\n    ],\n    [\n        \"input\" => 14,\n        \"expected\" =>\
    \ [14, 7, 4, 2, 1]\n    ],\n    [\n        \"input\" => 15,\n        \"expected\"",
  "    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n =\
    \ $n % 2 === 0 ? $n / 2 : ($n + 1) / 2;\n    }\n    return $result;\n}\n", " \
    \   $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n %\
    \ 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2\
    \ == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n", "    $result = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0\
    \ ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n", "    $result = [];\n \
    \   while ($n > 0) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n /\
    \ 2 : ($n + 1) / 2;\n    }\n    return $result;\n}\n", "    $result = [];\n  \
    \  $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result =\
    \ [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n = $n % 2 ? $n\
    \ + 2 : $n + 1;\n    }\n    return $result;\n}\n", "  $result = [$n];\n  while\
    \ ($n > 1) {\n    $n = $n % 2 === 0 ? $n / 2 : ($n + 1) / 2;\n    $result[] =\
    \ $n;\n  }\n  return $result;\n}\n\nprint_r(make_a_pile(1));\nprint_r(make_a_pile(2));\n\
    print_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(6));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(11));\n\
    print_r(make_a_pile(12));\nprint_r(make_a_pile(13));\nprint_r(make_a_pile(14));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(16));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile(32));",
  "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n\
    \            $result[] = $n;\n        } else {\n            $result[] = $result[$i\
    \ - 1] + ($result[$i - 1] % 2 == 0 ? 2 : 1);\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n\
    \    if ($n % 2 == 0) {\n      $n++;\n    } else {\n      $n += 2;\n    }\n  }\n\
    \  return $result;\n}\n\nprint_r(make_a_pile(1)); // [1]\nprint_r(make_a_pile(2));\
    \ // [2, 3]\nprint_r(make_a_pile(3)); // [3, 5, 7]\nprint_r(make_a_pile(4)); //\
    \ [4, 6, 9, 11]\nprint_r(make_a_pile(5)); // [5, 7, 11, 13, 17]\nprint_r(make_a_pile(6));\
    \ // [6, 8, 12, 15, 19, 22]\nprint_r(make_a_pile(7)); // [7, 9, 13, 17, 21, 25,\
    \ 29]\nprint_r(make_a_pile(8)); // [8, 10, 14, 18, 23, 27, 31, 35]\nprint_r(make_a_pile(9));\
    \ // [9, 11, 15, 20, 25, 30, 35, 40, 45]\nprint_r(make_a_pile(10)); // [10, 12,\
    \ 16, 21, 27, 32, 38, 43, 49, 54]\nprint_r(make_a_pile(11)); // [11, 13, 17, 23,\
    \ 29, 35, 41, 47, 53, 59, 65]\nprint_r(make_a_pile(12)); // [12, 14, 18, 24, 31,\
    \ 37, 44, 50, 57, 63, 70, 76]\nprint_r(make_a_pile(13)); // [13, 15, 19, 26, 33,\
    \ 40, 47, 54, 61, 68, 75, 82, 89]\nprint_r(make_a_pile(14)); // [14, 16, 20, 27,\
    \ 34, 42, 49, 57, 64, 72, 79, 87, 94, 102]\nprint", "  $result = [];\n  $result[]\
    \ = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    }\
    \ else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return\
    \ $result;\n}\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1)\
    \ {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n\
    \            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n \
    \   return $result;\n}\n\necho implode(', ', make_a_pile(1)) . \"\\n\";\necho\
    \ implode(', ', make_a_pile(2)) . \"\\n\";\necho implode(', ', make_a_pile(3))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(4)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(5)) . \"\\n\";\necho implode(', ', make_a_pile(6)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(7)) . \"\\n\";\necho implode(', ', make_a_pile(8))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(9)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(10)) . \"\\n\";\necho implode(', ', make_a_pile(11)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(12)) . \"\\n\";\necho implode(', ', make_a_pile(13))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(14)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(15)) . \"\\n\";\necho implode(', ', make_a_pile(16)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(17)) . \"\\n\";\necho implode(', ', make_a_pile(18))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(19)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(20)) . \"\\n\";\necho implode(', ', make_a_pile(21)) . \"\\n\"\
    ;\necho implode(", "  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[]\
    \ = $n;\n    if ($n % 2 == 0) {\n      $n = $n + 1;\n    } else {\n      $n =\
    \ $n + 2;\n    }\n  }\n  return $result;\n}\n", "  $result = [$n];\n  while ($n\
    \ > 1) {\n    $n = $n % 2 === 0 ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n\
    \  }\n  return $result;\n}\n", "    $result = [];\n    $result[] = $n;\n    while\
    \ ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        }\
    \ else {\n            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    $result[] = $n;\n \
    \   $i = 0;\n    while ($result[$i] > 1) {\n        if ($result[$i] % 2 == 0)\
    \ {\n            $result[] = $result[$i] / 2;\n        } else {\n            $result[]\
    \ = ($result[$i] + 1) / 2;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\necho \"make_a_pile(1) = \";\nvar_dump(make_a_pile(1));\necho \"make_a_pile(2)\
    \ = \";\nvar_dump(make_a_pile(2));\necho \"make_a_pile(3) = \";\nvar_dump(make_a_pile(3));\n\
    echo \"make_a_pile(4) = \";\nvar_dump(make_a_pile(4));\necho \"make_a_pile(5)\
    \ = \";\nvar_dump(make_a_pile(5));\necho \"make_a_pile(6) = \";\nvar_dump(make_a_pile(6));\n\
    echo \"make_a_pile(7) = \";\nvar_dump(make_a_pile(7));\necho \"make_a_pile(8)\
    \ = \";\nvar_dump(make_a_pile(8));\necho \"make_a_pile(9) = \";\nvar_dump(make_a_pile(9));\n\
    echo \"make_a_pile(10) = \";\nvar_dump(make_a_pile(10));\necho \"make_a_pile(11)\
    \ = \";\nvar_dump(make_a_pile(11));\necho \"make_a_pile(12) = \";\nvar_dump(make_a_pile(12));\n\
    echo \"make_a_pile(13) = \";\nvar_dump(make_a_pile(13));\necho \"make_a_pile(14)\
    \ = \";\nvar_dump(make_a_pile(", "    $result = [];\n    $i = 1;\n    while ($n\
    \ > 0) {\n        $result[] = $n;\n        $n -= $i;\n        $i += 2;\n    }\n\
    \    return $result;\n}\n", "    $result = [$n];\n    while ($n > 1) {\n     \
    \   $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n\necho make_a_pile(1) . PHP_EOL;\necho make_a_pile(2)\
    \ . PHP_EOL;\necho make_a_pile(3) . PHP_EOL;\necho make_a_pile(4) . PHP_EOL;\n\
    echo make_a_pile(5) . PHP_EOL;\necho make_a_pile(6) . PHP_EOL;\necho make_a_pile(7)\
    \ . PHP_EOL;\necho make_a_pile(8) . PHP_EOL;\necho make_a_pile(9) . PHP_EOL;\n\
    echo make_a_pile(10) . PHP_EOL;\necho make_a_pile(11) . PHP_EOL;\necho make_a_pile(12)\
    \ . PHP_EOL;\necho make_a_pile(13) . PHP_EOL;\necho make_a_pile(14) . PHP_EOL;\n\
    echo make_a_pile(15) . PHP_EOL;\necho make_a_pile(16) . PHP_EOL;\necho make_a_pile(17)\
    \ . PHP_EOL;\necho make_a_pile(18) . PHP_EOL;\necho make_a_pile(19) . PHP_EOL;\n\
    echo make_a_pile(20) . PHP_EOL;\necho make_a_pile(21) . PHP_EOL;\necho make_a_pile(22)\
    \ . PHP_EOL;\necho make_a_pile(23) . PHP_EOL;\necho make_a_pile(24) . PHP_EOL;\n\
    echo make_a_pile(25) . PHP_EOL;\necho make_a_pile(26) . PHP_EOL;\necho make_a_",
  "    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 === 0 ? $n / 2 :\
    \ ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n", " \
    \ $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n\
    \      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\necho \"make_a_pile(1) = \" . implode(\"\
    , \", make_a_pile(1)) . \"\\n\";\necho \"make_a_pile(2) = \" . implode(\", \"\
    , make_a_pile(2)) . \"\\n\";\necho \"make_a_pile(3) = \" . implode(\", \", make_a_pile(3))\
    \ . \"\\n\";\necho \"make_a_pile(4) = \" . implode(\", \", make_a_pile(4)) . \"\
    \\n\";\necho \"make_a_pile(5) = \" . implode(\", \", make_a_pile(5)) . \"\\n\"\
    ;\necho \"make_a_pile(6) = \" . implode(\", \", make_a_pile(6)) . \"\\n\";\necho\
    \ \"make_a_pile(7) = \" . implode(\", \", make_a_pile(7)) . \"\\n\";\necho \"\
    make_a_pile(8) = \" . implode(\", \", make_a_pile(8)) . \"\\n\";\necho \"make_a_pile(9)\
    \ = \" . implode(\", \", make_a_pile(9)) . \"\\n\";\necho \"make_a_pile(10) =\
    \ \" . implode(\", \", make_a_pile(10)) . \"\\n\";\necho \"make_a_pile(11) = \"\
    \ . implode(\", \", make_a_pile(11)) . \"\\n\";\necho \"make_a_pile(12) = \" .\
    \ implode(\", \", make_a_pile(12)) . \"\\n\";\necho \"make_a_pile(13) = \" . implode(\"\
    , \", make_a_pile(13))", "    $result = [$n];\n    while ($n > 1) {\n        $n\
    \ = $n % 2 === 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n  \
    \  return $result;\n}\n\necho \"make_a_pile(1) = \" . make_a_pile(1) . \"\\n\"\
    ;\necho \"make_a_pile(2) = \" . make_a_pile(2) . \"\\n\";\necho \"make_a_pile(3)\
    \ = \" . make_a_pile(3) . \"\\n\";\necho \"make_a_pile(4) = \" . make_a_pile(4)\
    \ . \"\\n\";\necho \"make_a_pile(5) = \" . make_a_pile(5) . \"\\n\";\necho \"\
    make_a_pile(6) = \" . make_a_pile(6) . \"\\n\";\necho \"make_a_pile(7) = \" .\
    \ make_a_pile(7) . \"\\n\";\necho \"make_a_pile(8) = \" . make_a_pile(8) . \"\\\
    n\";\necho \"make_a_pile(9) = \" . make_a_pile(9) . \"\\n\";\necho \"make_a_pile(10)\
    \ = \" . make_a_pile(10) . \"\\n\";\necho \"make_a_pile(11) = \" . make_a_pile(11)\
    \ . \"\\n\";\necho \"make_a_pile(12) = \" . make_a_pile(12) . \"\\n\";\necho \"\
    make_a_pile(13) = \" . make_a_pile(13) . \"\\n\";\necho \"make_a_pile(14) = \"\
    \ . make_a_pile(14) . \"\\n\";\necho \"make_a_pile(15) = \" . make_a_pile(15)\
    \ . \"\\n\";\necho \"make_a_pile(16) = \" . make_a_pile(16) . \"\\n\";", "   \
    \ $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2\
    \ == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n +\
    \ 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n",
  "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n %\
    \ 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nprint_r(make_a_pile(1));", "    $result = [];\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n\
    \    }\n    return $result;\n}\n", "    $result = [$n];\n    while ($n > 1) {\n\
    \        $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n", "    $result = [$n];\n    while ($n > 1) {\n\
    \        $n = $n % 2 === 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n", "  $result = [];\n  $result[] = $n;\n  while\
    \ ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n     \
    \ $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\n\
    echo \"make_a_pile(1) = \" . implode(\", \", make_a_pile(1)) . \"\\n\";\necho\
    \ \"make_a_pile(2) = \" . implode(\", \", make_a_pile(2)) . \"\\n\";\necho \"\
    make_a_pile(3) = \" . implode(\", \", make_a_pile(3)) . \"\\n\";\necho \"make_a_pile(4)\
    \ = \" . implode(\", \", make_a_pile(4)) . \"\\n\";\necho \"make_a_pile(5) = \"\
    \ . implode(\", \", make_a_pile(5)) . \"\\n\";\necho \"make_a_pile(6) = \" . implode(\"\
    , \", make_a_pile(6)) . \"\\n\";\necho \"make_a_pile(7) = \" . implode(\", \"\
    , make_a_pile(7)) . \"\\n\";\necho \"make_a_pile(8) = \" . implode(\", \", make_a_pile(8))\
    \ . \"\\n\";\necho \"make_a_pile(9) = \" . implode(\", \", make_a_pile(9)) . \"\
    \\n\";\necho \"make_a_pile(10) = \" . implode(\", \", make_a_pile(10)) . \"\\\
    n\";\necho \"make_a_pile(11) = \" . implode(\", \", make_a_pile(11)) . \"\\n\"\
    ;\necho \"make_a_pile(12) = \" . implode(\", \", make_a_pile(12)) . \"\\n\";\n\
    echo \"make_a_pile(13) = \" . implode(\", \", make_a_pile(13))", "  $result =\
    \ [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n    $n = $n % 2 ===\
    \ 0 ? $n + 1 : $n + 2;\n  }\n  return $result;\n}\n", "    $result = [];\n   \
    \ $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n        \
    \    $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n\
    \        $result[] = $n;\n    }\n    return $result;\n}\n\necho implode(', ',\
    \ make_a_pile(1)) . \"\\n\";\necho implode(', ', make_a_pile(2)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ', make_a_pile(9))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(', ', make_a_pile(14))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(', ', make_a_pile(19))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(21)) . \"\\n\";\necho implode(", "    $result = [];\n    while\
    \ ($n > 0) {\n        $result[] = $n;\n        $n = $n % 2 === 0 ? $n / 2 : ($n\
    \ + 1) / 2;\n    }\n    return $result;\n}\n", "    $result = [];\n    while ($n\
    \ > 0) {\n        $result[] = $n;\n        $n = $n % 2 ? $n + 2 : $n + 1;\n  \
    \  }\n    return $result;\n}\n", "  $result = [];\n  $result[] = $n;\n  while\
    \ ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n     \
    \ $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\n\
    echo implode(', ', make_a_pile(1)) . \"\\n\";\necho implode(', ', make_a_pile(2))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(4)) . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(9)) . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(14)) . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(19)) . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(21)) . \"\\n\";\necho implode(", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nvar_dump(make_a_pile(1));\
    \ // [1]\nvar_dump(make_a_pile(2)); // [2, 1]\nvar_dump(make_a_pile(3)); // [3,\
    \ 2, 1]\nvar_dump(make_a_pile(4)); // [4, 2, 1]\nvar_dump(make_a_pile(5)); //\
    \ [5, 3, 2, 1]\nvar_dump(make_a_pile(6)); // [6, 3, 2, 1]\nvar_dump(make_a_pile(7));\
    \ // [7, 4, 2, 1]\nvar_dump(make_a_pile(8)); // [8, 4, 2, 1]\nvar_dump(make_a_pile(9));\
    \ // [9, 5, 3, 2, 1]\nvar_dump(make_a_pile(10)); // [10, 5, 3, 2, 1]\nvar_dump(make_a_pile(11));\
    \ // [11, 6, 3, 2, 1]\nvar_dump(make_a_pile(12)); // [12, 6, 3, 2, 1]\nvar_dump(make_a_pile(13));\
    \ // [13, 7, 4, 2, 1]\nvar_dump(make_a_pile(14)); // [14, 7, 4, 2, 1]\nvar_dump(make_a_pile(15));\
    \ // [15, 8, 4, 2, 1]\nvar_dump(make_a_pile(16)); // [16, 8, 4, 2, 1]\nvar_dump(make_a_pile(17));\
    \ // [17, 9, 5, 3, 2, 1]\nvar_dump(make_a_pile", "    $result = [];\n    $result[]\
    \ = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n\
    \ / 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "  $result = [];\n  $result[] = $n;\n\
    \  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n\
    \      $n = ($n - 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = $n; $i > 0; $i--) {\n        $result[]\
    \ = $i;\n    }\n    return $result;\n}\n", "    $result = [$n];\n    while ($n\
    \ > 1) {\n        $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "    $result = [];\n    while ($n >\
    \ 0) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n / 2 : ($n + 1)\
    \ / 2;\n    }\n    return $result;\n}\n\necho implode(', ', make_a_pile(1)) .\
    \ \"\\n\";\necho implode(', ', make_a_pile(2)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ', make_a_pile(6))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(7)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(8)) . \"\\n\";\necho implode(', ', make_a_pile(9)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(10)) . \"\\n\";\necho implode(', ', make_a_pile(11))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(12)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(13)) . \"\\n\";\necho implode(', ', make_a_pile(14)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(15)) . \"\\n\";\necho implode(', ', make_a_pile(16))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(17)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(18)) . \"\\n\";\necho implode(', ', make_a_pile(19)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(20)) . \"\\n\";\necho implode(', ', make_a_pile(21))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(22)) . \"\\n\";\necho implode(',\
    \ ', make_a_", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n", "    $result = [$n];\n    while ($n > 1) {\n        $n = $n\
    \ % 2 ? $n + 2 : $n + 1;\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "  $result = [$n];\n  while ($n > 1) {\n    $n = ($n % 2 === 0) ? $n / 2\
    \ : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 === 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n", "    $result\
    \ = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2 : ($n + 1)\
    \ / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\necho implode(',\
    \ ', make_a_pile(1)) . \"\\n\";\necho implode(', ', make_a_pile(2)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ', make_a_pile(9))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(', ', make_a_pile(14))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(', ', make_a_pile(19))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(21)) . \"\\n\";\necho implode(', ', make_a_pile(22)) . \"\\n\"\
    ;\necho implode(', ', make", "    $result = [$n];\n    while ($n > 1) {\n    \
    \    $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n", "  $result = [];\n  $i = 0;\n  while ($n > 0) {\n\
    \    $result[$i] = $n;\n    $n = $n % 2 === 0 ? $n / 2 : ($n + 1) / 2;\n    $i++;\n\
    \  }\n  return $result;\n}\n", "  $result = [$n];\n  while ($n > 1) {\n    $n\
    \ = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        $n = $n % 2 ? $n + 2 : $n + 1;\n    }\n    return $result;\n\
    }\n", "    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n\
    \ / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\
    \necho implode(', ', make_a_pile(1)) . \"\\n\";\necho implode(', ', make_a_pile(2))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(4)) . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(9)) . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(14)) . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(19)) . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(21)) . \"\\n\";\necho implode(', ', make_a_pile(22))\
    \ . \"\\n\";\necho implode(', ', make", "    $result = [];\n    while ($n > 0)\
    \ {\n        $result[] = $n;\n        $n = ($n % 2 == 0) ? $n / 2 : ($n + 1) /\
    \ 2;\n    }\n    return $result;\n}\n\n$tests = [\n    [1, [1]],\n    [2, [2,\
    \ 1]],\n    [3, [3, 2, 1]],\n    [4, [4, 2, 1]],\n    [5, [5, 3, 2, 1]],\n   \
    \ [6, [6, 3, 2, 1]],\n    [7, [7, 4, 2, 1]],\n    [8, [8, 4, 2, 1]],\n    [9,\
    \ [9, 5, 3, 2, 1]],\n    [10, [10, 5, 3, 2, 1]],\n    [11, [11, 6, 3, 2, 1]],\n\
    \    [12, [12, 6, 3, 2, 1]],\n    [13, [13, 7, 4, 2, 1]],\n    [14, [14, 7, 4,\
    \ 2, 1]],\n    [15, [15, 8, 4, 2, 1]],\n    [16, [16, 8, 4, 2, 1]],\n    [17,\
    \ [17, 9, 5, 3, 2, 1]],\n    [18, [18, 9, 5, 3, 2, 1]],\n    [19, [19, 10, 5,\
    \ 3, 2, 1]],\n    [20, [20, 10, 5, 3, 2, 1]],\n    [21, [21, 11, 6, 3, 2, 1]],\n\
    \    [22, [22, 11, 6, 3, 2, 1]],\n    [23, [23, 12, 6, 3, 2, 1]],\n    [24, [24,\
    \ 12, 6, 3, 2, 1]],\n    [25, [25, 13, 7, 4, 2, 1]],\n    [26, [26, 13, 7, 4,\
    \ 2, 1]],\n    [27, [27, 14, 7, 4", "    $result = [$n];\n    while ($n > 1) {\n\
    \        $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    $result[] = $n;\n \
    \   while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n \
    \       } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "    $result = [$n];\n    while ($n\
    \ > 1) {\n        $n = ($n % 2 == 0) ? $n / 2 : ($n + 1) / 2;\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "  $result = [$n];\n  while ($n > 1)\
    \ {\n    $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n\
    \  return $result;\n}\n", "  $result = [$n];\n  while ($n > 1) {\n    $n = $n\
    \ % 2 === 0 ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n\
    }\n\necho implode(', ', make_a_pile(1)) . \"\\n\";\necho implode(', ', make_a_pile(2))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(4)) . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(9)) . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(14)) . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(19)) . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(21)) . \"\\n\";\necho implode(', ', make_a_pile(22))\
    \ . \"\\n\";\necho implode(", "    $result = [$n];\n    while ($n > 1) {\n   \
    \     $n = $n % 2 ? $n - 1 : $n / 2;\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n", "  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0\
    \ ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\n\
    echo make_a_pile(1) . PHP_EOL;\necho make_a_pile(2) . PHP_EOL;\necho make_a_pile(3)\
    \ . PHP_EOL;\necho make_a_pile(4) . PHP_EOL;\necho make_a_pile(5) . PHP_EOL;\n\
    echo make_a_pile(6) . PHP_EOL;\necho make_a_pile(7) . PHP_EOL;\necho make_a_pile(8)\
    \ . PHP_EOL;\necho make_a_pile(9) . PHP_EOL;\necho make_a_pile(10) . PHP_EOL;\n\
    echo make_a_pile(11) . PHP_EOL;\necho make_a_pile(12) . PHP_EOL;\necho make_a_pile(13)\
    \ . PHP_EOL;\necho make_a_pile(14) . PHP_EOL;\necho make_a_pile(15) . PHP_EOL;\n\
    echo make_a_pile(16) . PHP_EOL;\necho make_a_pile(17) . PHP_EOL;\necho make_a_pile(18)\
    \ . PHP_EOL;\necho make_a_pile(19) . PHP_EOL;\necho make_a_pile(20) . PHP_EOL;\n\
    echo make_a_pile(21) . PHP_EOL;\necho make_a_pile(22) . PHP_EOL;\necho make_a_pile(23)\
    \ . PHP_EOL;\necho make_a_pile(24) . PHP_EOL;\necho make_a_pile(25) . PHP_EOL;\n\
    echo make_a_pile(26) . PHP_EOL;\necho make_a_", "    $result = [];\n    while\
    \ ($n > 0) {\n        $result[] = $n;\n        $n = ($n % 2 == 0) ? $n / 2 : ($n\
    \ + 1) / 2;\n    }\n    return $result;\n}\n\necho implode(', ', make_a_pile(1))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(2)) . PHP_EOL;\necho implode(', ',\
    \ make_a_pile(3)) . PHP_EOL;\necho implode(', ', make_a_pile(4)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(5)) . PHP_EOL;\necho implode(', ', make_a_pile(6))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(7)) . PHP_EOL;\necho implode(', ',\
    \ make_a_pile(8)) . PHP_EOL;\necho implode(', ', make_a_pile(9)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(10)) . PHP_EOL;\necho implode(', ', make_a_pile(11))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(12)) . PHP_EOL;\necho implode(',\
    \ ', make_a_pile(13)) . PHP_EOL;\necho implode(', ', make_a_pile(14)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(15)) . PHP_EOL;\necho implode(', ', make_a_pile(16))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(17)) . PHP_EOL;\necho implode(',\
    \ ', make_a_pile(18)) . PHP_EOL;\necho implode(', ', make_a_pile(19)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(20)) . PHP_EOL;\necho implode(', ', make_a", " \
    \   $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n =\
    \ $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n    }\n    return $result;\n}\n", "  \
    \  $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n %\
    \ 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ - 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n\
    }\n", "    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n\
    \ / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n",
  "    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n +\
    \ 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [$n];\n    while ($n > 1) {\n        $n = ($n % 2 == 0) ? $n / 2 : ($n + 1)\
    \ / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n     \
    \       $result[] = $n - $i;\n        } else {\n            $result[] = $n - $i\
    \ + 1;\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n    while\
    \ ($n > 0) {\n        $result[] = $n;\n        $n = $n % 2 === 0 ? $n / 2 : ($n\
    \ + 1) / 2;\n    }\n    return $result;\n}\n", "    $result = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $result[] = $n;\n        if ($n % 2 == 0) {\n\
    \            $n += 2;\n        } else {\n            $n += 1;\n        }\n   \
    \ }\n    return $result;\n}\n", "  $result = [];\n  while ($n > 0) {\n    $result[]\
    \ = $n;\n    $n = ($n % 2 === 0) ? $n - 1 : $n - 2;\n  }\n  return $result;\n\
    }\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n - 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 === 0 ?\
    \ $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n\
    \    $n = $n % 2 === 0 ? $n + 1 : $n + 2;\n  }\n  return $result;\n}\n", "   \
    \ $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2\
    \ === 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n +\
    \ 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n",
  "  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n    if ($n\
    \ % 2 == 0) {\n      $n += 2;\n    } else {\n      $n += 1;\n    }\n  }\n  return\
    \ $result;\n}\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1)\
    \ {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n\
    \            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n \
    \   return $result;\n}\n\necho implode(', ', make_a_pile(1)) . \"\\n\";\necho\
    \ implode(', ', make_a_pile(2)) . \"\\n\";\necho implode(', ', make_a_pile(3))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(4)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(5)) . \"\\n\";\necho implode(', ', make_a_pile(6)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(7)) . \"\\n\";\necho implode(', ', make_a_pile(8))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(9)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(10)) . \"\\n\";\necho implode(', ', make_a_pile(11)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(12)) . \"\\n\";\necho implode(', ', make_a_pile(13))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(14)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(15)) . \"\\n\";\necho implode(', ', make_a_pile(16)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(17)) . \"\\n\";\necho implode(', ', make_a_pile(18))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(19)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(20)) . \"\\n\";\necho implode(', ', make_a_pile(21)) . \"\\n\"\
    ;\necho implode(", "    $result = [];\n    $result[] = $n;\n    while ($n > 1)\
    \ {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n\
    \            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n \
    \   return $result;\n}\n\necho \"make_a_pile(1) = \" . implode(', ', make_a_pile(1))\
    \ . \"\\n\";\necho \"make_a_pile(2) = \" . implode(', ', make_a_pile(2)) . \"\\\
    n\";\necho \"make_a_pile(3) = \" . implode(', ', make_a_pile(3)) . \"\\n\";\n\
    echo \"make_a_pile(4) = \" . implode(', ', make_a_pile(4)) . \"\\n\";\necho \"\
    make_a_pile(5) = \" . implode(', ', make_a_pile(5)) . \"\\n\";\necho \"make_a_pile(6)\
    \ = \" . implode(', ', make_a_pile(6)) . \"\\n\";\necho \"make_a_pile(7) = \"\
    \ . implode(', ', make_a_pile(7)) . \"\\n\";\necho \"make_a_pile(8) = \" . implode(',\
    \ ', make_a_pile(8)) . \"\\n\";\necho \"make_a_pile(9) = \" . implode(', ', make_a_pile(9))\
    \ . \"\\n\";\necho \"make_a_pile(10) = \" . implode(', ', make_a_pile(10)) . \"\
    \\n\";\necho \"make_a_pile(11) = \" . implode(', ', make_a_pile(11)) . \"\\n\"\
    ;\necho \"make_a_pile(12) = \" . implode(', ', make_a_pile(12)) . \"\\n\";\necho\
    \ \"make_a_pile(13) = \" . implode(', ', make_a_pile(13))", "    $result = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n = $n %\
    \ 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n", "    $result =\
    \ [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n + 1;\n      \
    \  $result[] = $n;\n    }\n    return $result;\n}\n", "  $result = [];\n  $result[]\
    \ = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    }\
    \ else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return\
    \ $result;\n}\n\n$tests = [\n  [\n    'input' => 1,\n    'expected' => [1],\n\
    \  ],\n  [\n    'input' => 2,\n    'expected' => [2, 1],\n  ],\n  [\n    'input'\
    \ => 3,\n    'expected' => [3, 2, 1],\n  ],\n  [\n    'input' => 4,\n    'expected'\
    \ => [4, 2, 1],\n  ],\n  [\n    'input' => 5,\n    'expected' => [5, 3, 2, 1],\n\
    \  ],\n  [\n    'input' => 6,\n    'expected' => [6, 3, 2, 1],\n  ],\n  [\n  \
    \  'input' => 7,\n    'expected' => [7, 4, 2, 1],\n  ],\n  [\n    'input' => 8,\n\
    \    'expected' => [8, 4, 2, 1],\n  ],\n  [\n    'input' => 9,\n    'expected'\
    \ => [9, 5, 3, 2, 1],\n  ],\n  [\n    'input' => 10,\n    'expected' => [10, 5,\
    \ 3, 2, 1],\n  ],\n  [\n    'input' => 11,\n    'expected' => [11, 6, 3, 2, 1],\n\
    \  ],\n  [\n    'input' => 12,\n    'expected' => [12, 6, 3, 2, 1],\n  ],\n  [\n\
    \    'input' => 13,\n    'expected' => [13, 7, 4, 2, 1],\n  ],\n  [\n    'input'\
    \ => 14,\n    'expected' => [14, 7, 4, 2, 1],\n  ],\n  [\n    'input' => 15,\n\
    \    'expected'", "  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n  \
    \  if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) /\
    \ 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\necho make_a_pile(1)\
    \ . PHP_EOL;\necho make_a_pile(2) . PHP_EOL;\necho make_a_pile(3) . PHP_EOL;\n\
    echo make_a_pile(4) . PHP_EOL;\necho make_a_pile(5) . PHP_EOL;\necho make_a_pile(6)\
    \ . PHP_EOL;\necho make_a_pile(7) . PHP_EOL;\necho make_a_pile(8) . PHP_EOL;\n\
    echo make_a_pile(9) . PHP_EOL;\necho make_a_pile(10) . PHP_EOL;\necho make_a_pile(11)\
    \ . PHP_EOL;\necho make_a_pile(12) . PHP_EOL;\necho make_a_pile(13) . PHP_EOL;\n\
    echo make_a_pile(14) . PHP_EOL;\necho make_a_pile(15) . PHP_EOL;\necho make_a_pile(16)\
    \ . PHP_EOL;\necho make_a_pile(17) . PHP_EOL;\necho make_a_pile(18) . PHP_EOL;\n\
    echo make_a_pile(19) . PHP_EOL;\necho make_a_pile(20) . PHP_EOL;\necho make_a_pile(21)\
    \ . PHP_EOL;\necho make_a_pile(22) . PHP_EOL;\necho make_a_pile(23) . PHP_EOL;\n\
    echo make_a_pile(24) . PHP_EOL;\necho make_a_pile(25) . PHP_EOL;", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 === 0)\
    \ {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(7));\nprint_r(make_a_pile(8));\nprint_r(make_a_pile(9));\n\
    print_r(make_a_pile(10));\nprint_r(make_a_pile(11));\nprint_r(make_a_pile(12));\n\
    print_r(make_a_pile(13));\nprint_r(make_a_pile(14));\nprint_r(make_a_pile(15));\n\
    print_r(make_a_pile(16));\nprint_r(make_a_pile(17));\nprint_r(make_a_pile(18));\n\
    print_r(make_a_pile(19));\nprint_r(make_a_pile(20));\nprint_r(make_a_pile(21));\n\
    print_r(make_a_pile(22));\nprint_r(make_a_pile(23));\nprint_r(make_a_pile(24));\n\
    print_r(make_a_pile(25));\nprint_r(make_a_pile(26));\nprint_r(make_a_pile(27));\n\
    print_r(make_a_pile(28));\nprint_r(make_a_pile(29));\nprint_r(make_a_pile(30));\n\
    print_r(make_a_pile(31));\nprint_r(make_a_pile(32));\nprint_r(", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        if\
    \ ($n % 2 == 0) {\n            $n += 2;\n        } else {\n            $n += 1;\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = [$n];\n    while\
    \ ($n > 1) {\n        $n = $n % 2 === 0 ? $n / 2 : ($n + 1) / 2;\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "  $result = [];\n  $result[] = $n;\n\
    \  while ($n > 1) {\n    if ($n % 2 === 0) {\n      $n = $n / 2;\n    } else {\n\
    \      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\necho \"make_a_pile(1) = \" . implode(\", \", make_a_pile(1)) . \"\\n\";\n\
    echo \"make_a_pile(2) = \" . implode(\", \", make_a_pile(2)) . \"\\n\";\necho\
    \ \"make_a_pile(3) = \" . implode(\", \", make_a_pile(3)) . \"\\n\";\necho \"\
    make_a_pile(4) = \" . implode(\", \", make_a_pile(4)) . \"\\n\";\necho \"make_a_pile(5)\
    \ = \" . implode(\", \", make_a_pile(5)) . \"\\n\";\necho \"make_a_pile(6) = \"\
    \ . implode(\", \", make_a_pile(6)) . \"\\n\";\necho \"make_a_pile(7) = \" . implode(\"\
    , \", make_a_pile(7)) . \"\\n\";\necho \"make_a_pile(8) = \" . implode(\", \"\
    , make_a_pile(8)) . \"\\n\";\necho \"make_a_pile(9) = \" . implode(\", \", make_a_pile(9))\
    \ . \"\\n\";\necho \"make_a_pile(10) = \" . implode(\", \", make_a_pile(10)) .\
    \ \"\\n\";\necho \"make_a_pile(11) = \" . implode(\", \", make_a_pile(11)) . \"\
    \\n\";\necho \"make_a_pile(12) = \" . implode(\", \", make_a_pile(12)) . \"\\\
    n\";\necho \"make_a_pile(13) = \" . implode(\", \", make_a_pile(13))", "    $result\
    \ = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2 : ($n + 1)\
    \ / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n", "  $result\
    \ = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n     \
    \ $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] =\
    \ $n;\n  }\n  return $result;\n}\n", "  $result = [$n];\n  while ($n > 1) {\n\
    \    $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return\
    \ $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    $result[] = $n;\n        $n = $n % 2 === 0 ? $n + 2 : $n + 1;\n    }\n  \
    \  return $result;\n}\n", "    $result = [$n];\n    while ($n > 1) {\n       \
    \ $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n\
    \    return $result;\n}", "    $result = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $n;\n        $n = $n % 2 === 0 ? $n + 2 : $n + 1;\n \
    \   }\n    return $result;\n}\n", "    $result = [];\n    $i = 1;\n    while ($n\
    \ > 0) {\n        $result[] = $n;\n        $n = ($n % 2 == 0) ? $n - $i : $n -\
    \ $i - 1;\n        $i += 2;\n    }\n    return $result;\n}\n", "    $result =\
    \ [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n - 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [$n];\n    while ($n > 1) {\n        $n = $n % 2 === 0 ? $n / 2 : ($n + 1)\
    \ / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i === 0) {\n        \
    \    $result[] = $n;\n        } else {\n            $result[] = ($result[$i -\
    \ 1] % 2 === 0) ? $result[$i - 1] + 1 : $result[$i - 1] + 2;\n        }\n    }\n\
    \    return $result;\n}\n\necho '<pre>make_a_pile(1)</pre>';\nvar_dump(make_a_pile(1));",
  "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n\
    \            $result[] = $n;\n        } else {\n            $result[] = $result[$i\
    \ - 1] + 2;\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    while ($n > 0) {\n        $result[] = $n;\n        $n = $n % 2 === 0 ? $n\
    \ / 2 : ($n + 1) / 2;\n    }\n    return $result;\n}\n\necho implode(', ', make_a_pile(1))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(2)) . PHP_EOL;\necho implode(', ',\
    \ make_a_pile(3)) . PHP_EOL;\necho implode(', ', make_a_pile(4)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(5)) . PHP_EOL;\necho implode(', ', make_a_pile(6))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(7)) . PHP_EOL;\necho implode(', ',\
    \ make_a_pile(8)) . PHP_EOL;\necho implode(', ', make_a_pile(9)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(10)) . PHP_EOL;\necho implode(', ', make_a_pile(11))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(12)) . PHP_EOL;\necho implode(',\
    \ ', make_a_pile(13)) . PHP_EOL;\necho implode(', ', make_a_pile(14)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(15)) . PHP_EOL;\necho implode(', ', make_a_pile(16))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(17)) . PHP_EOL;\necho implode(',\
    \ ', make_a_pile(18)) . PHP_EOL;\necho implode(', ', make_a_pile(19)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(20)) . PHP_EOL;\necho implode(', ', make_a_", " \
    \ $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n + 1)\
    \ / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n", "  $result = [];\n\
    \  while ($n > 0) {\n    $result[] = $n;\n    $n = $n % 2 ? $n + 2 : $n + 1;\n\
    \  }\n  return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n  \
    \  }\n    return $result;\n}\n", "    $result = [];\n    $result[] = $n;\n   \
    \ for ($i = 1; $i < $n; $i++) {\n        if ($n % 2 == 0) {\n            $result[]\
    \ = $n + 2;\n        } else {\n            $result[] = $n + 1;\n        }\n  \
    \  }\n    return $result;\n}\n", "    $result = [];\n    $result[] = $n;\n   \
    \ while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n   \
    \     } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[] =\
    \ $n;\n    }\n    return $result;\n}\n", "  $result = [];\n  $result[] = $n;\n\
    \  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n\
    \      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n", "  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2\
    \ == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n", "    $result = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        if ($n % 2 == 0)\
    \ {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $result[] = $n;\n        if ($n % 2 == 0) {\n\
    \            $n += 2;\n        } else {\n            $n += 1;\n        }\n   \
    \ }\n    return $result;\n}\n", "  $result = [$n];\n  while ($n > 1) {\n    $n\
    \ = ($n % 2 === 0) ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return\
    \ $result;\n}\n", "    $arr = [];\n    $arr[] = $n;\n    while ($n > 1) {\n  \
    \      if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n      \
    \      $n = ($n + 1) / 2;\n        }\n        $arr[] = $n;\n    }\n    return\
    \ $arr;\n}\n", "  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if\
    \ ($n % 2 == 0) {\n      $n /= 2;\n    } else {\n      $n = ($n + 1) / 2;\n  \
    \  }\n    $result[] = $n;\n  }\n  return $result;\n}\n", "    $result = [];\n\
    \    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n - 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n", "  $result\
    \ = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n    $n = $n % 2\
    \ == 0 ? $n + 1 : $n + 2;\n  }\n  return $result;\n}\n\necho make_a_pile(1) .\
    \ PHP_EOL;\necho make_a_pile(2) . PHP_EOL;\necho make_a_pile(3) . PHP_EOL;\necho\
    \ make_a_pile(4) . PHP_EOL;\necho make_a_pile(5) . PHP_EOL;\necho make_a_pile(6)\
    \ . PHP_EOL;\necho make_a_pile(7) . PHP_EOL;\necho make_a_pile(8) . PHP_EOL;\n\
    echo make_a_pile(9) . PHP_EOL;\necho make_a_pile(10) . PHP_EOL;\necho make_a_pile(11)\
    \ . PHP_EOL;\necho make_a_pile(12) . PHP_EOL;\necho make_a_pile(13) . PHP_EOL;\n\
    echo make_a_pile(14) . PHP_EOL;\necho make_a_pile(15) . PHP_EOL;\necho make_a_pile(16)\
    \ . PHP_EOL;\necho make_a_pile(17) . PHP_EOL;\necho make_a_pile(18) . PHP_EOL;\n\
    echo make_a_pile(19) . PHP_EOL;\necho make_a_pile(20) . PHP_EOL;\necho make_a_pile(21)\
    \ . PHP_EOL;\necho make_a_pile(22) . PHP_EOL;\necho make_a_pile(23) . PHP_EOL;\n\
    echo make_a_pile(24) . PHP_EOL;\necho make_a_pile(25) . PHP_EOL;\necho make_a_pile(26)\
    \ . PHP_EOL;\necho make", "    $result = [];\n    $result[] = $n;\n    while ($n\
    \ > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else\
    \ {\n            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    while ($n > 0) {\n       \
    \ $result[] = $n;\n        $n = $n % 2 ? $n + 2 : $n + 1;\n    }\n    return $result;\n\
    }\n", "  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2\
    \ == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nprint_r(make_a_pile(1));\n\
    print_r(make_a_pile(2));\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\n\
    print_r(make_a_pile(5));\nprint_r(make_a_pile(6));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(8));\nprint_r(make_a_pile(9));\nprint_r(make_a_pile(10));\n\
    print_r(make_a_pile(11));\nprint_r(make_a_pile(12));\nprint_r(make_a_pile(13));\n\
    print_r(make_a_pile(14));\nprint_r(make_a_pile(15));\nprint_r(make_a_pile(16));\n\
    print_r(make_a_pile(17));\nprint_r(make_a_pile(18));\nprint_r(make_a_pile(19));\n\
    print_r(make_a_pile(20));\nprint_r(make_a_pile(21));\nprint_r(make_a_pile(22));\n\
    print_r(make_a_pile(23));\nprint_r(make_a_pile(24));\nprint_r(make_a_pile(25));\n\
    print_r(make_a_pile(26));\nprint_r(make_a_pile(27));\nprint_r(make_a_pile(28));\n\
    print_r(make_a_pile(29));\nprint_r(make_a_pile(30));\nprint_r(", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 === 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [$n];\n    while ($n > 1) {\n        $n = $n % 2 === 0 ? $n / 2 : ($n + 1)\
    \ / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n", "  $result\
    \ = [];\n  while ($n > 0) {\n    $result[] = $n;\n    $n = $n % 2 === 0 ? $n /\
    \ 2 : ($n + 1) / 2;\n  }\n  return $result;\n}\n\nprint_r(make_a_pile(1)); //\
    \ [1]\nprint_r(make_a_pile(2)); // [2, 1]\nprint_r(make_a_pile(3)); // [3, 2,\
    \ 1]\nprint_r(make_a_pile(4)); // [4, 2, 1]\nprint_r(make_a_pile(5)); // [5, 3,\
    \ 2, 1]\nprint_r(make_a_pile(6)); // [6, 3, 2, 1]\nprint_r(make_a_pile(7)); //\
    \ [7, 4, 2, 1]\nprint_r(make_a_pile(8)); // [8, 4, 2, 1]\nprint_r(make_a_pile(9));\
    \ // [9, 5, 3, 2, 1]\nprint_r(make_a_pile(10)); // [10, 5, 3, 2, 1]\nprint_r(make_a_pile(11));\
    \ // [11, 6, 3, 2, 1]\nprint_r(make_a_pile(12)); // [12, 6, 3, 2, 1]\nprint_r(make_a_pile(13));\
    \ // [13, 7, 4, 2, 1]\nprint_r(make_a_pile(14)); // [14, 7, 4, 2, 1]\nprint_r(make_a_pile(15));\
    \ // [15, 8, 4, 2, 1]\nprint_r(make_a_pile(16)); // [16, 8, 4, 2, 1]\nprint_r(make_a_pile(17));\
    \ // [17, 9, 5, 3, 2, 1]\nprint_r(make_a_pile(18)); // [18, 9, 5, 3, 2, 1]\nprint_r(make_a_",
  "  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n + 1)\
    \ / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n", "    $result = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($i === 0) {\n            $result[]\
    \ = $n;\n        } else {\n            $result[] = $result[$i - 1] + ($result[$i\
    \ - 1] % 2 === 0 ? 2 : 1);\n        }\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2\
    \ == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n +\
    \ 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\
    \necho implode(', ', make_a_pile(1)) . \"\\n\";\necho implode(', ', make_a_pile(2))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(4)) . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(9)) . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(14)) . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(19)) . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(21)) . \"\\n\";\necho implode(", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n$tests =\
    \ [\n    [\n        'input' => 1,\n        'expected' => [1],\n    ],\n    [\n\
    \        'input' => 2,\n        'expected' => [2, 1],\n    ],\n    [\n       \
    \ 'input' => 3,\n        'expected' => [3, 2, 1],\n    ],\n    [\n        'input'\
    \ => 4,\n        'expected' => [4, 2, 1],\n    ],\n    [\n        'input' => 5,\n\
    \        'expected' => [5, 3, 2, 1],\n    ],\n    [\n        'input' => 6,\n \
    \       'expected' => [6, 3, 2, 1],\n    ],\n    [\n        'input' => 7,\n  \
    \      'expected' => [7, 4, 2, 1],\n    ],\n    [\n        'input' => 8,\n   \
    \     'expected' => [8, 4, 2, 1],\n    ],\n    [\n        'input' => 9,\n    \
    \    'expected' => [9, 5, 3, 2, 1],\n    ],\n    [\n        'input' => 10,\n \
    \       'expected' => [10, 5, 3, 2, 1],\n    ],\n    [\n        'input' => 11,\n\
    \        'expected' => [11, 6, 3, 2, 1],\n    ],\n    [\n        'input' => 12,\n\
    \        'expected' => [12, 6, 3, 2, 1],\n    ],\n    [\n        'input' => 13,\n\
    \        'expected' => [13, 7, 4, 2, 1],\n    ],\n    [\n        'input' => 14,\n\
    \        'expected' => [14, 7, 4, 2, 1],\n    ],\n    [\n        'input' => 15,\n\
    \        'expected'", "    $result = [];\n    for ($i = $n; $i > 0; $i--) {\n\
    \        if ($i % 2 == 0) {\n            $result[] = $i + 1;\n        } else {\n\
    \            $result[] = $i + 2;\n        }\n    }\n    return $result;\n}\n",
  "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n",
  "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        $n = $n % 2 === 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n",
  "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        if ($n % 2 == 0) {\n            $n = $n + 1;\n        } else {\n    \
    \        $n = $n + 2;\n        }\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n - 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\necho implode(',\
    \ ', make_a_pile(1)) . \"\\n\";\necho implode(', ', make_a_pile(2)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ', make_a_pile(9))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(', ', make_a_pile(14))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(', ', make_a_pile(19))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(21)) . \"\\n\";\necho implode(', ', make_a_pile(22)) . \"\\n\"\
    ;\necho implode(", "    $result = [];\n    $result[] = $n;\n    while ($n > 1)\
    \ {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n\
    \            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n \
    \   return $result;\n}\n", "    $result = [$n];\n    while ($n > 1) {\n      \
    \  $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $n;\n        if ($n % 2 == 0) {\n            $n += 2;\n\
    \        } else {\n            $n += 1;\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n = $n + 1;\n        } else\
    \ {\n            $n = $n + 2;\n        }\n    }\n    return $result;\n}\n", " \
    \ $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 === 0 ? $n / 2 : ($n +\
    \ 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\necho implode(', ',\
    \ make_a_pile(1)) . \"\\n\";\necho implode(', ', make_a_pile(2)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ', make_a_pile(9))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(', ', make_a_pile(14))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(', ', make_a_pile(19))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(21)) . \"\\n\";\necho implode(', ', make_a_pile(22)) . \"\\n\"\
    ;\necho implode(', ', make", "    $result = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n  \
    \  }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n\
    \    }\n    return $result;\n}\n", "    $result = [$n];\n    while ($n > 1) {\n\
    \        $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n\necho make_a_pile(1) . PHP_EOL;\necho make_a_pile(2)\
    \ . PHP_EOL;\necho make_a_pile(3) . PHP_EOL;\necho make_a_pile(4) . PHP_EOL;\n\
    echo make_a_pile(5) . PHP_EOL;\necho make_a_pile(6) . PHP_EOL;\necho make_a_pile(7)\
    \ . PHP_EOL;\necho make_a_pile(8) . PHP_EOL;\necho make_a_pile(9) . PHP_EOL;\n\
    echo make_a_pile(10) . PHP_EOL;\necho make_a_pile(11) . PHP_EOL;\necho make_a_pile(12)\
    \ . PHP_EOL;\necho make_a_pile(13) . PHP_EOL;\necho make_a_pile(14) . PHP_EOL;\n\
    echo make_a_pile(15) . PHP_EOL;\necho make_a_pile(16) . PHP_EOL;\necho make_a_pile(17)\
    \ . PHP_EOL;\necho make_a_pile(18) . PHP_EOL;\necho make_a_pile(19) . PHP_EOL;\n\
    echo make_a_pile(20) . PHP_EOL;\necho make_a_pile(21) . PHP_EOL;\necho make_a_pile(22)\
    \ . PHP_EOL;\necho make_a_pile(23) . PHP_EOL;\necho make_a_pile(24) . PHP_EOL;\n\
    echo make_a_pile(25) . PHP_EOL;\necho make_a_pile(26) . PHP_EOL;\necho make_a_",
  "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n %\
    \ 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ - 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "  $result = [$n];\n  while ($n > 1) {\n    $n = ($n % 2 === 0) ? $n / 2\
    \ : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\necho implode(',\
    \ ', make_a_pile(1)) . \"\\n\";\necho implode(', ', make_a_pile(2)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(6)) . \"\\n\";\necho implode(', ', make_a_pile(7)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(8)) . \"\\n\";\necho implode(', ', make_a_pile(9))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(10)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(11)) . \"\\n\";\necho implode(', ', make_a_pile(12)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(13)) . \"\\n\";\necho implode(', ', make_a_pile(14))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(15)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(16)) . \"\\n\";\necho implode(', ', make_a_pile(17)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(18)) . \"\\n\";\necho implode(', ', make_a_pile(19))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(20)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(21)) . \"\\n\";\necho implode(', ', make_a_pile(22)) . \"\\n\"\
    ;\necho implode(', ',", "    $result = [];\n    $i = 0;\n    while ($n > 0) {\n\
    \        $result[$i] = $n;\n        $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n\
    \        $i++;\n    }\n    return $result;\n}\n", "    $result = [];\n    $result[]\
    \ = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n /= 2;\n\
    \        } else {\n            $n = ($n - 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n\necho \"make_a_pile(1) = \" . implode(\"\
    , \", make_a_pile(1)) . \"\\n\";\necho \"make_a_pile(2) = \" . implode(\", \"\
    , make_a_pile(2)) . \"\\n\";\necho \"make_a_pile(3) = \" . implode(\", \", make_a_pile(3))\
    \ . \"\\n\";\necho \"make_a_pile(4) = \" . implode(\", \", make_a_pile(4)) . \"\
    \\n\";\necho \"make_a_pile(5) = \" . implode(\", \", make_a_pile(5)) . \"\\n\"\
    ;\necho \"make_a_pile(6) = \" . implode(\", \", make_a_pile(6)) . \"\\n\";\necho\
    \ \"make_a_pile(7) = \" . implode(\", \", make_a_pile(7)) . \"\\n\";\necho \"\
    make_a_pile(8) = \" . implode(\", \", make_a_pile(8)) . \"\\n\";\necho \"make_a_pile(9)\
    \ = \" . implode(\", \", make_a_pile(9)) . \"\\n\";\necho \"make_a_pile(10) =\
    \ \" . implode(\", \", make_a_pile(10)) . \"\\n\";\necho \"make_a_pile(11) = \"\
    \ . implode(\", \", make_a_pile(11)) . \"\\n\";\necho \"make_a_pile(12) = \" .\
    \ implode(\", \", make_a_pile(12)) . \"\\n\";\necho \"make_a_pile(13) = \" . implode(\"\
    , \", make_a_pile(13)) . \"\\", "    $result = [$n];\n    while ($n > 1) {\n \
    \       $n = $n % 2 === 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n", "    $result = [$n];\n    while ($n > 1) {\n\
    \        $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    $result[] = $n;\n \
    \   while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n \
    \       } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "    $result = [$n];\n    $i = 0;\n\
    \    while ($result[$i] > 1) {\n        if ($result[$i] % 2 == 0) {\n        \
    \    $result[] = $result[$i] / 2;\n        } else {\n            $result[] = ($result[$i]\
    \ + 1) / 2;\n        }\n        $i++;\n    }\n    return $result;\n}", "    $result\
    \ = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\necho implode(',\
    \ ', make_a_pile(1)) . \"\\n\"; // 1\necho implode(', ', make_a_pile(2)) . \"\\\
    n\"; // 2, 1\necho implode(', ', make_a_pile(3)) . \"\\n\"; // 3, 2, 1\necho implode(',\
    \ ', make_a_pile(4)) . \"\\n\"; // 4, 2, 1\necho implode(', ', make_a_pile(5))\
    \ . \"\\n\"; // 5, 3, 2, 1\necho implode(', ', make_a_pile(6)) . \"\\n\"; // 6,\
    \ 3, 2, 1\necho implode(', ', make_a_pile(7)) . \"\\n\"; // 7, 4, 2, 1\necho implode(',\
    \ ', make_a_pile(8)) . \"\\n\"; // 8, 4, 2, 1\necho implode(', ', make_a_pile(9))\
    \ . \"\\n\"; // 9, 5, 3, 2, 1\necho implode(', ', make_a_pile(10)) . \"\\n\";\
    \ // 10, 5, 3, 2, 1\necho implode(', ', make_a_pile(11)) . \"\\n\"; // 11, 6,\
    \ 3, 2, 1\necho implode(', ', make_a_pile(12)) . \"\\n\"; // 12, 6, 3, 2, 1\n\
    echo implode(', ', make_a_pile(13)) . \"\\n\"; // 13, 7, 4, 2, 1\necho implode(',\
    \ ', make_a_pile(14)) . \"\\n\"; // 14, 7, 4, 2, 1\necho implode(', ', make_a_pile(15))\
    \ . \"\\n\"; // 15, 8, 4, 2, 1\necho implode(", "    $result = [$n];\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        $result[] = ($result[$i - 1] % 2 == 0) ?\
    \ $result[$i - 1] + 1 : $result[$i - 1] - 1;\n    }\n    return $result;\n}\n\n\
    echo implode(', ', make_a_pile(1)) . PHP_EOL;\necho implode(', ', make_a_pile(2))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(3)) . PHP_EOL;\necho implode(', ',\
    \ make_a_pile(4)) . PHP_EOL;\necho implode(', ', make_a_pile(5)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(6)) . PHP_EOL;\necho implode(', ', make_a_pile(7))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(8)) . PHP_EOL;\necho implode(', ',\
    \ make_a_pile(9)) . PHP_EOL;\necho implode(', ', make_a_pile(10)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(11)) . PHP_EOL;\necho implode(', ', make_a_pile(12))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(13)) . PHP_EOL;\necho implode(',\
    \ ', make_a_pile(14)) . PHP_EOL;\necho implode(', ', make_a_pile(15)) . PHP_EOL;\n\
    echo implode(', ', make_a_pile(16)) . PHP_EOL;\necho implode(', ', make_a_pile(17))\
    \ . PHP_EOL;\necho implode(', ', make_a_pile(18)) . PHP_EOL;\necho implode(',\
    \ ', make_a_pile(19)) . PHP_EOL;\necho implode(', ', make_a_pile", "    $result\
    \ = [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n = $n % 2 ==\
    \ 0 ? $n / 2 : ($n + 1) / 2;\n    }\n    return $result;\n}\n", "  $result = [];\n\
    \  while ($n > 0) {\n    $result[] = $n;\n    $n = $n % 2 == 0 ? $n / 2 : ($n\
    \ + 1) / 2;\n  }\n  return $result;\n}\n\nprint_r(make_a_pile(1));\nprint_r(make_a_pile(2));\n\
    print_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(6));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(11));\n\
    print_r(make_a_pile(12));\nprint_r(make_a_pile(13));\nprint_r(make_a_pile(14));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(16));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile(32));\n\
    print_", "    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0\
    \ ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n\
    }\necho implode(', ', make_a_pile(4)) . \"\\n\";\necho implode(', ', make_a_pile(5))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(6)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(7)) . \"\\n\";\necho implode(', ', make_a_pile(8)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(9)) . \"\\n\";\necho implode(', ', make_a_pile(10))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(11)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(12)) . \"\\n\";\necho implode(', ', make_a_pile(13)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(14)) . \"\\n\";\necho implode(', ', make_a_pile(15))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(16)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(17)) . \"\\n\";\necho implode(', ', make_a_pile(18)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(19)) . \"\\n\";\necho implode(', ', make_a_pile(20))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(21)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(22)) . \"\\n\";\necho implode(', ', make_a_pile(23)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(24)) . \"\\n\";\necho implode(', ', make_a_pile(25))\
    \ . \"\\n\";\necho implode(', ', make_", "    $arr = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $arr[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n\
    \ + 1;\n    }\n    return $arr;\n}\n", "  $result = [];\n  $result[] = $n;\n \
    \ while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n\
    \      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\nprint_r(make_a_pile(1));\nprint_r(make_a_pile(2));\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(7));\nprint_r(make_a_pile(8));\nprint_r(make_a_pile(9));\n\
    print_r(make_a_pile(10));\nprint_r(make_a_pile(11));\nprint_r(make_a_pile(12));\n\
    print_r(make_a_pile(13));\nprint_r(make_a_pile(14));\nprint_r(make_a_pile(15));\n\
    print_r(make_a_pile(16));\nprint_r(make_a_pile(17));\nprint_r(make_a_pile(18));\n\
    print_r(make_a_pile(19));\nprint_r(make_a_pile(20));\nprint_r(make_a_pile(21));\n\
    print_r(make_a_pile(22));\nprint_r(make_a_pile(23));\nprint_r(make_a_pile(24));\n\
    print_r(make_a_pile(25));\nprint_r(make_a_pile(26));\nprint_r(make_a_pile(27));\n\
    print_r(make_a_pile(28));\nprint_r(make_a_pile(29));\nprint_r(make_a_pile(30));\n\
    print_r(", "    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ==\
    \ 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i ==\
    \ 0) {\n            $result[] = $n;\n        } else {\n            $result[] =\
    \ $result[$i - 1] + ($result[$i - 1] % 2 == 0 ? 2 : 1);\n        }\n    }\n  \
    \  return $result;\n}\n", "    $result = [$n];\n    while ($n > 1) {\n       \
    \ $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n\necho implode(', ', make_a_pile(1)) . \"\\n\"; // 1\n\
    echo implode(', ', make_a_pile(2)) . \"\\n\"; // 2, 1\necho implode(', ', make_a_pile(3))\
    \ . \"\\n\"; // 3, 2, 1\necho implode(', ', make_a_pile(4)) . \"\\n\"; // 4, 2,\
    \ 1\necho implode(', ', make_a_pile(5)) . \"\\n\"; // 5, 3, 2, 1\necho implode(',\
    \ ', make_a_pile(6)) . \"\\n\"; // 6, 3, 2, 1\necho implode(', ', make_a_pile(7))\
    \ . \"\\n\"; // 7, 4, 2, 1\necho implode(', ', make_a_pile(8)) . \"\\n\"; // 8,\
    \ 4, 2, 1\necho implode(', ', make_a_pile(9)) . \"\\n\"; // 9, 5, 3, 2, 1\necho\
    \ implode(', ', make_a_pile(10)) . \"\\n\"; // 10, 5, 3, 2, 1\necho implode(',\
    \ ', make_a_pile(11)) . \"\\n\"; // 11, 6, 3, 2, 1\necho implode(', ', make_a_pile(12))\
    \ . \"\\n\"; // 12, 6, 3, 2, 1\necho implode(', ', make_a_pile(13)) . \"\\n\"\
    ; // 13, 7, 4, 2, 1\necho implode(', ', make_a_pile(14)) . \"\\n\"; // 14, 7,\
    \ 4, 2, 1\necho implode(', ', make_a_pile(15)) . \"\\n\"; // 15, 8, 4, 2, 1\n\
    echo implode(', ', make_a_pile(16)) . \"\\n\"; // 16, 8, 4, 2", "    $result =\
    \ [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n = $n % 2 ===\
    \ 0 ? $n / 2 : ($n + 1) / 2;\n    }\n    return $result;\n}\n", "    $result =\
    \ [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2 : ($n + 1) /\
    \ 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2 : ($n + 1)\
    \ / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n - 1 : $n / 2;\n    \
    \    $result[] = $n;\n    }\n    return $result;\n}\n", "    $result = [];\n \
    \   for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        if ($n % 2\
    \ == 0) {\n            $n += 2;\n        } else {\n            $n += 1;\n    \
    \    }\n    }\n    return $result;\n}\n", "    $result = [];\n    $result[] =\
    \ $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n /\
    \ 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n", "  $result = [];\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $result[] = $n;\n    $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n\
    \  }\n  return $result;\n}\n\nprint_r(make_a_pile(1));\nprint_r(make_a_pile(2));\n\
    print_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(6));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(11));\n\
    print_r(make_a_pile(12));\nprint_r(make_a_pile(13));\nprint_r(make_a_pile(14));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(16));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile", " \
    \   $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n %\
    \ 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
