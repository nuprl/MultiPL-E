language: php
name: HumanEval_158_find_max
results:
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abc',\
    \ 'abcd', 'abcde', 'abcdef'];\necho find_max($words);\necho \"\\n\";\n\n$words\
    \ = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words);\necho\
    \ \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\necho \"\\n\";\n\
    \n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg',\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3zypsb_1.php on line 52

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['a', 'ab', 'abc',\
    \ 'abcd', 'abcde'];\necho find_max($words);\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp378uwc5e.php:28\n\
    Stack trace:\n#0 /tmp/tmp378uwc5e.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp378uwc5e.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = array_unique(str_split($word));\n        if (count($chars) > $max)\
    \ {\n            $max = count($chars);\n            $max_word = $word;\n     \
    \   }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd', 'ab', 'abcde',\
    \ 'a', 'abdef'];\necho find_max($words);\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmiabm_q.php:27\n\
    Stack trace:\n#0 /tmp/tmptmiabm_q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptmiabm_q.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words); // abcdefg\n\n$words =\
    \ ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\
    \ // abcdefg\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words); // abcdefghi\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words);\
    \ // abcdefghij\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words); // abcdefghijk\n\
    \n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words); // abcdefghijkl\n\
    \n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijklm'];\necho find_max($words);\
    \ // abcdefghijklm\n\n$words = ['abc',\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpt223lsz1.php on line 41

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = [];\n        for ($i = 0; $i < strlen($word); $i++) {\n       \
    \     $chars[$word[$i]] = 1;\n        }\n        if (count($chars) > $max) {\n\
    \            $max = count($chars);\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef'];\n\
    echo find_max($words) . \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg'];\necho find_max($words) . \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd',\
    \ 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words) . \"\\n\";\n\n$words\
    \ = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\n\
    echo find_max($words) . \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words) .\
    \ \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words) . \"\\n\"\
    ;\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words) . \"\\\
    n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', '\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpr1cqyd56.php on line 43

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'ab', 'a'];\necho find_max($words);\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc789h30k.php:28\n\
    Stack trace:\n#0 /tmp/tmpc789h30k.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpc789h30k.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'a', 'ab', 'abcd'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprukmi1zr.php:27\n\
    Stack trace:\n#0 /tmp/tmprukmi1zr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprukmi1zr.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['hello', 'world',\
    \ 'after', 'school'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "world\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t_k8_c9.php:27\n\
    Stack trace:\n#0 /tmp/tmp0t_k8_c9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0t_k8_c9.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpmd69c8v4.php:10\nStack trace:\n#0 /tmp/tmpmd69c8v4.php(20): find_max(Array)\n\
    #1 /tmp/tmpmd69c8v4.php(24): candidate(Array)\n#2 /tmp/tmpmd69c8v4.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmd69c8v4.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a', 'abcdef'];\necho find_max($words) . \"\\n\";\n\n$words =\
    \ ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg',\
    \ 'abcdefgh'];\necho find_max($words) . \"\\n\";\n\n$words = ['abc', 'abcd', 'ab',\
    \ 'abcde', 'a', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words) . \"\\n\";\n\n\
    $words = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words) . \"\\n\"\
    ;\n\n$words = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abc\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpo0k9j8p6.php on line 40

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzxdbvslz.php:10\nStack trace:\n#0 /tmp/tmpzxdbvslz.php(20): find_max(Array)\n\
    #1 /tmp/tmpzxdbvslz.php(24): candidate(Array)\n#2 /tmp/tmpzxdbvslz.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzxdbvslz.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdnlss36.php:28\n\
    Stack trace:\n#0 /tmp/tmpzdnlss36.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzdnlss36.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'abd', 'a', 'ab'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpraztszyx.php:27\n\
    Stack trace:\n#0 /tmp/tmpraztszyx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpraztszyx.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = $words[0];\n    $max_count = count(array_unique(str_split($words[0])));\n\
    \    foreach ($words as $word) {\n        $count = count(array_unique(str_split($word)));\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n$words\
    \ = ['abc', 'abcd', 'abcd', 'abcde', 'abcdef'];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl48_6wkl.php:27\n\
    Stack trace:\n#0 /tmp/tmpl48_6wkl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpl48_6wkl.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiu88wwxx.php:27\n\
    Stack trace:\n#0 /tmp/tmpiu88wwxx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpiu88wwxx.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpmd69c8v4.php:10\nStack trace:\n#0 /tmp/tmpmd69c8v4.php(20): find_max(Array)\n\
    #1 /tmp/tmpmd69c8v4.php(24): candidate(Array)\n#2 /tmp/tmpmd69c8v4.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmd69c8v4.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words); // abcde\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words); // abcdef\n\n$words =\
    \ ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\
    \ // abcdefg\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words); // abcdefgh\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words);\
    \ // abcdefghi\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words); // abcdefghij\n\
    \n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words); // abcdefghijk\n\
    \n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdef\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9hg93wbe.php on line 40

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzxdbvslz.php:10\nStack trace:\n#0 /tmp/tmpzxdbvslz.php(20): find_max(Array)\n\
    #1 /tmp/tmpzxdbvslz.php(24): candidate(Array)\n#2 /tmp/tmpzxdbvslz.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzxdbvslz.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcde\", \"abcd\", \"abcdef\", \"abcdefgh\", \"abcdefghij\"];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghij\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijcr7zde.php:27\n\
    Stack trace:\n#0 /tmp/tmpijcr7zde.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpijcr7zde.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $unique_count = count($unique_chars);\n        if ($unique_count > $max)\
    \ {\n            $max = $unique_count;\n            $max_word = $word;\n     \
    \   }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg'];\necho find_max($words);\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfbcuuzk.php:29\n\
    Stack trace:\n#0 /tmp/tmpqfbcuuzk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqfbcuuzk.php\
    \ on line 29\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9h0aac4.php:27\n\
    Stack trace:\n#0 /tmp/tmpv9h0aac4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpv9h0aac4.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef'];\necho find_max($words)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnrn83x3.php:27\n\
    Stack trace:\n#0 /tmp/tmpjnrn83x3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjnrn83x3.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_word = '';\n  $max_count = 0;\n  foreach ($words as $word) {\n   \
    \ $unique_chars = array_unique(str_split($word));\n    $unique_count = count($unique_chars);\n\
    \    if ($unique_count > $max_count) {\n      $max_count = $unique_count;\n  \
    \    $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\n$words = ['abc',\
    \ 'defgh', 'ijklmnop', 'qrstuvwxyz'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "qrstuvwxyz\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyimg0pob.php:28\n\
    Stack trace:\n#0 /tmp/tmpyimg0pob.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyimg0pob.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcdef', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\necho \"\\n\";\n\
    \n$words = ['abc', 'abcde', 'abcdef', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde', 'abcdef', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words);\necho \"\\\
    n\";\n\n$words = ['abc', 'abcde', 'abcdef', 'abcdefgh', 'abcdefghi', 'abcdefghij',\
    \ 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words);\necho \"\\n\";\n\n$words\
    \ = ['abc', 'abcde', 'abcdef', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk',\
    \ 'abcdefghijkl', 'abcdefghijklm'];\necho find_max($words);\necho \"\\n\";\n\n\
    $words = ['abc', 'abcde', 'abcdef', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk',\
    \ 'abcdefghijkl', 'abcdefghijklm', 'abcdefghijklmn'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abc', 'abcde', 'abcdef', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijklm', 'abcdefghijklmn',\
    \ 'abcdefghijkl\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvf1zzm02.php on line 43

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'a', 'ab', 'abcd'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprukmi1zr.php:27\n\
    Stack trace:\n#0 /tmp/tmprukmi1zr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprukmi1zr.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a', 'abcdef'];\necho find_max($words); // abcdef\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptba3lzxd.php:28\n\
    Stack trace:\n#0 /tmp/tmptba3lzxd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptba3lzxd.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'abd', 'abcde'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abc',\
    \ 'abcd', 'abd', 'abcde', 'abcdef'];\necho find_max($words);\necho \"\\n\";\n\n\
    $words = ['abc', 'abcd', 'abd', 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abc', 'abcd', 'abd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcd',\
    \ 'abd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abc', 'abcd', 'abd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words);\necho \"\\n\"\
    ;\n\n$words = ['abc', 'abcd', 'abd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words);\necho \"\\\
    n\";\n\n$words = ['abc', 'abcd', 'abd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words);\n\
    echo\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy9xsuhm1.php on line 50

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcdef', 'abcdefgh', 'abcdefghi'];\n\
    echo find_max($words); // abcdefghi\n\n$words = ['abc', 'abcde', 'abcdef', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij'];\necho find_max($words); // abcdefghij\n\n$words\
    \ = ['abc', 'abcde', 'abcdef', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\n\
    echo find_max($words); // abcdefghijk\n\n$words = ['abc', 'abcde', 'abcdef', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words);\
    \ // abcdefghijkl\n\n$words = ['abc', 'abcde', 'abcdef', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijklm'];\necho find_max($words);\
    \ // abcdefghijklm\n\n$words = ['abc', 'abcde', 'abcdef', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijklm', 'abcdefghijklmn'];\n\
    echo find_max($words); // abcdefghijklmn\n\n$words = ['abc', 'abcde', 'abcdef',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijklm',\
    \ 'abcdef\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk60p4vqu.php on line 37

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'abcd'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8o7_01ax.php:27\n\
    Stack trace:\n#0 /tmp/tmp8o7_01ax.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8o7_01ax.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzxdbvslz.php:10\nStack trace:\n#0 /tmp/tmpzxdbvslz.php(20): find_max(Array)\n\
    #1 /tmp/tmpzxdbvslz.php(24): candidate(Array)\n#2 /tmp/tmpzxdbvslz.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzxdbvslz.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"ab\", \"abcde\", \"a\", \"abdefg\"];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk5ttynj.php:27\n\
    Stack trace:\n#0 /tmp/tmpqk5ttynj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqk5ttynj.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiu88wwxx.php:27\n\
    Stack trace:\n#0 /tmp/tmpiu88wwxx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpiu88wwxx.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = count_unique_chars($word);\n    if ($unique_chars > $max) {\n      $max =\
    \ $unique_chars;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpva9kcde7.php:10\nStack trace:\n#0 /tmp/tmpva9kcde7.php(20): find_max(Array)\n\
    #1 /tmp/tmpva9kcde7.php(24): candidate(Array)\n#2 /tmp/tmpva9kcde7.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpva9kcde7.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = $words[0];\n    $max_count = count(array_unique(str_split($words[0])));\n\
    \    for ($i = 1; $i < count($words); $i++) {\n        $count = count(array_unique(str_split($words[$i])));\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\n\
    $words = array(\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    , \"abcdefghi\");\necho find_max($words);\nfunction candidate(...$args) {\n  \
    \  return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghi\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7xz3o10.php:27\n\
    Stack trace:\n#0 /tmp/tmpb7xz3o10.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpb7xz3o10.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghi\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_63qv0j.php:27\n\
    Stack trace:\n#0 /tmp/tmpm_63qv0j.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm_63qv0j.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5ntjvi0.php:28\n\
    Stack trace:\n#0 /tmp/tmps5ntjvi0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps5ntjvi0.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg'];\necho\
    \ find_max($words) . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzuxu_uy.php:27\n\
    Stack trace:\n#0 /tmp/tmphzuxu_uy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphzuxu_uy.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $count = count($unique_chars);\n        if ($count > $max_count) {\n\
    \            $max_count = $count;\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd', 'ab', 'abcde'];\n\
    echo find_max($words);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcg42ug1u.php:29\n\
    Stack trace:\n#0 /tmp/tmpcg42ug1u.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcg42ug1u.php\
    \ on line 29\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words) . \"\\n\";\n\n$words =\
    \ ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words) . \"\\\
    n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'];\n\
    echo find_max($words) . \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words) . \"\\n\";\n\n$words\
    \ = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\n\
    echo find_max($words) . \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijkl\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0iqi85l4.php on line 40

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpmd69c8v4.php:10\nStack trace:\n#0 /tmp/tmpmd69c8v4.php(20): find_max(Array)\n\
    #1 /tmp/tmpmd69c8v4.php(24): candidate(Array)\n#2 /tmp/tmpmd69c8v4.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmd69c8v4.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = count_chars($word, 1);\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9mcm9qa.php:28\n\
    Stack trace:\n#0 /tmp/tmps9mcm9qa.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps9mcm9qa.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpmd69c8v4.php:10\nStack trace:\n#0 /tmp/tmpmd69c8v4.php(20): find_max(Array)\n\
    #1 /tmp/tmpmd69c8v4.php(24): candidate(Array)\n#2 /tmp/tmpmd69c8v4.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmd69c8v4.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a'];\necho find_max($words); // abcde\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a', 'abcdef'];\necho find_max($words); // abcdef\n\n$words =\
    \ ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg'];\necho find_max($words);\
    \ // abcdefg\n\n$words = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg',\
    \ 'abcdefgh'];\necho find_max($words); // abcdefgh\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\
    \ // abcdefghi\n\n$words = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words); // abcdefghij\n\
    \n$words = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words); // abcdefghijk\n\
    \n$words = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', '\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqsoapk07.php on line 40

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'abcdc', 'abcdcc', 'abcdd'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqllgi8a.php:27\n\
    Stack trace:\n#0 /tmp/tmphqllgi8a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphqllgi8a.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "eight\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0amdoix.php:27\n\
    Stack trace:\n#0 /tmp/tmpm0amdoix.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm0amdoix.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fty290_.php:27\n\
    Stack trace:\n#0 /tmp/tmp8fty290_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8fty290_.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpmd69c8v4.php:10\nStack trace:\n#0 /tmp/tmpmd69c8v4.php(20): find_max(Array)\n\
    #1 /tmp/tmpmd69c8v4.php(24): candidate(Array)\n#2 /tmp/tmpmd69c8v4.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmd69c8v4.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = array_unique(str_split($word));\n        if (count($chars) > $max)\
    \ {\n            $max = count($chars);\n            $max_word = $word;\n     \
    \   }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd', 'abd', 'a',\
    \ 'az'];\necho find_max($words); // abcd\n\n$words = ['abc', 'abcd', 'abd', 'a',\
    \ 'az', 'bcd'];\necho find_max($words); // abcd\n\n$words = ['abc', 'abcd', 'abd',\
    \ 'a', 'az', 'bcd', 'bcdz'];\necho find_max($words); // bcdz\n\n$words = ['abc',\
    \ 'abcd', 'abd', 'a', 'az', 'bcd', 'bcdz', 'bcdz'];\necho find_max($words); //\
    \ bcdz\n\n$words = ['abc', 'abcd', 'abd', 'a', 'az', 'bcd', 'bcdz', 'bcdz', 'bcdz'];\n\
    echo find_max($words); // bcdz\n\n$words = ['abc', 'abcd', 'abd', 'a', 'az', 'bcd',\
    \ 'bcdz', 'bcdz', 'bcdz', 'bcdz'];\necho find_max($words); // bcdz\n\n$words =\
    \ ['abc', 'abcd', 'abd', 'a', 'az', 'bcd', 'bcdz', 'bcdz', 'bcdz', 'bcdz', 'bcdz'];\n\
    echo find_max($words); // bcdz\n\n$words = ['abc', 'abcd', 'abd', 'a', 'az', 'bcd',\
    \ 'bcdz', 'bcdz', 'bcdz', 'bcdz', 'bcdz', 'bcdz'];\necho find_max($words); //\
    \ bcdz\n\n$words = ['abc',\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp44cqi4r.php on line 44

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_count = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n   \
    \ $count = count_unique_chars($word);\n    if ($count > $max_count) {\n      $max_count\
    \ = $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpfux3a5is.php:10\nStack trace:\n#0 /tmp/tmpfux3a5is.php(20): find_max(Array)\n\
    #1 /tmp/tmpfux3a5is.php(24): candidate(Array)\n#2 /tmp/tmpfux3a5is.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfux3a5is.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_characters($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpn0f7kvkl.php:10\nStack trace:\n#0 /tmp/tmpn0f7kvkl.php(20): find_max(Array)\n\
    #1 /tmp/tmpn0f7kvkl.php(24): candidate(Array)\n#2 /tmp/tmpn0f7kvkl.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn0f7kvkl.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzxdbvslz.php:10\nStack trace:\n#0 /tmp/tmpzxdbvslz.php(20): find_max(Array)\n\
    #1 /tmp/tmpzxdbvslz.php(24): candidate(Array)\n#2 /tmp/tmpzxdbvslz.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzxdbvslz.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd52atip.php:27\n\
    Stack trace:\n#0 /tmp/tmpfd52atip.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfd52atip.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5ntjvi0.php:28\n\
    Stack trace:\n#0 /tmp/tmps5ntjvi0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps5ntjvi0.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $unique_chars = array_unique(str_split($word));\n        $unique_count\
    \ = count($unique_chars);\n        if ($unique_count > $max_count) {\n       \
    \     $max_count = $unique_count;\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"abcde\", \"abcd\", \"\
    abcdef\"];\necho find_max($words) . \"\\n\"; // abcdef\n\n$words = [\"abc\", \"\
    abcde\", \"abcd\", \"abcdef\", \"abcdefg\"];\necho find_max($words) . \"\\n\"\
    ; // abcdefg\n\n$words = [\"abc\", \"abcde\", \"abcd\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\"];\necho find_max($words) . \"\\n\"; // abcdefgh\n\n$words = [\"\
    abc\", \"abcde\", \"abcd\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    ];\necho find_max($words) . \"\\n\"; // abcdefghi\n\n$words = [\"abc\", \"abcde\"\
    , \"abcd\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    ];\necho find_max($words) . \"\\n\"; // abcdefghij\n\n$words = [\"abc\", \"abcde\"\
    , \"abcd\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\"];\necho find_max($words) . \"\\n\"; // abcdefghijk\n\n$words\
    \ = [\"abc\", \"abcde\", \"abcd\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"];\necho find_max($words) .\
    \ \"\\n\"; // abcdefghijkl\n\n$words = [\"abc\", \"abcde\", \"\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpldx1jq1l.php on line 47

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'ab', 'a'];\necho find_max($words); // abcd\n\n$words = ['abcd', 'abc', 'ab',\
    \ 'a', 'abcde'];\necho find_max($words); // abcde\n\n$words = ['abcd', 'abc',\
    \ 'ab', 'a', 'abcde', 'abcdef'];\necho find_max($words); // abcdef\n\n$words =\
    \ ['abcd', 'abc', 'ab', 'a', 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words);\
    \ // abcdefg\n\n$words = ['abcd', 'abc', 'ab', 'a', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh'];\necho find_max($words); // abcdefgh\n\n$words = ['abcd', 'abc',\
    \ 'ab', 'a', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\
    \ // abcdefghi\n\n$words = ['abcd', 'abc', 'ab', 'a', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words); // abcdefghij\n\
    \n$words = ['abcd', 'abc', 'ab', 'a', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words); // abcdefghijk\n\
    \n$words = ['abcd', 'abc', 'ab', 'a', 'abcde', 'abcdef\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp738ph6y0.php on line 43

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fcxdf9c.php:27\n\
    Stack trace:\n#0 /tmp/tmp1fcxdf9c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1fcxdf9c.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'de',\
    \ 'fghij', 'klmno', 'pqrstuvwxyz'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "pqrstuvwxyz\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqg_23ker.php:28\n\
    Stack trace:\n#0 /tmp/tmpqg_23ker.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqg_23ker.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = count_chars($word, 1);\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'de',\
    \ 'fghi', 'jk', 'lmnopqr', 'st', 'uvwxyz'];\necho find_max($words);\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "lmnopqr\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rwudocc.php:28\n\
    Stack trace:\n#0 /tmp/tmp3rwudocc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3rwudocc.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz'];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96mezz1e.php:27\n\
    Stack trace:\n#0 /tmp/tmp96mezz1e.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp96mezz1e.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef'];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylvdttdp.php:27\n\
    Stack trace:\n#0 /tmp/tmpylvdttdp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpylvdttdp.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpmd69c8v4.php:10\nStack trace:\n#0 /tmp/tmpmd69c8v4.php(20): find_max(Array)\n\
    #1 /tmp/tmpmd69c8v4.php(24): candidate(Array)\n#2 /tmp/tmpmd69c8v4.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmd69c8v4.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'abcdc', 'abcde'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexo_iwd2.php:27\n\
    Stack trace:\n#0 /tmp/tmpexo_iwd2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpexo_iwd2.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'abcdc', 'abcdcc', 'abcdd'];\necho find_max($words) . \"\\n\";\n\n$words = ['abcd',\
    \ 'abc', 'abcdc', 'abcdcc', 'abcdd', 'abcddd'];\necho find_max($words) . \"\\\
    n\";\n\n$words = ['abcd', 'abc', 'abcdc', 'abcdcc', 'abcdd', 'abcddd', 'a'];\n\
    echo find_max($words) . \"\\n\";\n\n$words = ['abcd', 'abc', 'abcdc', 'abcdcc',\
    \ 'abcdd', 'abcddd', 'a', 'ab'];\necho find_max($words) . \"\\n\";\n\n$words =\
    \ ['abcd', 'abc', 'abcdc', 'abcdcc', 'abcdd', 'abcddd', 'a', 'ab', 'abcde'];\n\
    echo find_max($words) . \"\\n\";\n\n$words = ['abcd', 'abc', 'abcdc', 'abcdcc',\
    \ 'abcdd', 'abcddd', 'a', 'ab', 'abcde', 'abcdee'];\necho find_max($words) . \"\
    \\n\";\n\n$words = ['abcd', 'abc', 'abcdc', 'abcdcc', 'abcdd', 'abcddd', 'a',\
    \ 'ab', 'abcde', 'abcdee', 'abcdeee'];\necho find_max($words) . \"\\n\";\n\n$words\
    \ = ['abcd', 'abc', 'abcdc', 'abcdcc', 'abcdd', 'abcddd', 'a', 'ab', 'abcde',\
    \ 'abcdee', 'abcdeee', 'abcd\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkwr1fdkm.php on line 40

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = count_chars($word, 1);\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdefgh', 'abcdefghijklmnopqrstuvwxyz'];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghijklmnopqrstuvwxyz\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpahhv4x6f.php:27\nStack trace:\n#0 /tmp/tmpahhv4x6f.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpahhv4x6f.php on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd52atip.php:27\n\
    Stack trace:\n#0 /tmp/tmpfd52atip.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfd52atip.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words); // abcdefg\n\n$words =\
    \ ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\
    \ // abcdefgh\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words); // abcdefghi\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words);\
    \ // abcdefghij\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words); // abcdefghijk\n\
    \n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words); // abcdefghijkl\n\
    \n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijklm'];\necho find_max($words);\
    \ // abcdefghijklm\n\n$words = ['abc',\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpq_ct8ttq.php on line 41

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abd', 'abcd'];\necho find_max($words); // abcd\necho \"\\n\";\n\n$words\
    \ = ['abc', 'abcd', 'ab', 'abd', 'abcd', 'abcde'];\necho find_max($words); //\
    \ abcde\necho \"\\n\";\n\n$words = ['abc', 'abcd', 'ab', 'abd', 'abcd', 'abcde',\
    \ 'abcdef'];\necho find_max($words); // abcdef\necho \"\\n\";\n\n$words = ['abc',\
    \ 'abcd', 'ab', 'abd', 'abcd', 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words);\
    \ // abcdefg\necho \"\\n\";\n\n$words = ['abc', 'abcd', 'ab', 'abd', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words); // abcdefgh\necho\
    \ \"\\n\";\n\n$words = ['abc', 'abcd', 'ab', 'abd', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words); // abcdefghi\n\
    echo \"\\n\";\n\n$words = ['abc', 'abcd', 'ab', 'abd', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words); //\
    \ abcdefghij\necho \"\\n\";\n\n$words = ['abc', 'abcd', 'ab', 'abd', 'abcd', '\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcp0526ei.php on line 47

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words); // abcde\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef'];\necho find_max($words); // abcdef\n\n$words = ['abc', 'abc',\
    \ 'abc', 'abc'];\necho find_max($words); // abc\n\n$words = ['abc', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg'];\necho find_max($words); // abcdefg\n\n$words = ['abc',\
    \ 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words); //\
    \ abcdefgh\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words); // abcdefghi\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho\
    \ find_max($words); // abcdefghij\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words);\
    \ // abcdefghijk\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefabcdefabcabcdefgabcdefghabcdefghiabcdefghijabcdefghijkabcdefghijkl\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpz2b0_n0k.php:51\nStack\
    \ trace:\n#0 /tmp/tmpz2b0_n0k.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpz2b0_n0k.php\
    \ on line 51\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9_ofvid.php:28\n\
    Stack trace:\n#0 /tmp/tmps9_ofvid.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps9_ofvid.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fcxdf9c.php:27\n\
    Stack trace:\n#0 /tmp/tmp1fcxdf9c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1fcxdf9c.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = count_unique_chars($word);\n    if ($unique_chars > $max) {\n      $max =\
    \ $unique_chars;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpva9kcde7.php:10\nStack trace:\n#0 /tmp/tmpva9kcde7.php(20): find_max(Array)\n\
    #1 /tmp/tmpva9kcde7.php(24): candidate(Array)\n#2 /tmp/tmpva9kcde7.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpva9kcde7.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = $words[0];\n    $max_count = count(array_unique(str_split($words[0])));\n\
    \    foreach ($words as $word) {\n        $count = count(array_unique(str_split($word)));\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n$words\
    \ = ['abcd', 'abc', 'ab', 'a'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1oc65riu.php:27\n\
    Stack trace:\n#0 /tmp/tmp1oc65riu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1oc65riu.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'abd', 'a', 'ab'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd',\
    \ 'abc', 'abd', 'a', 'ab', 'abcde'];\necho find_max($words);\necho \"\\n\";\n\n\
    $words = ['abcd', 'abc', 'abd', 'a', 'ab', 'abcde', 'abcdef'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abcd', 'abc', 'abd', 'a', 'ab', 'abcde', 'abcdef',\
    \ 'abcdefg'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc',\
    \ 'abd', 'a', 'ab', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abcd', 'abc', 'abd', 'a', 'ab', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\necho \"\\n\";\n\
    \n$words = ['abcd', 'abc', 'abd', 'a', 'ab', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij'];\necho find_max($words);\necho \"\\n\";\n\n$words\
    \ = ['abcd', 'abc', 'abd', 'a', 'ab', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvpqjdrzc.php on line 49

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvswm4n_q.php:27\n\
    Stack trace:\n#0 /tmp/tmpvswm4n_q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvswm4n_q.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'def',\
    \ 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz'];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96mezz1e.php:27\n\
    Stack trace:\n#0 /tmp/tmp96mezz1e.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp96mezz1e.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8stirsh.php:25\n\
    Stack trace:\n#0 /tmp/tmpr8stirsh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpr8stirsh.php\
    \ on line 25\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdefghijklmnopqrstuvwxyz'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghijklmnopqrstuvwxyz\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpcbds4y1o.php:27\nStack trace:\n#0 /tmp/tmpcbds4y1o.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpcbds4y1o.php on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcde\", \"abcd\", \"abcdef\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgk6mgh7.php:27\n\
    Stack trace:\n#0 /tmp/tmpdgk6mgh7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdgk6mgh7.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzxdbvslz.php:10\nStack trace:\n#0 /tmp/tmpzxdbvslz.php(20): find_max(Array)\n\
    #1 /tmp/tmpzxdbvslz.php(24): candidate(Array)\n#2 /tmp/tmpzxdbvslz.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzxdbvslz.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = ['abc', 'abcde', 'aabbcc', 'abcdefghijklmnopqrstuvwxyz'];\n\
    echo find_max($words);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghijklmnopqrstuvwxyz\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpno7meqf0.php:27\nStack trace:\n#0 /tmp/tmpno7meqf0.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpno7meqf0.php on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"ab\", \"a\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8v9qdwcr.php:27\n\
    Stack trace:\n#0 /tmp/tmp8v9qdwcr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8v9qdwcr.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = $words[0];\n    $max_count = count(array_unique(str_split($words[0])));\n\
    \    foreach ($words as $word) {\n        $count = count(array_unique(str_split($word)));\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n$words\
    \ = ['abc', 'abcd', 'ab', 'abcde', 'a'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wa9kqgz.php:27\n\
    Stack trace:\n#0 /tmp/tmp_wa9kqgz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_wa9kqgz.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd52atip.php:27\n\
    Stack trace:\n#0 /tmp/tmpfd52atip.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfd52atip.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = count_chars($word, 1);\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyu6kya3.php:28\n\
    Stack trace:\n#0 /tmp/tmplyu6kya3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplyu6kya3.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5ntjvi0.php:28\n\
    Stack trace:\n#0 /tmp/tmps5ntjvi0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps5ntjvi0.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_characters($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_characters()\
    \ in /tmp/tmpo_rf3k9l.php:10\nStack trace:\n#0 /tmp/tmpo_rf3k9l.php(20): find_max(Array)\n\
    #1 /tmp/tmpo_rf3k9l.php(24): candidate(Array)\n#2 /tmp/tmpo_rf3k9l.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo_rf3k9l.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = $words[0];\n    $max_count = count(array_unique(str_split($words[0])));\n\
    \    for ($i = 1; $i < count($words); $i++) {\n        $count = count(array_unique(str_split($words[$i])));\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\n\
    $words = [\"abc\", \"abcd\", \"abcde\", \"abcdef\"];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96fv2q26.php:27\n\
    Stack trace:\n#0 /tmp/tmp96fv2q26.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp96fv2q26.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['apple', 'banana',\
    \ 'orange', 'pineapple', 'strawberry'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "strawberry\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2m8mloy.php:27\n\
    Stack trace:\n#0 /tmp/tmpt2m8mloy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpt2m8mloy.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['a', 'abc',\
    \ 'abcd', 'abcde', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmesq7d0.php:27\n\
    Stack trace:\n#0 /tmp/tmpsmesq7d0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsmesq7d0.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiu88wwxx.php:27\n\
    Stack trace:\n#0 /tmp/tmpiu88wwxx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpiu88wwxx.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $count = count($unique_chars);\n        if ($count > $max) {\n      \
    \      $max = $count;\n            $max_word = $word;\n        }\n    }\n    return\
    \ $max_word;\n}\n\n$words = ['abc', 'abcd', 'abcdabcd', 'abcdefghijklmnopqrstuvwxyz'];\n\
    echo find_max($words);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghijklmnopqrstuvwxyz\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpy85v7lv8.php:29\nStack trace:\n#0 /tmp/tmpy85v7lv8.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpy85v7lv8.php on line 29\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzxdbvslz.php:10\nStack trace:\n#0 /tmp/tmpzxdbvslz.php(20): find_max(Array)\n\
    #1 /tmp/tmpzxdbvslz.php(24): candidate(Array)\n#2 /tmp/tmpzxdbvslz.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzxdbvslz.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdud4yw_3.php:28\n\
    Stack trace:\n#0 /tmp/tmpdud4yw_3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdud4yw_3.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'ab', 'a'];\necho find_max($words);\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc789h30k.php:28\n\
    Stack trace:\n#0 /tmp/tmpc789h30k.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpc789h30k.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_word = '';\n  $max_count = 0;\n  foreach ($words as $word) {\n   \
    \ $count = count_unique_chars($word);\n    if ($count > $max_count) {\n      $max_count\
    \ = $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmppjczgk28.php:10\nStack trace:\n#0 /tmp/tmppjczgk28.php(20): find_max(Array)\n\
    #1 /tmp/tmppjczgk28.php(24): candidate(Array)\n#2 /tmp/tmppjczgk28.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmppjczgk28.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd52atip.php:27\n\
    Stack trace:\n#0 /tmp/tmpfd52atip.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfd52atip.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'a', 'ab'];\necho find_max($words);\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkfud_93m.php:27\n\
    Stack trace:\n#0 /tmp/tmpkfud_93m.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkfud_93m.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = $words[0];\n    $max_count = count(array_unique(str_split($words[0])));\n\
    \    for ($i = 1; $i < count($words); $i++) {\n        $count = count(array_unique(str_split($words[$i])));\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $words[$i];\n        }\n    }\n    return $max_word;\n}\n\n\
    $words = array(\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    );\necho find_max($words);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefgh\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph170ao9q.php:27\n\
    Stack trace:\n#0 /tmp/tmph170ao9q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmph170ao9q.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'abd', 'abcd'];\necho find_max($words);\nfunction candidate(...$args) {\n  \
    \  return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxotpn3oj.php:27\n\
    Stack trace:\n#0 /tmp/tmpxotpn3oj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxotpn3oj.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $count = count($unique_chars);\n        if ($count > $max) {\n      \
    \      $max = $count;\n            $max_word = $word;\n        }\n    }\n    return\
    \ $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef'];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvdll3wks.php:29\n\
    Stack trace:\n#0 /tmp/tmpvdll3wks.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvdll3wks.php\
    \ on line 29\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"ab\", \"a\", \"abcde\"];\necho find_max($words) . \"\\n\";\n\n$words\
    \ = [\"abc\", \"abcd\", \"ab\", \"a\", \"abcde\", \"abcdef\"];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = [\"abc\", \"abcd\", \"ab\", \"a\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"];\necho find_max($words) . \"\\n\";\n\n$words = [\"abc\", \"abcd\"\
    , \"ab\", \"a\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = [\"abc\", \"abcd\", \"ab\", \"a\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\", \"abcdefghi\"];\necho find_max($words) . \"\\n\"\
    ;\n\n$words = [\"abc\", \"abcd\", \"ab\", \"a\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"];\necho find_max($words) . \"\\\
    n\";\n\n$words = [\"abc\", \"abcd\", \"ab\", \"a\", \"abcde\", \"abcdef\", \"\
    abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"];\necho\
    \ find_max($words) . \"\\n\";\n\n$words = [\"abc\", \"abcd\", \"ab\", \"a\", \"\
    abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"];\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nabcdef\nabcdefg\nabcdefgh\nabcdefghi\nabcdefghij\nabcdefghijk\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpsk43etjr.php:48\nStack\
    \ trace:\n#0 /tmp/tmpsk43etjr.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpsk43etjr.php\
    \ on line 48\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzxdbvslz.php:10\nStack trace:\n#0 /tmp/tmpzxdbvslz.php(20): find_max(Array)\n\
    #1 /tmp/tmpzxdbvslz.php(24): candidate(Array)\n#2 /tmp/tmpzxdbvslz.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzxdbvslz.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvswm4n_q.php:27\n\
    Stack trace:\n#0 /tmp/tmpvswm4n_q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvswm4n_q.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'a', 'ab', 'abcde'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd',\
    \ 'abc', 'a', 'ab', 'abcde', 'abcdef'];\necho find_max($words);\necho \"\\n\"\
    ;\n\n$words = ['abcd', 'abc', 'a', 'ab', 'abcde', 'abcdef', 'abcd'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abcd', 'abc', 'a', 'ab', 'abcde', 'abcdef', 'abcd',\
    \ 'abcdefg'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc',\
    \ 'a', 'ab', 'abcde', 'abcdef', 'abcd', 'abcdefg', 'abcdefgh'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abcd', 'abc', 'a', 'ab', 'abcde', 'abcdef', 'abcd',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\necho \"\\n\";\n\
    \n$words = ['abcd', 'abc', 'a', 'ab', 'abcde', 'abcdef', 'abcd', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij'];\necho find_max($words);\necho \"\\n\";\n\n$words\
    \ = ['abcd', 'abc', 'a', 'ab', 'abcde', 'abcdef', 'abcd', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmo0njecv.php on line 49

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $chars = array();\n        for ($i = 0; $i < strlen($word); $i++) {\n\
    \            $chars[$word[$i]] = true;\n        }\n        if (count($chars) >\
    \ $max) {\n            $max = count($chars);\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\n\n$words = array(\"apple\", \"banana\"\
    , \"orange\", \"pineapple\", \"strawberry\");\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "strawberry\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp655dmtn6.php:30\n\
    Stack trace:\n#0 /tmp/tmp655dmtn6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp655dmtn6.php\
    \ on line 30\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpzxdbvslz.php:10\nStack trace:\n#0 /tmp/tmpzxdbvslz.php(20): find_max(Array)\n\
    #1 /tmp/tmpzxdbvslz.php(24): candidate(Array)\n#2 /tmp/tmpzxdbvslz.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzxdbvslz.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdukfwvc.php:27\n\
    Stack trace:\n#0 /tmp/tmpwdukfwvc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwdukfwvc.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = array_unique(str_split($word));\n        if (count($chars) > $max)\
    \ {\n            $max = count($chars);\n            $max_word = $word;\n     \
    \   }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef'];\n\
    echo find_max($words);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgcc11bl2.php:27\n\
    Stack trace:\n#0 /tmp/tmpgcc11bl2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgcc11bl2.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_word = \"\";\n  $max_count = 0;\n  foreach ($words as $word) {\n \
    \   $count = count_unique_chars($word);\n    if ($count > $max_count) {\n    \
    \  $max_count = $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp7nhlx8_8.php:10\nStack trace:\n#0 /tmp/tmp7nhlx8_8.php(20): find_max(Array)\n\
    #1 /tmp/tmp7nhlx8_8.php(24): candidate(Array)\n#2 /tmp/tmp7nhlx8_8.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7nhlx8_8.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = count_unique_chars($word);\n    if ($unique_chars > $max) {\n      $max =\
    \ $unique_chars;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpva9kcde7.php:10\nStack trace:\n#0 /tmp/tmpva9kcde7.php(20): find_max(Array)\n\
    #1 /tmp/tmpva9kcde7.php(24): candidate(Array)\n#2 /tmp/tmpva9kcde7.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpva9kcde7.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdukfwvc.php:27\n\
    Stack trace:\n#0 /tmp/tmpwdukfwvc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwdukfwvc.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"ab\", \"a\", \"abd\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9k3c_ow.php:27\n\
    Stack trace:\n#0 /tmp/tmpw9k3c_ow.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw9k3c_ow.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'bcd',\
    \ 'cde', 'def', 'efg', 'fgh', 'ghi', 'hij', 'ijk', 'jkl', 'klm', 'lmn', 'mno',\
    \ 'nop', 'opq', 'pqr', 'qrs', 'rst', 'stu', 'tuv', 'uvw', 'vwx', 'wxy', 'xyz'];\n\
    echo find_max($words);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_g84hooh.php:27\n\
    Stack trace:\n#0 /tmp/tmp_g84hooh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_g84hooh.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'ab', 'a', 'aabbccdd', 'aabbccddeeff'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "aabbccddeeff\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3grmv61h.php:27\n\
    Stack trace:\n#0 /tmp/tmp3grmv61h.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3grmv61h.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"ab\", \"abcde\", \"a\", \"abdefg\"];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk5ttynj.php:27\n\
    Stack trace:\n#0 /tmp/tmpqk5ttynj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqk5ttynj.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"ab\", \"abcde\", \"a\", \"abcdef\"];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevjmtk00.php:27\n\
    Stack trace:\n#0 /tmp/tmpevjmtk00.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpevjmtk00.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9_ofvid.php:28\n\
    Stack trace:\n#0 /tmp/tmps9_ofvid.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps9_ofvid.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvswm4n_q.php:27\n\
    Stack trace:\n#0 /tmp/tmpvswm4n_q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvswm4n_q.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\necho \"\\n\";\n\n$words\
    \ = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words);\necho \"\\\
    n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words);\necho\
    \ \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijklm'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd',\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp25kciwz2.php on line 48

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = count_chars($word, 1);\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef'];\necho find_max($words); // abcdef\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words); // abcdefg\n\n$words\
    \ = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\
    \ // abcdefgh\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words); // abcdefghi\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho\
    \ find_max($words); // abcdefghij\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words);\
    \ // abcdefghijk\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words);\
    \ // abcdefghijkl\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', '\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_dxucojp.php on line 40

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fcxdf9c.php:27\n\
    Stack trace:\n#0 /tmp/tmp1fcxdf9c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1fcxdf9c.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_count = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n   \
    \ $count = count_unique_chars($word);\n    if ($count > $max_count) {\n      $max_count\
    \ = $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpfux3a5is.php:10\nStack trace:\n#0 /tmp/tmpfux3a5is.php(20): find_max(Array)\n\
    #1 /tmp/tmpfux3a5is.php(24): candidate(Array)\n#2 /tmp/tmpfux3a5is.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfux3a5is.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefgh', 'abcdefghi'];\necho find_max($words) . \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghi\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qwl3qbg.php:28\n\
    Stack trace:\n#0 /tmp/tmp1qwl3qbg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1qwl3qbg.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $unique_chars_count = count($unique_chars);\n        if ($unique_chars_count\
    \ > $max) {\n            $max = $unique_chars_count;\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34ved8tk.php:29\n\
    Stack trace:\n#0 /tmp/tmp34ved8tk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp34ved8tk.php\
    \ on line 29\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcde\", \"abcd\", \"abcdef\", \"abcdefg\"];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7yoampf.php:27\n\
    Stack trace:\n#0 /tmp/tmpe7yoampf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe7yoampf.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['a', 'ab', 'abc',\
    \ 'abcd', 'abcde'];\necho find_max($words);\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp378uwc5e.php:28\n\
    Stack trace:\n#0 /tmp/tmp378uwc5e.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp378uwc5e.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $num_unique = count($unique_chars);\n        if ($num_unique > $max)\
    \ {\n            $max = $num_unique;\n            $max_word = $word;\n       \
    \ }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef'];\n\
    echo find_max($words); // abcdef\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg'];\necho find_max($words); // abcdefg\n\n$words = ['abc', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words); // abcdefg\n\n$words\
    \ = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\n\
    echo find_max($words); // abcdefghi\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words); //\
    \ abcdefghij\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words); // abcdefghijk\n\
    \n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words); // abcdefghijkl\n\
    \n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abc\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqb8zetvs.php on line 42

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcde\", \"abcd\", \"abcdef\", \"abcdefg\"];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7yoampf.php:27\n\
    Stack trace:\n#0 /tmp/tmpe7yoampf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe7yoampf.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'ab', 'abcde', 'a', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fcxdf9c.php:27\n\
    Stack trace:\n#0 /tmp/tmp1fcxdf9c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1fcxdf9c.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abc',\
    \ 'abcde', 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\necho \"\\n\"\
    ;\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh'];\necho\
    \ find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\necho \"\\n\";\n\
    \n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl',\
    \ 'abcdefgh\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1kovqdxp.php on line 47

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'ab', 'a'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc',\
    \ 'ab', 'a', 'abcde'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd',\
    \ 'abc', 'ab', 'a', 'abcde', 'abcdef'];\necho find_max($words);\necho \"\\n\"\
    ;\n\n$words = ['abcd', 'abc', 'ab', 'a', 'abcde', 'abcdef', 'abcdefg'];\necho\
    \ find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc', 'ab', 'a', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\necho \"\\n\";\n\n\
    $words = ['abcd', 'abc', 'ab', 'a', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc',\
    \ 'ab', 'a', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc', 'ab', 'a', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc', 'ab', 'a', 'abcde',\
    \ 'abc\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp55swhrz7.php on line 51

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiu88wwxx.php:27\n\
    Stack trace:\n#0 /tmp/tmpiu88wwxx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpiu88wwxx.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvswm4n_q.php:27\n\
    Stack trace:\n#0 /tmp/tmpvswm4n_q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvswm4n_q.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['a', 'ab', 'abc',\
    \ 'abcd', 'abcde'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7mmqi1tg.php:27\n\
    Stack trace:\n#0 /tmp/tmp7mmqi1tg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7mmqi1tg.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5ntjvi0.php:28\n\
    Stack trace:\n#0 /tmp/tmps5ntjvi0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps5ntjvi0.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abc',\
    \ 'abcde', 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\necho \"\\n\"\
    ;\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh'];\necho\
    \ find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words);\necho \"\\n\";\n\
    \n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl',\
    \ 'abcdefgh\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1kovqdxp.php on line 47

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = array_unique(str_split($word));\n        if (count($chars) > $max)\
    \ {\n            $max = count($chars);\n            $max_word = $word;\n     \
    \   }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc', 'abcdc', 'abcdcc',\
    \ 'abcdd'];\necho find_max($words);\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5ejkvgo.php:27\n\
    Stack trace:\n#0 /tmp/tmpr5ejkvgo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpr5ejkvgo.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = array_unique(str_split($word));\n        if (count($chars) > $max)\
    \ {\n            $max = count($chars);\n            $max_word = $word;\n     \
    \   }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg'];\necho find_max($words);\n\necho \"\\n\";\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\n\necho \"\
    \\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\n\
    echo find_max($words);\n\necho \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words);\n\
    \necho \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words);\n\necho \"\
    \\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words);\n\necho\
    \ \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijklm'];\n\
    echo find_max($words);\n\necho \"\\n\";\n\n$words = ['abc', 'abcd', 'abcde\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp01rctp40.php on line 54

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $unique_chars_count = count($unique_chars);\n        if ($unique_chars_count\
    \ > $max) {\n            $max = $unique_chars_count;\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3ewmajj.php:29\n\
    Stack trace:\n#0 /tmp/tmpw3ewmajj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpw3ewmajj.php\
    \ on line 29\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_1q3_bt.php:25\n\
    Stack trace:\n#0 /tmp/tmpo_1q3_bt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpo_1q3_bt.php\
    \ on line 25\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdefghijklmnopqrstuvwxyz'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefghijklmnopqrstuvwxyz\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3r6upe01.php:28\nStack trace:\n#0 /tmp/tmp3r6upe01.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3r6upe01.php on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = null;\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp7pukplv9.php:10\nStack trace:\n#0 /tmp/tmp7pukplv9.php(20): find_max(Array)\n\
    #1 /tmp/tmp7pukplv9.php(24): candidate(Array)\n#2 /tmp/tmp7pukplv9.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7pukplv9.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $num_unique = count($unique_chars);\n        if ($num_unique > $max)\
    \ {\n            $max = $num_unique;\n            $max_word = $word;\n       \
    \ }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef'];\n\
    echo find_max($words);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqv7xjctn.php:29\n\
    Stack trace:\n#0 /tmp/tmpqv7xjctn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqv7xjctn.php\
    \ on line 29\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcde\", \"abcd\", \"abcdef\", \"abcdefg\"];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7yoampf.php:27\n\
    Stack trace:\n#0 /tmp/tmpe7yoampf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe7yoampf.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_word = '';\n  $max_count = 0;\n  foreach ($words as $word) {\n   \
    \ $count = count_unique_chars($word);\n    if ($count > $max_count) {\n      $max_count\
    \ = $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmppjczgk28.php:10\nStack trace:\n#0 /tmp/tmppjczgk28.php(20): find_max(Array)\n\
    #1 /tmp/tmppjczgk28.php(24): candidate(Array)\n#2 /tmp/tmppjczgk28.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmppjczgk28.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_word = \"\";\n  $max_count = 0;\n  foreach ($words as $word) {\n \
    \   $count = count_unique_chars($word);\n    if ($count > $max_count) {\n    \
    \  $max_count = $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp7nhlx8_8.php:10\nStack trace:\n#0 /tmp/tmp7nhlx8_8.php(20): find_max(Array)\n\
    #1 /tmp/tmp7nhlx8_8.php(24): candidate(Array)\n#2 /tmp/tmp7nhlx8_8.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7nhlx8_8.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = $words[0];\n    $max_count = count(array_unique(str_split($words[0])));\n\
    \    foreach ($words as $word) {\n        $count = count(array_unique(str_split($word)));\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n$words\
    \ = ['abc', 'abcd', 'abcde', 'abcdef'];\necho find_max($words); // abcdef\n\n\
    $words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words);\
    \ // abcdefg\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'];\n\
    echo find_max($words); // abcdefgh\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words); // abcdefghi\n\n\
    $words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij'];\necho find_max($words); // abcdefghij\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\n\
    echo find_max($words); // abcdefghijk\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\n\
    echo find_max($words); // abcdefghijkl\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij',\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzz5uw4j.php on line 41

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd52atip.php:27\n\
    Stack trace:\n#0 /tmp/tmpfd52atip.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfd52atip.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu',\
    \ 'vwx', 'yz'];\necho find_max($words);\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abc\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5b02iyxs.php:27\n\
    Stack trace:\n#0 /tmp/tmp5b02iyxs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5b02iyxs.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = \"\";\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = [\"abc\", \"abcd\", \"ab\", \"abcde\", \"a\", \"abcdef\"\
    ];\necho find_max($words);\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyezoerbu.php:27\n\
    Stack trace:\n#0 /tmp/tmpyezoerbu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyezoerbu.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['hello', 'world',\
    \ 'after', 'school'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "world\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoikgojdv.php:28\n\
    Stack trace:\n#0 /tmp/tmpoikgojdv.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpoikgojdv.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\n\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9_ofvid.php:28\n\
    Stack trace:\n#0 /tmp/tmps9_ofvid.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps9_ofvid.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef'];\necho find_max($words);\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylvdttdp.php:27\n\
    Stack trace:\n#0 /tmp/tmpylvdttdp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpylvdttdp.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words) . \"\\n\";\n\n$words =\
    \ ['abc', 'abcd', 'abcd', 'abcde', 'abcdef'];\necho find_max($words) . \"\\n\"\
    ;\n\n$words = ['abc', 'abcd', 'abcd', 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['abc', 'abcd', 'abcd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh'];\necho find_max($words) . \"\\n\";\n\n$words = ['abc', 'abcd', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['abc', 'abcd', 'abcd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words) . \"\\n\";\n\n\
    $words = ['abc', 'abcd', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk'];\necho find_max($words) . \"\\n\";\n\n$words =\
    \ ['abc', 'abcd', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nabcdef\nabcdefg\nabcdefgh\nabcdefghi\nabcdefghij\nabcdefghijk\n\
    abcdefghijkl\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_m1clefx.php:48\n\
    Stack trace:\n#0 /tmp/tmp_m1clefx.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_m1clefx.php\
    \ on line 48\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"ab\", \"abcde\", \"a\"];\necho find_max($words);\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bq88ym5.php:27\n\
    Stack trace:\n#0 /tmp/tmp_bq88ym5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_bq88ym5.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $chars = str_split($word);\n        $unique_chars = array_unique($chars);\n\
    \        $unique_chars_count = count($unique_chars);\n        if ($unique_chars_count\
    \ > $max) {\n            $max = $unique_chars_count;\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcde\", \"abcd\", \"abcdef\", \"abcdefg\"];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv32qvm4l.php:29\n\
    Stack trace:\n#0 /tmp/tmpv32qvm4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpv32qvm4l.php\
    \ on line 29\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd52atip.php:27\n\
    Stack trace:\n#0 /tmp/tmpfd52atip.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfd52atip.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmpmd69c8v4.php:10\nStack trace:\n#0 /tmp/tmpmd69c8v4.php(20): find_max(Array)\n\
    #1 /tmp/tmpmd69c8v4.php(24): candidate(Array)\n#2 /tmp/tmpmd69c8v4.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmd69c8v4.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = $words[0];\n    $max_count = count(array_unique(str_split($words[0])));\n\
    \    foreach ($words as $word) {\n        $count = count(array_unique(str_split($word)));\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\n$words\
    \ = ['abc', 'abcd', 'ab', 'abcde', 'a', 'abdef'];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyctnb5q9.php:27\n\
    Stack trace:\n#0 /tmp/tmpyctnb5q9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyctnb5q9.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $unique_chars = array_unique(str_split($word));\n        $unique_count\
    \ = count($unique_chars);\n        if ($unique_count > $max_count) {\n       \
    \     $max_count = $unique_count;\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef',\
    \ 'abcdefg'];\necho find_max($words);\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ugk75qr.php:28\n\
    Stack trace:\n#0 /tmp/tmp9ugk75qr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9ugk75qr.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words); // abcde\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef'];\necho find_max($words); // abcdef\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg'];\necho find_max($words); // abcdefg\n\n$words\
    \ = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\
    \ // abcdefg\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words); // abcdefghi\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho\
    \ find_max($words); // abcdefghij\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words);\
    \ // abcdefghijk\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words);\
    \ // abcdefghijkl\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abc\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8bwcyycm.php on line 43

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge'];\necho\
    \ find_max($words) . \"\\n\";\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "corge\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2eyyzse.php:28\n\
    Stack trace:\n#0 /tmp/tmpa2eyyzse.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa2eyyzse.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'a', 'ab'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc',\
    \ 'a', 'ab', 'abcde'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd',\
    \ 'abc', 'a', 'ab', 'abcde', 'abcdef'];\necho find_max($words);\necho \"\\n\"\
    ;\n\n$words = ['abcd', 'abc', 'a', 'ab', 'abcde', 'abcdef', 'abcdefg'];\necho\
    \ find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc', 'a', 'ab', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words);\necho \"\\n\";\n\n\
    $words = ['abcd', 'abc', 'a', 'ab', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc',\
    \ 'a', 'ab', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc', 'a', 'ab', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abcd', 'abc', 'a', 'ab', 'abcde',\
    \ 'abc\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcf7csjqk.php on line 51

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcdefgh', 'abcdefghi', 'abcdefghijklmnopqrstuvwxyz'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abc', 'abcde', 'abcdefgh', 'abcdefghi', 'abcdefghijklmnopqrstuvwxyz',\
    \ 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'];\necho find_max($words);\n\
    echo \"\\n\";\n\n$words = ['abc', 'abcde', 'abcdefgh', 'abcdefghi', 'abcdefghijklmnopqrstuvwxyz',\
    \ 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'];\n\
    echo find_max($words);\necho \"\\n\";\n\n$words = ['abc', 'abcde', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz',\
    \ 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz',\
    \ 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopq\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp7ev42oh.php on line 31

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $unique_chars = array_unique(str_split($word));\n        $unique_count\
    \ = count($unique_chars);\n        if ($unique_count > $max_count) {\n       \
    \     $max_count = $unique_count;\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef'];\n\
    echo find_max($words); // abcdef\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg'];\necho find_max($words); // abcdefg\n\n$words = ['abc', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words); // abcdefgh\n\n$words\
    \ = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi'];\n\
    echo find_max($words); // abcdefghi\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words); //\
    \ abcdefghij\n\n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words); // abcdefghijk\n\
    \n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words); // abcdefghijkl\n\
    \n$words = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv176r4ww.php on line 41

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $unique_chars\
    \ = array_unique(str_split($word));\n    if (count($unique_chars) > $max) {\n\
    \      $max = count($unique_chars);\n      $max_word = $word;\n    }\n  }\n  return\
    \ $max_word;\n}\n\n$words = ['a', 'ab', 'abc', 'abcd', 'abcde'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef'];\necho\
    \ find_max($words) . \"\\n\";\n\n$words = ['a', 'ab', 'abc', 'abcd', 'abcde',\
    \ 'abcdef', 'abcdefg'];\necho find_max($words) . \"\\n\";\n\n$words = ['a', 'ab',\
    \ 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg',\
    \ 'abcdefgh', 'abcdefghi'];\necho find_max($words) . \"\\n\";\n\n$words = ['a',\
    \ 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij'];\necho find_max($words) . \"\\n\";\n\n$words = ['a', 'ab', 'abc',\
    \ 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij',\
    \ 'abcdefghijk'];\necho find_max($words) . \"\\n\";\n\n$words = ['a', 'ab', 'abc',\
    \ 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij',\
    \ 'abcdefghijk', 'abcdefghijkl'];\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nabcdef\nabcdefg\nabcdefgh\nabcdefghi\nabcdefghij\nabcdefghijk\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptz4cc0f3.php:48\nStack\
    \ trace:\n#0 /tmp/tmptz4cc0f3.php(59): test()\n#1 {main}\n  thrown in /tmp/tmptz4cc0f3.php\
    \ on line 48\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    de\", \"fgh\", \"a\", \"abcde\", \"abcd\"];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozyxuwkl.php:27\n\
    Stack trace:\n#0 /tmp/tmpozyxuwkl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpozyxuwkl.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcd',\
    \ 'abcde', 'abcdef'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdef\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rkvnzm_.php:27\n\
    Stack trace:\n#0 /tmp/tmp8rkvnzm_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8rkvnzm_.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = count_chars($word, 1);\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['a', 'ab', 'abc',\
    \ 'abcd', 'abcde'];\necho find_max($words);\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tndeeg0.php:27\n\
    Stack trace:\n#0 /tmp/tmp7tndeeg0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7tndeeg0.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $max_word = '';\n  foreach ($words as $word) {\n    $chars\
    \ = array_unique(str_split($word));\n    if (count($chars) > $max) {\n      $max\
    \ = count($chars);\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n\
    }\n\n$words = ['abc', 'cab', 'bca', 'cba', 'bac', 'bca'];\necho find_max($words)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abc\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9hzgujr.php:27\n\
    Stack trace:\n#0 /tmp/tmpc9hzgujr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpc9hzgujr.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef'];\necho find_max($words) . \"\\n\";\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg'];\necho find_max($words) . \"\\n\";\n\n$words =\
    \ ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi'];\necho find_max($words) . \"\\n\";\n\n$words = ['abc', 'abcde',\
    \ 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij'];\necho find_max($words)\
    \ . \"\\n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh',\
    \ 'abcdefghi', 'abcdefghij', 'abcdefghijk'];\necho find_max($words) . \"\\n\"\
    ;\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl'];\necho find_max($words) . \"\\\
    n\";\n\n$words = ['abc', 'abcde', 'abcd', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi',\
    \ 'abcdefghij', 'abcdefghijk', 'abcdefghijkl', 'abcdefghijklm'];\necho\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpprate4fq.php on line 42

    '
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp9h10510v.php:10\nStack trace:\n#0 /tmp/tmp9h10510v.php(20): find_max(Array)\n\
    #1 /tmp/tmp9h10510v.php(24): candidate(Array)\n#2 /tmp/tmp9h10510v.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9h10510v.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_word = '';\n    $max_unique_chars = 0;\n    foreach ($words as $word)\
    \ {\n        $unique_chars = count_unique_chars($word);\n        if ($unique_chars\
    \ > $max_unique_chars) {\n            $max_unique_chars = $unique_chars;\n   \
    \         $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_unique_chars()\
    \ in /tmp/tmp38xestx3.php:10\nStack trace:\n#0 /tmp/tmp38xestx3.php(20): find_max(Array)\n\
    #1 /tmp/tmp38xestx3.php(24): candidate(Array)\n#2 /tmp/tmp38xestx3.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp38xestx3.php on line 10\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abcd', 'abc',\
    \ 'a', 'ab', 'abcde'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcde\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyjaoh3b.php:28\n\
    Stack trace:\n#0 /tmp/tmpbyjaoh3b.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyjaoh3b.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = [\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"];\necho find_max($words);\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefg\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpondyckgr.php:27\n\
    Stack trace:\n#0 /tmp/tmpondyckgr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpondyckgr.php\
    \ on line 27\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = array_unique(str_split($word));\n        if (count($unique_chars)\
    \ > $max) {\n            $max = count($unique_chars);\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\n\n$words = ['abc', 'abcde',\
    \ 'abcdef', 'abcdefgh'];\necho find_max($words);\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "abcdefgh\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjotksod9.php:28\n\
    Stack trace:\n#0 /tmp/tmpjotksod9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjotksod9.php\
    \ on line 28\n"
  timestamp: 1659730698
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = '';\n    foreach ($words as $word) {\n   \
    \     $unique_chars = [];\n        for ($i = 0; $i < strlen($word); $i++) {\n\
    \            $unique_chars[$word[$i]] = true;\n        }\n        $unique_chars\
    \ = count($unique_chars);\n        if ($unique_chars > $max) {\n            $max\
    \ = $unique_chars;\n            $max_word = $word;\n        }\n    }\n    return\
    \ $max_word;\n}\n\n$words = ['apple', 'banana', 'carrot', 'daisy'];\necho find_max($words);\
    \ // banana\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "carrot\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwv8rpel1.php:31\n\
    Stack trace:\n#0 /tmp/tmpwv8rpel1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwv8rpel1.php\
    \ on line 31\n"
  timestamp: 1659730698
