language: php
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 3.0, 2.5, 2.0, 1.0, 0.5, 0.0];\n\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => B-\n    [5] => C+\n    [6] => D+\n    [7] => D-\n    [8] => D-\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5a6g09fy.php:64\nStack\
    \ trace:\n#0 /tmp/tmp5a6g09fy.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp5a6g09fy.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 4.0, 2.7, 2.3, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => A+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C\n    [6] => C-\n    [7] => D+\n    [8] => D\n    [9]\
    \ => D-\n    [10] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp5weekv6u.php:64\nStack trace:\n#0 /tmp/tmp5weekv6u.php(72): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5weekv6u.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.9, 4.0, 2.0, 2.5, 2.8, 1.0, 1.3, 1.7, 0.5, 0.0];\n$result = numerical_letter_grade($grades);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A+\n  \
    \  [4] => C+\n    [5] => B-\n    [6] => B\n    [7] => D+\n    [8] => C-\n    [9]\
    \ => C\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3t67j70v.php:64\nStack trace:\n#0 /tmp/tmp3t67j70v.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3t67j70v.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5,\
    \ 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9,\
    \ 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6,\
    \ -\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp1g1u2n2o.php on line 57

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\n$result = numerical_letter_grade($grades);\nprint_r($result);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bjmpa72.php:64\nStack\
    \ trace:\n#0 /tmp/tmp1bjmpa72.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp1bjmpa72.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nprint_r(numerical_letter_grade([3.8,\
    \ 3.2, 3.0, 2.8, 2.5, 2.3, 2.2, 1.8, 1.0, 0.9, 0.7, 0.5, 0.2, 0.0]));\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B+\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => B-\n    [6] => C+\n    [7] => C\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D\n    [11] => D-\n    [12] => D-\n    [13] => D-\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpm7a9v_jt.php:62\nStack trace:\n\
    #0 /tmp/tmpm7a9v_jt.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpm7a9v_jt.php\
    \ on line 62\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example: print \"Hello world!\";\n    $result = [];\n    foreach ($grades\
    \ as $grade) {\n        if ($grade >= 4.0) {\n            $result[] = 'A+';\n\
    \        } elseif ($grade >= 3.7) {\n            $result[] = 'A';\n        } elseif\
    \ ($grade >= 3.3) {\n            $result[] = 'A-';\n        } elseif ($grade >=\
    \ 3.0) {\n            $result[] = 'B+';\n        } elseif ($grade >= 2.7) {\n\
    \            $result[] = 'B';\n        } elseif ($grade >= 2.3) {\n          \
    \  $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n            $result[]\
    \ = 'C+';\n        } elseif ($grade >= 1.7) {\n            $result[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $result[] = 'C-';\n        }\
    \ elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n        } elseif ($grade\
    \ >= 0.7) {\n            $result[] = 'D';\n        } elseif ($grade >= 0.0) {\n\
    \            $result[] = 'D-';\n        } else {\n            $result[] = 'E';\n\
    \        }\n    }\n    return $result;\n}\n\n$grades = [3.7, 3.3, 4.0, 2.7, 1.7,\
    \ 1.3, 0.7, 0.0, 0.0];\n$result = numerical_letter_grade($grades);\nprint_r($result);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => A+\n    [3] => B\n  \
    \  [4] => C\n    [5] => C-\n    [6] => D\n    [7] => D-\n    [8] => D-\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp3ehe5hnp.php:67\nStack\
    \ trace:\n#0 /tmp/tmp3ehe5hnp.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp3ehe5hnp.php\
    \ on line 67\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => A\n    [2] => A-\n    [3] => B+\n \
    \   [4] => B\n    [5] => B-\n    [6] => C+\n    [7] => C\n    [8] => C-\n    [9]\
    \ => D+\n    [10] => D\n    [11] => D-\n    [12] => D-\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppse19vs_.php:63\nStack trace:\n#0 /tmp/tmppse19vs_.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppse19vs_.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades\
    \ = array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfqo21cx.php:60\n\
    Stack trace:\n#0 /tmp/tmpnfqo21cx.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpnfqo21cx.php\
    \ on line 60\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5,\
    \ 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9,\
    \ 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0];\n\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A\n    [2] => A\n    [3] => A-\n   \
    \ [4] => A-\n    [5] => A-\n    [6] => A-\n    [7] => B+\n    [8] => B+\n    [9]\
    \ => B+\n    [10] => B\n    [11] => B\n    [12] => B\n    [13] => B-\n    [14]\
    \ => B-\n    [15] => B-\n    [16] => B-\n    [17] => C+\n    [18] => C+\n    [19]\
    \ => C+\n    [20] => C\n    [21] => C\n    [22] => C\n    [23] => C-\n    [24]\
    \ => C-\n    [25] => C-\n    [26] => C-\n    [27] => D+\n    [28] => D+\n    [29]\
    \ => D+\n    [30] => D\n    [31] => D\n    [32] => D\n    [33] => D-\n    [34]\
    \ => D-\n    [35] => D-\n    [36] => D-\n    [37] => D-\n    [38] => D-\n    [39]\
    \ => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1snkif15.php:65\n\
    Stack trace:\n#0 /tmp/tmp1snkif15.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp1snkif15.php\
    \ on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 4.0, 3.8, 3.0, 2.7, 2.3, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => B\n    [5] => B-\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6jd8kjg.php:63\nStack trace:\n#0 /tmp/tmph6jd8kjg.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6jd8kjg.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.0, 4.0, 2.5, 2.0, 1.0, 2.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => B+\n    [3] => A+\n \
    \   [4] => B-\n    [5] => C+\n    [6] => D+\n    [7] => C+\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpq14p99yc.php:63\nStack trace:\n\
    #0 /tmp/tmpq14p99yc.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpq14p99yc.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 2.9, 3.0, 3.7, 2.8, 3.2, 3.6, 3.1, 3.9, 3.4, 3.3];\n$result\
    \ = numerical_letter_grade($grades);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B\n  \
    \  [4] => B+\n    [5] => A\n    [6] => B\n    [7] => B+\n    [8] => A-\n    [9]\
    \ => B+\n    [10] => A\n    [11] => A-\n    [12] => A-\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpmh4i90rc.php:64\nStack trace:\n#0 /tmp/tmpmh4i90rc.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmh4i90rc.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades_arr\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_arr[] = 'A+';\n        } elseif ($grade >= 3.7) {\n        \
    \    $grades_arr[] = 'A';\n        } elseif ($grade >= 3.3) {\n            $grades_arr[]\
    \ = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_arr[] = 'B+';\n\
    \        } elseif ($grade >= 2.7) {\n            $grades_arr[] = 'B';\n      \
    \  } elseif ($grade >= 2.3) {\n            $grades_arr[] = 'B-';\n        } elseif\
    \ ($grade >= 2.0) {\n            $grades_arr[] = 'C+';\n        } elseif ($grade\
    \ >= 1.7) {\n            $grades_arr[] = 'C';\n        } elseif ($grade >= 1.3)\
    \ {\n            $grades_arr[] = 'C-';\n        } elseif ($grade >= 1.0) {\n \
    \           $grades_arr[] = 'D+';\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_arr[] = 'D';\n        } elseif ($grade >= 0.0) {\n            $grades_arr[]\
    \ = 'D-';\n        } else {\n            $grades_arr[] = 'E';\n        }\n   \
    \ }\n    return $grades_arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1j4_tqu.php:61\n\
    Stack trace:\n#0 /tmp/tmpk1j4_tqu.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpk1j4_tqu.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.0, 2.9, 2.8, 2.3, 2.1, 1.8, 1.5, 1.0, 0.7, 0.4, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B\n    [5] => B-\n    [6] => C+\n    [7] => C\n    [8] => C-\n    [9]\
    \ => D+\n    [10] => D\n    [11] => D-\n    [12] => D-\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpr80khrq4.php:63\nStack trace:\n#0 /tmp/tmpr80khrq4.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr80khrq4.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5,\
    \ 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9,\
    \ 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6,\
    \ -\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp1g1u2n2o.php on line 57

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\n$result = numerical_letter_grade($grades);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => B-\n    [5] => C+\n    [6] => C-\n    [7] => D+\n    [8] => D-\n  \
    \  [9] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1rvkjrv.php:64\n\
    Stack trace:\n#0 /tmp/tmph1rvkjrv.php(72): test()\n#1 {main}\n  thrown in /tmp/tmph1rvkjrv.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        switch ($grade) {\n      \
    \      case $grade >= 4.0:\n                $result[] = 'A+';\n              \
    \  break;\n            case $grade >= 3.7:\n                $result[] = 'A';\n\
    \                break;\n            case $grade >= 3.3:\n                $result[]\
    \ = 'A-';\n                break;\n            case $grade >= 3.0:\n         \
    \       $result[] = 'B+';\n                break;\n            case $grade >=\
    \ 2.7:\n                $result[] = 'B';\n                break;\n           \
    \ case $grade >= 2.3:\n                $result[] = 'B-';\n                break;\n\
    \            case $grade >= 2.0:\n                $result[] = 'C+';\n        \
    \        break;\n            case $grade >= 1.7:\n                $result[] =\
    \ 'C';\n                break;\n            case $grade >= 1.3:\n            \
    \    $result[] = 'C-';\n                break;\n            case $grade >= 1.0:\n\
    \                $result[] = 'D+';\n                break;\n            case $grade\
    \ >= 0.7:\n                $result[] = 'D';\n                break;\n        \
    \    case $grade >= 0.0:\n                $result[] = 'D-';\n                break;\n\
    \            case $grade == 0.0:\n                $result[] = 'E';\n         \
    \       break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoltebcv_.php:75\n\
    Stack trace:\n#0 /tmp/tmpoltebcv_.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpoltebcv_.php\
    \ on line 75\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.8, 3.9, 4.0, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A\n   \
    \ [4] => A+\n    [5] => B+\n    [6] => B-\n    [7] => C+\n    [8] => C-\n    [9]\
    \ => D+\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpn_7yni13.php:63\nStack trace:\n#0 /tmp/tmpn_7yni13.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn_7yni13.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.9, 4.0, 3.8, 3.6, 3.2, 3.0, 2.7, 2.5, 2.3, 2.1, 2.0,\
    \ 1.9, 1.7, 1.5, 1.3, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0,\
    \ -0.1];\n\necho '<pre>';\nprint_r(numerical_letter_grade($grades));\necho '</pre>';\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A+\n\
    \    [4] => A\n    [5] => A-\n    [6] => B+\n    [7] => B+\n    [8] => B\n   \
    \ [9] => B-\n    [10] => B-\n    [11] => C+\n    [12] => C+\n    [13] => C\n \
    \   [14] => C\n    [15] => C-\n    [16] => C-\n    [17] => D+\n    [18] => D+\n\
    \    [19] => D\n    [20] => D\n    [21] => D\n    [22] => D-\n    [23] => D-\n\
    \    [24] => D-\n    [25] => D-\n    [26] => D-\n    [27] => D-\n    [28] => D-\n\
    \    [29] => E\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd92d5akw.php:67\n\
    Stack trace:\n#0 /tmp/tmpd92d5akw.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpd92d5akw.php\
    \ on line 67\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.9, 3.8, 3.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9,\
    \ 4.0];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A\n   \
    \ [4] => A\n    [5] => B+\n    [6] => B+\n    [7] => B+\n    [8] => A-\n    [9]\
    \ => A-\n    [10] => A-\n    [11] => A-\n    [12] => A\n    [13] => A\n    [14]\
    \ => A\n    [15] => A+\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpr3wqg33o.php:63\nStack trace:\n#0 /tmp/tmpr3wqg33o.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmpr3wqg33o.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -1.0];\nvar_dump(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(12) {\n  [0]=>\n  string(1) \"A\"\n  [1]=>\n  string(2) \"A-\"\n\
    \  [2]=>\n  string(2) \"B+\"\n  [3]=>\n  string(1) \"B\"\n  [4]=>\n  string(2)\
    \ \"B-\"\n  [5]=>\n  string(2) \"C+\"\n  [6]=>\n  string(1) \"C\"\n  [7]=>\n \
    \ string(2) \"C-\"\n  [8]=>\n  string(2) \"D+\"\n  [9]=>\n  string(1) \"D\"\n\
    \  [10]=>\n  string(2) \"D-\"\n  [11]=>\n  string(1) \"E\"\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzrbl965u.php:63\nStack trace:\n\
    #0 /tmp/tmpzrbl965u.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpzrbl965u.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 2.9, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B\n  \
    \  [4] => A-\n    [5] => B+\n    [6] => B\n    [7] => B-\n    [8] => C+\n    [9]\
    \ => C\n    [10] => C-\n    [11] => D+\n    [12] => D\n    [13] => D-\n    [14]\
    \ => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnz2rwhp6.php:63\n\
    Stack trace:\n#0 /tmp/tmpnz2rwhp6.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpnz2rwhp6.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 4.0, 3.8, 3.0, 3.9, 2.5, 2.0, 2.8, 1.0, 1.3, 1.7, 0.0, 0.7,\
    \ 0.0, 0.3];\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => A\n    [5] => B-\n    [6] => C+\n    [7] => B\n    [8] => D+\n    [9]\
    \ => C-\n    [10] => C\n    [11] => D-\n    [12] => D\n    [13] => D-\n    [14]\
    \ => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6pdnt9k.php:65\n\
    Stack trace:\n#0 /tmp/tmpz6pdnt9k.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpz6pdnt9k.php\
    \ on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.8, 3.9, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpi5yztgeg.php
    on line 57

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 3.2, 3.9, 3.1, 3.6, 3.0, 3.7, 2.5];\n$result = numerical_letter_grade($grades);\n\
    echo implode(', ', $result);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "A-, A+, A, B+, A, B+, A-, B+, A, B-\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpmt3hvf28.php:64\nStack trace:\n#0 /tmp/tmpmt3hvf28.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmt3hvf28.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => B-\n    [5] => C+\n    [6] => C-\n    [7] => D+\n    [8] => D-\n  \
    \  [9] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19i82r3c.php:63\n\
    Stack trace:\n#0 /tmp/tmp19i82r3c.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp19i82r3c.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 2.8, 4.0, 2.9, 3.8, 3.0, 2.7, 3.2, 2.5, 3.0, 3.3, 3.7, 3.8,\
    \ 3.5, 3.0, 3.2, 3.6, 3.1, 3.1, 2.9, 3.1, 3.2, 3.0, 3.0, 2.8, 3.0, 2.9, 2.9, 2.9,\
    \ 3.1, 2.8, 3.2, 2.9, 2.9, 2.8, 3.3, 2.9, 2.9, 2.9, 2.9, 2\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpgvs9qx65.php
    on line 57

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5,\
    \ 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9,\
    \ 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0];\n\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A\n    [2] => A\n    [3] => A-\n   \
    \ [4] => A-\n    [5] => A-\n    [6] => A-\n    [7] => B+\n    [8] => B+\n    [9]\
    \ => B+\n    [10] => B\n    [11] => B\n    [12] => B\n    [13] => B-\n    [14]\
    \ => B-\n    [15] => B-\n    [16] => B-\n    [17] => C+\n    [18] => C+\n    [19]\
    \ => C+\n    [20] => C\n    [21] => C\n    [22] => C\n    [23] => C-\n    [24]\
    \ => C-\n    [25] => C-\n    [26] => C-\n    [27] => D+\n    [28] => D+\n    [29]\
    \ => D+\n    [30] => D\n    [31] => D\n    [32] => D\n    [33] => D-\n    [34]\
    \ => D-\n    [35] => D-\n    [36] => D-\n    [37] => D-\n    [38] => D-\n    [39]\
    \ => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux4haiv2.php:64\n\
    Stack trace:\n#0 /tmp/tmpux4haiv2.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpux4haiv2.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = \"A+\";\n        } elseif ($grade >= 3.7) {\n    \
    \        $grades_array[] = \"A\";\n        } elseif ($grade >= 3.3) {\n      \
    \      $grades_array[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n       \
    \     $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n        \
    \    $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n          \
    \  $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n           \
    \ $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $grades_array[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $grades_array[] =\
    \ \"C-\";\n        } elseif ($grade >= 1.0) {\n            $grades_array[] = \"\
    D+\";\n        } elseif ($grade >= 0.7) {\n            $grades_array[] = \"D\"\
    ;\n        } elseif ($grade >= 0.0) {\n            $grades_array[] = \"D-\";\n\
    \        } else {\n            $grades_array[] = \"E\";\n        }\n    }\n  \
    \  return $grades_array;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps3v5b9j0.php:61\n\
    Stack trace:\n#0 /tmp/tmps3v5b9j0.php(69): test()\n#1 {main}\n  thrown in /tmp/tmps3v5b9j0.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\
    \ // [B+, A-, A+, D+]\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkm5ety6b.php:64\nStack\
    \ trace:\n#0 /tmp/tmpkm5ety6b.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpkm5ety6b.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 2.5, 2.0, 1.0, 2.3, 3.7, 3.3, 3.0, 2.7, 2.0, 1.7, 1.3, 1.0, 0.7,\
    \ 0.0, 0.3, 0.0];\n\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => B-\n    [3] => C+\n\
    \    [4] => D+\n    [5] => B-\n    [6] => A\n    [7] => A-\n    [8] => B+\n  \
    \  [9] => B\n    [10] => C+\n    [11] => C\n    [12] => C-\n    [13] => D+\n \
    \   [14] => D\n    [15] => D-\n    [16] => D-\n    [17] => D-\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp57cw733w.php:64\nStack trace:\n\
    #0 /tmp/tmp57cw733w.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp57cw733w.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 2.8, 3.0, 3.8, 2.9, 3.0, 3.9, 3.1, 3.7, 3.9, 3.1, 3.5, 3.6, 3.0, 3.4,\
    \ 3.0];\n$result = numerical_letter_grade($grades);\nprint_r($result);\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => B\n    [2] => B+\n    [3] => A\n  \
    \  [4] => B\n    [5] => B+\n    [6] => A\n    [7] => B+\n    [8] => A\n    [9]\
    \ => A\n    [10] => B+\n    [11] => A-\n    [12] => A-\n    [13] => B+\n    [14]\
    \ => A-\n    [15] => B+\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp5zn4zmx1.php:65\nStack trace:\n#0 /tmp/tmp5zn4zmx1.php(73): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5zn4zmx1.php on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -0.1];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => E\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp755mgy8o.php:63\nStack trace:\n#0 /tmp/tmp755mgy8o.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp755mgy8o.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [2.5, 3.7, 4.0, 1.0, 0.0, 2.0, 1.5, 3.0, 2.3, 3.3, 3.4, 2.7];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => B-\n    [1] => A\n    [2] => A+\n    [3] => D+\n \
    \   [4] => D-\n    [5] => C+\n    [6] => C-\n    [7] => B+\n    [8] => B-\n  \
    \  [9] => A-\n    [10] => A-\n    [11] => B\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9l2uvc50.php:63\nStack trace:\n#0 /tmp/tmp9l2uvc50.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9l2uvc50.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n$result\
    \ = numerical_letter_grade($grades);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A-\n    [3] => B+\n \
    \   [4] => B\n    [5] => B-\n    [6] => C+\n    [7] => C\n    [8] => C-\n    [9]\
    \ => D+\n    [10] => D\n    [11] => D-\n    [12] => D-\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp4_4wlc_s.php:64\nStack trace:\n#0 /tmp/tmp4_4wlc_s.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4_4wlc_s.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7,\
    \ 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1,\
    \ 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0];\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxjd6_eq.php:63\n\
    Stack trace:\n#0 /tmp/tmpzxjd6_eq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpzxjd6_eq.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.9, 4.0, 2.5, 2.7, 2.9, 2.0, 1.5, 1.7, 1.9, 1.0, 0.5,\
    \ 0.7, 0.9, 0.0, -0.5, -0.7, -0.9, -1.0];\n\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A+\n  \
    \  [4] => B-\n    [5] => B\n    [6] => B\n    [7] => C+\n    [8] => C-\n    [9]\
    \ => C\n    [10] => C\n    [11] => D+\n    [12] => D-\n    [13] => D\n    [14]\
    \ => D\n    [15] => D-\n    [16] => E\n    [17] => E\n    [18] => E\n    [19]\
    \ => E\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpua6w7053.php:64\n\
    Stack trace:\n#0 /tmp/tmpua6w7053.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpua6w7053.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = \"A+\";\n        } elseif ($grade >= 3.7) {\n    \
    \        $grades_array[] = \"A\";\n        } elseif ($grade >= 3.3) {\n      \
    \      $grades_array[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n       \
    \     $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n        \
    \    $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n          \
    \  $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n           \
    \ $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $grades_array[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $grades_array[] =\
    \ \"C-\";\n        } elseif ($grade >= 1.0) {\n            $grades_array[] = \"\
    D+\";\n        } elseif ($grade >= 0.7) {\n            $grades_array[] = \"D\"\
    ;\n        } elseif ($grade >= 0.0) {\n            $grades_array[] = \"D-\";\n\
    \        } else {\n            $grades_array[] = \"E\";\n        }\n    }\n  \
    \  return $grades_array;\n}\n$grades = [3.5, 4.0, 2.5, 1.0, 2.0, 3.0, 3.5, 4.0,\
    \ 3.5];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => B-\n    [3] => D+\n\
    \    [4] => C+\n    [5] => B+\n    [6] => A-\n    [7] => A+\n    [8] => A-\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4j3vpxg.php:62\nStack\
    \ trace:\n#0 /tmp/tmpl4j3vpxg.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpl4j3vpxg.php\
    \ on line 62\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.0, 2.5, 2.7, 2.0, 1.5, 1.7, 1.0, 0.5, 0.7, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => B+\n    [3] => B-\n \
    \   [4] => B\n    [5] => C+\n    [6] => C-\n    [7] => C\n    [8] => D+\n    [9]\
    \ => D-\n    [10] => D\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpd0cpf70f.php:63\nStack trace:\n#0 /tmp/tmpd0cpf70f.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd0cpf70f.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -0.3];\n$result = numerical_letter_grade($grades);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => E\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1bc407le.php:64\nStack trace:\n#0 /tmp/tmp1bc407le.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1bc407le.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 4.0, 2.3, 1.7, 2.7, 3.3];\nvar_dump(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(7) {\n  [0]=>\n  string(1) \"A\"\n  [1]=>\n  string(2) \"A-\"\n \
    \ [2]=>\n  string(2) \"A+\"\n  [3]=>\n  string(2) \"B-\"\n  [4]=>\n  string(1)\
    \ \"C\"\n  [5]=>\n  string(1) \"B\"\n  [6]=>\n  string(2) \"A-\"\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpm_lnz1ly.php:63\nStack trace:\n\
    #0 /tmp/tmpm_lnz1ly.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpm_lnz1ly.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4hg8hnd.php:63\nStack\
    \ trace:\n#0 /tmp/tmps4hg8hnd.php(71): test()\n#1 {main}\n  thrown in /tmp/tmps4hg8hnd.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades\
    \ = array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfqo21cx.php:60\n\
    Stack trace:\n#0 /tmp/tmpnfqo21cx.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpnfqo21cx.php\
    \ on line 60\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = \"A+\";\n        } elseif ($grade >= 3.7) {\n    \
    \        $grades_array[] = \"A\";\n        } elseif ($grade >= 3.3) {\n      \
    \      $grades_array[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n       \
    \     $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n        \
    \    $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n          \
    \  $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n           \
    \ $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $grades_array[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $grades_array[] =\
    \ \"C-\";\n        } elseif ($grade >= 1.0) {\n            $grades_array[] = \"\
    D+\";\n        } elseif ($grade >= 0.7) {\n            $grades_array[] = \"D\"\
    ;\n        } elseif ($grade >= 0.0) {\n            $grades_array[] = \"D-\";\n\
    \        } else {\n            $grades_array[] = \"E\";\n        }\n    }\n  \
    \  return $grades_array;\n}\n\n$grades = [3.5, 3.7, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5,\
    \ 0.0];\n\nprint_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => B+\n    [3] => B-\n \
    \   [4] => C+\n    [5] => C-\n    [6] => D+\n    [7] => D-\n    [8] => D-\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa07d0xpe.php:65\nStack\
    \ trace:\n#0 /tmp/tmpa07d0xpe.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpa07d0xpe.php\
    \ on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 2.8, 2.5, 4.0, 3.8];\nprint_r(numerical_letter_grade($grades));\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B\n    [2] => B-\n    [3] => A+\n  \
    \  [4] => A\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9j4j5jm.php:63\n\
    Stack trace:\n#0 /tmp/tmpy9j4j5jm.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpy9j4j5jm.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa9t3_l_7.php:63\nStack trace:\n#0 /tmp/tmpa9t3_l_7.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa9t3_l_7.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -0.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A-\n    [3] => B+\n \
    \   [4] => B\n    [5] => B-\n    [6] => C+\n    [7] => C\n    [8] => C-\n    [9]\
    \ => D+\n    [10] => D\n    [11] => D-\n    [12] => E\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphmjdrtq1.php:63\nStack trace:\n#0 /tmp/tmphmjdrtq1.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphmjdrtq1.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.8, 4.0, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 3.8, 3.9, 1.0,\
    \ 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 3.8, 3.9, 0.0, 0.7, 1.0, 1.3, 1.7, 2.0,\
    \ 2.3, 2.7, 3.0, 3.3, 3.7, 3.8, 3.9, -1.0, -0.7, -0.3, 0.\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpmw98otam.php
    on line 57

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.9, 4.0, 2.8, 2.9, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2,\
    \ 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1];\n\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A+\n  \
    \  [4] => B\n    [5] => B\n    [6] => C+\n    [7] => C\n    [8] => C\n    [9]\
    \ => C\n    [10] => C-\n    [11] => C-\n    [12] => C-\n    [13] => C-\n    [14]\
    \ => D+\n    [15] => D+\n    [16] => D+\n    [17] => D\n    [18] => D\n    [19]\
    \ => D\n    [20] => D-\n    [21] => D-\n    [22] => D-\n    [23] => D-\n    [24]\
    \ => D-\n    [25] => D-\n    [26] => D-\n    [27] => E\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0hjg7rcv.php:64\nStack trace:\n#0 /tmp/tmp0hjg7rcv.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0hjg7rcv.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 4.0, 2.7, 2.3, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => A+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C\n    [6] => C-\n    [7] => D+\n    [8] => D\n    [9]\
    \ => D-\n    [10] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp25jgb0c1.php:63\nStack trace:\n#0 /tmp/tmp25jgb0c1.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmp25jgb0c1.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5,\
    \ 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9,\
    \ 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0];\n\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A\n    [2] => A\n    [3] => A-\n   \
    \ [4] => A-\n    [5] => A-\n    [6] => A-\n    [7] => B+\n    [8] => B+\n    [9]\
    \ => B+\n    [10] => B\n    [11] => B\n    [12] => B\n    [13] => B-\n    [14]\
    \ => B-\n    [15] => B-\n    [16] => B-\n    [17] => C+\n    [18] => C+\n    [19]\
    \ => C+\n    [20] => C\n    [21] => C\n    [22] => C\n    [23] => C-\n    [24]\
    \ => C-\n    [25] => C-\n    [26] => C-\n    [27] => D+\n    [28] => D+\n    [29]\
    \ => D+\n    [30] => D\n    [31] => D\n    [32] => D\n    [33] => D-\n    [34]\
    \ => D-\n    [35] => D-\n    [36] => D-\n    [37] => D-\n    [38] => D-\n    [39]\
    \ => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1snkif15.php:65\n\
    Stack trace:\n#0 /tmp/tmp1snkif15.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp1snkif15.php\
    \ on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 4.0, 2.3, 1.7, 2.7, 0.8, 1.1, 3.9, 3.1, 2.9];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => A+\n    [3] => B-\n \
    \   [4] => C\n    [5] => B\n    [6] => D\n    [7] => D+\n    [8] => A\n    [9]\
    \ => B+\n    [10] => B\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmph0h3dcdl.php:63\nStack trace:\n#0 /tmp/tmph0h3dcdl.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmph0h3dcdl.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 2.9, 3.0, 2.7, 2.3, 1.9, 1.5, 1.0, 0.8, 0.0, 0.2];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B\n  \
    \  [4] => B+\n    [5] => B\n    [6] => B-\n    [7] => C\n    [8] => C-\n    [9]\
    \ => D+\n    [10] => D\n    [11] => D-\n    [12] => D-\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpzv_v0mn1.php:63\nStack trace:\n#0 /tmp/tmpzv_v0mn1.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzv_v0mn1.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5,\
    \ 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9,\
    \ 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.4, -0.5, -0.6,\
    \ -\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp1g1u2n2o.php on line 57

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4hg8hnd.php:63\nStack\
    \ trace:\n#0 /tmp/tmps4hg8hnd.php(71): test()\n#1 {main}\n  thrown in /tmp/tmps4hg8hnd.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp58cuiczw.php:63\nStack trace:\n#0 /tmp/tmp58cuiczw.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp58cuiczw.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -0.1];\n\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => E\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp4xxk6mbx.php:64\nStack trace:\n#0 /tmp/tmp4xxk6mbx.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4xxk6mbx.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 4.0, 3.8, 2.2, 3.7, 2.9, 2.5, 2.3, 3.1, 3.6, 2.7, 2.1, 2.0,\
    \ 1.9, 2.8, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5,\
    \ 0.4, 0.3, 0.2, 0.1, 0.0, -0.1];\n\n$letter_grades = numerical_letter_grade($grades);\n\
    print_r($\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp3lr57thv.php on line 60

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.9, 4.0, 2.0, 1.5, 1.0, 0.5, 0.0, -0.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A+\n  \
    \  [4] => C+\n    [5] => C-\n    [6] => D+\n    [7] => D-\n    [8] => D-\n   \
    \ [9] => E\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr59pp7f6.php:63\n\
    Stack trace:\n#0 /tmp/tmpr59pp7f6.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpr59pp7f6.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.9, 4.0, 2.8, 2.9, 1.9, 2.1, 1.5, 1.6, 0.5, 0.3, 0.1, 0.0];\n\n\
    print_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A+\n  \
    \  [4] => B\n    [5] => B\n    [6] => C\n    [7] => C+\n    [8] => C-\n    [9]\
    \ => C-\n    [10] => D-\n    [11] => D-\n    [12] => D-\n    [13] => D-\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpret664hb.php:65\nStack\
    \ trace:\n#0 /tmp/tmpret664hb.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpret664hb.php\
    \ on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp58cuiczw.php:63\nStack trace:\n#0 /tmp/tmp58cuiczw.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp58cuiczw.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.8, 3.9, 4.0, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\n\
    $letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A\n   \
    \ [4] => A+\n    [5] => B+\n    [6] => B-\n    [7] => C+\n    [8] => C-\n    [9]\
    \ => D+\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplva6l3q5.php:64\nStack trace:\n#0 /tmp/tmplva6l3q5.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplva6l3q5.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example: print \"Hello world!\";\n    $result = array();\n    foreach\
    \ ($grades as $grade) {\n        if ($grade >= 4.0) {\n            $result[] =\
    \ 'A+';\n        } else if ($grade >= 3.7) {\n            $result[] = 'A';\n \
    \       } else if ($grade >= 3.3) {\n            $result[] = 'A-';\n        }\
    \ else if ($grade >= 3.0) {\n            $result[] = 'B+';\n        } else if\
    \ ($grade >= 2.7) {\n            $result[] = 'B';\n        } else if ($grade >=\
    \ 2.3) {\n            $result[] = 'B-';\n        } else if ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } else if ($grade >= 1.7) {\n        \
    \    $result[] = 'C';\n        } else if ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } else if ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } else if ($grade >= 0.7) {\n            $result[] = 'D';\n        }\
    \ else if ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n\
    \            $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades\
    \ = array(3.3, 3.7, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0);\n$result\
    \ = numerical_letter_grade($grades);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8bnqjpqz.php:67\nStack trace:\n#0 /tmp/tmp8bnqjpqz.php(75):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8bnqjpqz.php on line 67\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.9, 4.0, 3.2, 3.3, 3.1, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4,\
    \ 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8,\
    \ 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, -0.1];\n\nprint_r(numer\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp7ubylf_o.php
    on line 59

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades_arr\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_arr[] = 'A+';\n        } elseif ($grade >= 3.7) {\n        \
    \    $grades_arr[] = 'A';\n        } elseif ($grade >= 3.3) {\n            $grades_arr[]\
    \ = 'A-';\n        } elseif ($grade >= 3.0) {\n            $grades_arr[] = 'B+';\n\
    \        } elseif ($grade >= 2.7) {\n            $grades_arr[] = 'B';\n      \
    \  } elseif ($grade >= 2.3) {\n            $grades_arr[] = 'B-';\n        } elseif\
    \ ($grade >= 2.0) {\n            $grades_arr[] = 'C+';\n        } elseif ($grade\
    \ >= 1.7) {\n            $grades_arr[] = 'C';\n        } elseif ($grade >= 1.3)\
    \ {\n            $grades_arr[] = 'C-';\n        } elseif ($grade >= 1.0) {\n \
    \           $grades_arr[] = 'D+';\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_arr[] = 'D';\n        } elseif ($grade >= 0.0) {\n            $grades_arr[]\
    \ = 'D-';\n        } else {\n            $grades_arr[] = 'E';\n        }\n   \
    \ }\n    return $grades_arr;\n}\n\n$grades = [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm433bngf.php:63\nStack\
    \ trace:\n#0 /tmp/tmpm433bngf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpm433bngf.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa9t3_l_7.php:63\nStack trace:\n#0 /tmp/tmpa9t3_l_7.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa9t3_l_7.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.9, 4.0, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A+\n  \
    \  [4] => B+\n    [5] => B-\n    [6] => C+\n    [7] => C-\n    [8] => D+\n   \
    \ [9] => D-\n    [10] => D-\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpw2clgz14.php:63\nStack trace:\n#0 /tmp/tmpw2clgz14.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmpw2clgz14.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 3.0, 2.5, 2.0, 1.8, 1.0, 0.5, 0.0];\n$result = numerical_letter_grade($grades);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => D+\n    [8] => D-\n   \
    \ [9] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpsp6spi.php:64\n\
    Stack trace:\n#0 /tmp/tmpxpsp6spi.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpxpsp6spi.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example: print \"Hello world!\";\n    $result = array();\n    foreach\
    \ ($grades as $grade) {\n        if ($grade >= 4.0) {\n            $result[] =\
    \ 'A+';\n        } else if ($grade >= 3.7) {\n            $result[] = 'A';\n \
    \       } else if ($grade >= 3.3) {\n            $result[] = 'A-';\n        }\
    \ else if ($grade >= 3.0) {\n            $result[] = 'B+';\n        } else if\
    \ ($grade >= 2.7) {\n            $result[] = 'B';\n        } else if ($grade >=\
    \ 2.3) {\n            $result[] = 'B-';\n        } else if ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } else if ($grade >= 1.7) {\n        \
    \    $result[] = 'C';\n        } else if ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } else if ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } else if ($grade >= 0.7) {\n            $result[] = 'D';\n        }\
    \ else if ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n\
    \            $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades\
    \ = array(3.5, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -0.1);\n\
    $result = numerical_letter_grade($grades);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A-\n    [3] => B+\n \
    \   [4] => B\n    [5] => B-\n    [6] => C+\n    [7] => C\n    [8] => C-\n    [9]\
    \ => D+\n    [10] => D\n    [11] => D-\n    [12] => E\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvhkvwc65.php:67\nStack trace:\n#0 /tmp/tmpvhkvwc65.php(75):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvhkvwc65.php on line 67\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n  $result\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $result[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $result[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $result[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $result[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $result[] = 'B';\n\
    \    } elseif ($grade >= 2.3) {\n      $result[] = 'B-';\n    } elseif ($grade\
    \ >= 2.0) {\n      $result[] = 'C+';\n    } elseif ($grade >= 1.7) {\n      $result[]\
    \ = 'C';\n    } elseif ($grade >= 1.3) {\n      $result[] = 'C-';\n    } elseif\
    \ ($grade >= 1.0) {\n      $result[] = 'D+';\n    } elseif ($grade >= 0.7) {\n\
    \      $result[] = 'D';\n    } elseif ($grade >= 0.0) {\n      $result[] = 'D-';\n\
    \    } else {\n      $result[] = 'E';\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9b5w9hz.php:61\n\
    Stack trace:\n#0 /tmp/tmpx9b5w9hz.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpx9b5w9hz.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 4.0, 3.8, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => B-\n    [5] => C+\n    [6] => C-\n    [7] => D+\n    [8] => D-\n  \
    \  [9] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppye303ih.php:63\n\
    Stack trace:\n#0 /tmp/tmppye303ih.php(71): test()\n#1 {main}\n  thrown in /tmp/tmppye303ih.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = \"A+\";\n        } elseif ($grade >= 3.7) {\n    \
    \        $grades_array[] = \"A\";\n        } elseif ($grade >= 3.3) {\n      \
    \      $grades_array[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n       \
    \     $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n        \
    \    $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n          \
    \  $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n           \
    \ $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $grades_array[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $grades_array[] =\
    \ \"C-\";\n        } elseif ($grade >= 1.0) {\n            $grades_array[] = \"\
    D+\";\n        } elseif ($grade >= 0.7) {\n            $grades_array[] = \"D\"\
    ;\n        } elseif ($grade >= 0.0) {\n            $grades_array[] = \"D-\";\n\
    \        } else {\n            $grades_array[] = \"E\";\n        }\n    }\n  \
    \  return $grades_array;\n}\n\n$grades = [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7, 0.0, 0.0];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphgek0oy8.php:63\nStack trace:\n#0 /tmp/tmphgek0oy8.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphgek0oy8.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.0, 2.7, 1.3, 0.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7, 0.0];\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => B+\n    [1] => B\n    [2] => C-\n    [3] => D-\n \
    \   [4] => A+\n    [5] => A\n    [6] => A-\n    [7] => B+\n    [8] => B\n    [9]\
    \ => B-\n    [10] => C+\n    [11] => C\n    [12] => C-\n    [13] => D+\n    [14]\
    \ => D\n    [15] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpmkhrdnyb.php:65\nStack trace:\n#0 /tmp/tmpmkhrdnyb.php(73): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmkhrdnyb.php on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 2.9, 3.3, 3.0, 2.7, 2.3, 1.0, 0.7, 0.0, -0.5];\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B\n  \
    \  [4] => A-\n    [5] => B+\n    [6] => B\n    [7] => B-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => E\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpaa472hsq.php:64\nStack trace:\n#0 /tmp/tmpaa472hsq.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaa472hsq.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.8, 4.0, 1.9];\n$letter_grades = numerical_letter_grade($grades);\n\
    print_r($letter_grades);\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpreqscf_8.php:64\nStack\
    \ trace:\n#0 /tmp/tmpreqscf_8.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpreqscf_8.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.3, 3.0, 1.7, 1.1, 0.3, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => C\n  \
    \  [4] => D+\n    [5] => D-\n    [6] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpth6kovfo.php:63\nStack trace:\n#0 /tmp/tmpth6kovfo.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpth6kovfo.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n  $result\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $result[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $result[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $result[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $result[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $result[] = 'B';\n\
    \    } elseif ($grade >= 2.3) {\n      $result[] = 'B-';\n    } elseif ($grade\
    \ >= 2.0) {\n      $result[] = 'C+';\n    } elseif ($grade >= 1.7) {\n      $result[]\
    \ = 'C';\n    } elseif ($grade >= 1.3) {\n      $result[] = 'C-';\n    } elseif\
    \ ($grade >= 1.0) {\n      $result[] = 'D+';\n    } elseif ($grade >= 0.7) {\n\
    \      $result[] = 'D';\n    } elseif ($grade >= 0.0) {\n      $result[] = 'D-';\n\
    \    } else {\n      $result[] = 'E';\n    }\n  }\n  return $result;\n}\n\n$grades\
    \ = [3.5, 4.0, 2.3, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => B-\n    [3] => A\n \
    \   [4] => A-\n    [5] => B+\n    [6] => B\n    [7] => B-\n    [8] => C+\n   \
    \ [9] => C\n    [10] => C-\n    [11] => D+\n    [12] => D\n    [13] => D-\n  \
    \  [14] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5q62d19.php:63\n\
    Stack trace:\n#0 /tmp/tmpf5q62d19.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpf5q62d19.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 2.3, 3.3, 1.7, 2.7, 3.7];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B-\n    [2] => A-\n    [3] => C\n  \
    \  [4] => B\n    [5] => A\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp724nq3vh.php:63\nStack trace:\n#0 /tmp/tmp724nq3vh.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmp724nq3vh.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.9, 2.8, 2.9, 2.3, 2.7, 2.5, 3.1, 3.6, 3.0, 3.8, 2.6, 2.4, 2.2,\
    \ 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5,\
    \ 0.4, 0.3, 0.2, 0.1, 0.0, -0.1];\n\necho '<pre>';\nprint_r(numerical_letter_grade($grades));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => B\n\
    \    [4] => B\n    [5] => B-\n    [6] => B\n    [7] => B-\n    [8] => B+\n   \
    \ [9] => A-\n    [10] => B+\n    [11] => A\n    [12] => B-\n    [13] => B-\n \
    \   [14] => C+\n    [15] => C+\n    [16] => C\n    [17] => C\n    [18] => C\n\
    \    [19] => C-\n    [20] => C-\n    [21] => C-\n    [22] => C-\n    [23] => D+\n\
    \    [24] => D+\n    [25] => D+\n    [26] => D\n    [27] => D\n    [28] => D\n\
    \    [29] => D-\n    [30] => D-\n    [31] => D-\n    [32] => D-\n    [33] => D-\n\
    \    [34] => D-\n    [35] => D-\n    [36] => E\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpw_610sv3.php:66\nStack trace:\n#0 /tmp/tmpw_610sv3.php(74):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw_610sv3.php on line 66\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.9, 4.0, 2.8, 2.9, 1.0, 0.5, 0.2, 0.0];\n$result = numerical_letter_grade($grades);\n\
    print_r($result);\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A+\n  \
    \  [4] => B\n    [5] => B\n    [6] => D+\n    [7] => D-\n    [8] => D-\n    [9]\
    \ => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuql9fkq6.php:65\n\
    Stack trace:\n#0 /tmp/tmpuql9fkq6.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpuql9fkq6.php\
    \ on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4hg8hnd.php:63\nStack\
    \ trace:\n#0 /tmp/tmps4hg8hnd.php(71): test()\n#1 {main}\n  thrown in /tmp/tmps4hg8hnd.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7,\
    \ 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1,\
    \ 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0];\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxjd6_eq.php:63\n\
    Stack trace:\n#0 /tmp/tmpzxjd6_eq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpzxjd6_eq.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp58cuiczw.php:63\nStack trace:\n#0 /tmp/tmp58cuiczw.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp58cuiczw.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n  $result\
    \ = [];\n  foreach ($grades as $grade) {\n    if ($grade >= 4.0) {\n      $result[]\
    \ = 'A+';\n    } elseif ($grade >= 3.7) {\n      $result[] = 'A';\n    } elseif\
    \ ($grade >= 3.3) {\n      $result[] = 'A-';\n    } elseif ($grade >= 3.0) {\n\
    \      $result[] = 'B+';\n    } elseif ($grade >= 2.7) {\n      $result[] = 'B';\n\
    \    } elseif ($grade >= 2.3) {\n      $result[] = 'B-';\n    } elseif ($grade\
    \ >= 2.0) {\n      $result[] = 'C+';\n    } elseif ($grade >= 1.7) {\n      $result[]\
    \ = 'C';\n    } elseif ($grade >= 1.3) {\n      $result[] = 'C-';\n    } elseif\
    \ ($grade >= 1.0) {\n      $result[] = 'D+';\n    } elseif ($grade >= 0.7) {\n\
    \      $result[] = 'D';\n    } elseif ($grade >= 0.0) {\n      $result[] = 'D-';\n\
    \    } else {\n      $result[] = 'E';\n    }\n  }\n  return $result;\n}\n\n$grades\
    \ = [3.5, 4.0, 3.8, 3.2, 3.9, 3.1, 3.6, 3.0, 3.7, 2.5];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => A\n    [5] => B+\n    [6] => A-\n    [7] => B+\n    [8] => A\n    [9]\
    \ => B-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4dhow8x.php:63\n\
    Stack trace:\n#0 /tmp/tmpa4dhow8x.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpa4dhow8x.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 4.0, 3.2, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => B+\n \
    \   [4] => B+\n    [5] => B-\n    [6] => C+\n    [7] => C-\n    [8] => D+\n  \
    \  [9] => D-\n    [10] => D-\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp0exaadbi.php:63\nStack trace:\n#0 /tmp/tmp0exaadbi.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmp0exaadbi.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.2, 3.8, 3.5, 4.0, 2.9, 2.1, 3.0, 3.1, 3.2, 2.9, 2.9, 2.5, 2.8];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => B+\n    [1] => A\n    [2] => A-\n    [3] => A+\n \
    \   [4] => B\n    [5] => C+\n    [6] => B+\n    [7] => B+\n    [8] => B+\n   \
    \ [9] => B\n    [10] => B\n    [11] => B-\n    [12] => B\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp56umworq.php:63\nStack trace:\n#0 /tmp/tmp56umworq.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp56umworq.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa9t3_l_7.php:63\nStack trace:\n#0 /tmp/tmpa9t3_l_7.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa9t3_l_7.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades_letter\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_letter[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $grades_letter[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $grades_letter[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $grades_letter[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $grades_letter[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $grades_letter[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $grades_letter[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $grades_letter[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $grades_letter[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $grades_letter[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $grades_letter[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letter[] = 'D-';\n        } else {\n\
    \            $grades_letter[] = 'E';\n        }\n    }\n    return $grades_letter;\n\
    }\n\n$grades = [3.5, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    echo '<pre>';\nprint_r(numerical_letter_grade($grades));\necho '</pre>';\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A-\n    [3] => B+\n\
    \    [4] => B\n    [5] => B-\n    [6] => C+\n    [7] => C\n    [8] => C-\n   \
    \ [9] => D+\n    [10] => D\n    [11] => D-\n    [12] => D-\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpchz6bged.php:66\nStack trace:\n\
    #0 /tmp/tmpchz6bged.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpchz6bged.php\
    \ on line 66\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example: print \"Hello world!\";\n    $result = [];\n    foreach ($grades\
    \ as $grade) {\n        if ($grade >= 4.0) {\n            $result[] = 'A+';\n\
    \        } elseif ($grade >= 3.7) {\n            $result[] = 'A';\n        } elseif\
    \ ($grade >= 3.3) {\n            $result[] = 'A-';\n        } elseif ($grade >=\
    \ 3.0) {\n            $result[] = 'B+';\n        } elseif ($grade >= 2.7) {\n\
    \            $result[] = 'B';\n        } elseif ($grade >= 2.3) {\n          \
    \  $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n            $result[]\
    \ = 'C+';\n        } elseif ($grade >= 1.7) {\n            $result[] = 'C';\n\
    \        } elseif ($grade >= 1.3) {\n            $result[] = 'C-';\n        }\
    \ elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n        } elseif ($grade\
    \ >= 0.7) {\n            $result[] = 'D';\n        } elseif ($grade >= 0.0) {\n\
    \            $result[] = 'D-';\n        } else {\n            $result[] = 'E';\n\
    \        }\n    }\n    return $result;\n}\n\n$grades = [3.7, 3.3, 4.0, 2.3, 3.4,\
    \ 1.7, 2.7, 3.7];\n$result = numerical_letter_grade($grades);\nprint_r($result);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => A+\n    [3] => B-\n \
    \   [4] => A-\n    [5] => C\n    [6] => B\n    [7] => A\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqxtb6fqj.php:67\nStack trace:\n#0 /tmp/tmpqxtb6fqj.php(75):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqxtb6fqj.php on line 67\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 2.0, 1.0, 2.3, 3.7, 3.3, 3.0, 2.7, 2.3, 1.7, 1.3, 1.0, 0.7, 0.0,\
    \ 0.0];\n\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => C+\n    [3] => D+\n\
    \    [4] => B-\n    [5] => A\n    [6] => A-\n    [7] => B+\n    [8] => B\n   \
    \ [9] => B-\n    [10] => C\n    [11] => C-\n    [12] => D+\n    [13] => D\n  \
    \  [14] => D-\n    [15] => D-\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptbzzox1s.php:64\nStack trace:\n#0 /tmp/tmptbzzox1s.php(72): test()\n\
    #1 {main}\n  thrown in /tmp/tmptbzzox1s.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 3.2, 3.9, 3.0, 3.7, 3.3, 3.6, 3.1, 3.4, 2.9, 2.8, 2.7, 2.6,\
    \ 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0,\
    \ 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0];\n\n$result = numerical_letter_grade($grades);\n\
    \necho implode(', ', $result);\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "A-, A+, A, B+, A, B+, A, A-, A-, B+, A-, B, B, B, B-, B-, B-, B-, C+, C+,\
    \ C+, C, C, C, C-, C-, C-, C-, D+, D+, D+, D, D, D, D-, D-, D-, D-, D-, D-, D-\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_m46ey_d.php:67\nStack\
    \ trace:\n#0 /tmp/tmp_m46ey_d.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp_m46ey_d.php\
    \ on line 67\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 4.0, 3.8, 2.2, 3.7, 2.9, 2.5, 2.3, 3.1, 3.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => C+\n \
    \   [4] => A\n    [5] => B\n    [6] => B-\n    [7] => B-\n    [8] => B+\n    [9]\
    \ => B+\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrd92ytf.php:63\n\
    Stack trace:\n#0 /tmp/tmprrd92ytf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmprrd92ytf.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 4.0, 3.8, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\n\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => B-\n    [5] => C+\n    [6] => C-\n    [7] => D+\n    [8] => D-\n  \
    \  [9] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8a4iv7vl.php:64\n\
    Stack trace:\n#0 /tmp/tmp8a4iv7vl.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp8a4iv7vl.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 2.5, 2.0, 1.0, 4.0];\nprint_r(numerical_letter_grade($grades));\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => B-\n    [2] => C+\n    [3] => D+\n\
    \    [4] => A+\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88lk7ape.php:63\n\
    Stack trace:\n#0 /tmp/tmp88lk7ape.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp88lk7ape.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.8, 3.9, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpi5yztgeg.php
    on line 57

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, -0.1];\necho '<pre>';\n\
    print_r(numerical_letter_grade($grades));\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n\
    \    [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n  \
    \  [9] => D\n    [10] => D-\n    [11] => E\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc0fwy2al.php:66\nStack trace:\n#0 /tmp/tmpc0fwy2al.php(74):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc0fwy2al.php on line 66\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [2.3, 3.7, 4.0, 1.3, 2.7, 3.3, 3.0, 1.0, 2.0, 1.7, 0.7, 0.3, 0.0];\n\
    $letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => B-\n    [1] => A\n    [2] => A+\n    [3] => C-\n \
    \   [4] => B\n    [5] => A-\n    [6] => B+\n    [7] => D+\n    [8] => C+\n   \
    \ [9] => C\n    [10] => D\n    [11] => D-\n    [12] => D-\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxfnn213m.php:64\nStack trace:\n#0 /tmp/tmpxfnn213m.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxfnn213m.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7,\
    \ 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1,\
    \ 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0];\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxjd6_eq.php:63\n\
    Stack trace:\n#0 /tmp/tmpzxjd6_eq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpzxjd6_eq.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.8, 3.9, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,\
    \ 4.0\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpi5yztgeg.php
    on line 57

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 2.9, 3.0, 3.7, 2.5, 3.2, 3.1, 3.6, 2.8, 2.0, 2.9, 2.1, 2.7,\
    \ 2.2, 2.5, 2.3, 3.4, 3.9, 2.6, 2.4, 2.0, 3.3, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7,\
    \ 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0];\n\nprint_r(numerical_letter_grade($grades\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpddmd3564.php
    on line 59

    '
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa9t3_l_7.php:63\nStack trace:\n#0 /tmp/tmpa9t3_l_7.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa9t3_l_7.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades_array\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $grades_array[] = \"A+\";\n        } elseif ($grade >= 3.7) {\n    \
    \        $grades_array[] = \"A\";\n        } elseif ($grade >= 3.3) {\n      \
    \      $grades_array[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n       \
    \     $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n        \
    \    $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n          \
    \  $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n           \
    \ $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $grades_array[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $grades_array[] =\
    \ \"C-\";\n        } elseif ($grade >= 1.0) {\n            $grades_array[] = \"\
    D+\";\n        } elseif ($grade >= 0.7) {\n            $grades_array[] = \"D\"\
    ;\n        } elseif ($grade >= 0.0) {\n            $grades_array[] = \"D-\";\n\
    \        } else {\n            $grades_array[] = \"E\";\n        }\n    }\n  \
    \  return $grades_array;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps3v5b9j0.php:61\n\
    Stack trace:\n#0 /tmp/tmps3v5b9j0.php(69): test()\n#1 {main}\n  thrown in /tmp/tmps3v5b9j0.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $grades\
    \ = array_map(function($grade) {\n        if ($grade >= 4.0) {\n            return\
    \ 'A+';\n        } elseif ($grade >= 3.7) {\n            return 'A';\n       \
    \ } elseif ($grade >= 3.3) {\n            return 'A-';\n        } elseif ($grade\
    \ >= 3.0) {\n            return 'B+';\n        } elseif ($grade >= 2.7) {\n  \
    \          return 'B';\n        } elseif ($grade >= 2.3) {\n            return\
    \ 'B-';\n        } elseif ($grade >= 2.0) {\n            return 'C+';\n      \
    \  } elseif ($grade >= 1.7) {\n            return 'C';\n        } elseif ($grade\
    \ >= 1.3) {\n            return 'C-';\n        } elseif ($grade >= 1.0) {\n  \
    \          return 'D+';\n        } elseif ($grade >= 0.7) {\n            return\
    \ 'D';\n        } elseif ($grade >= 0.0) {\n            return 'D-';\n       \
    \ } else {\n            return 'E';\n        }\n    }, $grades);\n    return $grades;\n\
    }\n\n$grades = [3.0, 2.7, 2.3, 1.0, 0.7, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => B+\n    [1] => B\n    [2] => B-\n    [3] => D+\n \
    \   [4] => D\n    [5] => D-\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3k36skpm.php:62\nStack trace:\n#0 /tmp/tmp3k36skpm.php(70): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3k36skpm.php on line 62\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    $letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A-\n    [3] => B+\n \
    \   [4] => B\n    [5] => B-\n    [6] => C+\n    [7] => C\n    [8] => C-\n    [9]\
    \ => D+\n    [10] => D\n    [11] => D-\n    [12] => D-\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcmglv9kw.php:64\nStack trace:\n#0 /tmp/tmpcmglv9kw.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcmglv9kw.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.3, 4.0, 2.5, 2.7, 2.3, 2.0, 1.5, 1.7, 1.3, 1.0, 0.5,\
    \ 0.7, 0.0, 0.0];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A-\n    [3] => A+\n \
    \   [4] => B-\n    [5] => B\n    [6] => B-\n    [7] => C+\n    [8] => C-\n   \
    \ [9] => C\n    [10] => C-\n    [11] => D+\n    [12] => D-\n    [13] => D\n  \
    \  [14] => D-\n    [15] => D-\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmphpy7hgi5.php:63\nStack trace:\n#0 /tmp/tmphpy7hgi5.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmphpy7hgi5.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.7, 3.0, 4.0, 2.8, 2.9, 2.5, 2.2, 1.9, 1.7, 1.6, 1.0, 0.8,\
    \ 0.7, 0.5, 0.3, 0.0, -0.5];\n\nprint_r(numerical_letter_grade($grades));\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => B+\n    [3] => A+\n \
    \   [4] => B\n    [5] => B\n    [6] => B-\n    [7] => C+\n    [8] => C\n    [9]\
    \ => C\n    [10] => C-\n    [11] => D+\n    [12] => D\n    [13] => D\n    [14]\
    \ => D-\n    [15] => D-\n    [16] => D-\n    [17] => E\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpq156tk8o.php:65\nStack trace:\n#0 /tmp/tmpq156tk8o.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq156tk8o.php on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => B-\n    [5] => C+\n    [6] => C-\n    [7] => D+\n    [8] => D-\n  \
    \  [9] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19i82r3c.php:63\n\
    Stack trace:\n#0 /tmp/tmp19i82r3c.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp19i82r3c.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.8, 3.2, 3.9, 4.0, 2.8, 2.9, 2.5, 2.0, 1.0, 0.8, 0.4, 0.0, 0.7, 0.6, 0.3,\
    \ 0.2, 0.1];\n\nprint_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => B+\n    [2] => A\n    [3] => A+\n  \
    \  [4] => B\n    [5] => B\n    [6] => B-\n    [7] => C+\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n    [12] => D\n    [13] => D-\n    [14]\
    \ => D-\n    [15] => D-\n    [16] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5cvd0u3a.php:65\nStack trace:\n#0 /tmp/tmp5cvd0u3a.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5cvd0u3a.php on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    print_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmqyrk59_.php:64\nStack trace:\n#0 /tmp/tmpmqyrk59_.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmqyrk59_.php on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnwuo3ha.php:61\n\
    Stack trace:\n#0 /tmp/tmpxnwuo3ha.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxnwuo3ha.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5,\
    \ 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9,\
    \ 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0];\n\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A\n    [2] => A\n    [3] => A-\n   \
    \ [4] => A-\n    [5] => A-\n    [6] => A-\n    [7] => B+\n    [8] => B+\n    [9]\
    \ => B+\n    [10] => B\n    [11] => B\n    [12] => B\n    [13] => B-\n    [14]\
    \ => B-\n    [15] => B-\n    [16] => B-\n    [17] => C+\n    [18] => C+\n    [19]\
    \ => C+\n    [20] => C\n    [21] => C\n    [22] => C\n    [23] => C-\n    [24]\
    \ => C-\n    [25] => C-\n    [26] => C-\n    [27] => D+\n    [28] => D+\n    [29]\
    \ => D+\n    [30] => D\n    [31] => D\n    [32] => D\n    [33] => D-\n    [34]\
    \ => D-\n    [35] => D-\n    [36] => D-\n    [37] => D-\n    [38] => D-\n    [39]\
    \ => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux4haiv2.php:64\n\
    Stack trace:\n#0 /tmp/tmpux4haiv2.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpux4haiv2.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 4.0, 3.8, 3.0, 3.9, 2.5, 2.1, 2.0, 1.9, 2.7, 1.7, 1.5, 1.0, 0.5, 0.3,\
    \ 0.0];\n\nprint_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A+\n    [2] => A\n    [3] => B+\n \
    \   [4] => A\n    [5] => B-\n    [6] => C+\n    [7] => C+\n    [8] => C\n    [9]\
    \ => B\n    [10] => C\n    [11] => C-\n    [12] => D+\n    [13] => D-\n    [14]\
    \ => D-\n    [15] => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmps10xj4pn.php:65\nStack trace:\n#0 /tmp/tmps10xj4pn.php(73): test()\n\
    #1 {main}\n  thrown in /tmp/tmps10xj4pn.php on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.5, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    $letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A-\n    [2] => B+\n    [3] => B\n \
    \   [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n   \
    \ [9] => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzob4w17s.php:65\nStack trace:\n#0 /tmp/tmpzob4w17s.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzob4w17s.php on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.7, 3.8, 3.9, 4.0, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9,\
    \ 3.0, 3.1, 3.2, 3.3, 3.4, 3.6, 3.7, 3.8, 3.9, 4.0];\n\nprint_r(numerical_letter_grade($grades));\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A\n    [3] => A\n   \
    \ [4] => A+\n    [5] => C+\n    [6] => C+\n    [7] => C+\n    [8] => B-\n    [9]\
    \ => B-\n    [10] => B-\n    [11] => B-\n    [12] => B\n    [13] => B\n    [14]\
    \ => B\n    [15] => B+\n    [16] => B+\n    [17] => B+\n    [18] => A-\n    [19]\
    \ => A-\n    [20] => A-\n    [21] => A\n    [22] => A\n    [23] => A\n    [24]\
    \ => A+\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80p1glwv.php:65\n\
    Stack trace:\n#0 /tmp/tmp80p1glwv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp80p1glwv.php\
    \ on line 65\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.5, 3.8, 4.0, 1.9];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A-\n    [1] => A\n    [2] => A+\n    [3] => C\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbeyek_.php:63\nStack\
    \ trace:\n#0 /tmp/tmpivbeyek_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpivbeyek_.php\
    \ on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rn6to56.php:61\n\
    Stack trace:\n#0 /tmp/tmp3rn6to56.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp3rn6to56.php\
    \ on line 61\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $letter_grades\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $letter_grades[] = 'A+';\n        } elseif ($grade >= 3.7) {\n     \
    \       $letter_grades[] = 'A';\n        } elseif ($grade >= 3.3) {\n        \
    \    $letter_grades[] = 'A-';\n        } elseif ($grade >= 3.0) {\n          \
    \  $letter_grades[] = 'B+';\n        } elseif ($grade >= 2.7) {\n            $letter_grades[]\
    \ = 'B';\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = 'B-';\n\
    \        } elseif ($grade >= 2.0) {\n            $letter_grades[] = 'C+';\n  \
    \      } elseif ($grade >= 1.7) {\n            $letter_grades[] = 'C';\n     \
    \   } elseif ($grade >= 1.3) {\n            $letter_grades[] = 'C-';\n       \
    \ } elseif ($grade >= 1.0) {\n            $letter_grades[] = 'D+';\n        }\
    \ elseif ($grade >= 0.7) {\n            $letter_grades[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $letter_grades[] = 'D-';\n        } else {\n\
    \            $letter_grades[] = 'E';\n        }\n    }\n    return $letter_grades;\n\
    }\n\n$grades = [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n\
    print_r(numerical_letter_grade($grades));\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A-\n    [2] => B+\n    [3] => B\n  \
    \  [4] => B-\n    [5] => C+\n    [6] => C\n    [7] => C-\n    [8] => D+\n    [9]\
    \ => D\n    [10] => D-\n    [11] => D-\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa9t3_l_7.php:63\nStack trace:\n#0 /tmp/tmpa9t3_l_7.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa9t3_l_7.php on line 63\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $result\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $result[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $result[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $result[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $result[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $result[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $result[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $result[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $result[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $result[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $result[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $result[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $result[] = 'D-';\n        } else {\n       \
    \     $result[] = 'E';\n        }\n    }\n    return $result;\n}\n\n$grades =\
    \ [3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5,\
    \ 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9,\
    \ 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0];\n\nprint_r(numerical_letter_grade($grades));\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A\n    [1] => A\n    [2] => A\n    [3] => A-\n   \
    \ [4] => A-\n    [5] => A-\n    [6] => A-\n    [7] => B+\n    [8] => B+\n    [9]\
    \ => B+\n    [10] => B\n    [11] => B\n    [12] => B\n    [13] => B-\n    [14]\
    \ => B-\n    [15] => B-\n    [16] => B-\n    [17] => C+\n    [18] => C+\n    [19]\
    \ => C+\n    [20] => C\n    [21] => C\n    [22] => C\n    [23] => C-\n    [24]\
    \ => C-\n    [25] => C-\n    [26] => C-\n    [27] => D+\n    [28] => D+\n    [29]\
    \ => D+\n    [30] => D\n    [31] => D\n    [32] => D\n    [33] => D-\n    [34]\
    \ => D-\n    [35] => D-\n    [36] => D-\n    [37] => D-\n    [38] => D-\n    [39]\
    \ => D-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux4haiv2.php:64\n\
    Stack trace:\n#0 /tmp/tmpux4haiv2.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpux4haiv2.php\
    \ on line 64\n"
  timestamp: 1660005420
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\nfunction numerical_letter_grade($grades) {\n    $output\
    \ = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n   \
    \         $output[] = 'A+';\n        } elseif ($grade >= 3.7) {\n            $output[]\
    \ = 'A';\n        } elseif ($grade >= 3.3) {\n            $output[] = 'A-';\n\
    \        } elseif ($grade >= 3.0) {\n            $output[] = 'B+';\n        }\
    \ elseif ($grade >= 2.7) {\n            $output[] = 'B';\n        } elseif ($grade\
    \ >= 2.3) {\n            $output[] = 'B-';\n        } elseif ($grade >= 2.0) {\n\
    \            $output[] = 'C+';\n        } elseif ($grade >= 1.7) {\n         \
    \   $output[] = 'C';\n        } elseif ($grade >= 1.3) {\n            $output[]\
    \ = 'C-';\n        } elseif ($grade >= 1.0) {\n            $output[] = 'D+';\n\
    \        } elseif ($grade >= 0.7) {\n            $output[] = 'D';\n        } elseif\
    \ ($grade >= 0.0) {\n            $output[] = 'D-';\n        } else {\n       \
    \     $output[] = 'E';\n        }\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwtsyoo_6.php:61\n\
    Stack trace:\n#0 /tmp/tmpwtsyoo_6.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpwtsyoo_6.php\
    \ on line 61\n"
  timestamp: 1660005420
