language: php
name: HumanEval_120_maximum
results:
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$k = 5;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 7\n    [2] => 8\n    [3] => 9\n    [4]\
    \ => 10\n)\n\nWarning: min(): Array must contain at least one element in /tmp/tmpguvu3g46.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpguvu3g46.php:46\n\
    Stack trace:\n#0 /tmp/tmpguvu3g46.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpguvu3g46.php\
    \ on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) return [];\n    $res =\
    \ [];\n    for ($i = 0; $i < $n; $i++) {\n        while (count($res) > 0 && $res[count($res)\
    \ - 1] < $arr[$i] && $n - $i > $k - count($res)) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxwpxsd8u.php:34\nStack trace:\n#0 /tmp/tmpxwpxsd8u.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxwpxsd8u.php on line 34\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        } else {\n       \
    \     $min = min($res);\n            if ($arr[$i] > $min) {\n                $index\
    \ = array_search($min, $res);\n                $res[$index] = $arr[$i];\n    \
    \        }\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,\
    \ 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 7\n    [1] => 8\n    [2] => 9\n)\n\nWarning: min():\
    \ Array must contain at least one element in /tmp/tmppafjtqh2.php on line 17\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmppafjtqh2.php:46\nStack\
    \ trace:\n#0 /tmp/tmppafjtqh2.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppafjtqh2.php\
    \ on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len <= $k) {\n        return $arr;\n  \
    \  }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $min = min($res);\n    \
    \    $minIndex = array_search($min, $res);\n        if ($arr[$i] > $min) {\n \
    \           $res[$minIndex] = $arr[$i];\n        }\n    }\n    sort($res);\n \
    \   return $res;\n}\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7whh620u.php:38\nStack trace:\n#0 /tmp/tmp7whh620u.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7whh620u.php on line 38\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) return [];\n    $res =\
    \ [];\n    for ($i = 0; $i < $n; $i++) {\n        while ($res && $res[count($res)\
    \ - 1] < $arr[$i] && count($res) + $n - $i > $k) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxy1x9gtl.php:33\nStack trace:\n#0 /tmp/tmpxy1x9gtl.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxy1x9gtl.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    $res = [];\n    $i = 0;\n    while ($i < $k)\
    \ {\n        $max = -INF;\n        $max_index = -1;\n        for ($j = $i; $j\
    \ < $len; $j++) {\n            if ($arr[$j] > $max) {\n                $max =\
    \ $arr[$j];\n                $max_index = $j;\n            }\n        }\n    \
    \    $res[] = $max;\n        $i = $max_index + 1;\n    }\n    return $res;\n}\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2x97tfdy.php:35\n\
    Stack trace:\n#0 /tmp/tmp2x97tfdy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2x97tfdy.php\
    \ on line 35\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $length = count($arr);\n    if ($k > $length) {\n\
    \        return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = $arr[$i];\n        $index = $i;\n        for ($j = $i + 1; $j < $length; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi74lw44y.php:41\nStack trace:\n#0 /tmp/tmpi74lw44y.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi74lw44y.php on line 41\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while ($n - $i + count($result) > $k && !empty($result) && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9c_n3t3f.php:33\nStack trace:\n#0 /tmp/tmp9c_n3t3f.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9c_n3t3f.php on line 33\n"
  timestamp: 1659730152
- exit_code: 0
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    if ($size == 0 || $k ==\
    \ 0) {\n        return $result;\n    }\n    $queue = new SplPriorityQueue();\n\
    \    for ($i = 0; $i < $size; $i++) {\n        $queue->insert($arr[$i], -$arr[$i]);\n\
    \        if ($queue->count() > $k) {\n            $queue->extract();\n       \
    \ }\n    }\n    while (!$queue->isEmpty()) {\n        $result[] = $queue->extract();\n\
    \    }\n    return $result;\n}\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n)\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($k >= $n) {\n        sort($arr);\n       \
    \ return $arr;\n    }\n    $res = array_slice($arr, 0, $k);\n    sort($res);\n\
    \    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $res[0]) {\n     \
    \       $res[0] = $arr[$i];\n            sort($res);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7zrny662.php:46\nStack trace:\n#0 /tmp/tmp7zrny662.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7zrny662.php on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMinHeap();\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $heap->insert($res[$i]);\n    }\n    for ($i = $k; $i < $n; $i++) {\n  \
    \      if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n       \
    \     $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 1, 1,\
    \ 2, 2, 3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [5, -3, 9, 1, 7, 7,\
    \ 9, 10, 2, 3, 4];\n$k = 6;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\nArray\n(\n    [0] => 1\n    [1]\
    \ => 1\n)\nArray\n(\n    [0] => 5\n    [1] => -3\n    [2] => 9\n    [3] => 1\n\
    \    [4] => 7\n    [5] => 7\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpacalxkyg.php:49\nStack trace:\n#0 /tmp/tmpacalxkyg.php(62): test()\n\
    #1 {main}\n  thrown in /tmp/tmpacalxkyg.php on line 49\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $heap->insert($res[$i]);\n    }\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdr39pqn9.php:42\n\
    Stack trace:\n#0 /tmp/tmpdr39pqn9.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpdr39pqn9.php\
    \ on line 42\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n  \
    \      } else {\n            $max = max($res);\n            if ($arr[$i] > $max)\
    \ {\n                $index = array_search($max, $res);\n                $res[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw8yx33cr.php:37\nStack trace:\n#0 /tmp/tmpw8yx33cr.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw8yx33cr.php on line 37\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        while ($res && $res[count($res) - 1] < $arr[$i] && count($res) +\
    \ $len - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1, 3, 2, 4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1gthpsux.php:33\nStack trace:\n#0 /tmp/tmp1gthpsux.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1gthpsux.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) return [];\n    if ($k\
    \ == $n) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $res[] = $arr[$i];\n    }\n    $maxHeap = new SplMaxHeap();\n    foreach\
    \ ($res as $num) {\n        $maxHeap->insert($num);\n    }\n    for ($i = $k;\
    \ $i < $n; $i++) {\n        if ($arr[$i] < $maxHeap->top()) {\n            $maxHeap->extract();\n\
    \            $maxHeap->insert($arr[$i]);\n        }\n    }\n    return iterator_to_array($maxHeap);\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [1] => 2\n    [0] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpke4d2wr7.php:40\nStack trace:\n#0 /tmp/tmpke4d2wr7.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpke4d2wr7.php on line 40\n"
  timestamp: 1659730152
- exit_code: 0
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        sort($result);\n        if (count($result)\
    \ > $k) {\n            array_shift($result);\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1,\
    \ 1, 1, 2, 2, 3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [0, 1, 2, 3,\
    \ 4, 0, 0, 0, 0];\n$k = 4;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n\
    )\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n\
    \    }\n    $count = array_fill(0, $max + 1, 0);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $count[$arr[$i]]++;\n    }\n    $result = [];\n    for ($i = $max;\
    \ $i >= 0; $i--) {\n        while ($count[$i] > 0) {\n            $result[] =\
    \ $i;\n            $count[$i]--;\n            if (count($result) == $k) {\n  \
    \              return $result;\n            }\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsxm8_ko7.php:44\nStack trace:\n#0 /tmp/tmpsxm8_ko7.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsxm8_ko7.php on line 44\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n   \
    \     $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    rsort($max);\n    return $max;\n}\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0wveqq1.php:32\n\
    Stack trace:\n#0 /tmp/tmpk0wveqq1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpk0wveqq1.php\
    \ on line 32\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    if ($count < $k) {\n  \
    \      return $result;\n    }\n    $heap = new SplMaxHeap();\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    for ($i = $k;\
    \ $i < $count; $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    while (!$heap->isEmpty())\
    \ {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n\
    $arr = [1,2,3,4,5];\n$k = 4;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 3\n    [2] => 2\n    [3] => 1\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmph8v9jpdj.php:41\nStack\
    \ trace:\n#0 /tmp/tmph8v9jpdj.php(54): test()\n#1 {main}\n  thrown in /tmp/tmph8v9jpdj.php\
    \ on line 41\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpkzfwlyvl.php:36\nStack trace:\n#0 /tmp/tmpkzfwlyvl.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkzfwlyvl.php on line 36\n"
  timestamp: 1659730152
- exit_code: 0
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    if ($k >= $len) {\n        sort($arr);\n        return $arr;\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    sort($res);\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i]\
    \ > $res[0]) {\n            $res[0] = $arr[$i];\n            sort($res);\n   \
    \     }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 1, 1, 2, 2, 3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [5, -3, 9, 1, 7, 7, 9, 10, 2, 3, 4];\n$k = 6;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n)\nArray\n(\n    [0] => 5\n    [1] => 7\n    [2] => 7\n    [3] => 9\n\
    \    [4] => 9\n    [5] => 10\n)\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $length = count($arr);\n    if ($k > $length) {\n\
    \        return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = $arr[$i];\n        $maxIndex = $i;\n        for ($j = $i + 1; $j < $length;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        $arr[$maxIndex] = $arr[$i];\n        $arr[$i] = $max;\n   \
    \ }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpu1x0alii.php:41\nStack trace:\n#0 /tmp/tmpu1x0alii.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu1x0alii.php on line 41\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    if ($len <= $k) {\n     \
    \   return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = $arr[$i];\n    }\n    for ($i = $k; $i < $len; $i++) {\n        $min = min($result);\n\
    \        if ($arr[$i] > $min) {\n            $key = array_search($min, $result);\n\
    \            $result[$key] = $arr[$i];\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp58hsvmw8.php:39\nStack trace:\n#0 /tmp/tmp58hsvmw8.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp58hsvmw8.php on line 39\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpz5d4ctfw.php:36\nStack trace:\n#0 /tmp/tmpz5d4ctfw.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz5d4ctfw.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    if ($len == 0 || $k == 0)\
    \ {\n        return $result;\n    }\n    $result = array_slice($arr, 0, $k);\n\
    \    sort($result);\n    for ($i = $k; $i < $len; $i++) {\n        $num = $arr[$i];\n\
    \        $j = $k - 1;\n        while ($j >= 0 && $num > $result[$j]) {\n     \
    \       $j--;\n        }\n        if ($j < $k - 1) {\n            array_splice($result,\
    \ $j + 1, 0, $num);\n            array_pop($result);\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\n$result = maximum($arr, $k);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph_4s2r5z.php:43\nStack trace:\n#0 /tmp/tmph_4s2r5z.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph_4s2r5z.php on line 43\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while ($size - $i + count($result) > $k && !empty($result)\
    \ && $result[count($result) - 1] < $arr[$i]) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        }\n    }\n    return $result;\n}\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmprcq6zm4p.php:32\nStack trace:\n#0 /tmp/tmprcq6zm4p.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprcq6zm4p.php on line 32\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $num)\
    \ {\n        $heap->insert($num);\n    }\n    for ($i = $k; $i < $len; $i++) {\n\
    \        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n\n$arr\
    \ = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => -1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmphr47y6e9.php:41\nStack trace:\n\
    #0 /tmp/tmphr47y6e9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmphr47y6e9.php\
    \ on line 41\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) return [];\n    if ($k\
    \ >= $n) return $arr;\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $heap->insert($arr[$i]);\n    }\n    for ($i = $k; $i < $n;\
    \ $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [3,2,1,5,6,4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [3,2,3,1,2,4,5,5,6];\n\
    $k = 4;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 1\n)\nArray\n(\n    [0] => 6\n    [1]\
    \ => 2\n)\nArray\n(\n    [0] => 6\n    [1] => 3\n    [2] => 2\n    [3] => 1\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpasez6k2t.php:48\n\
    Stack trace:\n#0 /tmp/tmpasez6k2t.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpasez6k2t.php\
    \ on line 48\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n  \
    \          if ($arr[$j] > $max) {\n                $max = $arr[$j];\n        \
    \        $max_index = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        unset($arr[$max_index]);\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbt2_y904.php:37\nStack trace:\n#0 /tmp/tmpbt2_y904.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbt2_y904.php on line 37\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $stack = [];\n    for ($i = 0; $i < $n; $i++) {\n        while (count($stack)\
    \ > 0 && $arr[$i] > $stack[count($stack) - 1] && $n - $i + count($stack) > $k)\
    \ {\n            array_pop($stack);\n        }\n        if (count($stack) < $k)\
    \ {\n            array_push($stack, $arr[$i]);\n        }\n    }\n    return $stack;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1,\
    \ 2, 3, 4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n\
    $k = 4;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 5;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 6;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 7;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3,\
    \ 4, 5];\n$k = 8;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k\
    \ = 9;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 10;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 11;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [1, 2, 3, 4, 5];\n$k = 12;\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\nArray\n(\n    [0] => 3\n    [1]\
    \ => 4\n    [2] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n\
    \    [3] => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3]\
    \ => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n\
    \    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2]\
    \ => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n\
    \    [2] => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n    [1]\
    \ => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n\
    \    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmprvy1t1a1.php:75\nStack trace:\n\
    #0 /tmp/tmprvy1t1a1.php(88): test()\n#1 {main}\n  thrown in /tmp/tmprvy1t1a1.php\
    \ on line 75\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n  \
    \          if ($arr[$j] > $max) {\n                $max = $arr[$j];\n        \
    \        $max_index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$max_index]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xj3nld_.php:33\n\
    Stack trace:\n#0 /tmp/tmp1xj3nld_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1xj3nld_.php\
    \ on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $result[] = $arr[$i];\n        $result = maxHeap($result);\n    \
    \    if (count($result) > $k) {\n            array_shift($result);\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function maxHeap() in\
    \ /tmp/tmpieqihkx8.php:16\nStack trace:\n#0 /tmp/tmpieqihkx8.php(25): maximum(Array,\
    \ 3)\n#1 /tmp/tmpieqihkx8.php(29): candidate(Array, 3)\n#2 /tmp/tmpieqihkx8.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpieqihkx8.php on line 16\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        while ($res && $res[count($res) - 1] < $arr[$i] && count($res) +\
    \ $len - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpb48ru1vg.php:33\nStack trace:\n#0 /tmp/tmpb48ru1vg.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb48ru1vg.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        } else {\n            $min = min($res);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $res);\n                $res[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmpt6dkkcqs.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpt6dkkcqs.php:47\nStack trace:\n#0 /tmp/tmpt6dkkcqs.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt6dkkcqs.php on line 47\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n\
    \        $index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $index = $j;\n            }\n        }\n        $result[] = $max;\n      \
    \  unset($arr[$index]);\n        $arr = array_values($arr);\n    }\n    return\
    \ $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw7o2j7xe.php:37\nStack trace:\n#0 /tmp/tmpw7o2j7xe.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw7o2j7xe.php on line 37\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($res) < $k) {\n            $res[] = $arr[$i];\n       \
    \ } else {\n            $min = min($res);\n            if ($arr[$i] > $min) {\n\
    \                $res[array_search($min, $res)] = $arr[$i];\n            }\n \
    \       }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,3,5,7,2,4,6,8];\n\
    $k = 4;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n    [3] => 8\n)\n\n\
    Warning: min(): Array must contain at least one element in /tmp/tmp85ctkj2k.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85ctkj2k.php:46\n\
    Stack trace:\n#0 /tmp/tmp85ctkj2k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp85ctkj2k.php\
    \ on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvmbkbfbg.php:36\nStack trace:\n#0 /tmp/tmpvmbkbfbg.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvmbkbfbg.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmpig1kss0i.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpig1kss0i.php:46\nStack trace:\n#0 /tmp/tmpig1kss0i.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpig1kss0i.php on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n   \
    \ }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $res = heapify($res);\n    for ($i = $k; $i < $len; $i++) {\n    \
    \    if ($arr[$i] > $res[0]) {\n            $res[0] = $arr[$i];\n            $res\
    \ = heapify($res);\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function heapify() in\
    \ /tmp/tmp2xdd1t90.php:20\nStack trace:\n#0 /tmp/tmp2xdd1t90.php(31): maximum(Array,\
    \ 3)\n#1 /tmp/tmp2xdd1t90.php(35): candidate(Array, 3)\n#2 /tmp/tmp2xdd1t90.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2xdd1t90.php on line 20\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        $result[] = $arr[$i];\n        $result = maxHeap($result);\n\
    \        if (count($result) > $k) {\n            array_shift($result);\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function maxHeap() in\
    \ /tmp/tmppbdznlds.php:16\nStack trace:\n#0 /tmp/tmppbdznlds.php(25): maximum(Array,\
    \ 3)\n#1 /tmp/tmppbdznlds.php(29): candidate(Array, 3)\n#2 /tmp/tmppbdznlds.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppbdznlds.php on line 16\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    if ($k >= $len) {\n        return $arr;\n    }\n    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n  \
    \  }\n    $heap = new SplMaxHeap();\n    foreach ($result as $num) {\n       \
    \ $heap->insert($num);\n    }\n    for ($i = $k; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $heap->top()) {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjcd93xhs.php:44\nStack trace:\n#0 /tmp/tmpjcd93xhs.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjcd93xhs.php on line 44\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    $maxHeap = new SplMaxHeap();\n    foreach ($result as\
    \ $num) {\n        $maxHeap->insert($num);\n    }\n    for ($i = $k; $i < $n;\
    \ $i++) {\n        if ($arr[$i] > $maxHeap->top()) {\n            $maxHeap->extract();\n\
    \            $maxHeap->insert($arr[$i]);\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1,1,1,2,2,3];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [5,2];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\nArray\n(\n    [0] => 1\n    [1]\
    \ => 1\n)\nArray\n(\n    [0] => 5\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpek_l6bkx.php:49\nStack trace:\n#0 /tmp/tmpek_l6bkx.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpek_l6bkx.php on line 49\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,\
    \ 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyqvfhkab.php:36\nStack trace:\n#0 /tmp/tmpyqvfhkab.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyqvfhkab.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $res[] = $max;\n        unset($arr[$index]);\n\
    \    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivu_4szk.php:33\n\
    Stack trace:\n#0 /tmp/tmpivu_4szk.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpivu_4szk.php\
    \ on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] < $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmps8o8fuez.php:41\nStack trace:\n#0 /tmp/tmps8o8fuez.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmps8o8fuez.php on line 41\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] < $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbch50i_9.php:41\nStack trace:\n#0 /tmp/tmpbch50i_9.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbch50i_9.php on line 41\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $res = heapify($res);\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        if ($arr[$i] > $res[0]) {\n            $res[0] = $arr[$i];\n\
    \            $res = heapify($res);\n        }\n    }\n    return $res;\n}\n\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function heapify() in\
    \ /tmp/tmpxvqksply.php:20\nStack trace:\n#0 /tmp/tmpxvqksply.php(31): maximum(Array,\
    \ 3)\n#1 /tmp/tmpxvqksply.php(35): candidate(Array, 3)\n#2 /tmp/tmpxvqksply.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpxvqksply.php on line 20\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    $result = [];\n    if ($k == 0) {\n        return\
    \ $result;\n    }\n    if ($k == $len) {\n        return $arr;\n    }\n    $result\
    \ = array_slice($arr, 0, $k);\n    sort($result);\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        if ($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n\
    \            sort($result);\n        }\n    }\n    return $result;\n}\n\n$arr\
    \ = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6gnvrx1m.php:39\nStack trace:\n#0 /tmp/tmp6gnvrx1m.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6gnvrx1m.php on line 39\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n     \
    \   if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n    }\n \
    \   $bucket = [];\n    for ($i = 0; $i < $len; $i++) {\n        $index = ($arr[$i]\
    \ / $max) * ($k - 1);\n        $bucket[$index][] = $arr[$i];\n    }\n    $res\
    \ = [];\n    for ($i = $k - 1; $i >= 0; $i--) {\n        if (isset($bucket[$i]))\
    \ {\n            $res = array_merge($res, $bucket[$i]);\n        }\n    }\n  \
    \  return array_slice($res, 0, $k);\n}\n\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\
    $k = 5;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 10\n    [1] => 8\n    [2] => 9\n    [3] => 5\n   \
    \ [4] => 6\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9exh844.php:44\n\
    Stack trace:\n#0 /tmp/tmpp9exh844.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpp9exh844.php\
    \ on line 44\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while ($size - $i + count($result) > $k && !empty($result)\
    \ && $result[count($result) - 1] < $arr[$i]) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0x3_tnd.php:30\n\
    Stack trace:\n#0 /tmp/tmpd0x3_tnd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd0x3_tnd.php\
    \ on line 30\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv13pildq.php:36\nStack trace:\n#0 /tmp/tmpv13pildq.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv13pildq.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmp0tpu_35w.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tpu_35w.php:43\n\
    Stack trace:\n#0 /tmp/tmp0tpu_35w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0tpu_35w.php\
    \ on line 43\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $v)\
    \ {\n        $heap->insert($v);\n    }\n    for ($i = $k; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ array_reverse($res);\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnuai_pp7.php:46\nStack trace:\n#0 /tmp/tmpnuai_pp7.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnuai_pp7.php on line 46\n"
  timestamp: 1659730152
- exit_code: 0
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    if ($size == 0 || $k ==\
    \ 0) {\n        return $result;\n    }\n    $queue = new SplPriorityQueue();\n\
    \    for ($i = 0; $i < $size; $i++) {\n        $queue->insert($arr[$i], -$arr[$i]);\n\
    \        if ($queue->count() > $k) {\n            $queue->extract();\n       \
    \ }\n    }\n    while (!$queue->isEmpty()) {\n        $result[] = $queue->extract();\n\
    \    }\n    return $result;\n}\n\n$arr = [1, 3, 2, 4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n)\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $length = count($arr);\n    if ($k > $length) {\n\
    \        return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = $arr[$i];\n    }\n    for ($i = $k; $i < $length; $i++) {\n        $min =\
    \ min($result);\n        if ($arr[$i] > $min) {\n            $index = array_search($min,\
    \ $result);\n            $result[$index] = $arr[$i];\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$k = 5;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 7\n    [2] => 8\n    [3] => 9\n    [4]\
    \ => 10\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy8w3kdo.php:38\n\
    Stack trace:\n#0 /tmp/tmpcy8w3kdo.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpcy8w3kdo.php\
    \ on line 38\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n   \
    \ }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $j = $k - 1;\n        while\
    \ ($j >= 0 && $res[$j] < $arr[$i]) {\n            $j--;\n        }\n        if\
    \ ($j < $k - 1) {\n            for ($m = $k - 1; $m > $j; $m--) {\n          \
    \      $res[$m] = $res[$m - 1];\n            }\n            $res[$j + 1] = $arr[$i];\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpuwt_t1wq.php:43\nStack trace:\n#0 /tmp/tmpuwt_t1wq.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuwt_t1wq.php on line 43\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    if ($size == 0 || $k ==\
    \ 0) {\n        return $result;\n    }\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $maxIndex\
    \ = $i;\n        for ($j = $i + 1; $j < $size; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$maxIndex];\n\
    \        $arr[$maxIndex] = $temp;\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpp31vgd21.php:45\nStack trace:\n#0 /tmp/tmpp31vgd21.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp31vgd21.php on line 45\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $result = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = -INF;\n        $maxIndex = -1;\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        $arr[$maxIndex] = -INF;\n    }\n    return $result;\n}\n\n\
    $arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdwgmoyb1.php:37\nStack trace:\n#0 /tmp/tmpdwgmoyb1.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdwgmoyb1.php on line 37\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        while ($k && $res && $res[count($res) - 1] < $arr[$i]) {\n          \
    \  array_pop($res);\n            $k--;\n        }\n        $res[] = $arr[$i];\n\
    \    }\n    return array_slice($res, 0, $k);\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [1,2,3,4,5];\n$k = 4;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1,2,3,4,5];\n$k = 5;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpi4699kr7.php:40\nStack trace:\n#0 /tmp/tmpi4699kr7.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi4699kr7.php on line 40\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        while ($res && $res[count($res) - 1] < $arr[$i] && count($res) +\
    \ $len - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxmui1erp.php:30\n\
    Stack trace:\n#0 /tmp/tmpxmui1erp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxmui1erp.php\
    \ on line 30\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $val)\
    \ {\n        $heap->insert($val);\n    }\n    for ($i = $k; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ array_reverse($res);\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1dqlq_bf.php:43\n\
    Stack trace:\n#0 /tmp/tmp1dqlq_bf.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp1dqlq_bf.php\
    \ on line 43\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while ($result && $result[count($result) - 1] < $arr[$i] && count($result)\
    \ + $n - $i > $k) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpty9if0ht.php:33\nStack trace:\n#0 /tmp/tmpty9if0ht.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpty9if0ht.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4,\
    \ 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0jjd5egp.php:36\nStack trace:\n#0 /tmp/tmp0jjd5egp.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0jjd5egp.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n\
    \        $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n  \
    \          if ($arr[$j] > $max) {\n                $max = $arr[$j];\n        \
    \        $max_index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$max_index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5ssvq91f.php:36\nStack trace:\n#0 /tmp/tmp5ssvq91f.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5ssvq91f.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($i < $k) {\n            $res[] = $arr[$i];\n        } else {\n\
    \            $min = min($res);\n            if ($arr[$i] > $min) {\n         \
    \       $res[array_search($min, $res)] = $arr[$i];\n            }\n        }\n\
    \    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmp3o5ep39w.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp3o5ep39w.php:46\nStack trace:\n#0 /tmp/tmp3o5ep39w.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3o5ep39w.php on line 46\n"
  timestamp: 1659730152
- exit_code: 0
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n     \
    \       sort($result);\n            array_shift($result);\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n"
  timestamp: 1659730152
- exit_code: 0
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n\
    \            sort($result);\n            array_shift($result);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        $result[] = $arr[$i];\n        $result = sort($result);\n \
    \       if (count($result) > $k) {\n            array_pop($result);\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp60upl_px.php on line 17\n\nWarning: Cannot use a scalar\
    \ value as an array in /tmp/tmp60upl_px.php on line 15\n\nWarning: sort() expects\
    \ parameter 1 to be array, bool given in /tmp/tmp60upl_px.php on line 16\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmp60upl_px.php on line 17\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmp60upl_px.php on line 17\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp60upl_px.php:29\nStack\
    \ trace:\n#0 /tmp/tmp60upl_px.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp60upl_px.php\
    \ on line 29\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1, 4, 3, 2];\n$k = 4;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\n\n\
    Warning: min(): Array must contain at least one element in /tmp/tmpgnd3260j.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgnd3260j.php:46\n\
    Stack trace:\n#0 /tmp/tmpgnd3260j.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpgnd3260j.php\
    \ on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        while\
    \ (count($res) > 0 && $arr[$i] > $res[count($res) - 1] && count($res) + count($arr)\
    \ - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [1,2,3,4,5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [1,2,3,4,5];\n\
    $k = 4;\nprint_r(maximum($arr, $k));\n\n$arr = [1,2,3,4,5];\n$k = 5;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1,2,3,4,5];\n$k = 6;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [1,2,3,4,5];\n$k = 1;\nprint_r(maximum($arr, $k));\n\n$arr = [1,2,3,4,5];\n\
    $k = 0;\nprint_r(maximum($arr, $k));\n\n$arr = [5,4,3,2,1];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [5,4,3,2,1];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [5,4,3,2,1];\n$k = 4;\nprint_r(maximum($arr, $k));\n\n$arr = [5,4,3,2,1];\n\
    $k = 5;\nprint_r(maximum($arr, $k));\n\n$arr = [5,4,3,2,1\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpq4u9p3m5.php on line 69

    '
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        while ($res && $res[count($res) - 1] < $arr[$i] && count($res) +\
    \ $len - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmp5kgwnj.php:33\nStack trace:\n#0 /tmp/tmpmp5kgwnj.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmp5kgwnj.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len <= $k) {\n        return $arr;\n  \
    \  }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $res = heapSort($res);\n    for ($i = $k; $i < $len; $i++) {\n   \
    \     if ($arr[$i] > $res[0]) {\n            $res[0] = $arr[$i];\n           \
    \ $res = heapSort($res);\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4g45m19.php:35\n\
    Stack trace:\n#0 /tmp/tmpp4g45m19.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp4g45m19.php\
    \ on line 35\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4,\
    \ 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4n92rbod.php:36\nStack trace:\n#0 /tmp/tmp4n92rbod.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4n92rbod.php on line 36\n"
  timestamp: 1659730152
- exit_code: 0
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    if ($len == 0 || $k == 0)\
    \ {\n        return $result;\n    }\n    $result = array_slice($arr, 0, $k);\n\
    \    sort($result);\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i]\
    \ > $result[0]) {\n            $result[0] = $arr[$i];\n            sort($result);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [1,3,5,7,2,4,6,8];\n$k = 4;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n    [3] => 8\n)\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($result) > 0 && $result[count($result) - 1] < $arr[$i]\
    \ && $n - $i > $k - count($result)) {\n            array_pop($result);\n     \
    \   }\n        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [3, 2, 1, 5, 6, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [3, 2, 3, 1, 2, 4, 5, 5, 6];\n$k = 4;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\nArray\n(\n    [0] => 6\n    [1]\
    \ => 4\n)\nArray\n(\n    [0] => 4\n    [1] => 5\n    [2] => 5\n    [3] => 6\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf3yfrgv.php:41\n\
    Stack trace:\n#0 /tmp/tmppf3yfrgv.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppf3yfrgv.php\
    \ on line 41\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    $arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmpxhwn3x3z.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxhwn3x3z.php:45\nStack trace:\n#0 /tmp/tmpxhwn3x3z.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxhwn3x3z.php on line 45\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len <= $k) {\n        return $arr;\n  \
    \  }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    $result = heapSort($result);\n    for ($i = $k; $i <\
    \ $len; $i++) {\n        if ($arr[$i] > $result[0]) {\n            $result[0]\
    \ = $arr[$i];\n            $result = heapSort($result);\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjw_0gjve.php:35\n\
    Stack trace:\n#0 /tmp/tmpjw_0gjve.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjw_0gjve.php\
    \ on line 35\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $index = array_search($min, $result);\n           \
    \     $result[$index] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmpp33f_wzu.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpp33f_wzu.php:47\nStack trace:\n#0 /tmp/tmpp33f_wzu.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp33f_wzu.php on line 47\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpkzfwlyvl.php:36\nStack trace:\n#0 /tmp/tmpkzfwlyvl.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkzfwlyvl.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppap65yz_.php:33\n\
    Stack trace:\n#0 /tmp/tmppap65yz_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppap65yz_.php\
    \ on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while ($size - $i + count($result) > $k && !empty($result)\
    \ && $result[count($result) - 1] < $arr[$i]) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpws6fgksy.php:33\nStack trace:\n#0 /tmp/tmpws6fgksy.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpws6fgksy.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max = -INF;\n        $max_index = -1;\n        for ($j = 0; $j < $n;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $res[] =\
    \ $max;\n        $arr[$max_index] = -INF;\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7w5l7ks.php:34\n\
    Stack trace:\n#0 /tmp/tmpn7w5l7ks.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpn7w5l7ks.php\
    \ on line 34\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $heap->insert($res[$i]);\n    }\n    for ($i = $k; $i < $n; $i++) {\n  \
    \      if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n       \
    \     $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while (!$heap->isEmpty())\
    \ {\n        $res[] = $heap->extract();\n    }\n    return array_reverse($res);\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 4;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 5\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpafamow3l.php:46\nStack\
    \ trace:\n#0 /tmp/tmpafamow3l.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpafamow3l.php\
    \ on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n\
    \        $index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $index = $j;\n            }\n        }\n        $result[] = $max;\n      \
    \  unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8n2zu6k8.php:36\nStack trace:\n#0 /tmp/tmp8n2zu6k8.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8n2zu6k8.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $res[] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n     \
    \   $min = $res[0];\n        $min_index = 0;\n        for ($j = 1; $j < $k; $j++)\
    \ {\n            if ($res[$j] < $min) {\n                $min = $res[$j];\n  \
    \              $min_index = $j;\n            }\n        }\n        if ($arr[$i]\
    \ > $min) {\n            $res[$min_index] = $arr[$i];\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [1,1,1,2,2,3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [5,1];\n$k\
    \ = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\nArray\n(\n    [0] => 3\n    [1]\
    \ => 2\n)\nArray\n(\n    [0] => 5\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmplqy874y3.php:49\nStack trace:\n#0 /tmp/tmplqy874y3.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplqy874y3.php on line 49\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        while ($res && $res[count($res) - 1] < $arr[$i] && count($res) + $n -\
    \ $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            $res[] = $arr[$i];\n        }\n    }\n    return $res;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpo8u8ozsy.php:33\nStack trace:\n#0 /tmp/tmpo8u8ozsy.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo8u8ozsy.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    if ($k == 0) {\n        return $result;\n    }\n \
    \   $length = count($arr);\n    if ($k >= $length) {\n        return $arr;\n \
    \   }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n    for ($i\
    \ = $k; $i < $length; $i++) {\n        $j = $k - 1;\n        while ($j >= 0 &&\
    \ $result[$j] < $arr[$i]) {\n            $j--;\n        }\n        if ($j < $k\
    \ - 1) {\n            array_splice($result, $j + 1, 0, $arr[$i]);\n          \
    \  array_pop($result);\n        }\n    }\n    return $result;\n}\n\n$arr = [1,\
    \ 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpquajqo6y.php:43\nStack trace:\n#0 /tmp/tmpquajqo6y.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpquajqo6y.php on line 43\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] < $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $res;\n}\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [1];\n$k = 1;\nprint_r(maximum($arr, $k));\n$arr = [-1, -2];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n$arr = [3, 2, 1, 5, 6, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [3, 2, 3, 1, 2, 4, 5, 5, 6];\n$k = 4;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\nArray\n(\n    [0] => 1\n)\nArray\n\
    (\n    [0] => -1\n    [1] => -2\n)\nArray\n(\n    [0] => 3\n    [1] => 2\n)\n\
    Array\n(\n    [0] => 3\n    [1] => 2\n    [2] => 3\n    [3] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjzrimcq0.php:52\nStack trace:\n\
    #0 /tmp/tmpjzrimcq0.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjzrimcq0.php\
    \ on line 52\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    if ($k == 0) {\n        return [];\n    }\n    $result = [];\n    for\
    \ ($i = 0; $i < count($arr); $i++) {\n        while (count($result) > 0 && $arr[$i]\
    \ > $result[count($result) - 1] && count($result) + count($arr) - $i > $k) {\n\
    \            array_pop($result);\n        }\n        if (count($result) < $k)\
    \ {\n            array_push($result, $arr[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsitmqkj6.php:32\n\
    Stack trace:\n#0 /tmp/tmpsitmqkj6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsitmqkj6.php\
    \ on line 32\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    if ($k >= $n) {\n        return $arr;\n    }\n    $res = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return array_reverse($res);\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [3,2,1,5,6,4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [3,2,3,1,2,4,5,5,6];\n$k = 4;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 6\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 6\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8f4tnrja.php:56\n\
    Stack trace:\n#0 /tmp/tmp8f4tnrja.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp8f4tnrja.php\
    \ on line 56\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($k >= $n) {\n        return $arr;\n    }\n\
    \    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        $min = min($res);\n      \
    \  if ($arr[$i] > $min) {\n            $res[array_search($min, $res)] = $arr[$i];\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpz8yq0d_3.php:38\nStack trace:\n#0 /tmp/tmpz8yq0d_3.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz8yq0d_3.php on line 38\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    $res = array_fill(0, $k, 0);\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        $res[$i] = $arr[$i];\n    }\n    for ($i = $k;\
    \ $i < $len; $i++) {\n        $min = $res[0];\n        $minIndex = 0;\n      \
    \  for ($j = 1; $j < $k; $j++) {\n            if ($res[$j] < $min) {\n       \
    \         $min = $res[$j];\n                $minIndex = $j;\n            }\n \
    \       }\n        if ($arr[$i] > $min) {\n            $res[$minIndex] = $arr[$i];\n\
    \        }\n    }\n    return $res;\n}\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr =\
    \ [1, 2, 3, 4, 5];\n$k = 4;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n)\nArray\n(\n    [0] => 4\n    [1] => 5\n    [2] => 3\n    [3] => 4\n\
    \    [4] => 5\n)\nArray\n(\n    [0] => 5\n    [1] => 2\n    [2] => 3\n    [3]\
    \ => 4\n    [4] => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsr6kkxw3.php:46\n\
    Stack trace:\n#0 /tmp/tmpsr6kkxw3.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpsr6kkxw3.php\
    \ on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while ($size - $i + count($result) > $k && !empty($result)\
    \ && $result[count($result) - 1] < $arr[$i]) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpws6fgksy.php:33\nStack trace:\n#0 /tmp/tmpws6fgksy.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpws6fgksy.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while (count($result) && $result[count($result) - 1] < $arr[$i]\
    \ && $size - $i > $k - count($result)) {\n            array_pop($result);\n  \
    \      }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4,\
    \ 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 4;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 5;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 6;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3,\
    \ 4, 5];\n$k = 7;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k\
    \ = 8;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 9;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 10;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [1, 2, 3, 4, 5];\n$k = 11;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2,\
    \ 3, 4, 5];\n$k = 12;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3,\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj2dr7qd1.php on line 70

    '
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -PHP_INT_MAX;\n\
    \        $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n  \
    \          if ($arr[$j] > $max) {\n                $max = $arr[$j];\n        \
    \        $max_index = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        unset($arr[$max_index]);\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphw1v2pf3.php:36\nStack trace:\n#0 /tmp/tmphw1v2pf3.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphw1v2pf3.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    if ($k >= $len) {\n        return $arr;\n    }\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $res\
    \ = heapSort($res);\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i]\
    \ > $res[0]) {\n            $res[0] = $arr[$i];\n            $res = heapSort($res);\n\
    \        }\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhtar7q_.php:37\n\
    Stack trace:\n#0 /tmp/tmpjhtar7q_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjhtar7q_.php\
    \ on line 37\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    if ($count < $k) {\n  \
    \      return $result;\n    }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            sort($result);\n        }\n \
    \   }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpq_yv1o1m.php:46\nStack trace:\n#0 /tmp/tmpq_yv1o1m.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq_yv1o1m.php on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    if ($count < $k) {\n  \
    \      return $result;\n    }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            sort($result);\n        }\n \
    \   }\n    return $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk2dy6cs5.php:42\n\
    Stack trace:\n#0 /tmp/tmpk2dy6cs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpk2dy6cs5.php\
    \ on line 42\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        while ($k && $res && $res[count($res) - 1] < $arr[$i]) {\n          \
    \  array_pop($res);\n            $k--;\n        }\n        $res[] = $arr[$i];\n\
    \    }\n    while ($k--) {\n        array_pop($res);\n    }\n    return $res;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxoawowzw.php:35\nStack trace:\n#0 /tmp/tmpxoawowzw.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxoawowzw.php on line 35\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    if ($count == 1) {\n        return $arr;\n\
    \    }\n    if ($k == 0) {\n        return $result;\n    }\n    if ($k == 1) {\n\
    \        $max = $arr[0];\n        for ($i = 1; $i < $count; $i++) {\n        \
    \    if ($arr[$i] > $max) {\n                $max = $arr[$i];\n            }\n\
    \        }\n        $result[] = $max;\n        return $result;\n    }\n    if\
    \ ($k == $count) {\n        return $arr;\n    }\n    $result = array_slice($arr,\
    \ 0, $k);\n    $result = heapSort($result);\n    for ($i = $k; $i < $count; $i++)\
    \ {\n        if ($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n\
    \            $result = heapSort($result);\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08wllk91.php:52\n\
    Stack trace:\n#0 /tmp/tmp08wllk91.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp08wllk91.php\
    \ on line 52\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 3;\nvar_dump(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(4)\n  [2]=>\n  int(5)\n}\n\
    \nWarning: min(): Array must contain at least one element in /tmp/tmpad_tehty.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpad_tehty.php:47\n\
    Stack trace:\n#0 /tmp/tmpad_tehty.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpad_tehty.php\
    \ on line 47\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        while (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && $n - $i\
    \ > $k - count($res)) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4,\
    \ 5];\n$k = 4;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 5;\n\
    print_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 6;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 7;\nprint_r(maximum($arr, $k));\n$arr =\
    \ [1, 2, 3, 4, 5];\n$k = 8;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4,\
    \ 5];\n$k = 9;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 10;\n\
    print_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 11;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 12;\nprint_r(maximum($arr, $k));\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 13;\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\nArray\n(\n    [0] => 3\n    [1]\
    \ => 4\n    [2] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 3\n    [2] => 4\n\
    \    [3] => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3]\
    \ => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n\
    \    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2]\
    \ => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n\
    \    [2] => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n    [1]\
    \ => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0] => 1\n\
    \    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\nArray\n(\n\
    \    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp86u7tzry.php:64\nStack trace:\n\
    #0 /tmp/tmp86u7tzry.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp86u7tzry.php\
    \ on line 64\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,\
    \ 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpibquangl.php:36\nStack trace:\n#0 /tmp/tmpibquangl.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpibquangl.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        array_push($result,\
    \ $max);\n        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjfvx10fm.php:36\nStack trace:\n#0 /tmp/tmpjfvx10fm.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjfvx10fm.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmpowo5e758.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpowo5e758.php:48\nStack trace:\n#0 /tmp/tmpowo5e758.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpowo5e758.php on line 48\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmp8nrr07se.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nrr07se.php:43\n\
    Stack trace:\n#0 /tmp/tmp8nrr07se.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8nrr07se.php\
    \ on line 43\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1;\n \
    \       $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $max_index = $j;\n            }\n        }\n        $res[] = $max;\n \
    \       unset($arr[$max_index]);\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4hxfzhw0.php:36\nStack trace:\n#0 /tmp/tmp4hxfzhw0.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4hxfzhw0.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($res) < $k) {\n            $res[] = $arr[$i];\n       \
    \ } else {\n            $min = min($res);\n            if ($arr[$i] > $min) {\n\
    \                $res[array_search($min, $res)] = $arr[$i];\n            }\n \
    \       }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmp5zgtfsaw.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5zgtfsaw.php:46\nStack trace:\n#0 /tmp/tmp5zgtfsaw.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5zgtfsaw.php on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $length = count($arr);\n    if ($k > $length) {\n\
    \        return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = $arr[$i];\n        $index = $i;\n        for ($j = $i + 1; $j < $length; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpt167j3av.php:41\nStack trace:\n#0 /tmp/tmpt167j3av.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt167j3av.php on line 41\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($res) < $k) {\n            $res[] = $arr[$i];\n       \
    \ } else {\n            $min = min($res);\n            if ($arr[$i] > $min) {\n\
    \                $res[array_search($min, $res)] = $arr[$i];\n            }\n \
    \       }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmp5zgtfsaw.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5zgtfsaw.php:46\nStack trace:\n#0 /tmp/tmp5zgtfsaw.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5zgtfsaw.php on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1001;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpru32qc2f.php:36\nStack trace:\n#0 /tmp/tmpru32qc2f.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpru32qc2f.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1,1,1,2,2,3];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n)\nArray\n(\n    [0] => 1\n)\n\nWarning: min(): Array must contain at\
    \ least one element in /tmp/tmpjcpegovq.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjcpegovq.php:54\nStack trace:\n#0 /tmp/tmpjcpegovq.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjcpegovq.php on line 54\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4n9appn8.php:33\n\
    Stack trace:\n#0 /tmp/tmp4n9appn8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4n9appn8.php\
    \ on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvmbkbfbg.php:36\nStack trace:\n#0 /tmp/tmpvmbkbfbg.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvmbkbfbg.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        while ($res && $k && $res[count($res) - 1] < $arr[$i]) {\n          \
    \  array_pop($res);\n            $k--;\n        }\n        if ($k) {\n       \
    \     $res[] = $arr[$i];\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvi_uy4g2.php:31\n\
    Stack trace:\n#0 /tmp/tmpvi_uy4g2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvi_uy4g2.php\
    \ on line 31\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppap65yz_.php:33\n\
    Stack trace:\n#0 /tmp/tmppap65yz_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppap65yz_.php\
    \ on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv13pildq.php:36\nStack trace:\n#0 /tmp/tmpv13pildq.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv13pildq.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmpaiif22_c.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpaiif22_c.php:47\nStack trace:\n#0 /tmp/tmpaiif22_c.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaiif22_c.php on line 47\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($res) < $k) {\n            $res[] = $arr[$i];\n       \
    \ } else {\n            $min = min($res);\n            if ($arr[$i] > $min) {\n\
    \                $res[array_search($min, $res)] = $arr[$i];\n            }\n \
    \       }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10];\n$k = 5;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 7\n    [2] => 8\n    [3] => 9\n    [4]\
    \ => 10\n)\n\nWarning: min(): Array must contain at least one element in /tmp/tmpkxanfumi.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxanfumi.php:46\n\
    Stack trace:\n#0 /tmp/tmpkxanfumi.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkxanfumi.php\
    \ on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,\
    \ 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyqvfhkab.php:36\nStack trace:\n#0 /tmp/tmpyqvfhkab.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyqvfhkab.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    if ($len == 0 || $k == 0)\
    \ {\n        return $result;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i\
    \ < $len; $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    $count = [];\n    for ($i = 0; $i < $len; $i++) {\n   \
    \     $count[$arr[$i]]++;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = $max;\n        $count[$max]--;\n        if ($count[$max] == 0) {\n       \
    \     $max--;\n        }\n    }\n    return $result;\n}\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnohwx14d.php:44\nStack trace:\n#0 /tmp/tmpnohwx14d.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnohwx14d.php on line 44\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,\
    \ 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyqvfhkab.php:36\nStack trace:\n#0 /tmp/tmpyqvfhkab.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyqvfhkab.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1001;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4,\
    \ 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0ygvozjr.php:36\nStack trace:\n#0 /tmp/tmp0ygvozjr.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0ygvozjr.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmp2ka8msa7.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2ka8msa7.php:47\nStack trace:\n#0 /tmp/tmp2ka8msa7.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2ka8msa7.php on line 47\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1001;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfm2neeh8.php:36\nStack trace:\n#0 /tmp/tmpfm2neeh8.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfm2neeh8.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $maxHeap = new SplMaxHeap();\n    foreach ($res as $num)\
    \ {\n        $maxHeap->insert($num);\n    }\n    for ($i = $k; $i < $len; $i++)\
    \ {\n        if ($arr[$i] > $maxHeap->top()) {\n            $maxHeap->extract();\n\
    \            $maxHeap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n \
    \   while (!$maxHeap->isEmpty()) {\n        $res[] = $maxHeap->extract();\n  \
    \  }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp48fnid81.php:45\nStack trace:\n#0 /tmp/tmp48fnid81.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp48fnid81.php on line 45\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i < $k) {\n    \
    \    $max = $arr[$j];\n        $index = $j;\n        for ($j; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n        $j\
    \ = 0;\n        $i++;\n    }\n    return $result;\n}\n$arr = [1,2,3,4,5];\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpe_rub81r.php:40\nStack trace:\n#0 /tmp/tmpe_rub81r.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpe_rub81r.php on line 40\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while ($size - $i + count($result) > $k && !empty($result)\
    \ && $result[count($result) - 1] < $arr[$i]) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1,1,1,2,2,3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [5,4,3,2,1];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 3\n)\nArray\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpa1yyfjjo.php:41\nStack trace:\n#0 /tmp/tmpa1yyfjjo.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa1yyfjjo.php on line 41\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $heap->insert($arr[$i]);\n    }\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $res[] = $heap->extract();\n    }\n    return $res;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5556uq1v.php:35\nStack trace:\n#0 /tmp/tmp5556uq1v.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5556uq1v.php on line 35\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n   \
    \ }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $min = min($res);\n    \
    \    if ($arr[$i] > $min) {\n            $res[array_search($min, $res)] = $arr[$i];\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nvar_dump(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(4)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp8xnpss6b.php:37\nStack trace:\n#0 /tmp/tmp8xnpss6b.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8xnpss6b.php on line 37\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaelelq2a.php:32\n\
    Stack trace:\n#0 /tmp/tmpaelelq2a.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpaelelq2a.php\
    \ on line 32\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   array_splice($arr, $index, 1);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprx2ffh_z.php:33\n\
    Stack trace:\n#0 /tmp/tmprx2ffh_z.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprx2ffh_z.php\
    \ on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    if ($size == 0 || $k ==\
    \ 0) {\n        return $result;\n    }\n    $heap = new SplMaxHeap();\n    for\
    \ ($i = 0; $i < $size; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $result[] = $heap->extract();\n    }\n  \
    \  return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpehhq1es9.php:36\nStack trace:\n#0 /tmp/tmpehhq1es9.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpehhq1es9.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $item) {\n       \
    \ $heap->insert($item);\n    }\n    for ($i = $k; $i < $n; $i++) {\n        if\
    \ ($arr[$i] < $heap->top()) {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => -1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpphwg_8wa.php:40\nStack trace:\n\
    #0 /tmp/tmpphwg_8wa.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpphwg_8wa.php\
    \ on line 40\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n  \
    \          if ($arr[$j] > $max) {\n                $max = $arr[$j];\n        \
    \        $max_index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$max_index]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xj3nld_.php:33\n\
    Stack trace:\n#0 /tmp/tmp1xj3nld_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1xj3nld_.php\
    \ on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    if ($k >= $len) {\n        return $arr;\n    }\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    foreach ($res as $v) {\n        $heap->insert($v);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $heap->toArray();\n}\n\n$arr = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10];\n$k = 5;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined method SplMaxHeap::toArray()\
    \ in /tmp/tmp4z9m7_w6.php:33\nStack trace:\n#0 /tmp/tmp4z9m7_w6.php(38): maximum(Array,\
    \ 5)\n#1 {main}\n  thrown in /tmp/tmp4z9m7_w6.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        while ($count > 0 && count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n            $count--;\n\
    \        }\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2ivfs3y0.php:34\nStack trace:\n#0 /tmp/tmp2ivfs3y0.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2ivfs3y0.php on line 34\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max[] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n     \
    \   $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    sort($max);\n    return $max;\n}\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmpd1j86do9.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1j86do9.php:42\n\
    Stack trace:\n#0 /tmp/tmpd1j86do9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd1j86do9.php\
    \ on line 42\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $heap->insert($res[$i]);\n    }\n    for ($i = $k; $i < $n; $i++) {\n  \
    \      if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n       \
    \     $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while (!$heap->isEmpty())\
    \ {\n        $res[] = $heap->extract();\n    }\n    return array_reverse($res);\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzwznli1v.php:46\nStack trace:\n#0 /tmp/tmpzwznli1v.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzwznli1v.php on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    if ($count == 1) {\n        return $arr;\n\
    \    }\n    $result = array_slice($arr, 0, $k);\n    for ($i = $k; $i < $count;\
    \ $i++) {\n        $result = insert($result, $arr[$i]);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghcofba2.php:32\n\
    Stack trace:\n#0 /tmp/tmpghcofba2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpghcofba2.php\
    \ on line 32\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        while ($res && $res[count($res) - 1] < $arr[$i] && count($res) +\
    \ $len - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjjd_unlh.php:33\nStack trace:\n#0 /tmp/tmpjjd_unlh.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjjd_unlh.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if\
    \ (count($result) < $k) {\n            array_push($result, $arr[$i]);\n      \
    \  } else {\n            $min = min($result);\n            if ($arr[$i] > $min)\
    \ {\n                $key = array_search($min, $result);\n                $result[$key]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmp273c66o1.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp273c66o1.php:46\nStack trace:\n#0 /tmp/tmp273c66o1.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp273c66o1.php on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $max = 0;\n    $maxIndex = 0;\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n            if\
    \ ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $maxIndex\
    \ = $j;\n            }\n        }\n        $result[] = $max;\n        $arr[$maxIndex]\
    \ = -1;\n        $max = 0;\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgdiw7ycc.php:38\nStack trace:\n#0 /tmp/tmpgdiw7ycc.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgdiw7ycc.php on line 38\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqjqvjcmh.php:36\nStack trace:\n#0 /tmp/tmpqjqvjcmh.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqjqvjcmh.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfdh2ntas.php:37\nStack trace:\n#0 /tmp/tmpfdh2ntas.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfdh2ntas.php on line 37\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbhx8291.php:33\n\
    Stack trace:\n#0 /tmp/tmpmbhx8291.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmbhx8291.php\
    \ on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $length = count($arr);\n    if ($k == $length) {\n        return $arr;\n\
    \    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < $length; $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n   \
    \     $arr[$maxIndex] = -1001;\n    }\n    return $result;\n}\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsaphvqwn.php:39\nStack trace:\n#0 /tmp/tmpsaphvqwn.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsaphvqwn.php on line 39\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvmbkbfbg.php:36\nStack trace:\n#0 /tmp/tmpvmbkbfbg.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvmbkbfbg.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n}\n\n\
    $arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpai3uiyad.php:37\nStack trace:\n#0 /tmp/tmpai3uiyad.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpai3uiyad.php on line 37\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    if ($len == 0 || $k == 0)\
    \ {\n        return $result;\n    }\n    $result = $arr;\n    for ($i = $k; $i\
    \ < $len; $i++) {\n        $result = insert($result, $arr[$i]);\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxa8lz6bl.php:28\n\
    Stack trace:\n#0 /tmp/tmpxa8lz6bl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxa8lz6bl.php\
    \ on line 28\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMinHeap();\n    foreach ($res as $val)\
    \ {\n        $heap->insert($val);\n    }\n    for ($i = $k; $i < $len; $i++) {\n\
    \        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqwxm0z3b.php:41\nStack trace:\n#0 /tmp/tmpqwxm0z3b.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqwxm0z3b.php on line 41\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        array_push($result, $max);\n\
    \        array_splice($arr, $index, 1);\n    }\n    return $result;\n}\n\n$arr\
    \ = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpy2hpjjog.php:36\nStack trace:\n#0 /tmp/tmpy2hpjjog.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy2hpjjog.php on line 36\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppap65yz_.php:33\n\
    Stack trace:\n#0 /tmp/tmppap65yz_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppap65yz_.php\
    \ on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7txnfazz.php:33\n\
    Stack trace:\n#0 /tmp/tmp7txnfazz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7txnfazz.php\
    \ on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $result[] = $heap->extract();\n  \
    \  }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp900vp1aj.php:32\nStack trace:\n#0 /tmp/tmp900vp1aj.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp900vp1aj.php on line 32\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $length = count($arr);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $result[] = $arr[$i];\n        $result = maxHeap($result);\n\
    \        if (count($result) > $k) {\n            array_shift($result);\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function maxHeap() in\
    \ /tmp/tmpo603mm_i.php:16\nStack trace:\n#0 /tmp/tmpo603mm_i.php(25): maximum(Array,\
    \ 3)\n#1 /tmp/tmpo603mm_i.php(29): candidate(Array, 3)\n#2 /tmp/tmpo603mm_i.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpo603mm_i.php on line 16\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    if ($k >= $len) {\n        return $arr;\n    }\n    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n  \
    \  }\n    $heap = new SplMaxHeap();\n    foreach ($result as $item) {\n      \
    \  $heap->insert($item);\n    }\n    for ($i = $k; $i < $len; $i++) {\n      \
    \  if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n           \
    \ $heap->insert($arr[$i]);\n        }\n    }\n    return iterator_to_array($heap);\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpss7n2jxt.php:41\n\
    Stack trace:\n#0 /tmp/tmpss7n2jxt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpss7n2jxt.php\
    \ on line 41\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n   \
    \ }\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n\
    \    }\n    $max = heapify($max);\n    for ($i = $k; $i < $len; $i++) {\n    \
    \    if ($arr[$i] > $max[0]) {\n            $max[0] = $arr[$i];\n            $max\
    \ = heapify($max);\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function heapify() in\
    \ /tmp/tmpsc2i148n.php:20\nStack trace:\n#0 /tmp/tmpsc2i148n.php(31): maximum(Array,\
    \ 3)\n#1 /tmp/tmpsc2i148n.php(35): candidate(Array, 3)\n#2 /tmp/tmpsc2i148n.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsc2i148n.php on line 20\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n\
    \        $index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $index = $j;\n            }\n        }\n        $result[] = $max;\n      \
    \  array_splice($arr, $index, 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr980l5k.php:33\n\
    Stack trace:\n#0 /tmp/tmpzr980l5k.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpzr980l5k.php\
    \ on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        while (count($res) > 0 && $arr[$i] > $res[count($res) - 1] && $len\
    \ - $i > $k - count($res)) {\n            array_pop($res);\n        }\n      \
    \  if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n        }\n\
    \    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5yyc_o5d.php:33\nStack trace:\n#0 /tmp/tmp5yyc_o5d.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5yyc_o5d.php on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv13pildq.php:36\nStack trace:\n#0 /tmp/tmpv13pildq.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv13pildq.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n\
    \        $max_index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $max_index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        array_splice($arr, $max_index, 1);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpktwvuokx.php:33\n\
    Stack trace:\n#0 /tmp/tmpktwvuokx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpktwvuokx.php\
    \ on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmpig1kss0i.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpig1kss0i.php:46\nStack trace:\n#0 /tmp/tmpig1kss0i.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpig1kss0i.php on line 46\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $count = count($arr);\n    if ($count < $k) {\n        return $arr;\n\
    \    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    $result = heapSort($result);\n    for ($i = $k; $i <\
    \ $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n            $result[0]\
    \ = $arr[$i];\n            $result = heapSort($result);\n        }\n    }\n  \
    \  return $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function heapSort() in\
    \ /tmp/tmp3kh_d5ga.php:20\nStack trace:\n#0 /tmp/tmp3kh_d5ga.php(30): maximum(Array,\
    \ 3)\n#1 /tmp/tmp3kh_d5ga.php(34): candidate(Array, 3)\n#2 /tmp/tmp3kh_d5ga.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3kh_d5ga.php on line 20\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len <= $k) {\n        return $arr;\n  \
    \  }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $res = insert($res, $arr[$i]);\n\
    \    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwisq8r8.php:30\n\
    Stack trace:\n#0 /tmp/tmpgwisq8r8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpgwisq8r8.php\
    \ on line 30\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbhx8291.php:33\n\
    Stack trace:\n#0 /tmp/tmpmbhx8291.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmbhx8291.php\
    \ on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppap65yz_.php:33\n\
    Stack trace:\n#0 /tmp/tmppap65yz_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppap65yz_.php\
    \ on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        while\
    \ (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && count($res) + count($arr)\
    \ - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpztdjafxn.php:32\nStack trace:\n#0 /tmp/tmpztdjafxn.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpztdjafxn.php on line 32\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmpnh8a9h2l.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpnh8a9h2l.php:46\nStack trace:\n#0 /tmp/tmpnh8a9h2l.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnh8a9h2l.php on line 46\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while ($k > 0 && !empty($result) && $result[$k - 1] < $arr[$i]) {\n\
    \            array_pop($result);\n            $k--;\n        }\n        if ($k\
    \ > 0) {\n            $result[] = $arr[$i];\n            $k--;\n        }\n  \
    \  }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxklw8tz.php:35\n\
    Stack trace:\n#0 /tmp/tmprxklw8tz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprxklw8tz.php\
    \ on line 35\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMinHeap();\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $heap->insert($res[$i]);\n    }\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ array_reverse($res);\n}\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8jqz6jd9.php:44\nStack trace:\n#0 /tmp/tmp8jqz6jd9.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8jqz6jd9.php on line 44\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $heap->insert($res[$i]);\n    }\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqlmsvpdu.php:45\nStack trace:\n#0 /tmp/tmpqlmsvpdu.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqlmsvpdu.php on line 45\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $heap->insert($res[$i]);\n    }\n    for ($i = $k; $i < $n; $i++) {\n  \
    \      if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n       \
    \     $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8cg69ln2.php:41\nStack trace:\n#0 /tmp/tmp8cg69ln2.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8cg69ln2.php on line 41\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n\
    \        $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n  \
    \          if ($arr[$j] > $max) {\n                $max = $arr[$j];\n        \
    \        $max_index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$max_index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5ssvq91f.php:36\nStack trace:\n#0 /tmp/tmp5ssvq91f.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5ssvq91f.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n   \
    \ }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $min = min($res);\n    \
    \    if ($arr[$i] > $min) {\n            $res[array_search($min, $res)] = $arr[$i];\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1, 2, 3, 4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n)\n\nWarning: min():\
    \ Array must contain at least one element in /tmp/tmpb10ggm34.php on line 21\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb10ggm34.php:48\nStack\
    \ trace:\n#0 /tmp/tmpb10ggm34.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpb10ggm34.php\
    \ on line 48\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $length = count($arr);\n    if ($k > $length) {\n\
    \        return $arr;\n    }\n    $i = 0;\n    while ($i < $k) {\n        $max\
    \ = $arr[$i];\n        $index = $i;\n        for ($j = $i; $j < $length; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$index] = $arr[$i];\n        $arr[$i] = $max;\n        $i++;\n \
    \   }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpihjozzoj.php:43\nStack trace:\n#0 /tmp/tmpihjozzoj.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpihjozzoj.php on line 43\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if\
    \ (count($result) < $k) {\n            $result[] = $arr[$i];\n        } else {\n\
    \            $min = min($result);\n            if ($arr[$i] > $min) {\n      \
    \          $result[array_search($min, $result)] = $arr[$i];\n            }\n \
    \       }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmpc2wua19f.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2wua19f.php:42\n\
    Stack trace:\n#0 /tmp/tmpc2wua19f.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpc2wua19f.php\
    \ on line 42\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        while\
    \ (count($res) && $res[count($res) - 1] < $arr[$i] && count($res) + count($arr)\
    \ - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpczojy3ug.php:32\nStack trace:\n#0 /tmp/tmpczojy3ug.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpczojy3ug.php on line 32\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        array_push($result,\
    \ $max);\n        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp930aiw6t.php:33\n\
    Stack trace:\n#0 /tmp/tmp930aiw6t.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp930aiw6t.php\
    \ on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    if ($count < $k) {\n  \
    \      return $result;\n    }\n    $max = $arr[0];\n    $maxIndex = 0;\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $maxIndex = $i;\n\
    \        for ($j = $i; $j < $count; $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$maxIndex];\n\
    \        $arr[$maxIndex] = $temp;\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwv0bqys_.php:44\nStack trace:\n#0 /tmp/tmpwv0bqys_.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwv0bqys_.php on line 44\n"
  timestamp: 1659730153
- exit_code: 0
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $len = count($arr);\n    if ($len == 0 || $k == 0)\
    \ {\n        return $result;\n    }\n    $result = array_slice($arr, 0, $k);\n\
    \    sort($result);\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i]\
    \ > $result[0]) {\n            $result[0] = $arr[$i];\n            sort($result);\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1,3,5,7,2,4,6,8];\n$k = 4;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 7\n    [3] => 8\n)\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        while ($res && $res[count($res) - 1] < $arr[$i] && count($res) + $n -\
    \ $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            $res[] = $arr[$i];\n        }\n    }\n    return $res;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpo8u8ozsy.php:33\nStack trace:\n#0 /tmp/tmpo8u8ozsy.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo8u8ozsy.php on line 33\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $count = count($arr);\n    $start = 0;\n    $end =\
    \ $count - 1;\n    while ($start <= $end) {\n        $pivot = partition($arr,\
    \ $start, $end);\n        if ($pivot == $k - 1) {\n            break;\n      \
    \  } else if ($pivot < $k - 1) {\n            $start = $pivot + 1;\n        }\
    \ else {\n            $end = $pivot - 1;\n        }\n    }\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function partition() in\
    \ /tmp/tmpm95evuzo.php:17\nStack trace:\n#0 /tmp/tmpm95evuzo.php(33): maximum(Array,\
    \ 3)\n#1 /tmp/tmpm95evuzo.php(37): candidate(Array, 3)\n#2 /tmp/tmpm95evuzo.php(50):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpm95evuzo.php on line 17\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        while (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && $len\
    \ - $i > $k - count($res)) {\n            array_pop($res);\n        }\n      \
    \  if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n        }\n\
    \    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\n$arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqvv3qff8.php on line 34

    '
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $value)\
    \ {\n        $heap->insert($value);\n    }\n    for ($i = $k; $i < $len; $i++)\
    \ {\n        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n \
    \           $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n\n\
    $arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 1,\
    \ 1, 2, 2, 3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [5, -3, 9, 1, 7,\
    \ 7, 9, 10, 2, 3, 4];\n$k = 6;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n)\nArray\n(\n    [0] => 1\n    [1]\
    \ => 1\n)\nArray\n(\n    [0] => 5\n    [1] => -3\n    [2] => 9\n    [3] => 1\n\
    \    [4] => 7\n    [5] => 7\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp230vgcoz.php:49\nStack trace:\n#0 /tmp/tmp230vgcoz.php(62): test()\n\
    #1 {main}\n  thrown in /tmp/tmp230vgcoz.php on line 49\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7jii1be0.php:36\nStack trace:\n#0 /tmp/tmp7jii1be0.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7jii1be0.php on line 36\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,\
    \ 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyqvfhkab.php:36\nStack trace:\n#0 /tmp/tmpyqvfhkab.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyqvfhkab.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        while (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && $n - $i\
    \ > $k - count($res)) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjdyrbkwc.php:33\nStack trace:\n#0 /tmp/tmpjdyrbkwc.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjdyrbkwc.php on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6bhvz7rn.php:35\nStack trace:\n#0 /tmp/tmp6bhvz7rn.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6bhvz7rn.php on line 35\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($i < $k) {\n            $res[] = $arr[$i];\n        } else {\n\
    \            $j = 0;\n            while ($j < $k && $res[$j] > $arr[$i]) {\n \
    \               $j++;\n            }\n            if ($j < $k) {\n           \
    \     array_splice($res, $j, 0, $arr[$i]);\n                array_pop($res);\n\
    \            }\n        }\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpskjcefri.php:39\nStack trace:\n#0 /tmp/tmpskjcefri.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpskjcefri.php on line 39\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    $result = heapify($result);\n    for ($i = $k; $i <\
    \ $len; $i++) {\n        if ($arr[$i] > $result[0]) {\n            $result[0]\
    \ = $arr[$i];\n            $result = heapify($result);\n        }\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function heapify() in\
    \ /tmp/tmpftoiz3cm.php:20\nStack trace:\n#0 /tmp/tmpftoiz3cm.php(31): maximum(Array,\
    \ 3)\n#1 /tmp/tmpftoiz3cm.php(35): candidate(Array, 3)\n#2 /tmp/tmpftoiz3cm.php(48):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpftoiz3cm.php on line 20\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv13pildq.php:36\nStack trace:\n#0 /tmp/tmpv13pildq.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv13pildq.php on line 36\n"
  timestamp: 1659730152
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevplpqtc.php:33\n\
    Stack trace:\n#0 /tmp/tmpevplpqtc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpevplpqtc.php\
    \ on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $length = count($arr);\n    if ($k >= $length) {\n\
    \        return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = $arr[$i];\n        $maxIndex = $i;\n        for ($j = $i; $j < $length; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $temp = $arr[$i];\n\
    \        $arr[$i] = $max;\n        $arr[$maxIndex] = $temp;\n        $result[]\
    \ = $max;\n    }\n    return $result;\n}\n\n$arr = [1, 3, 5, 2, 4];\n$k = 3;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcat6harv.php:42\nStack trace:\n#0 /tmp/tmpcat6harv.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcat6harv.php on line 42\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $num)\
    \ {\n        $heap->insert($num);\n    }\n    for ($i = $k; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4iey1shl.php:38\n\
    Stack trace:\n#0 /tmp/tmp4iey1shl.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4iey1shl.php\
    \ on line 38\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        while\
    \ (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && count($res) + count($arr)\
    \ - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpergm01g7.php:29\n\
    Stack trace:\n#0 /tmp/tmpergm01g7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpergm01g7.php\
    \ on line 29\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $stack = [];\n    for ($i = 0; $i < $n; $i++) {\n        while (count($stack)\
    \ > 0 && $stack[count($stack) - 1] < $arr[$i] && $n - $i + count($stack) > $k)\
    \ {\n            array_pop($stack);\n        }\n        if (count($stack) < $k)\
    \ {\n            array_push($stack, $arr[$i]);\n        }\n    }\n    return $stack;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1yvydekq.php:33\n\
    Stack trace:\n#0 /tmp/tmp1yvydekq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1yvydekq.php\
    \ on line 33\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        array_push($result, $max);\n\
    \        array_splice($arr, $index, 1);\n    }\n    return $result;\n}\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpky8gnp9c.php:36\nStack trace:\n#0 /tmp/tmpky8gnp9c.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpky8gnp9c.php on line 36\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $result = [];\n    $length = count($arr);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmpdonprh57.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdonprh57.php:46\nStack trace:\n#0 /tmp/tmpdonprh57.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdonprh57.php on line 46\n"
  timestamp: 1659730153
- exit_code: 255
  program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
    \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
    \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
    \ {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        while ($res && $res[count($res) - 1] < $arr[$i] && count($res) + $n -\
    \ $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            $res[] = $arr[$i];\n        }\n    }\n    return $res;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpo8u8ozsy.php:33\nStack trace:\n#0 /tmp/tmpo8u8ozsy.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo8u8ozsy.php on line 33\n"
  timestamp: 1659730152
