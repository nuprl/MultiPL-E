language: php
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_count = count($paren_array);\n    $paren_stack = array();\n    $paren_max_depth\
    \ = 0;\n    $paren_current_depth = 0;\n    for ($i = 0; $i < $paren_count; $i++)\
    \ {\n        if ($paren_array[$i] == '(') {\n            array_push($paren_stack,\
    \ $paren_array[$i]);\n            $paren_current_depth++;\n            if ($paren_current_depth\
    \ > $paren_max_depth) {\n                $paren_max_depth = $paren_current_depth;\n\
    \            }\n        } else {\n            array_pop($paren_stack);\n     \
    \       $paren_current_depth--;\n        }\n    }\n    return $paren_max_depth;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnwtpmpy.php:39\n\
    Stack trace:\n#0 /tmp/tmpwnwtpmpy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwnwtpmpy.php\
    \ on line 39\n"
  timestamp: 1659730681
- exit_code: 0
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  // Split the string into groups of parentheses separated by spaces.\n \
    \ $paren_groups = explode(' ', $paren_string);\n  // Initialize an array to hold\
    \ the results.\n  $results = array();\n  // Iterate through each group of parentheses.\n\
    \  foreach ($paren_groups as $group) {\n    // Initialize a counter to keep track\
    \ of the level of nesting.\n    $level = 0;\n    // Initialize a variable to keep\
    \ track of the maximum level of nesting.\n    $max_level = 0;\n    // Iterate\
    \ through each character in the group.\n    for ($i = 0; $i < strlen($group);\
    \ $i++) {\n      // If the character is an opening parenthesis, increment the\
    \ level.\n      if ($group[$i] == '(') {\n        $level++;\n      }\n      //\
    \ If the character is a closing parenthesis, decrement the level.\n      elseif\
    \ ($group[$i] == ')') {\n        $level--;\n      }\n      // If the level is\
    \ greater than the maximum level, update the maximum level.\n      if ($level\
    \ > $max_level) {\n        $max_level = $level;\n      }\n    }\n    // Add the\
    \ maximum level of nesting to the results array.\n    $results[] = $max_level;\n\
    \  }\n  // Return the results array.\n  return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpesvj9m5r.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    return strlen($paren_string);\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbc83t8b0.php:18\n\
    Stack trace:\n#0 /tmp/tmpbc83t8b0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpbc83t8b0.php\
    \ on line 18\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = 0;\n  foreach\
    \ ($paren_groups as $group) {\n    $nesting = 0;\n    $len = strlen($group);\n\
    \    for ($i = 0; $i < $len; $i++) {\n      if ($group[$i] == '(') {\n       \
    \ $nesting++;\n      } else {\n        $nesting--;\n      }\n      if ($nesting\
    \ > $max_nesting) {\n        $max_nesting = $nesting;\n      }\n    }\n  }\n \
    \ return $max_nesting;\n}\n\n$paren_string = '(()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp9y2oxx.php:35\n\
    Stack trace:\n#0 /tmp/tmpyp9y2oxx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyp9y2oxx.php\
    \ on line 35\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $max_depth = 0;\n    $depth\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $depth++;\n            if ($depth > $max_depth) {\n             \
    \   $max_depth = $depth;\n            }\n        } else {\n            $depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0471x12.php:36\n\
    Stack trace:\n#0 /tmp/tmpf0471x12.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpf0471x12.php\
    \ on line 36\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_count = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $paren_count[] = parse_parens($paren_group);\n\
    \  }\n  return $paren_count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmpg3prfjc8.php:9\nStack trace:\n#0 /tmp/tmpg3prfjc8.php(15): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpg3prfjc8.php(19): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpg3prfjc8.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpg3prfjc8.php\
    \ on line 9\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \        }\n        if ($paren_count > $max_paren_count) {\n            $max_paren_count\
    \ = $paren_count;\n        }\n    }\n    return $max_paren_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67na655l.php:28\n\
    Stack trace:\n#0 /tmp/tmp67na655l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp67na655l.php\
    \ on line 28\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $max_depth = 0;\n    $current_depth\
    \ = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren == '(') {\n\
    \            $current_depth++;\n        } else {\n            $current_depth--;\n\
    \        }\n        if ($current_depth > $max_depth) {\n            $max_depth\
    \ = $current_depth;\n        }\n    }\n    return $max_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_mdupzf.php:34\n\
    Stack trace:\n#0 /tmp/tmp8_mdupzf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8_mdupzf.php\
    \ on line 34\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $paren_group) {\n        $level = 0;\n        for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $level++;\n            } else {\n               \
    \ $level--;\n            }\n            if ($level > $max_level) {\n         \
    \       $max_level = $level;\n            }\n        }\n    }\n    return $max_level;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92i9gfdz.php:31\n\
    Stack trace:\n#0 /tmp/tmp92i9gfdz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp92i9gfdz.php\
    \ on line 31\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsnet10z8.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n\
    \  $current_depth = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren ==\
    \ '(') {\n      $current_depth++;\n      if ($current_depth > $max_depth) {\n\
    \        $max_depth = $current_depth;\n      }\n    }\n    elseif ($paren == ')')\
    \ {\n      $current_depth--;\n    }\n  }\n  return $max_depth;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4pocp0s.php:38\n\
    Stack trace:\n#0 /tmp/tmpk4pocp0s.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk4pocp0s.php\
    \ on line 38\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxfwntzal.php on line 34

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgi955a5y.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('str_replace', array_fill(0, count($paren_string), '('), array_fill(0,\
    \ count($paren_string), '1'), $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), ')'), array_fill(0, count($paren_string),\
    \ '-1'), $paren_string);\n    $paren_string = array_map('intval', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ '1'), array_fill(0, count($paren_string), '('), $paren_string);\n    $paren_string\
    \ = array_map('str_replace', array_fill(0, count($paren\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8dabz8ls.php on line 28

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_stack = array();\n  $max_depth\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ array_push($paren_stack, $paren);\n      if (count($paren_stack) > $max_depth)\
    \ {\n        $max_depth = count($paren_stack);\n      }\n    }\n    elseif ($paren\
    \ == ')') {\n      array_pop($paren_stack);\n    }\n  }\n  return $max_depth;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkem898wm.php:38\n\
    Stack trace:\n#0 /tmp/tmpkem898wm.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkem898wm.php\
    \ on line 38\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe399zzea.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $max_nesting = 0;\n   \
    \ $current_nesting = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_nesting++;\n            if ($current_nesting\
    \ > $max_nesting) {\n                $max_nesting = $current_nesting;\n      \
    \      }\n        } elseif ($paren == ')') {\n            $current_nesting--;\n\
    \        }\n    }\n    return $max_nesting;\n}\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlah69eq.php:33\n\
    Stack trace:\n#0 /tmp/tmpvlah69eq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvlah69eq.php\
    \ on line 33\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    return strlen($paren_string);\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4_akhql.php:19\n\
    Stack trace:\n#0 /tmp/tmpv4_akhql.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpv4_akhql.php\
    \ on line 19\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppos1g4r0.php on line 43

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsnet10z8.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgd8dwu1p.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpma_ofmpt.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array_count = count($paren_array);\n    $paren_array_index = 0;\n\
    \    $paren_array_stack = array();\n    $paren_array_stack_index = 0;\n    $paren_array_stack_max\
    \ = 0;\n    $paren_array_stack_max_index = 0;\n    while ($paren_array_index <\
    \ $paren_array_count) {\n        if ($paren_array[$paren_array_index] == '(')\
    \ {\n            $paren_array_stack[$paren_array_stack_index] = $paren_array_index;\n\
    \            $paren_array_stack_index++;\n        } elseif ($paren_array[$paren_array_index]\
    \ == ')') {\n            $paren_array_stack_index--;\n            if ($paren_array_stack_index\
    \ > $paren_array_stack_max) {\n                $paren_array_stack_max = $paren_array_stack_index;\n\
    \                $paren_array_stack_max_index = $paren_array_index;\n        \
    \    }\n        }\n        $paren_array_index++;\n    }\n    return $paren_array_stack_max;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2cgaycxj.php:42\n\
    Stack trace:\n#0 /tmp/tmp2cgaycxj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2cgaycxj.php\
    \ on line 42\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_array = array_filter($paren_array);\n\
    \  $paren_array = array_values($paren_array);\n  $paren_count = count($paren_array);\n\
    \  $paren_level = 0;\n  $paren_level_max = 0;\n  for ($i = 0; $i < $paren_count;\
    \ $i++) {\n    if ($paren_array[$i] == '(') {\n      $paren_level++;\n      if\
    \ ($paren_level > $paren_level_max) {\n        $paren_level_max = $paren_level;\n\
    \      }\n    }\n    elseif ($paren_array[$i] == ')') {\n      $paren_level--;\n\
    \    }\n  }\n  return $paren_level_max;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyj5y5c5e.php:38\n\
    Stack trace:\n#0 /tmp/tmpyj5y5c5e.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyj5y5c5e.php\
    \ on line 38\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_count = 0;\n    $max_paren_count = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n     \
    \       if ($paren_count > $max_paren_count) {\n                $max_paren_count\
    \ = $paren_count;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_count--;\n        }\n    }\n    return $max_paren_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtnph6ri.php:33\n\
    Stack trace:\n#0 /tmp/tmpvtnph6ri.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvtnph6ri.php\
    \ on line 33\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '',\
    \ $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string\
    \ = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuzf8pgcu.php on line 34

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_level = 0;\n    $paren_max_level = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $paren_level++;\n            if ($paren_level > $paren_max_level)\
    \ {\n                $paren_max_level = $paren_level;\n            }\n       \
    \ } elseif ($paren == ')') {\n            array_pop($paren_stack);\n         \
    \   $paren_level--;\n        }\n    }\n    return $paren_max_level;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyj3gw037.php:37\n\
    Stack trace:\n#0 /tmp/tmpyj3gw037.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyj3gw037.php\
    \ on line 37\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk186ru2t.php on line 44

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = str_replace(') (', ') (', $paren_string);\n  $paren_string\
    \ = str_replace('( ', '(', $paren_string);\n  $paren_string = str_replace(' )',\
    \ ')', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = str_replace(')\
    \ (', ') (', $paren_string);\n  $paren_string = str_replace('( ', '(', $paren_string);\n\
    \  $paren_string = str_replace(' )', ')', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n  $paren_string = str_replace('(\
    \ ', '(', $paren_string);\n  $paren_string = str_replace(' )', ')', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = str_replace(') (', ') (', $paren_string);\n\
    \  $paren_string = str_replace('( ', '(', $paren_string);\n  $paren_string = str_replace('\
    \ )', ')', $paren_string);\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi5ql80_w.php on line 42

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), '('), array_fill(0, count($paren_string), '1'), $paren_string);\n\
    \    $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ ')'), array_fill(0, count($paren_string), '-1'), $paren_string);\n    $paren_string\
    \ = array_map('intval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('trim', $paren_string);\n   \
    \ $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), '1'), array_fill(0, count($paren_string),\
    \ '('), $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), '-1'), array_fill(0, count($paren_string), ')'), $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('trim', $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplu2ywbdp.php on line 27

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb3il_sea.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_xd6gvf.php:34\n\
    Stack trace:\n#0 /tmp/tmp3_xd6gvf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3_xd6gvf.php\
    \ on line 34\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n   \
    \ foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n         \
    \   $current_depth++;\n            if ($current_depth > $max_depth) {\n      \
    \          $max_depth = $current_depth;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpal5q_3xz.php:36\n\
    Stack trace:\n#0 /tmp/tmpal5q_3xz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpal5q_3xz.php\
    \ on line 36\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_depth = 0;\n  foreach\
    \ ($paren_array as $paren_group) {\n    $depth = 0;\n    $paren_group_length =\
    \ strlen($paren_group);\n    for ($i = 0; $i < $paren_group_length; $i++) {\n\
    \      if ($paren_group[$i] == '(') {\n        $depth++;\n      } else if ($paren_group[$i]\
    \ == ')') {\n        $depth--;\n      }\n    }\n    if ($depth > $max_depth) {\n\
    \      $max_depth = $depth;\n    }\n  }\n  return $max_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0meh65qv.php:30\n\
    Stack trace:\n#0 /tmp/tmp0meh65qv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0meh65qv.php\
    \ on line 30\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            $max_depth = max($max_depth,\
    \ $current_depth);\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = \"((())) (()())\"\
    ;\necho parse_nested_parens($paren_string);\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5kghfzv.php:29\n\
    Stack trace:\n#0 /tmp/tmpv5kghfzv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpv5kghfzv.php\
    \ on line 29\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(') (', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' (', $paren_string);\n    $paren_string\
    \ = str_replace(')', ') ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(') (', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' (', $paren_string);\n    $paren_string = str_replace(')',\
    \ ') ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' (', $paren_string);\n    $paren_string = str_replace(')', ') ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(')\
    \ (', ') (', $paren_string);\n    $paren_string = str_replace('(', ' (', $paren_string);\n\
    \    $paren_string = str_replace(')', ') ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(') (', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' (', $paren_string);\n    $paren_string\
    \ = str_replace(')', ') ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(') (', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppw5tu_0y.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(') (', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4znfqldt.php on line 42

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7d0ufg_e.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm6pkd4wr.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = 0;\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        for ($i\
    \ = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n  \
    \              $nesting++;\n            } else if ($group[$i] == ')') {\n    \
    \            $nesting--;\n            }\n        }\n        if ($nesting > $max_nesting)\
    \ {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpufogux3m.php:29\n\
    Stack trace:\n#0 /tmp/tmpufogux3m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpufogux3m.php\
    \ on line 29\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_stack = array();\n    $paren_depth = 0;\n    $paren_max_depth = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_depth++;\n            if ($paren_depth > $paren_max_depth) {\n \
    \               $paren_max_depth = $paren_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $paren_depth--;\n        }\n    }\n    return\
    \ $paren_max_depth;\n}\n\necho parse_nested_parens('(()())') . \"\\n\";\necho\
    \ parse_nested_parens('((()))') . \"\\n\";\necho parse_nested_parens('(()()) (()())')\
    \ . \"\\n\";\necho parse_nested_parens('((())) ((()))') . \"\\n\";\necho parse_nested_parens('(()())\
    \ (())()') . \"\\n\";\necho parse_nested_parens('((())) (())()') . \"\\n\";\n\
    echo parse_nested_parens('(()()) (())() (()())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (())() ((()))') . \"\\n\";\necho parse_nested_parens('(()()) (())() (()()) (())()')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (())() ((())) (())()') . \"\\n\"\
    ;\necho parse_nested_parens('(()()) (())() (()()) (())() (()())') . \"\\\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyt4n9pmz.php on line 45

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \    $paren_string = '(' . $paren_string . ')';\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \    $paren_string = '(' . $paren_string . ')';\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfmaq0ngv.php on line 31

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array = array_filter($paren_array);\n\
    \    $paren_array = array_values($paren_array);\n    $paren_count = count($paren_array);\n\
    \    $paren_depth = 0;\n    $paren_max_depth = 0;\n    for ($i = 0; $i < $paren_count;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_depth++;\n\
    \            if ($paren_depth > $paren_max_depth) {\n                $paren_max_depth\
    \ = $paren_depth;\n            }\n        } elseif ($paren_array[$i] == ')') {\n\
    \            $paren_depth--;\n        }\n    }\n    return $paren_max_depth;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_duv6xx.php:37\n\
    Stack trace:\n#0 /tmp/tmpf_duv6xx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpf_duv6xx.php\
    \ on line 37\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvv7sisq4.php:29\n\
    Stack trace:\n#0 /tmp/tmpvv7sisq4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvv7sisq4.php\
    \ on line 29\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1wv82gre.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsnet10z8.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' )', $paren_string);\n  $paren_string = str_replace('(', '( ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = explode(' ', $paren_string);\n\
    \  $max_level = 0;\n  $level = 0;\n  foreach ($paren_string as $paren) {\n   \
    \ if ($paren == '(') {\n      $level++;\n      if ($level > $max_level) {\n  \
    \      $max_level = $level;\n      }\n    }\n    else {\n      $level--;\n   \
    \ }\n  }\n  return $max_level;\n}\n\n$paren_string = '(()()) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((()))\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp956lty9x.php on line 28

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    return strlen($paren_string);\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4_akhql.php:19\n\
    Stack trace:\n#0 /tmp/tmpv4_akhql.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpv4_akhql.php\
    \ on line 19\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_depth = 0;\n    $paren_max_depth = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $paren_depth++;\n            if ($paren_depth > $paren_max_depth)\
    \ {\n                $paren_max_depth = $paren_depth;\n            }\n       \
    \ } else if ($paren == ')') {\n            array_pop($paren_stack);\n        \
    \    $paren_depth--;\n        }\n    }\n    return $paren_max_depth;\n}\n\n$paren_string\
    \ = '(()()) ((())) (()(()))';\necho parse_nested_parens($paren_string);\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepwo0ozj.php:39\n\
    Stack trace:\n#0 /tmp/tmpepwo0ozj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpepwo0ozj.php\
    \ on line 39\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $max_nesting = 0;\n    $current_nesting\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $current_nesting++;\n            if ($current_nesting > $max_nesting)\
    \ {\n                $max_nesting = $current_nesting;\n            }\n       \
    \ } elseif ($paren == ')') {\n            $current_nesting--;\n        }\n   \
    \ }\n    return $max_nesting;\n}\n\n$paren_string = '(()()) (()()) ((()))';\n\
    echo parse_nested_parens($paren_string);\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwn0hhjrm.php:36\n\
    Stack trace:\n#0 /tmp/tmpwn0hhjrm.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwn0hhjrm.php\
    \ on line 36\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $max_depth\
    \ = 0;\n    $current_depth = 0;\n    $paren_string_length = strlen($paren_string);\n\
    \    for ($i = 0; $i < $paren_string_length; $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $current_depth--;\n        }\n\
    \    }\n    return $max_depth;\n}\n\necho parse_nested_parens('(())') . PHP_EOL;\n\
    echo parse_nested_parens('((()))') . PHP_EOL;\necho parse_nested_parens('(()())')\
    \ . PHP_EOL;\necho parse_nested_parens('((())) (())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()) (())') . PHP_EOL;\necho parse_nested_parens('((())) (()) (()) (())') .\
    \ PHP_EOL;\necho parse_nested_parens('((())) (()) (()) (()) (())') . PHP_EOL;\n\
    echo parse_nested_parens('((())) (()) (()) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()) (()) (()) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()) (()) (()) (()) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()) (()) (()) (()) (()) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()) (()) (()) (()) (()) (()) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((()))\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6w1h7tzd.php on line 35

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7d0ufg_e.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $current_depth++;\n            if ($current_depth > $max_depth) {\n   \
    \             $max_depth = $current_depth;\n            }\n        } else {\n\
    \            $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0mw3j2r.php:28\n\
    Stack trace:\n#0 /tmp/tmpv0mw3j2r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv0mw3j2r.php\
    \ on line 28\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0cen7dc3.php on line 25

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_stack = array();\n  $max_depth\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ array_push($paren_stack, $paren);\n    }\n    elseif ($paren == ')') {\n   \
    \   if (count($paren_stack) > $max_depth) {\n        $max_depth = count($paren_stack);\n\
    \      }\n      array_pop($paren_stack);\n    }\n  }\n  return $max_depth;\n}\n\
    \n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaduhwone.php:37\n\
    Stack trace:\n#0 /tmp/tmpaduhwone.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpaduhwone.php\
    \ on line 37\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1wv82gre.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_count = array();\n\
    \    foreach ($paren_array as $paren) {\n        $paren_count[] = substr_count($paren,\
    \ '(') - substr_count($paren, ')');\n    }\n    return $paren_count;\n}\n\n$paren_string\
    \ = '(()()) ((()))';\n$paren_count = parse_nested_parens($paren_string);\nprint_r($paren_count);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp__dnxnz_.php:22\nStack trace:\n#0 /tmp/tmp__dnxnz_.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp__dnxnz_.php on line 22\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_depth = 0;\n    $paren_max_depth = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_depth++;\n     \
    \       $paren_max_depth = max($paren_max_depth, $paren_depth);\n        } elseif\
    \ ($paren == ')') {\n            $paren_depth--;\n        }\n    }\n    return\
    \ $paren_max_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5vrul8l.php:35\n\
    Stack trace:\n#0 /tmp/tmpm5vrul8l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpm5vrul8l.php\
    \ on line 35\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $max_nesting = 0;\n    $nesting = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $nesting++;\n        } elseif ($paren\
    \ == ')') {\n            $nesting--;\n        }\n        if ($nesting > $max_nesting)\
    \ {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpibuz9njs.php:35\n\
    Stack trace:\n#0 /tmp/tmpibuz9njs.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpibuz9njs.php\
    \ on line 35\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('((', '(', $paren_string);\n    $paren_string\
    \ = str_replace('))', ')', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('((', '(', $paren_string);\n    $paren_string\
    \ = str_replace('))', ')', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('((', '(', $paren_string);\n    $paren_string\
    \ = str_replace('))', ')', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace('\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9scyxiao.php on line 31

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $current_depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpno80y58n.php:29\n\
    Stack trace:\n#0 /tmp/tmpno80y58n.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpno80y58n.php\
    \ on line 29\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_depth = 0;\n  \
    \  foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n            } else if\
    \ ($paren_group[$i] == ')') {\n                $depth--;\n            }\n    \
    \        if ($depth > $max_depth_in_group) {\n                $max_depth_in_group\
    \ = $depth;\n            }\n        }\n        if ($max_depth_in_group > $max_depth)\
    \ {\n            $max_depth = $max_depth_in_group;\n        }\n    }\n    return\
    \ $max_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2ahyuwg.php:33\n\
    Stack trace:\n#0 /tmp/tmph2ahyuwg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmph2ahyuwg.php\
    \ on line 33\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' )', ')', $paren_string);\n    $paren_string\
    \ = str_replace('( ', '(', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = str_replace(') (', ')(', $paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = str_replace('\
    \ )', ')', $paren_string);\n    $paren_string = str_replace('( ', '(', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = str_replace(') (', ')(', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm_h4sfmc.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_values(array_filter($paren_string));\n\
    \    $max_nesting = 0;\n    $current_nesting = 0;\n    foreach ($paren_string\
    \ as $paren) {\n        if ($paren == \"(\") {\n            $current_nesting++;\n\
    \            if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } else {\n            $current_nesting--;\n\
    \        }\n    }\n    return $max_nesting;\n}\n\n$paren_string = \"(()()) (()()())\
    \ ((()()))\";\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xxj58a8.php:34\n\
    Stack trace:\n#0 /tmp/tmp5xxj58a8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5xxj58a8.php\
    \ on line 34\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjw3xsl_t.php:36\n\
    Stack trace:\n#0 /tmp/tmpjw3xsl_t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjw3xsl_t.php\
    \ on line 36\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1pibfsyt.php on line 37

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \"\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2flf_rb3.php on line 37

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array = array_values(array_filter($paren_array));\n\
    \    $paren_array_length = count($paren_array);\n    $paren_array_index = 0;\n\
    \    $paren_array_stack = array();\n    $paren_array_stack_index = 0;\n    $paren_array_stack_max\
    \ = 0;\n    $paren_array_stack_max_index = 0;\n    while ($paren_array_index <\
    \ $paren_array_length) {\n        if ($paren_array[$paren_array_index] == '(')\
    \ {\n            $paren_array_stack[$paren_array_stack_index] = $paren_array_index;\n\
    \            $paren_array_stack_index++;\n        } else {\n            $paren_array_stack_index--;\n\
    \            if ($paren_array_stack_index > $paren_array_stack_max) {\n      \
    \          $paren_array_stack_max = $paren_array_stack_index;\n              \
    \  $paren_array_stack_max_index = $paren_array_index;\n            }\n       \
    \ }\n        $paren_array_index++;\n    }\n    $paren_array_stack_max++;\n   \
    \ $paren_array_stack_max_index++;\n    $paren_array_stack_max_string = '';\n \
    \   for ($i = 0; $i < $paren_array_stack_max; $i++) {\n        $paren_array_stack_max_string\
    \ .= '(';\n    }\n    for ($i = 0; $\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6r6yojh6.php on line 41

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = str_replace(') (', ') (', $paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('str_replace', array_fill(0, count($paren_string), '('), array_fill(0,\
    \ count($paren_string), '1'), $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), ')'), array_fill(0, count($paren_string),\
    \ '-1'), $paren_string);\n    $paren_string = array_map('intval', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('intval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplbwy2rg3.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    return strlen($paren_string);\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4_akhql.php:19\n\
    Stack trace:\n#0 /tmp/tmpv4_akhql.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpv4_akhql.php\
    \ on line 19\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_count = 0;\n  $paren_max = 0;\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == '(') {\n      $paren_count++;\n\
    \      if ($paren_count > $paren_max) {\n        $paren_max = $paren_count;\n\
    \      }\n    } else {\n      $paren_count--;\n    }\n  }\n  return $paren_max;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xcd_5cs.php:28\n\
    Stack trace:\n#0 /tmp/tmp6xcd_5cs.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6xcd_5cs.php\
    \ on line 28\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_count\
    \ = 0;\n    $max_paren_count = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $paren_count++;\n\
    \            if ($paren_count > $max_paren_count) {\n                $max_paren_count\
    \ = $paren_count;\n            }\n        } else if ($paren_string[$i] == ')')\
    \ {\n            $paren_count--;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\necho parse_nested_parens('(()())') . \"\\n\";\necho parse_nested_parens('((()))')\
    \ . \"\\n\";\necho parse_nested_parens('(()()) (()())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ ((()))') . \"\\n\";\necho parse_nested_parens('((())) (()())') . \"\\n\";\n\
    echo parse_nested_parens('(()()) ((()))') . \"\\n\";\necho parse_nested_parens('((()))\
    \ ((())) (()())') . \"\\n\";\necho parse_nested_parens('(()()) ((())) (()())')\
    \ . \"\\n\";\necho parse_nested_parens('(()()) (()()) ((()))') . \"\\n\";\necho\
    \ parse_nested_parens('((())) (()()) (()())') . \"\\n\";\necho parse_nested_parens('(()())\
    \ (()()) (()())') . \"\\n\";\necho parse_nested_parens('((())) ((())) ((()))')\
    \ . \"\\n\";\necho parse_nested_parens('((())) ((())) ((())) ((()))') . \"\\n\"\
    ;\necho parse_nested_parens('((())) ((())) ((())) ((())) ((()))') . \"\\n\";\n\
    echo parse_nested_parens('((())) ((())) ((())) ((())) ((())) ((()))')\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphk1elydp.php on line 37

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjbrm62ot.php on line 46

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fp3pbo0.php:34\n\
    Stack trace:\n#0 /tmp/tmp3fp3pbo0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3fp3pbo0.php\
    \ on line 34\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxfwntzal.php on line 34

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_stack = array();\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $max_paren_count) {\n \
    \               $max_paren_count = $paren_count;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $paren_count--;\n        }\n    }\n    return\
    \ $max_paren_count;\n}\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsczo8cit.php:36\n\
    Stack trace:\n#0 /tmp/tmpsczo8cit.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsczo8cit.php\
    \ on line 36\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_nesting = 0;\n  foreach\
    \ ($paren_array as $paren_group) {\n    $nesting = 0;\n    $paren_group_len =\
    \ strlen($paren_group);\n    for ($i = 0; $i < $paren_group_len; $i++) {\n   \
    \   if ($paren_group[$i] == '(') {\n        $nesting++;\n      }\n      elseif\
    \ ($paren_group[$i] == ')') {\n        $nesting--;\n      }\n    }\n    if ($nesting\
    \ > $max_nesting) {\n      $max_nesting = $nesting;\n    }\n  }\n  return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzfw4wvv.php:31\n\
    Stack trace:\n#0 /tmp/tmphzfw4wvv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphzfw4wvv.php\
    \ on line 31\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            $max_depth = max($max_depth,\
    \ $current_depth);\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplpqw_3a_.php:27\n\
    Stack trace:\n#0 /tmp/tmplpqw_3a_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplpqw_3a_.php\
    \ on line 27\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $current_depth++;\n            if ($current_depth > $max_depth) {\n   \
    \             $max_depth = $current_depth;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\n$paren_string = '(()()) (()())((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0b12df29.php:30\n\
    Stack trace:\n#0 /tmp/tmp0b12df29.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0b12df29.php\
    \ on line 30\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $current_depth++;\n            if ($current_depth > $max_depth) {\n   \
    \             $max_depth = $current_depth;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\n$paren_string = '(()()) (()()()) ((()())) (((())))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_zq81xa.php:30\n\
    Stack trace:\n#0 /tmp/tmpq_zq81xa.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq_zq81xa.php\
    \ on line 30\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $max_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth\
    \ = max($max_depth, count($paren_stack));\n        } else if ($paren == ')') {\n\
    \            array_pop($paren_stack);\n        }\n    }\n    return $max_depth;\n\
    }\n\n$paren_string = '(()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4u2tj_7v.php:34\n\
    Stack trace:\n#0 /tmp/tmp4u2tj_7v.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4u2tj_7v.php\
    \ on line 34\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), '('), array_fill(0, count($paren_string), ' '), $paren_string);\n\
    \    $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ ')'), array_fill(0, count($paren_string), ' '), $paren_string);\n    $paren_string\
    \ = array_map('trim', $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), ' '), array_fill(0, count($paren_string),\
    \ ''), $paren_string);\n    $paren_string = array_map('strlen', $paren_string);\n\
    \    return $paren_string;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxlaswnh.php:30\n\
    Stack trace:\n#0 /tmp/tmpjxlaswnh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjxlaswnh.php\
    \ on line 30\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsnet10z8.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_array = array_values(array_filter($paren_array));\n\
    \  $paren_count = count($paren_array);\n  $nested_level = 0;\n  $max_nested_level\
    \ = 0;\n  for ($i = 0; $i < $paren_count; $i++) {\n    if ($paren_array[$i] ==\
    \ '(') {\n      $nested_level++;\n      if ($nested_level > $max_nested_level)\
    \ {\n        $max_nested_level = $nested_level;\n      }\n    }\n    elseif ($paren_array[$i]\
    \ == ')') {\n      $nested_level--;\n    }\n  }\n  return $max_nested_level;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nh9503e.php:40\n\
    Stack trace:\n#0 /tmp/tmp1nh9503e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1nh9503e.php\
    \ on line 40\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpa2cvou8y.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } else {\n            $paren_count--;\n\
    \        }\n        if ($paren_count > $max_paren_count) {\n            $max_paren_count\
    \ = $paren_count;\n        }\n    }\n    return $max_paren_count;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4uxo0y24.php:36\n\
    Stack trace:\n#0 /tmp/tmp4uxo0y24.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4uxo0y24.php\
    \ on line 36\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_nesting = 0;\n  foreach ($paren_groups as $group) {\n    $nesting = 0;\n\
    \    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n\
    \        $nesting++;\n      }\n      elseif ($group[$i] == ')') {\n        $nesting--;\n\
    \      }\n    }\n    if ($nesting > $max_nesting) {\n      $max_nesting = $nesting;\n\
    \    }\n  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvanfsbtf.php:32\n\
    Stack trace:\n#0 /tmp/tmpvanfsbtf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvanfsbtf.php\
    \ on line 32\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n            if ($paren_count > $paren_max) {\n \
    \               $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n        }\n    }\n    return $paren_max;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4pohx5j.php:34\n\
    Stack trace:\n#0 /tmp/tmpp4pohx5j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp4pohx5j.php\
    \ on line 34\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = 0;\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_in_group) {\n        \
    \        $max_nesting_in_group = $nesting;\n            }\n        }\n       \
    \ if ($max_nesting_in_group > $max_nesting) {\n            $max_nesting = $max_nesting_in_group;\n\
    \        }\n    }\n    return $max_nesting;\n}\n\n$paren_string = '(()()) (()())\
    \ (()()) ((()))';\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18s98dz8.php:35\n\
    Stack trace:\n#0 /tmp/tmp18s98dz8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp18s98dz8.php\
    \ on line 35\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\",\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcpc4rt_9.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_count = 0;\n    $max_paren_count = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n     \
    \       if ($paren_count > $max_paren_count) {\n                $max_paren_count\
    \ = $paren_count;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_count--;\n        }\n    }\n    return $max_paren_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtnph6ri.php:33\n\
    Stack trace:\n#0 /tmp/tmpvtnph6ri.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvtnph6ri.php\
    \ on line 33\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjw3xsl_t.php:36\n\
    Stack trace:\n#0 /tmp/tmpjw3xsl_t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjw3xsl_t.php\
    \ on line 36\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdgqye4fv.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } else {\n            $current_depth--;\n        }\n \
    \   }\n    return $max_depth;\n}\n\necho parse_nested_parens('(()())');\necho\
    \ parse_nested_parens('((()))');\necho parse_nested_parens('(()())((()))');\n\
    echo parse_nested_parens('(()())((()))()');\necho parse_nested_parens('(()())((()))()()');\n\
    echo parse_nested_parens('(()())((()))()()()');\necho parse_nested_parens('(()())((()))()()()()');\n\
    echo parse_nested_parens('(()())((()))()()()()()');\necho parse_nested_parens('(()())((()))()()()()()()');\n\
    echo parse_nested_parens('(()())((()))()()()()()()()');\necho parse_nested_parens('(()())((()))()()()()()()()()');\n\
    echo parse_nested_parens('(()()\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3kzq4ueu.php on line 41

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nest_levels =\
    \ array();\n    foreach ($paren_groups as $paren_group) {\n        $max_nest_levels[]\
    \ = get_max_nest_level($paren_group);\n    }\n    return $max_nest_levels;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_max_nest_level()\
    \ in /tmp/tmpunbex2o9.php:9\nStack trace:\n#0 /tmp/tmpunbex2o9.php(15): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpunbex2o9.php(19): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpunbex2o9.php(24): test()\n#3 {main}\n  thrown in /tmp/tmpunbex2o9.php\
    \ on line 9\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array_length = count($paren_array);\n    $paren_stack = array();\n \
    \   $paren_stack_length = 0;\n    $max_depth = 0;\n    $current_depth = 0;\n \
    \   for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $paren_stack[$paren_stack_length] = '(';\n          \
    \  $paren_stack_length++;\n            $current_depth++;\n            if ($current_depth\
    \ > $max_depth) {\n                $max_depth = $current_depth;\n            }\n\
    \        } elseif ($paren_array[$i] == ')') {\n            if ($paren_stack_length\
    \ > 0) {\n                $paren_stack_length--;\n                $current_depth--;\n\
    \            }\n        }\n    }\n    return $max_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprt_ywhmr.php:41\n\
    Stack trace:\n#0 /tmp/tmprt_ywhmr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprt_ywhmr.php\
    \ on line 41\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_stack = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n\necho parse_nested_parens('(()())')\
    \ . PHP_EOL;\necho parse_nested_parens('((()))') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()())') . PHP_EOL;\necho parse_nested_parens('((())) (()()) (())') . PHP_EOL;\n\
    echo parse_nested_parens('((())) (()()) (()) (()())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()()) (()) (()()) (()())') . PHP_EOL;\necho parse_nested_parens('((())) (()())\
    \ (()) (()()) (()()) (())') . PHP_EOL;\necho parse_nested_parens('((())) (()())\
    \ (()) (()()) (()()) (()) (()())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()()) (()) (()()) (()()) (()) (()()) (())') . PHP_EOL;\necho parse_n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsioirnsd.php on line 39

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = [];\n   \
    \ $paren_level = 0;\n    $paren_max_level = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_level++;\n            if\
    \ ($paren_level > $paren_max_level) {\n                $paren_max_level = $paren_level;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_level--;\n\
    \        }\n    }\n    return $paren_max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf82x43im.php:35\n\
    Stack trace:\n#0 /tmp/tmpf82x43im.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf82x43im.php\
    \ on line 35\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_stack = array();\n  $paren_depth\
    \ = 0;\n  $paren_max_depth = 0;\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $paren_depth++;\n      $paren_max_depth = max($paren_max_depth,\
    \ $paren_depth);\n    } elseif ($paren == ')') {\n      $paren_depth--;\n    }\n\
    \  }\n  return $paren_max_depth;\n}\n\n$paren_string = '(()()) (()()()) ((()))';\n\
    echo parse_nested_parens($paren_string);\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxucmhhl.php:35\n\
    Stack trace:\n#0 /tmp/tmpvxucmhhl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvxucmhhl.php\
    \ on line 35\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_array = explode(\" \", $paren_string);\n  $paren_array\
    \ = array_filter($paren_array);\n  $paren_array = array_values($paren_array);\n\
    \  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5l3m1ong.php:23\n\
    Stack trace:\n#0 /tmp/tmp5l3m1ong.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5l3m1ong.php\
    \ on line 23\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_array = explode(' ', $paren_string);\n  $paren_count\
    \ = 0;\n  $max_paren_count = 0;\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $paren_count++;\n    } else if ($paren == ')') {\n\
    \      $paren_count--;\n    }\n    if ($paren_count > $max_paren_count) {\n  \
    \    $max_paren_count = $paren_count;\n    }\n  }\n  return $max_paren_count;\n\
    }\n\n$paren_string = '(()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpygj_b9lb.php:35\n\
    Stack trace:\n#0 /tmp/tmpygj_b9lb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpygj_b9lb.php\
    \ on line 35\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\n$paren_string = '(()()) (()()) (()())';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeogrdn09.php:36\n\
    Stack trace:\n#0 /tmp/tmpeogrdn09.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpeogrdn09.php\
    \ on line 36\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $current_depth++;\n            if ($current_depth > $max_depth) {\n   \
    \             $max_depth = $current_depth;\n            }\n        } else {\n\
    \            $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n\n\
    $paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j6od4i8.php:30\n\
    Stack trace:\n#0 /tmp/tmp3j6od4i8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3j6od4i8.php\
    \ on line 30\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n  $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = explode(\" \", $paren_string);\n  $paren_string = array_filter($paren_string);\n\
    \  $paren_string = array_values($paren_string);\n  $max_nesting = 0;\n  $curr_nesting\
    \ = 0;\n  for ($i = 0; $i < count($paren_string); $i++) {\n    if ($paren_string[$i]\
    \ == \"(\") {\n      $curr_nesting++;\n      if ($curr_nesting > $max_nesting)\
    \ {\n        $max_nesting = $curr_nesting;\n      }\n    } else if ($paren_string[$i]\
    \ == \")\") {\n      $curr_nesting--;\n    }\n  }\n  return $max_nesting;\n}\n\
    \n$paren_string = \"(()()) (()()()) ((()))\";\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4d9knwc.php:35\n\
    Stack trace:\n#0 /tmp/tmpu4d9knwc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpu4d9knwc.php\
    \ on line 35\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_depth = 0;\n  \
    \  foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $depth++;\n            } else {\n               \
    \ $depth--;\n            }\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfjx33l6.php:29\n\
    Stack trace:\n#0 /tmp/tmpyfjx33l6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyfjx33l6.php\
    \ on line 29\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count\
    \ = count($paren_array);\n  $paren_array_index = 0;\n  $paren_array_stack = array();\n\
    \  $paren_array_stack_index = 0;\n  $paren_array_stack_max = 0;\n  $paren_array_stack_max_index\
    \ = 0;\n  while ($paren_array_index < $paren_array_count) {\n    if ($paren_array[$paren_array_index]\
    \ == '(') {\n      $paren_array_stack[$paren_array_stack_index] = $paren_array_index;\n\
    \      $paren_array_stack_index++;\n    } elseif ($paren_array[$paren_array_index]\
    \ == ')') {\n      $paren_array_stack_index--;\n      if ($paren_array_stack_index\
    \ > $paren_array_stack_max) {\n        $paren_array_stack_max = $paren_array_stack_index;\n\
    \        $paren_array_stack_max_index = $paren_array_index;\n      }\n    }\n\
    \    $paren_array_index++;\n  }\n  return $paren_array_stack_max;\n}\n\n$paren_string\
    \ = '(()())';\n$paren_string = '(()(()))';\n$paren_string = '(()(())) (()())';\n\
    $paren_string = '(()(())) (()()) (()(()))';\n$paren_string = '(()(())) (()())\
    \ (()(())) (()(()))';\n$paren_string = '(()(())) (\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcrivcofq.php on line 40

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_depth = 0;\n    $paren_max_depth = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_depth++;\n     \
    \       $paren_max_depth = max($paren_max_depth, $paren_depth);\n        } elseif\
    \ ($paren == ')') {\n            $paren_depth--;\n        }\n    }\n    return\
    \ $paren_max_depth;\n}\n\n$paren_string = '(()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep_5gd84.php:35\n\
    Stack trace:\n#0 /tmp/tmpep_5gd84.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpep_5gd84.php\
    \ on line 35\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgd8dwu1p.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_depth = 0;\n  foreach ($paren_groups as $group) {\n    $depth = 0;\n \
    \   $max_depth_in_group = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n\
    \      if ($group[$i] == '(') {\n        $depth++;\n      } else if ($group[$i]\
    \ == ')') {\n        $depth--;\n      }\n      if ($depth > $max_depth_in_group)\
    \ {\n        $max_depth_in_group = $depth;\n      }\n    }\n    if ($max_depth_in_group\
    \ > $max_depth) {\n      $max_depth = $max_depth_in_group;\n    }\n  }\n  return\
    \ $max_depth;\n}\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgmlk36i.php:37\n\
    Stack trace:\n#0 /tmp/tmpjgmlk36i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjgmlk36i.php\
    \ on line 37\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpesvj9m5r.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsnet10z8.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_count = 0;\n    $paren_max = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_count++;\n            if\
    \ ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \        }\n    }\n    return $paren_max;\n}\n\necho parse_nested_parens('(())');\n\
    echo parse_nested_parens('((()))');\necho parse_nested_parens('(()())');\necho\
    \ parse_nested_parens('(()())(()())');\necho parse_nested_parens('(()())(()())(()())');\n\
    echo parse_nested_parens('(()())(()())(()())(()())');\necho parse_nested_parens('(()())(()())(()())(()())(()())');\n\
    echo parse_nested_parens('(()())(()())(()())(()())(()())(()())');\necho parse_nested_parens('(()())(()())(()())(()())(()())(()())(()())');\n\
    echo parse_nested_parens('(()())(()())(()())(()())(()())(()())(()())(()())');\n\
    echo parse_nested_parens('(()())(()())(()())(()())(()())(()())(()())(()())(()())');\n\
    echo parse_nested_parens('(()())(()())(()())(()())(()())(\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpz6nssjt8.php on line 38

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpma_ofmpt.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_depth = 0;\n    foreach ($paren_groups as $paren_group)\
    \ {\n        $depth = 0;\n        $max_depth_in_group = 0;\n        for ($i =\
    \ 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == '(')\
    \ {\n                $depth++;\n            } else {\n                $depth--;\n\
    \            }\n            if ($depth > $max_depth_in_group) {\n            \
    \    $max_depth_in_group = $depth;\n            }\n        }\n        if ($max_depth_in_group\
    \ > $max_depth) {\n            $max_depth = $max_depth_in_group;\n        }\n\
    \    }\n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ke759hn.php:35\n\
    Stack trace:\n#0 /tmp/tmp2ke759hn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2ke759hn.php\
    \ on line 35\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ '('), array_fill(0, count($paren_string), 'open'), $paren_string);\n    $paren_string\
    \ = array_map('str_replace', array_fill(0, count($paren_string), ')'), array_fill(0,\
    \ count($paren_string), 'close'), $paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('trim', $paren_string);\n   \
    \ $paren_string = array_values($paren_string);\n    $paren_string = array_filter($paren_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoyk9yb3k.php on line 31

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7d0ufg_e.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_depth = 0;\n  \
    \  foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $depth++;\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $depth--;\n            }\n        }\n        if ($depth\
    \ > $max_depth) {\n            $max_depth = $depth;\n        }\n    }\n    return\
    \ $max_depth;\n}\n\necho parse_nested_parens('(()()) (()()) ((()))');\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jn4pb_l.php:30\n\
    Stack trace:\n#0 /tmp/tmp_jn4pb_l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_jn4pb_l.php\
    \ on line 30\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgd8dwu1p.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = 0;\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $len\
    \ = strlen($group);\n        for ($i = 0; $i < $len; $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n        }\n        if ($nesting\
    \ > $max_nesting) {\n            $max_nesting = $nesting;\n        }\n    }\n\
    \    return $max_nesting;\n}\n\n$paren_string = '(()()) ((())) (()()())';\necho\
    \ parse_nested_parens($paren_string);\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo06zzjln.php:32\n\
    Stack trace:\n#0 /tmp/tmpo06zzjln.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpo06zzjln.php\
    \ on line 32\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_array = array_filter($paren_array);\n\
    \  $paren_array = array_values($paren_array);\n  $paren_count = count($paren_array);\n\
    \  $paren_stack = array();\n  $paren_depth = array();\n  $paren_depth_max = 0;\n\
    \  for ($i = 0; $i < $paren_count; $i++) {\n    if ($paren_array[$i] == '(') {\n\
    \      array_push($paren_stack, $paren_array[$i]);\n    } else {\n      if (count($paren_stack)\
    \ > 0) {\n        array_pop($paren_stack);\n        array_push($paren_depth, count($paren_stack));\n\
    \        if (count($paren_stack) > $paren_depth_max) {\n          $paren_depth_max\
    \ = count($paren_stack);\n        }\n      }\n    }\n  }\n  return $paren_depth_max;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4req_v4p.php:43\n\
    Stack trace:\n#0 /tmp/tmp4req_v4p.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4req_v4p.php\
    \ on line 43\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ str_replace(\"  \", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\" \", \",\", $paren_string);\n  $paren_string\
    \ = str_replace(\",,\", \",\", $paren_string);\n  $paren_string = trim($paren_string,\
    \ \",\");\n  return $paren_string;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bgbmd5i.php:24\n\
    Stack trace:\n#0 /tmp/tmp5bgbmd5i.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5bgbmd5i.php\
    \ on line 24\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_count = 0;\n  $max_paren_count = 0;\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == '(') {\n      $paren_count++;\n\
    \    } elseif ($paren == ')') {\n      $paren_count--;\n    }\n    if ($paren_count\
    \ > $max_paren_count) {\n      $max_paren_count = $paren_count;\n    }\n  }\n\
    \  return $max_paren_count;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wfr6d5p.php:28\n\
    Stack trace:\n#0 /tmp/tmp3wfr6d5p.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3wfr6d5p.php\
    \ on line 28\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == \"(\") {\n            $current_depth++;\n            if ($current_depth >\
    \ $max_depth) {\n                $max_depth = $current_depth;\n            }\n\
    \        } else {\n            $current_depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8wbb3jw.php:29\n\
    Stack trace:\n#0 /tmp/tmpw8wbb3jw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpw8wbb3jw.php\
    \ on line 29\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_depth = 0;\n  foreach ($paren_groups as $paren_group) {\n    $depth =\
    \ 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == '(') {\n        $depth++;\n      } else {\n        $depth--;\n      }\n \
    \     if ($depth > $max_depth) {\n        $max_depth = $depth;\n      }\n    }\n\
    \  }\n  return $max_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_i6tflgu.php:31\n\
    Stack trace:\n#0 /tmp/tmp_i6tflgu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_i6tflgu.php\
    \ on line 31\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_count = 0;\n    $max_paren_count = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n     \
    \   } elseif ($paren == ')') {\n            $paren_count--;\n        }\n     \
    \   if ($paren_count > $max_paren_count) {\n            $max_paren_count = $paren_count;\n\
    \        }\n    }\n    return $max_paren_count;\n}\n\n$paren_string = '(()())\
    \ (()()) ((()))';\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyh26djr6.php:35\n\
    Stack trace:\n#0 /tmp/tmpyh26djr6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyh26djr6.php\
    \ on line 35\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ycc2_uw.php:33\n\
    Stack trace:\n#0 /tmp/tmp4ycc2_uw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4ycc2_uw.php\
    \ on line 33\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $max_level = 0;\n    $current_level = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_level++;\n           \
    \ if ($current_level > $max_level) {\n                $max_level = $current_level;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\necho parse_nested_parens('(()())')\
    \ . \"\\n\";\necho parse_nested_parens('((()))') . \"\\n\";\necho parse_nested_parens('(()(()))')\
    \ . \"\\n\";\necho parse_nested_parens('(()(())) (()())') . \"\\n\";\necho parse_nested_parens('(()(()))\
    \ (()()) (()(()))') . \"\\n\";\necho parse_nested_parens('(()(())) (()()) (()(()))\
    \ (()())') . \"\\n\";\necho parse_nested_parens('(()(())) (()()) (()(())) (()())\
    \ (()(()))') . \"\\n\";\necho parse_nested_parens('(()(())) (()()) (()(())) (()())\
    \ (()(())) (()())') . \"\\n\";\necho parse_nested_parens('(()(())) (()()) (()(()))\
    \ (()()) (()(())) (()()) (()(()))') . \"\\n\";\necho parse_nested_parens('\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe6lnn7fh.php on line 37

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6nja9nc.php:23\n\
    Stack trace:\n#0 /tmp/tmpl6nja9nc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpl6nja9nc.php\
    \ on line 23\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"(1\", $paren_string);\n    $paren_string = str_replace(\")\", \")1\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $max_level = 0;\n    $level\
    \ = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren == \"(\")\
    \ {\n            $level++;\n            if ($level > $max_level) {\n         \
    \       $max_level = $level;\n            }\n        } elseif ($paren == \")\"\
    ) {\n            $level--;\n        }\n    }\n    return $max_level;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8i2a_exi.php:38\n\
    Stack trace:\n#0 /tmp/tmp8i2a_exi.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8i2a_exi.php\
    \ on line 38\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpesvj9m5r.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsnet10z8.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"()\", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n  $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\" \",\
    \ \"\", $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"\"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"\", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpn8f168_t.php on line 34

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_array = explode(' ',\
    \ $paren_string);\n    $max_nesting = 0;\n    foreach ($paren_array as $paren_group)\
    \ {\n        $nesting = 0;\n        $paren_group_length = strlen($paren_group);\n\
    \        for ($i = 0; $i < $paren_group_length; $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            if ($nesting > $max_nesting) {\n \
    \               $max_nesting = $nesting;\n            }\n        }\n    }\n  \
    \  return $max_nesting;\n}\n\n$paren_string = '(()()) ((())) (()(()))';\necho\
    \ parse_nested_parens($paren_string);\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzef9bwz.php:34\n\
    Stack trace:\n#0 /tmp/tmpuzef9bwz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuzef9bwz.php\
    \ on line 34\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpesvj9m5r.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = explode(\"\
    \ \", $paren_string);\n    $paren_string = array_values(array_filter($paren_string));\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $max_depth = 0;\n\
    \    $depth = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren\
    \ == \"(\") {\n            $depth++;\n            if ($depth > $max_depth) {\n\
    \                $max_depth = $depth;\n            }\n        } else if ($paren\
    \ == \")\") {\n            $depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\necho parse_nested_parens(\"(()())\") . \"\\n\";\necho parse_nested_parens(\"\
    ((()))\") . \"\\n\";\necho parse_nested_parens(\"((()()(())))\") . \"\\n\";\n\
    echo parse_nested_parens(\"((()()(()))\") . \"\\n\";\necho parse_nested_parens(\"\
    (()()(()))\") . \"\\n\";\necho parse_nested_parens(\"(()()(()))\") . \"\\n\";\n\
    echo parse_nested_parens(\"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg_b6_9o3.php on line 41

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array_count = count($paren_array);\n    $paren_stack = array();\n  \
    \  $paren_stack_count = 0;\n    $paren_stack_max = 0;\n    $paren_stack_max_index\
    \ = 0;\n    for ($i = 0; $i < $paren_array_count; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $paren_stack[$paren_stack_count] = 1;\n            $paren_stack_count++;\n\
    \        } elseif ($paren_array[$i] == ')') {\n            $paren_stack_count--;\n\
    \            $paren_stack[$paren_stack_count]++;\n            if ($paren_stack[$paren_stack_count]\
    \ > $paren_stack_max) {\n                $paren_stack_max = $paren_stack[$paren_stack_count];\n\
    \                $paren_stack_max_index = $paren_stack_count;\n            }\n\
    \        }\n    }\n    return $paren_stack_max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bbhy28z.php:39\n\
    Stack trace:\n#0 /tmp/tmp4bbhy28z.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4bbhy28z.php\
    \ on line 39\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  return strlen($paren_string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphd9ig2q7.php:20\n\
    Stack trace:\n#0 /tmp/tmphd9ig2q7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphd9ig2q7.php\
    \ on line 20\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '',\
    \ $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string\
    \ = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuzf8pgcu.php on line 34

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', ') (', $paren_string);\n    $paren_string\
    \ = '('.$paren_string.')';\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \    $paren_string = '('.$paren_string.')';\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ ') (', $paren_string);\n    $paren_string = '('.$paren_string.')';\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', ') (', $paren_string);\n    $paren_string = '('.$paren_string.')';\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', ') (', $paren\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7k0c1gk4.php on line 34

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxfwntzal.php on line 34

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n  $current_depth\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $current_depth++;\n      if ($current_depth > $max_depth) {\n        $max_depth\
    \ = $current_depth;\n      }\n    } else {\n      $current_depth--;\n    }\n \
    \ }\n  return $max_depth;\n}\n\n$paren_string = '(()()) ((())) ((())) (()())';\n\
    $paren_array = explode(' ', $paren_string);\nforeach ($paren_array as $paren)\
    \ {\n  echo parse_nested_parens($paren) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "2\n3\n3\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tpo9y2h.php:34\n\
    Stack trace:\n#0 /tmp/tmp2tpo9y2h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2tpo9y2h.php\
    \ on line 34\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    return strlen($paren_string);\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbc83t8b0.php:18\n\
    Stack trace:\n#0 /tmp/tmpbc83t8b0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpbc83t8b0.php\
    \ on line 18\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_count = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $paren_count[] = substr_count($paren_group,\
    \ '(') - substr_count($paren_group, ')');\n  }\n  return $paren_count;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnrote_t2.php:19\n\
    Stack trace:\n#0 /tmp/tmpnrote_t2.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnrote_t2.php\
    \ on line 19\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  return strlen($paren_string);\n\
    }\n\n$paren_string = \"(()()) (()())(()())(()())\";\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ts5ni09.php:21\n\
    Stack trace:\n#0 /tmp/tmp6ts5ni09.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp6ts5ni09.php\
    \ on line 21\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array_len = count($paren_array);\n    $paren_stack = array();\n    $paren_stack_len\
    \ = 0;\n    $paren_stack_max_len = 0;\n    for ($i = 0; $i < $paren_array_len;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_stack[$paren_stack_len]\
    \ = $paren_array[$i];\n            $paren_stack_len++;\n            if ($paren_stack_len\
    \ > $paren_stack_max_len) {\n                $paren_stack_max_len = $paren_stack_len;\n\
    \            }\n        } else if ($paren_array[$i] == ')') {\n            $paren_stack_len--;\n\
    \        }\n    }\n    return $paren_stack_max_len;\n}\n\n$paren_string = '(()())\
    \ ((())) (()(()))';\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmtvc2xle.php:38\n\
    Stack trace:\n#0 /tmp/tmpmtvc2xle.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpmtvc2xle.php\
    \ on line 38\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_count = 0;\n    $paren_max = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_count++;\n            if\
    \ ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \        }\n    }\n    return $paren_max;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgx9jz1y5.php:32\n\
    Stack trace:\n#0 /tmp/tmpgx9jz1y5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgx9jz1y5.php\
    \ on line 32\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdgqye4fv.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '',\
    \ $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string\
    \ = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  return strlen($paren_string);\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6g5ezxr.php:20\n\
    Stack trace:\n#0 /tmp/tmpl6g5ezxr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpl6g5ezxr.php\
    \ on line 20\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_depth = 0;\n  foreach ($paren_groups as $group) {\n    $depth = 0;\n \
    \   $max_depth_in_group = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n\
    \      if ($group[$i] == '(') {\n        $depth++;\n      } else if ($group[$i]\
    \ == ')') {\n        $depth--;\n      }\n      if ($depth > $max_depth_in_group)\
    \ {\n        $max_depth_in_group = $depth;\n      }\n    }\n    if ($max_depth_in_group\
    \ > $max_depth) {\n      $max_depth = $max_depth_in_group;\n    }\n  }\n  return\
    \ $max_depth;\n}\n\necho parse_nested_parens('(())') . \"\\n\";\necho parse_nested_parens('((()))')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (()())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (()()) (())') . \"\\n\";\necho parse_nested_parens('((())) (()()) (()) (()())')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (()()) (()) (()()) (()())') . \"\
    \\n\";\necho parse_nested_parens('((())) (()()) (()) (()()) (()()) (())') . \"\
    \\n\";\necho parse_nested_parens('((())) (()()) (()) (()()) (()()) (()) (()())')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (()()) (()) (()()) (()()) (())\
    \ (()()) (())') . \"\\n\";\necho parse_nested_parens('((())) (()()) (()) (()())\
    \ (()()) (()) (()\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpzynz46g7.php on line 39

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpesvj9m5r.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoeqy5mw2.php on line 27

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"( \", $paren_string);\n    $paren_string = str_replace(\")\", \" )\", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $current_depth++;\n        }\
    \ else {\n            $current_depth--;\n        }\n        if ($current_depth\
    \ > $max_depth) {\n            $max_depth = $current_depth;\n        }\n    }\n\
    \    return $max_depth;\n}\necho parse_nested_parens(\"(()()) (()()()) ((()))\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gvce1w3.php:33\n\
    Stack trace:\n#0 /tmp/tmp_gvce1w3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_gvce1w3.php\
    \ on line 33\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    return strlen($paren_string);\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4_akhql.php:19\n\
    Stack trace:\n#0 /tmp/tmpv4_akhql.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpv4_akhql.php\
    \ on line 19\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_nesting = 0;\n    foreach ($paren_groups as $paren_group)\
    \ {\n        $nesting = 0;\n        $paren_group_len = strlen($paren_group);\n\
    \        for ($i = 0; $i < $paren_group_len; $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            if ($nesting > $max_nesting) {\n \
    \               $max_nesting = $nesting;\n            }\n        }\n    }\n  \
    \  return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75sj6tpb.php:32\n\
    Stack trace:\n#0 /tmp/tmp75sj6tpb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp75sj6tpb.php\
    \ on line 32\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_stack = array();\n    $paren_level = 0;\n    $max_level = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $paren_level++;\n\
    \            $max_level = max($max_level, $paren_level);\n        } else if ($paren\
    \ == ')') {\n            $paren_level--;\n        }\n    }\n    return $max_level;\n\
    }\n\n$paren_string = '(()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5yzmnk34.php:34\n\
    Stack trace:\n#0 /tmp/tmp5yzmnk34.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5yzmnk34.php\
    \ on line 34\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_depth = 0;\n  \
    \  foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n            } else {\n\
    \                $depth--;\n            }\n            if ($depth > $max_depth_in_group)\
    \ {\n                $max_depth_in_group = $depth;\n            }\n        }\n\
    \        if ($max_depth_in_group > $max_depth) {\n            $max_depth = $max_depth_in_group;\n\
    \        }\n    }\n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppzozsjr6.php:33\n\
    Stack trace:\n#0 /tmp/tmppzozsjr6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppzozsjr6.php\
    \ on line 33\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdgqye4fv.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n  $current_depth\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $current_depth++;\n      if ($current_depth > $max_depth) {\n        $max_depth\
    \ = $current_depth;\n      }\n    } else {\n      $current_depth--;\n    }\n \
    \ }\n  return $max_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozumksa5.php:29\n\
    Stack trace:\n#0 /tmp/tmpozumksa5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpozumksa5.php\
    \ on line 29\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_nesting = 0;\n  foreach ($paren_groups as $group) {\n    $nesting = 0;\n\
    \    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n\
    \        $nesting++;\n      }\n      else {\n        $nesting--;\n      }\n  \
    \    if ($nesting > $max_nesting) {\n        $max_nesting = $nesting;\n      }\n\
    \    }\n  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0f1m35h9.php:32\n\
    Stack trace:\n#0 /tmp/tmp0f1m35h9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0f1m35h9.php\
    \ on line 32\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = 0;\n  foreach\
    \ ($paren_groups as $group) {\n    $nesting = 0;\n    $paren_stack = [];\n   \
    \ for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n\
    \        array_push($paren_stack, '(');\n        $nesting++;\n      } else {\n\
    \        if (count($paren_stack) == 0) {\n          return -1;\n        }\n  \
    \      array_pop($paren_stack);\n      }\n    }\n    if (count($paren_stack) !=\
    \ 0) {\n      return -1;\n    }\n    if ($nesting > $max_nesting) {\n      $max_nesting\
    \ = $nesting;\n    }\n  }\n  return $max_nesting;\n}\n\n$paren_string = '(()())\
    \ (()()) ((()))';\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "-1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3816p2mo.php:42\n\
    Stack trace:\n#0 /tmp/tmp3816p2mo.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3816p2mo.php\
    \ on line 42\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1wv82gre.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpriub4xft.php:35\n\
    Stack trace:\n#0 /tmp/tmpriub4xft.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpriub4xft.php\
    \ on line 35\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    return strlen($paren_string);\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8g8bofly.php:21\n\
    Stack trace:\n#0 /tmp/tmp8g8bofly.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8g8bofly.php\
    \ on line 21\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdh6gvgwf.php on line 46

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi8f7xl11.php:35\n\
    Stack trace:\n#0 /tmp/tmpi8f7xl11.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi8f7xl11.php\
    \ on line 35\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array = array_unique($paren_array);\n\
    \    $paren_array = array_values($paren_array);\n    $max_paren_count = 0;\n \
    \   foreach ($paren_array as $paren_group) {\n        $paren_count = strlen($paren_group);\n\
    \        if ($paren_count > $max_paren_count) {\n            $max_paren_count\
    \ = $paren_count;\n        }\n    }\n    return $max_paren_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3xwi997.php:31\n\
    Stack trace:\n#0 /tmp/tmpn3xwi997.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn3xwi997.php\
    \ on line 31\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_array = explode(' ', $paren_string);\n  $paren_stack\
    \ = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $current_depth++;\n      if ($current_depth\
    \ > $max_depth) {\n        $max_depth = $current_depth;\n      }\n    }\n    elseif\
    \ ($paren == ')') {\n      $current_depth--;\n    }\n  }\n  return $max_depth;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6svhzetx.php:37\n\
    Stack trace:\n#0 /tmp/tmp6svhzetx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6svhzetx.php\
    \ on line 37\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = 0;\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $paren_length = strlen($paren_group);\n        for ($i = 0; $i < $paren_length;\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n        }\n        if ($nesting > $max_nesting) {\n          \
    \  $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodzkm_qf.php:30\n\
    Stack trace:\n#0 /tmp/tmpodzkm_qf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpodzkm_qf.php\
    \ on line 30\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array = array_filter($paren_array);\n\
    \    $paren_array = array_values($paren_array);\n    $paren_count = count($paren_array);\n\
    \    $paren_depth = 0;\n    $paren_max_depth = 0;\n    for ($i = 0; $i < $paren_count;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_depth++;\n\
    \            if ($paren_depth > $paren_max_depth) {\n                $paren_max_depth\
    \ = $paren_depth;\n            }\n        } else {\n            $paren_depth--;\n\
    \        }\n    }\n    return $paren_max_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoutqbx8n.php:37\n\
    Stack trace:\n#0 /tmp/tmpoutqbx8n.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpoutqbx8n.php\
    \ on line 37\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = explode(' ', $paren_string);\n  $max_depth = 0;\n  $current_depth\
    \ = 0;\n  foreach ($paren_string as $paren) {\n    if ($paren == '(') {\n    \
    \  $current_depth++;\n      if ($current_depth > $max_depth) {\n        $max_depth\
    \ = $current_depth;\n      }\n    }\n    elseif ($paren == ')') {\n      $current_depth--;\n\
    \    }\n  }\n  return $max_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9yc4_q7i.php:34\n\
    Stack trace:\n#0 /tmp/tmp9yc4_q7i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9yc4_q7i.php\
    \ on line 34\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    return strlen($paren_string);\n\
    }\n\necho parse_nested_parens('(()()) (()()) (()())');\necho parse_nested_parens('((()))\
    \ (()()) (()())');\necho parse_nested_parens('((())) ((())) (()())');\necho parse_nested_parens('((()))\
    \ ((())) ((()))');\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0000\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfke7ilvf.php:23\n\
    Stack trace:\n#0 /tmp/tmpfke7ilvf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpfke7ilvf.php\
    \ on line 23\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvifwgewi.php:29\n\
    Stack trace:\n#0 /tmp/tmpvifwgewi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvifwgewi.php\
    \ on line 29\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsnet10z8.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = 0;\n\
    \    foreach ($paren_groups as $paren_group) {\n        $nesting = 0;\n      \
    \  $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_in_group) {\n        \
    \        $max_nesting_in_group = $nesting;\n            }\n        }\n       \
    \ if ($max_nesting_in_group > $max_nesting) {\n            $max_nesting = $max_nesting_in_group;\n\
    \        }\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__flhso6.php:33\n\
    Stack trace:\n#0 /tmp/tmp__flhso6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp__flhso6.php\
    \ on line 33\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_nesting = 0;\n  foreach ($paren_groups as $paren_group) {\n    $nesting\
    \ = 0;\n    $paren_group_len = strlen($paren_group);\n    for ($i = 0; $i < $paren_group_len;\
    \ $i++) {\n      if ($paren_group[$i] == '(') {\n        $nesting++;\n      }\
    \ else if ($paren_group[$i] == ')') {\n        $nesting--;\n      }\n    }\n \
    \   if ($nesting > $max_nesting) {\n      $max_nesting = $nesting;\n    }\n  }\n\
    \  return $max_nesting;\n}\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8z5y8vup.php:33\n\
    Stack trace:\n#0 /tmp/tmp8z5y8vup.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8z5y8vup.php\
    \ on line 33\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } else {\n            array_pop($paren_stack);\n\
    \            $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpic53wpw4.php:31\n\
    Stack trace:\n#0 /tmp/tmpic53wpw4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpic53wpw4.php\
    \ on line 31\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $paren_array_depth = array();\n  $paren_array_depth_count = 0;\n  $paren_array_depth_max\
    \ = 0;\n  for ($i = 0; $i < $paren_array_count; $i++) {\n    if ($paren_array[$i]\
    \ == '(') {\n      $paren_array_depth_count++;\n      if ($paren_array_depth_count\
    \ > $paren_array_depth_max) {\n        $paren_array_depth_max = $paren_array_depth_count;\n\
    \      }\n    }\n    elseif ($paren_array[$i] == ')') {\n      $paren_array_depth_count--;\n\
    \    }\n    else {\n      $paren_array_depth[] = $paren_array_depth_max;\n   \
    \   $paren_array_depth_max = 0;\n    }\n  }\n  return $paren_array_depth;\n}\n\
    \n$paren_string = '(()()) ((())) (((())))';\n$paren_array_depth = parse_nested_parens($paren_string);\n\
    print_r($paren_array_depth);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpiie41bpx.php:45\nStack trace:\n#0 /tmp/tmpiie41bpx.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpiie41bpx.php on line 45\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \        }\n        if ($paren_count > $max_paren_count) {\n            $max_paren_count\
    \ = $paren_count;\n        }\n    }\n    return $max_paren_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67na655l.php:28\n\
    Stack trace:\n#0 /tmp/tmp67na655l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp67na655l.php\
    \ on line 28\n"
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7d0ufg_e.php on line 30

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvifwgewi.php:29\n\
    Stack trace:\n#0 /tmp/tmpvifwgewi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvifwgewi.php\
    \ on line 29\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsnet10z8.php on line 33

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpesvj9m5r.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8sdl_ljw.php on line 32

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_count = count($paren_array);\n\
    \  $paren_depth = 0;\n  $paren_max_depth = 0;\n  for ($i = 0; $i < $paren_count;\
    \ $i++) {\n    if ($paren_array[$i] == '(') {\n      $paren_depth++;\n      if\
    \ ($paren_depth > $paren_max_depth) {\n        $paren_max_depth = $paren_depth;\n\
    \      }\n    }\n    elseif ($paren_array[$i] == ')') {\n      $paren_depth--;\n\
    \    }\n  }\n  return $paren_max_depth;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_cu5uhk.php:39\n\
    Stack trace:\n#0 /tmp/tmp1_cu5uhk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1_cu5uhk.php\
    \ on line 39\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpga8baxqx.php on line 32

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = 0;\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_in_group) {\n        \
    \        $max_nesting_in_group = $nesting;\n            }\n        }\n       \
    \ if ($max_nesting_in_group > $max_nesting) {\n            $max_nesting = $max_nesting_in_group;\n\
    \        }\n    }\n    return $max_nesting;\n}\n\necho parse_nested_parens('(()())\
    \ (()(()))');\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6112vt35.php:34\n\
    Stack trace:\n#0 /tmp/tmp6112vt35.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6112vt35.php\
    \ on line 34\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $max_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth\
    \ = max($max_depth, count($paren_stack));\n        } elseif ($paren == ')') {\n\
    \            array_pop($paren_stack);\n        }\n    }\n    return $max_depth;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpppsjoq.php:32\n\
    Stack trace:\n#0 /tmp/tmpkpppsjoq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkpppsjoq.php\
    \ on line 32\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_nesting = 0;\n  foreach ($paren_groups as $group) {\n    $nesting = 0;\n\
    \    $paren_stack = [];\n    for ($i = 0; $i < strlen($group); $i++) {\n     \
    \ if ($group[$i] == '(') {\n        array_push($paren_stack, '(');\n        $nesting++;\n\
    \      } else {\n        array_pop($paren_stack);\n        $nesting--;\n     \
    \ }\n    }\n    if ($nesting > $max_nesting) {\n      $max_nesting = $nesting;\n\
    \    }\n  }\n  return $max_nesting;\n}\n\n$paren_string = '(()()) (()()) ((()))';\n\
    echo parse_nested_parens($paren_string);\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbu37p04p.php:36\n\
    Stack trace:\n#0 /tmp/tmpbu37p04p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbu37p04p.php\
    \ on line 36\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' )', $paren_string);\n    $paren_string = str_replace('(', '( ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjzqq1fw.php:32\n\
    Stack trace:\n#0 /tmp/tmprjzqq1fw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprjzqq1fw.php\
    \ on line 32\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpesvj9m5r.php on line 32

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\(/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\)\\(/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\(/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\)\\(/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(/', '\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcpj03jq8.php on line 26

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk186ru2t.php on line 44

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '2', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '', $paren_string);\n    $paren_string = str_replace('2', '',\
    \ $paren_string);\n    $paren_string = str_replace('3', '', $paren_string);\n\
    \    $paren_string = str_replace('4', '', $paren_string);\n    $paren_string =\
    \ str_replace('5', '', $paren_string);\n    $paren_string = str_replace('6', '',\
    \ $paren_string);\n    $paren_string = str_replace('7', '', $paren_string);\n\
    \    $paren_string = str_replace('8', '', $paren_string);\n    $paren_string =\
    \ str_replace('9', '', $paren_string);\n    $paren_string = str_replace('10',\
    \ '', $paren_string);\n    $paren_string = str_replace('11', '', $paren_string);\n\
    \    $paren_string = str_replace('12', '', $paren_string);\n    $paren_string\
    \ = str_replace('13', '', $paren_string);\n    $paren_string = str_replace('14',\
    \ '', $paren_string);\n    $paren_string = str_replace('15', '', $paren_string);\n\
    \    $paren_string = str_replace('16', '', $paren_string);\n    $paren_string\
    \ = str_replace('17', '', $paren_string);\n    $paren_string = str_replace('18',\
    \ '', $paren_string);\n    $paren_string = str_replace('19', '', $paren_string);\n\
    \    $paren_string = str_replace('20', '', $paren_string);\n    $paren_string\
    \ = str_replace\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpet7qlb7_.php on line 32

    '
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n\
    \  $current_depth = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren ==\
    \ \"(\") {\n      $current_depth++;\n      if ($current_depth > $max_depth) {\n\
    \        $max_depth = $current_depth;\n      }\n    } else {\n      $current_depth--;\n\
    \    }\n  }\n  return $max_depth;\n}\n\n$paren_string = \"(()()) (()()()) ((()))\"\
    ;\n$paren_array = explode(\" \", $paren_string);\nforeach ($paren_array as $paren)\
    \ {\n  echo parse_nested_parens($paren) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "2\n2\n3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphyvhu_sz.php:34\n\
    Stack trace:\n#0 /tmp/tmphyvhu_sz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphyvhu_sz.php\
    \ on line 34\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $max_depth = 0;\n    $curr_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $curr_depth++;\n            if\
    \ ($curr_depth > $max_depth) {\n                $max_depth = $curr_depth;\n  \
    \          }\n        } elseif ($paren == ')') {\n            $curr_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpium26f1o.php:37\n\
    Stack trace:\n#0 /tmp/tmpium26f1o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpium26f1o.php\
    \ on line 37\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_stack = array();\n    $paren_depth = array();\n    $paren_depth_max\
    \ = 0;\n    $paren_depth_current = 0;\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            array_push($paren_stack, $paren);\n\
    \            $paren_depth_current++;\n            if ($paren_depth_current > $paren_depth_max)\
    \ {\n                $paren_depth_max = $paren_depth_current;\n            }\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          $paren_depth_current--;\n        }\n    }\n    return $paren_depth_max;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8il6ilpv.php:37\n\
    Stack trace:\n#0 /tmp/tmp8il6ilpv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8il6ilpv.php\
    \ on line 37\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    return strlen($paren_string);\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojn8yg7i.php:20\n\
    Stack trace:\n#0 /tmp/tmpojn8yg7i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpojn8yg7i.php\
    \ on line 20\n"
  timestamp: 1659730682
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjbrm62ot.php on line 46

    '
  timestamp: 1659730681
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_nesting = 0;\n    foreach ($paren_groups as $paren_group)\
    \ {\n        $nesting = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else {\n                $nesting--;\n            }\n          \
    \  if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        }\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwb1y2rb.php:31\n\
    Stack trace:\n#0 /tmp/tmppwb1y2rb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppwb1y2rb.php\
    \ on line 31\n"
  timestamp: 1659730682
