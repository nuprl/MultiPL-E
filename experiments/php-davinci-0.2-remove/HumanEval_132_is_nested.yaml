name: HumanEval_132_is_nested
language: php
prompt: "<?php\n// Create a function that takes a string as input which contains only\
  \ square brackets.\n// The function should return True if and only if there is a\
  \ valid subsequence of brackets \n// where at least one bracket in the subsequence\
  \ is nested.\nfunction is_nested($string) {\n"
tests: "function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\")\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[[[[[\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $stack = [];\n    $brackets = ['(', ')', '[', ']', '{', '}'];\n\
    \    $string = str_split($string);\n    foreach ($string as $char) {\n       \
    \ if (in_array($char, $brackets)) {\n            if ($char == '(' || $char ==\
    \ '[' || $char == '{') {\n                array_push($stack, $char);\n       \
    \     } else {\n                $last = array_pop($stack);\n                if\
    \ ($last == '(' && $char != ')') {\n                    return false;\n      \
    \          } else if ($last == '[' && $char != ']') {\n                    return\
    \ false;\n                } else if ($last == '{' && $char != '}') {\n       \
    \             return false;\n                }\n            }\n        }\n   \
    \ }\n    return true;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == \"[\") {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $open = 0;\n    $close = 0;\n    $nested\
    \ = false;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n        if ($open > 0 && $close > 0) {\n            $nested = true;\n\
    \        }\n    }\n    if ($open != $close) {\n        return false;\n    }\n\
    \    return $nested;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n\
    \    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (empty($stack))\
    \ {\n                return false;\n            } else {\n                $last\
    \ = array_pop($stack);\n                if ($open[array_search($string[$i], $close)]\
    \ != $last) {\n                    return false;\n                }\n        \
    \    }\n        }\n    }\n    return empty($stack);\n}\n", "    $stack = [];\n\
    \    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n\
    \            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $top = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $top) {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $open = ['[',\
    \ '{', '('];\n  $close = [']', '}', ')'];\n  $map = [\n    ']' => '[',\n    '}'\
    \ => '{',\n    ')' => '('\n  ];\n  for ($i = 0; $i < strlen($string); $i++) {\n\
    \    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      if (empty($stack)) {\n\
    \        return false;\n      }\n      $last = array_pop($stack);\n      if ($last\
    \ !== $map[$string[$i]]) {\n        return false;\n      }\n    }\n  }\n  return\
    \ empty($stack);\n}\n", "  $stack = [];\n  $open = ['[', '{', '('];\n  $close\
    \ = [']', '}', ')'];\n  $map = [\n    ']' => '[',\n    '}' => '{',\n    ')' =>\
    \ '('\n  ];\n  for ($i = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i],\
    \ $open)) {\n      array_push($stack, $string[$i]);\n    } else if (in_array($string[$i],\
    \ $close)) {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      $last = array_pop($stack);\n      if ($last != $map[$string[$i]]) {\n \
    \       return false;\n      }\n    }\n  }\n  return count($stack) == 0;\n}\n",
  "  $stack = [];\n  $open = ['(', '{', '['];\n  $close = [')', '}', ']'];\n  $map\
    \ = [\n    ')' => '(',\n    '}' => '{',\n    ']' => '['\n  ];\n  for ($i = 0;\
    \ $i < strlen($string); $i++) {\n    if (in_array($string[$i], $open)) {\n   \
    \   array_push($stack, $string[$i]);\n    } else if (in_array($string[$i], $close))\
    \ {\n      if (count($stack) == 0) {\n        return false;\n      }\n      $top\
    \ = array_pop($stack);\n      if ($top != $map[$string[$i]]) {\n        return\
    \ false;\n      }\n    }\n  }\n  return count($stack) == 0;\n}\n", "    $stack\
    \ = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $top = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $top) {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $open = ['(',\
    \ '{', '['];\n  $close = [')', '}', ']'];\n  $map = array_combine($open, $close);\n\
    \  for ($i = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i], $open))\
    \ {\n      array_push($stack, $string[$i]);\n    } elseif (in_array($string[$i],\
    \ $close)) {\n      if (empty($stack)) {\n        return false;\n      }\n   \
    \   $last = array_pop($stack);\n      if ($map[$last] != $string[$i]) {\n    \
    \    return false;\n      }\n    }\n  }\n  return empty($stack);\n}\n", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']',\
    \ '}', ')'];\n    $map = [\n        ']' => '[',\n        '}' => '{',\n       \
    \ ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string); $i++) {\n       \
    \ if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } elseif (in_array($string[$i], $close)) {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($last != $map[$string[$i]]) {\n                return false;\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "  $stack =\
    \ [];\n  $open = ['[', '{', '('];\n  $close = [']', '}', ')'];\n  $pairs = [\n\
    \    ']' => '[',\n    '}' => '{',\n    ')' => '('\n  ];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      if (count($stack) == 0)\
    \ {\n        return false;\n      }\n      $last = array_pop($stack);\n      if\
    \ ($last != $pairs[$string[$i]]) {\n        return false;\n      }\n    }\n  }\n\
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $top = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $top) {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\n$string = \"([])[]({})\";\necho is_nested($string);",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else if ($string[$i]\
    \ == ']') {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $map = [\n        ']'\
    \ => '[',\n        '}' => '{',\n        ')' => '('\n    ];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n  \
    \          array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($last\
    \ != $map[$string[$i]]) {\n                return false;\n            }\n    \
    \    }\n    }\n    return empty($stack);\n}\n", "  $stack = [];\n  for ($i = 0;\
    \ $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n      array_push($stack,\
    \ $string[$i]);\n    } else {\n      if (count($stack) == 0) {\n        return\
    \ false;\n      }\n      array_pop($stack);\n    }\n  }\n  return count($stack)\
    \ == 0;\n}\n", "\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}',\
    \ ')'];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i],\
    \ $open)) {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else if (in_array($string[$i],\
    \ $close)) {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\t$last = array_pop($stack);\n\t\t\tif ($open[array_search($string[$i], $close)]\
    \ != $last) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '(') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "  $brackets =\
    \ str_split($string);\n  $stack = [];\n  foreach ($brackets as $bracket) {\n \
    \   if ($bracket == '[') {\n      array_push($stack, $bracket);\n    } else {\n\
    \      if (empty($stack)) {\n        return false;\n      }\n      array_pop($stack);\n\
    \    }\n  }\n  return empty($stack);\n}\n", "    $stack = [];\n    $open = ['[',\
    \ '{', '('];\n    $close = [']', '}', ')'];\n    $map = [\n        ']' => '[',\n\
    \        '}' => '{',\n        ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($last != $map[$string[$i]])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n\
    \    $close = [']', '}', ')'];\n    $map = [\n        ']' => '[',\n        '}'\
    \ => '{',\n        ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (empty($stack)) {\n                return false;\n            }\n   \
    \         $top = array_pop($stack);\n            if ($top != $map[$string[$i]])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ empty($stack);\n}\n", "  $stack = [];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if ($string[$i] == '[') {\n      array_push($stack, $string[$i]);\n\
    \    } else if ($string[$i] == ']') {\n      if (count($stack) == 0) {\n     \
    \   return false;\n      } else {\n        array_pop($stack);\n      }\n    }\n\
    \  }\n  return count($stack) == 0;\n}\n", "    $stack = [];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i] == '[') {\n    \
    \        $stack[] = $string[$i];\n        } else {\n            if (count($stack)\
    \ > 0) {\n                array_pop($stack);\n            } else {\n         \
    \       return false;\n            }\n        }\n    }\n    return count($stack)\
    \ > 0 ? false : true;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n\
    \    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']',\
    \ '}', ')'];\n    $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return true;\n\
    }\n", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $char = $string[$i];\n        if ($char == '(') {\n       \
    \     array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\n$string = \"((()))\";\n\
    echo is_nested($string);", "    $stack = [];\n    $brackets = [\n        '{' =>\
    \ '}',\n        '[' => ']',\n        '(' => ')'\n    ];\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if (in_array($string[$i], array_keys($brackets)))\
    \ {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ array_values($brackets))) {\n            if (empty($stack)) {\n            \
    \    return false;\n            }\n            $last = array_pop($stack);\n  \
    \          if ($brackets[$last] != $string[$i]) {\n                return false;\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "    $stack\
    \ = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $top = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $top) {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested('{[()]}') . PHP_EOL;\n\
    echo is_nested('{[(])}') . PHP_EOL;\necho is_nested('{{[[(())]]}}') . PHP_EOL;\n\
    echo is_nested('{[()]') . PHP_EOL;\necho is_nested('{[()]}[') . PHP_EOL;\necho\
    \ is_nested('{[()]}[]') . PHP_EOL;\necho is_nested('{[()]}[]{}') . PHP_EOL;\n\
    echo is_nested('{[()]}[]{}[()]') . PHP_EOL;\necho is_nested('{[()]}[]{}[()]{}')\
    \ . PHP_EOL;\necho is_nested('{[()]}[]{}[()]{}[') . PHP_EOL;\necho is_nested('{[()]}[]{}[()]{}[]')\
    \ . PHP_EOL;\necho is_nested('{[()]}[]{}[()]{}[]{}') . PHP_EOL;\necho is_nested('{[()]}[]{}[()]{}[]{}[()]')\
    \ . PHP_EOL;\necho is_nested('{[()]}[]{}[()]{}[]{}[()]{}')", "\t$stack = [];\n\
    \t$open = ['(', '{', '['];\n\t$close = [')', '}', ']'];\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif (in_array($string[$i], $open)) {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else if (in_array($string[$i], $close)) {\n\t\t\tif (count($stack) == 0)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$last = array_pop($stack);\n\t\t\t\
    if ($open[array_search($string[$i], $close)] != $last) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n", "    $stack = [];\n \
    \   $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $map = array_combine($open,\
    \ $close);\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($map[$last]\
    \ != $string[$i]) {\n                return false;\n            }\n        }\n\
    \    }\n    return empty($stack);\n}\n", "    $stack = [];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            }\n            array_pop($stack);\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n  \
    \  $pairs = [\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n\
    \    ];\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n\
    \        if (array_key_exists($char, $pairs)) {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (empty($stack)) {\n              \
    \  return false;\n            }\n            $last = array_pop($stack);\n    \
    \        if ($pairs[$last] != $char) {\n                return false;\n      \
    \      }\n        }\n    }\n    return empty($stack);\n}\n", "  $stack = [];\n\
    \  $open = ['[', '{', '('];\n  $close = [']', '}', ')'];\n  for ($i = 0; $i <\
    \ strlen($string); $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack,\
    \ $string[$i]);\n    } else if (in_array($string[$i], $close)) {\n      $last\
    \ = array_pop($stack);\n      if ($open[array_search($string[$i], $close)] !=\
    \ $last) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\necho is_nested('[{}]') . PHP_EOL;\necho is_nested('[{]}') . PHP_EOL;\n\
    echo is_nested('[{}]{}') . PHP_EOL;\necho is_nested('[{}]{}[]') . PHP_EOL;\necho\
    \ is_nested('[{}]{}[]{}') . PHP_EOL;\necho is_nested('[{}]{}[]{}[') . PHP_EOL;\n\
    echo is_nested('[{}]{}[]{}[{}]') . PHP_EOL;\necho is_nested('[{}]{}[]{}[{}]{}')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[{}]{}[') . PHP_EOL;\necho is_nested('[{}]{}[]{}[{}]{}[]')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[{}]{}[]{}') . PHP_EOL;\necho is_nested('[{}]{}[]{}[{}]{}[]{}[')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{", "  $open = 0;\n  $close = 0;\n  for\
    \ ($i = 0; $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n    \
    \  $open++;\n    } else {\n      $close++;\n    }\n    if ($close > $open) {\n\
    \      return false;\n    }\n  }\n  return $open == $close;\n}\n", "    $stack\
    \ = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            $last = array_pop($stack);\n            if ($last ===\
    \ null) {\n                return false;\n            }\n            if ($close[array_search($last,\
    \ $open)] !== $string[$i]) {\n                return false;\n            }\n \
    \       }\n    }\n    return count($stack) === 0;\n}\n", "    $stack = [];\n \
    \   $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $open = ['(',\
    \ '{', '['];\n  $close = [')', '}', ']'];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      $last = array_pop($stack);\n\
    \      if ($last === null) {\n        return false;\n      }\n      if ($close[array_search($last,\
    \ $open)] !== $string[$i]) {\n        return false;\n      }\n    }\n  }\n  return\
    \ count($stack) === 0;\n}\n", "    $stack = [];\n    $open = ['(', '{', '['];\n\
    \    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } elseif (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']',\
    \ '}', ')'];\n    $map = array_combine($open, $close);\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n    \
    \        array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($map[$last]\
    \ != $string[$i]) {\n                return false;\n            }\n        }\n\
    \    }\n    return empty($stack);\n}\n", "    $stack = [];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $char = $string[$i];\n        if\
    \ ($char == '[') {\n            array_push($stack, $char);\n        } else if\
    \ ($char == ']') {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    $pairs = ['[]', '{}', '()'];\n   \
    \ for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if (!in_array($last\
    \ . $string[$i], $pairs)) {\n                return false;\n            }\n  \
    \      }\n    }\n    return empty($stack);\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $open\
    \ = ['(', '{', '['];\n  $close = [')', '}', ']'];\n  $map = [\n    ')' => '(',\n\
    \    '}' => '{',\n    ']' => '['\n  ];\n  for ($i = 0; $i < strlen($string); $i++)\
    \ {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } elseif (in_array($string[$i], $close)) {\n      if (empty($stack)) {\n\
    \        return false;\n      }\n      $last = array_pop($stack);\n      if ($last\
    \ !== $map[$string[$i]]) {\n        return false;\n      }\n    }\n  }\n  return\
    \ empty($stack);\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close\
    \ = [']', '}', ')'];\n    $map = [\n        ']' => '[',\n        '}' => '{',\n\
    \        ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($last != $map[$string[$i]]) {\n                return false;\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "  $stack =\
    \ [];\n  $brackets = ['(', ')', '[', ']', '{', '}'];\n  $open = ['(', '[', '{'];\n\
    \  $close = [')', ']', '}'];\n  $pairs = [\n    '(' => ')',\n    '[' => ']',\n\
    \    '{' => '}'\n  ];\n  for ($i = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i],\
    \ $brackets)) {\n      if (in_array($string[$i], $open)) {\n        array_push($stack,\
    \ $string[$i]);\n      } else {\n        if (empty($stack)) {\n          return\
    \ false;\n        }\n        $last = array_pop($stack);\n        if ($pairs[$last]\
    \ != $string[$i]) {\n          return false;\n        }\n      }\n    }\n  }\n\
    \  return empty($stack);\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $char = $string[$i];\n        if ($char == '[') {\n       \
    \     array_push($stack, $char);\n        } else if ($char == ']') {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            array_pop($stack);\n        }\n    }\n    return count($stack) ==\
    \ 0;\n}\n\necho is_nested('[][]') . \"\\n\";\necho is_nested('[][][]') . \"\\\
    n\";\necho is_nested('[][][][]') . \"\\n\";\necho is_nested('[][][][][]') . \"\
    \\n\";\necho is_nested('[][][][][][]') . \"\\n\";\necho is_nested('[][][][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][]') . \"\\n\";\necho is_nested('[][][][][][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][][][]') . \"\\n\";\necho is_nested('[][][][][][][][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][][][][][]') . \"\\n\";\necho is_nested('[][][][][][][][][][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][][][][][][][]') . \"\\n\";\necho\
    \ is_nested('[][][][][][][][][][][][][][][]') . \"\\n\";\necho is_nested('[][][][][][][][][][][][][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][][][][][][][][][][]') . \"\\n\";\n\
    echo is_nested('[][][][][][][][][][][][][][][][][][]') . \"\\n\";\necho is_n",
  "    $stack = [];\n    $brackets = ['(', ')', '[', ']', '{', '}'];\n    $open =\
    \ ['(', '[', '{'];\n    $close = [')', ']', '}'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $brackets)) {\n            if (in_array($string[$i],\
    \ $open)) {\n                array_push($stack, $string[$i]);\n            } else\
    \ {\n                if (empty($stack)) {\n                    return False;\n\
    \                }\n                $last = array_pop($stack);\n             \
    \   if ($last == '(' && $string[$i] != ')') {\n                    return False;\n\
    \                }\n                if ($last == '[' && $string[$i] != ']') {\n\
    \                    return False;\n                }\n                if ($last\
    \ == '{' && $string[$i] != '}') {\n                    return False;\n       \
    \         }\n            }\n        }\n    }\n    if (empty($stack)) {\n     \
    \   return True;\n    }\n    return False;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $map = [\n        ']'\
    \ => '[',\n        '}' => '{',\n        ')' => '('\n    ];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n  \
    \          array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($last\
    \ != $map[$string[$i]]) {\n                return false;\n            }\n    \
    \    }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (empty($stack)) {\n                return false;\n            }\n   \
    \         $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return empty($stack);\n}\n", "  $stack = [];\n  $open = ['[',\
    \ '{', '('];\n  $close = [']', '}', ')'];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      $last = array_pop($stack);\n      if ($open[array_search($last, $open)]\
    \ != $close[array_search($string[$i], $close)]) {\n        return false;\n   \
    \   }\n    }\n  }\n  return count($stack) == 0;\n}\n\necho is_nested('[{}]') .\
    \ PHP_EOL;\necho is_nested('[{]}') . PHP_EOL;\necho is_nested('[{}]{}') . PHP_EOL;\n\
    echo is_nested('[{}]{}[') . PHP_EOL;\necho is_nested('[{}]{}[]') . PHP_EOL;\n\
    echo is_nested('[{}]{}[]{}') . PHP_EOL;\necho is_nested('[{}]{}[]{}[') . PHP_EOL;\n\
    echo is_nested('[{}]{}[]{}[]') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}') .\
    \ PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]{}') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]{}[')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]{}[]')", "    $stack = [];\n   \
    \ $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n  \
    \          array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            $last = array_pop($stack);\n            if ($last ===\
    \ null) {\n                return false;\n            }\n            if ($string[$i]\
    \ === ']' && $last !== '[') {\n                return false;\n            }\n\
    \            if ($string[$i] === '}' && $last !== '{') {\n                return\
    \ false;\n            }\n            if ($string[$i] === ')' && $last !== '(')\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ count($stack) === 0;\n}\n", "  $open = 0;\n  $close = 0;\n  for ($i = 0; $i\
    \ < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n      $open++;\n\
    \    } else {\n      $close++;\n    }\n    if ($close > $open) {\n      return\
    \ false;\n    }\n  }\n  return $open == $close;\n}\n", "    $stack = [];\n   \
    \ $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n  \
    \          array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $top = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $top) {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  for ($i = 0;\
    \ $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n      array_push($stack,\
    \ $string[$i]);\n    } else {\n      if (count($stack) == 0) {\n        return\
    \ false;\n      }\n      array_pop($stack);\n    }\n  }\n  return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}',\
    \ ']', ')'];\n    $map = [\n        '}' => '{',\n        ']' => '[',\n       \
    \ ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string); $i++) {\n       \
    \ if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } elseif (in_array($string[$i], $close)) {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($map[$string[$i]] != $last) {\n                return false;\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "    $stack\
    \ = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (empty($stack))\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "    $string\
    \ = str_split($string);\n    $stack = [];\n    foreach ($string as $char) {\n\
    \        if ($char == '[') {\n            array_push($stack, $char);\n       \
    \ } else {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "  $stack = [];\n  $open = ['(', '{', '['];\n  $close = [')', '}',\
    \ ']'];\n  $map = [\n    ')' => '(',\n    '}' => '{',\n    ']' => '['\n  ];\n\
    \  for ($i = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i], $open))\
    \ {\n      array_push($stack, $string[$i]);\n    } elseif (in_array($string[$i],\
    \ $close)) {\n      if (count($stack) === 0) {\n        return false;\n      }\n\
    \      $last = array_pop($stack);\n      if ($last !== $map[$string[$i]]) {\n\
    \        return false;\n      }\n    }\n  }\n  return count($stack) === 0;\n}\n",
  "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    $map = array_combine($open, $close);\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (empty($stack)) {\n                return false;\n            }\n    \
    \        $last = array_pop($stack);\n            if ($map[$last] != $string[$i])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ empty($stack);\n}\n", "  $stack = [];\n  $open = ['(', '{', '['];\n  $close\
    \ = [')', '}', ']'];\n  for ($i = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i],\
    \ $open)) {\n      array_push($stack, $string[$i]);\n    } else if (in_array($string[$i],\
    \ $close)) {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      $last = array_pop($stack);\n      if ($open[array_search($string[$i], $close)]\
    \ != $last) {\n        return false;\n      }\n    }\n  }\n  return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $char = $string[$i];\n        if ($char\
    \ === '[') {\n            array_push($stack, $char);\n        } else {\n     \
    \       if (count($stack) === 0) {\n                return false;\n          \
    \  }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ === 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close =\
    \ [']', '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if\
    \ (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } elseif (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $brackets = ['[', ']'];\n    $bracket_pairs\
    \ = [\n        '[' => ']',\n        ']' => '['\n    ];\n    $string_arr = str_split($string);\n\
    \    foreach ($string_arr as $char) {\n        if (in_array($char, $brackets))\
    \ {\n            if (empty($stack)) {\n                array_push($stack, $char);\n\
    \            } else {\n                $last_char = array_pop($stack);\n     \
    \           if ($bracket_pairs[$last_char] !== $char) {\n                    array_push($stack,\
    \ $last_char);\n                    array_push($stack, $char);\n             \
    \   }\n            }\n        }\n    }\n    return empty($stack);\n}\n", "   \
    \ $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')',\
    \ '}', ']'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $open = ['(',\
    \ '{', '['];\n  $close = [')', '}', ']'];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      if (count($stack) == 0)\
    \ {\n        return false;\n      }\n      $last = array_pop($stack);\n      if\
    \ ($open[array_search($string[$i], $close)] != $last) {\n        return false;\n\
    \      }\n    }\n  }\n  return count($stack) == 0;\n}\n\necho is_nested('(()()()())')\
    \ . PHP_EOL; // true\necho is_nested('((()()()())') . PHP_EOL; // false\necho\
    \ is_nested('(()()()()))') . PHP_EOL; // false\necho is_nested('((()()()()))')\
    \ . PHP_EOL; // true\necho is_nested('((()()()()))') . PHP_EOL; // true\necho\
    \ is_nested('((()()()()))') . PHP_EOL; // true\necho is_nested('((()()()()))')\
    \ . PHP_EOL; // true\necho is_nested('((()()()()))') . PHP_EOL; // true\necho\
    \ is_nested('((()()()()))') . PHP_EOL; // true\necho is_nested('((()()()()))')\
    \ . PHP_EOL; // true\necho is_nested('((()()()()))') . PHP_EOL; // true\necho\
    \ is_nested('((()()()()))') . PHP_EOL; // true\necho is_nested('((()()()()))')\
    \ . PHP_EOL; // true\necho is_nested('((()()()()))') . PHP_EOL; // true\necho\
    \ is_nested('((()()()()))') . PHP_EOL; //", "  $stack = [];\n  for ($i = 0; $i\
    \ < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n      array_push($stack,\
    \ $string[$i]);\n    } else {\n      if (count($stack) > 0) {\n        array_pop($stack);\n\
    \      } else {\n        return false;\n      }\n    }\n  }\n  return count($stack)\
    \ == 0;\n}\n", "  $stack = [];\n  $open = ['[', '{', '('];\n  $close = [']', '}',\
    \ ')'];\n  for ($i = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i],\
    \ $open)) {\n      array_push($stack, $string[$i]);\n    } else if (in_array($string[$i],\
    \ $close)) {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      $last = array_pop($stack);\n      if ($open[array_search($string[$i], $close)]\
    \ != $last) {\n        return false;\n      }\n    }\n  }\n  return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\n$string = '[[]]';\nvar_dump(is_nested($string));\n\
    \n$string = '[[[]]]';\nvar_dump(is_nested($string));\n\n$string = '[[]]]';\nvar_dump(is_nested($string));\n\
    \n$string = '[[[]]';\nvar_dump(is_nested($string));\n\n$string = '[[]]';\nvar_dump(is_nested($string));\n\
    \n$string = '[]';\nvar_dump(is_nested($string));\n\n$string = '][';\nvar_dump(is_nested($string));\n\
    \n$string = '[]][[]';\nvar_dump(is_nested($string));\n\n$string = '[[[]]][[]]';\n\
    var_dump(is_nested($string));\n\n$string = '[[[]]][[]]]';\nvar_dump(is_nested($string));\n\
    \n$string = '[[[]]][[]]';\nvar_dump(is_nested($string));\n\n$string = '[[[]]][[]]';\n\
    var_dump(is_nested($string));\n\n$string = '[[[]]][[]]';\nvar_dump(is_nested($string));\n\
    \n$string = '[[[]]][[]]';\nvar_dump(is_nested($string));\n\n$string = '[[[]]][[]]';\n\
    var_dump(is_nested($string));\n\n$string = '[[[]]][[]]';\nvar_dump(is_nested($string));\n\
    \n$string = '[[[]]][[]]';\nvar_dump(is_nested($string));\n\n$string = '[[[]]][[",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']',\
    \ '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $map = array_combine($open,\
    \ $close);\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($map[$last]\
    \ != $string[$i]) {\n                return false;\n            }\n        }\n\
    \    }\n    return empty($stack);\n}\n", "    $stack = [];\n    $open = ['[',\
    \ '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $map = array_combine($open,\
    \ $close);\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($map[$last]\
    \ != $string[$i]) {\n                return false;\n            }\n        }\n\
    \    }\n    return empty($stack);\n}\n", "    $open = 0;\n    $close = 0;\n  \
    \  for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            $open++;\n        } else if ($string[$i] == ']') {\n        \
    \    $close++;\n        }\n        if ($close > $open) {\n            return false;\n\
    \        }\n    }\n    if ($open == $close) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "    $stack = [];\n    $open = ['[',\
    \ '{', '('];\n    $close = [']', '}', ')'];\n    $pairs = [\n        ']' => '[',\n\
    \        '}' => '{',\n        ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (empty($stack)) {\n                return false;\n            }\n    \
    \        $last = array_pop($stack);\n            if ($last != $pairs[$string[$i]])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ empty($stack);\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close\
    \ = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n       \
    \ if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "  $stack = [];\n  $brackets = [\n    ']' => '[',\n    '}' => '{',\n\
    \    ')' => '('\n  ];\n  for ($i = 0; $i < strlen($string); $i++) {\n    if (array_key_exists($string[$i],\
    \ $brackets)) {\n      if (end($stack) === $brackets[$string[$i]]) {\n       \
    \ array_pop($stack);\n      } else {\n        return false;\n      }\n    } else\
    \ {\n      array_push($stack, $string[$i]);\n    }\n  }\n  return count($stack)\
    \ === 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close =\
    \ [']', '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if\
    \ (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $top) {\n       \
    \         return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')',\
    \ '}', ']'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $pairs\
    \ = [\n    '[' => ']',\n    '{' => '}',\n    '(' => ')'\n  ];\n  for ($i = 0;\
    \ $i < strlen($string); $i++) {\n    if (in_array($string[$i], array_keys($pairs)))\
    \ {\n      array_push($stack, $string[$i]);\n    } else if (in_array($string[$i],\
    \ array_values($pairs))) {\n      if (empty($stack)) {\n        return false;\n\
    \      }\n      $last = array_pop($stack);\n      if ($pairs[$last] != $string[$i])\
    \ {\n        return false;\n      }\n    }\n  }\n  return empty($stack);\n}\n",
  "    $stack = [];\n    $brackets = ['(', ')', '[', ']', '{', '}'];\n    $pairs =\
    \ [\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    ];\n  \
    \  for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $brackets)) {\n            if (in_array($string[$i], array_keys($pairs))) {\n\
    \                array_push($stack, $string[$i]);\n            } else {\n    \
    \            if (count($stack) == 0) {\n                    return false;\n  \
    \              }\n                $last = array_pop($stack);\n               \
    \ if ($pairs[$last] != $string[$i]) {\n                    return false;\n   \
    \             }\n            }\n        }\n    }\n    return count($stack) ==\
    \ 0;\n}\n", "    $stack = [];\n    $brackets = [\n        ']' => '[',\n      \
    \  '}' => '{',\n        ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], ['[', '{', '('])) {\n           \
    \ array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i], [']',\
    \ '}', ')'])) {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            $last = array_pop($stack);\n            if\
    \ ($last != $brackets[$string[$i]]) {\n                return false;\n       \
    \     }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack =\
    \ [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n    \
    \    if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\n$string = \"[[[]]]\";\necho is_nested($string);",
  "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($close[array_search($last,\
    \ $open)] != $string[$i]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n   \
    \ $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $pairs = [\n  \
    \      ')' => '(',\n        '}' => '{',\n        ']' => '['\n    ];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($last\
    \ != $pairs[$string[$i]]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  for\
    \ ($i = 0; $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n    \
    \  array_push($stack, $string[$i]);\n    } else {\n      if (count($stack) ==\
    \ 0) {\n        return false;\n      }\n      array_pop($stack);\n    }\n  }\n\
    \  return count($stack) == 0;\n}\n", "  $open = 0;\n  $close = 0;\n  for ($i =\
    \ 0; $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n      $open++;\n\
    \    } else {\n      $close++;\n    }\n    if ($close > $open) {\n      return\
    \ false;\n    }\n  }\n  return $open == $close;\n}\n", "    $stack = [];\n   \
    \ $brackets = ['[', ']'];\n    $len = strlen($string);\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        if ($string[$i] === $brackets[0]) {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) === 0) {\n  \
    \              return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) === 0;\n}\n", "  $stack = [];\n  $brackets\
    \ = [\n    '(' => ')',\n    '[' => ']',\n    '{' => '}'\n  ];\n  for ($i = 0;\
    \ $i < strlen($string); $i++) {\n    $char = $string[$i];\n    if (array_key_exists($char,\
    \ $brackets)) {\n      array_push($stack, $char);\n    } else {\n      if (count($stack)\
    \ === 0) {\n        return false;\n      }\n      $last = array_pop($stack);\n\
    \      if ($brackets[$last] !== $char) {\n        return false;\n      }\n   \
    \ }\n  }\n  return count($stack) === 0;\n}\n", "  $stack = [];\n  $open = ['[',\
    \ '{', '('];\n  $close = [']', '}', ')'];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      if (count($stack) == 0)\
    \ {\n        return false;\n      }\n      $last = array_pop($stack);\n      if\
    \ ($open[array_search($string[$i], $close)] != $last) {\n        return false;\n\
    \      }\n    }\n  }\n  return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            array_pop($stack);\n        }\n    }\n    return count($stack) ==\
    \ 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if\
    \ ($char == '[') {\n            array_push($stack, $char);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == \"[\") {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n\
    \    $map = [\n        ']' => '[',\n        '}' => '{',\n        ')' => '('\n\
    \    ];\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n\
    \        if (isset($map[$char])) {\n            if (array_pop($stack) !== $map[$char])\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    $stack[] = $char;\n        }\n    }\n    return count($stack) === 0;\n}\n",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            }\n            array_pop($stack);\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[][][]') . \"\\n\";\necho is_nested('[][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][]') . \"\\n\";\necho is_nested('[]') .\
    \ \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[][][]') . \"\\\
    n\";\necho is_nested('[][][][]') . \"\\n\";\necho is_nested('[][][][][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho\
    \ is_nested('[][][]') . \"\\n\";\necho is_nested('[][][][]') . \"\\n\";\necho\
    \ is_nested('[][][][][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[][][]') . \"\\n\";\necho is_nested('[][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][]') . \"\\n\";\necho is_nested('[]') .\
    \ \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[][][]') . \"\\\
    n\";\necho is_nested('[][][][]') . \"\\n\";\necho is_nested('[][][][][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[][]') .", "    $stack\
    \ = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return true;\n}\n", "\t$stack = [];\n\t$open = ['[', '{', '('];\n\
    \t$close = [']', '}', ')'];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\tif (in_array($string[$i], $open)) {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else if (in_array($string[$i], $close)) {\n\t\t\tif (count($stack) == 0)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif\
    \ ($open[array_search($top, $open)] != $string[$i]) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\n$string = '{[()]}';\n\
    echo is_nested($string);", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return true;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    $len = strlen($string);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if (in_array($string[$i], $open)) {\n     \
    \       array_push($stack, $string[$i]);\n        } else {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            $top = array_pop($stack);\n\
    \            if ($open[array_search($top, $open)] != $close[array_search($string[$i],\
    \ $close)]) {\n                return false;\n            }\n        }\n    }\n\
    \    return empty($stack);\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "  $string = str_split($string);\n  $stack\
    \ = [];\n  foreach ($string as $char) {\n    if ($char == '(') {\n      array_push($stack,\
    \ $char);\n    } elseif ($char == ')') {\n      if (count($stack) == 0) {\n  \
    \      return false;\n      } else {\n        array_pop($stack);\n      }\n  \
    \  }\n  }\n  return count($stack) == 0;\n}\n", "  $stack = [];\n  $open = ['[',\
    \ '{', '('];\n  $close = [']', '}', ')'];\n  $map = [\n    ']' => '[',\n    '}'\
    \ => '{',\n    ')' => '('\n  ];\n  for ($i = 0; $i < strlen($string); $i++) {\n\
    \    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      if (count($stack) == 0)\
    \ {\n        return false;\n      }\n      $last = array_pop($stack);\n      if\
    \ ($last != $map[$string[$i]]) {\n        return false;\n      }\n    }\n  }\n\
    \  return count($stack) == 0;\n}\n\necho is_nested('[{}]'); // true\necho is_nested('[{]');\
    \ // false\necho is_nested('[{}]{}'); // true\necho is_nested('[{}]{'); // false\n\
    echo is_nested('[{}]{}['); // false\necho is_nested('[{}]{}[{}]'); // true\necho\
    \ is_nested('[{}]{}[{}]{}'); // true\necho is_nested('[{}]{}[{}]{}['); // false\n\
    echo is_nested('[{}]{}[{}]{}[{}]'); // true\necho is_nested('[{}]{}[{}]{}[{}]{}');\
    \ // true\necho is_nested('[{}]{}[{}]{}[{}]{}['); // false\necho is_nested('[{}]{}[{}]{}[{}]{}[{}]');\
    \ // true\necho is_nested('[{}]{}[{}]{}[{}]{}[{}]{}'); // true\necho is_nested('[{}]{",
  "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $last) {\n      \
    \          return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "  $stack = [];\n  for ($i = 0; $i < strlen($string); $i++) {\n\
    \    if ($string[$i] == '[') {\n      array_push($stack, $string[$i]);\n    }\
    \ else {\n      if (empty($stack)) {\n        return false;\n      } else {\n\
    \        array_pop($stack);\n      }\n    }\n  }\n  return empty($stack);\n}\n\
    \necho is_nested('[]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[]]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[][]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[][][]') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_nested('[][][][]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]][[]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[][]][[') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('][') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]][')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[][][][][]') ? 'true' :\
    \ 'false';\necho \"\\n\";\necho is_nested('[]') ? 'true' : 'false';\necho \"\\\
    n\";\necho is_nested('[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')',\
    \ '}', ']'];\n    $pairs = [\n        ')' => '(',\n        '}' => '{',\n     \
    \   ']' => '['\n    ];\n    for ($i = 0; $i < strlen($string); $i++) {\n     \
    \   if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($last != $pairs[$string[$i]]) {\n                return false;\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "    $stack\
    \ = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $string[$i];\n\
    \        if ($char == '[') {\n            array_push($stack, $char);\n       \
    \ } else {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $brackets = ['{', '}', '[', ']', '(', ')'];\n    $stack =\
    \ [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $brackets)) {\n            if (empty($stack)) {\n                array_push($stack,\
    \ $string[$i]);\n            } else {\n                $last = array_pop($stack);\n\
    \                if ($last == '{' && $string[$i] == '}') {\n                 \
    \   continue;\n                } else if ($last == '[' && $string[$i] == ']')\
    \ {\n                    continue;\n                } else if ($last == '(' &&\
    \ $string[$i] == ')') {\n                    continue;\n                } else\
    \ {\n                    array_push($stack, $last);\n                    array_push($stack,\
    \ $string[$i]);\n                }\n            }\n        }\n    }\n    return\
    \ empty($stack);\n}\n\necho is_nested('[{}]');\necho is_nested('[{]}');\necho\
    \ is_nested('[{}]{}');\necho is_nested('[{}]{}[]');\necho is_nested('[{}]{}[[]');\n\
    echo is_nested('[{}]{}[[]{}]');\necho is_nested('[{}]{}[[]{}]{}');\necho is_nested('[{}]{}[[]{}]{}[]');\n\
    echo is_nested('[{}]{}[[]{}]{}[][]');\necho is_nested('[{}]{}[[]{}]{}[][]{}');\n\
    echo is_nested('[{}]{}[[]{}]{}[][]{}[]');\necho is_nested('[{}]{}[[]{}]{}[][]{}[][]');\n\
    echo is_nested('[{}]{}[[]{}]{}[][]{}[][][]');\necho is_nested('[{}]{", "    $stack\
    \ = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $map\
    \ = array_combine($open, $close);\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($map[$last] != $string[$i])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "  $stack = [];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if ($string[$i] == '[') {\n      array_push($stack, $string[$i]);\n\
    \    } else {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      array_pop($stack);\n    }\n  }\n  return count($stack) == 0;\n}\n\necho\
    \ is_nested('[][]') . \"\\n\";\necho is_nested('[][][]') . \"\\n\";\necho is_nested('[][][][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[][][][][]') .\
    \ \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[][][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][]') . \"\\n\";\necho is_nested('[[][]][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][]') . \"\\n\";\necho is_nested('[[][][]][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][][]') . \"\\n\";\necho is_nested('[[][][][]][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][][][]') . \"\\n\";\necho is_nested('[[][][][][]][][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][][][][]') . \"\\n\";\necho is_nested('[[][][][][][]][][][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][][][][][][]') . \"\\n\";\necho is_nested('[[][][][][][][]][][][][][][][]')\
    \ . \"\\n\";\necho is_nested('[][][][][][][][][][][][][][][]')", "  $stack = [];\n\
    \  $open = ['[', '{', '('];\n  $close = [']', '}', ')'];\n  for ($i = 0; $i <\
    \ strlen($string); $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack,\
    \ $string[$i]);\n    } else if (in_array($string[$i], $close)) {\n      $last\
    \ = array_pop($stack);\n      if ($open[array_search($string[$i], $close)] !=\
    \ $last) {\n        return false;\n      }\n    }\n  }\n  return count($stack)\
    \ == 0;\n}\n\necho is_nested('[{}]') . PHP_EOL;\necho is_nested('[{]}') . PHP_EOL;\n\
    echo is_nested('[{}]{}') . PHP_EOL;\necho is_nested('[{}]{}[]') . PHP_EOL;\necho\
    \ is_nested('[{}]{}[{}]') . PHP_EOL;\necho is_nested('[{}]{}[{}]{}') . PHP_EOL;\n\
    echo is_nested('[{}]{}[{}]{}[]') . PHP_EOL;\necho is_nested('[{}]{}[{}]{}[') .\
    \ PHP_EOL;\necho is_nested('[{}]{}[{}]{}[{}]') . PHP_EOL;\necho is_nested('[{}]{}[{}]{}[{}]{}')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[{}]{}[{}]{}[]') . PHP_EOL;\necho is_nested('[{}]{}[{}]{}[{}]{}[')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[{}]{}[{}]{}[{}]') . PHP_EOL;\necho is", " \
    \   $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    $map = [\n        ']' => '[',\n        '}' => '{',\n        ')' => '('\n\
    \    ];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($last\
    \ != $map[$string[$i]]) {\n                return false;\n            }\n    \
    \    }\n    }\n    return empty($stack);\n}\n", "  $stack = [];\n  $open = ['[',\
    \ '{', '('];\n  $close = [']', '}', ')'];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      $last = array_pop($stack);\n\
    \      if ($last === null) {\n        return false;\n      }\n      if ($string[$i]\
    \ === ']' && $last !== '[') {\n        return false;\n      }\n      if ($string[$i]\
    \ === '}' && $last !== '{') {\n        return false;\n      }\n      if ($string[$i]\
    \ === ')' && $last !== '(') {\n        return false;\n      }\n    }\n  }\n  return\
    \ count($stack) === 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n\
    \    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if (in_array($string[$i], $open)) {\n            array_push($stack, $string[$i]);\n\
    \        } else if (in_array($string[$i], $close)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n\
    \            if ($open[array_search($string[$i], $close)] != $top) {\n       \
    \         return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "  $stack = [];\n  $open = ['[', '{', '('];\n\
    \  $close = [']', '}', ')'];\n  $map = array_combine($open, $close);\n  for ($i\
    \ = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i], $open)) {\n\
    \      array_push($stack, $string[$i]);\n    } else if (in_array($string[$i],\
    \ $close)) {\n      if (empty($stack)) {\n        return false;\n      }\n   \
    \   $last = array_pop($stack);\n      if ($map[$last] != $string[$i]) {\n    \
    \    return false;\n      }\n    }\n  }\n  return empty($stack);\n}\n\necho is_nested('[{}]')\
    \ . PHP_EOL;\necho is_nested('[{]}') . PHP_EOL;\necho is_nested('[{}]{}') . PHP_EOL;\n\
    echo is_nested('[{}]{') . PHP_EOL;\necho is_nested('[{}]{}[') . PHP_EOL;\necho\
    \ is_nested('[{}]{}[]') . PHP_EOL;\necho is_nested('[{}]{}[]{}') . PHP_EOL;\n\
    echo is_nested('[{}]{}[]{}[') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]') . PHP_EOL;\n\
    echo is_nested('[{}]{}[]{}[]{}') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]{}')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]{}[') . PHP_E", "    $stack = [];\n\
    \    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($close[array_search($last,\
    \ $open)] != $string[$i]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $open\
    \ = ['[', '{', '('];\n  $close = [']', '}', ')'];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else {\n      $last = array_pop($stack);\n      if ($open[array_search($last,\
    \ $open)] != $string[$i]) {\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n", "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')',\
    \ '}', ']'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char =\
    \ $string[$i];\n        if (in_array($char, $open)) {\n            array_push($stack,\
    \ $char);\n        } elseif (in_array($char, $close)) {\n            $last = array_pop($stack);\n\
    \            if ($open[array_search($char, $close)] != $last) {\n            \
    \    return false;\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']',\
    \ '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $pairs\
    \ = [\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    ];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ array_keys($pairs))) {\n            array_push($stack, $string[$i]);\n     \
    \   } elseif (in_array($string[$i], array_values($pairs))) {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($pairs[$last] != $string[$i]) {\n                return false;\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "    $stack\
    \ = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            $last = array_pop($stack);\n            if ($close[array_search($last,\
    \ $open)] != $string[$i]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return true;\n}\n", "    $stack = [];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $char = $string[$i];\n        if\
    \ ($char == '[') {\n            array_push($stack, $char);\n        } else if\
    \ ($char == ']') {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            }\n            array_pop($stack);\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n  \
    \  $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $pairs = [\n \
    \       ']' => '[',\n        '}' => '{',\n        ')' => '('\n    ];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($last\
    \ != $pairs[$string[$i]]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n   \
    \ $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if (in_array($string[$i], $open)) {\n  \
    \          array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "    $brackets = 0;\n\
    \    $nested = false;\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            $brackets++;\n            if ($brackets\
    \ > 1) {\n                $nested = true;\n            }\n        } else if ($string[$i]\
    \ == ']') {\n            $brackets--;\n        }\n    }\n    return $nested;\n\
    }\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}',\
    \ ')'];\n    $pairs = [\n        ']' => '[',\n        '}' => '{',\n        ')'\
    \ => '('\n    ];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($last\
    \ != $pairs[$string[$i]]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return empty($stack);\n}\n", "    $stack = [];\n    $brackets\
    \ = ['{' => '}', '[' => ']', '(' => ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], array_keys($brackets))) {\n     \
    \       array_push($stack, $string[$i]);\n        } else {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            $last = array_pop($stack);\n\
    \            if ($brackets[$last] != $string[$i]) {\n                return false;\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "    $stack\
    \ = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $pairs\
    \ = [\n        ']' => '[',\n        '}' => '{',\n        ')' => '('\n    ];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($last\
    \ != $pairs[$string[$i]]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  for\
    \ ($i = 0; $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n    \
    \  array_push($stack, $string[$i]);\n    } else if ($string[$i] == ']') {\n  \
    \    if (empty($stack)) {\n        return false;\n      } else {\n        array_pop($stack);\n\
    \      }\n    }\n  }\n  return empty($stack);\n}\n\necho is_nested('[][]') ? 'true'\
    \ : 'false';\necho \"\\n\";\necho is_nested('[][][]') ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_nested('[][][][]') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_nested('[][][][][]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[][][][][][]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[][][][][][][]') ? 'true'\
    \ : 'false';\necho \"\\n\";\necho is_nested('[][][][][][][][]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[][][][][][][][][]') ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_nested('[][][][][][][][][][]') ? 'true' : 'false';\necho \"\
    \\n\";\necho is_nested('[][][][][][][][][][][]') ? 'true' : 'false';\necho \"\\\
    n\";\necho is_nested('[][][][][][][][][][][][]') ? 'true' : 'false';\necho \"\\\
    n\";\necho is_nested('[][][][][][][][][][][][][]') ? 'true' : 'false';\necho \"\
    \\n\";\necho is_nested('[][][][][][][][][][][][][][]') ? 'true' : 'false';\necho\
    \ \"\\n\";\necho is_nested('", "\t$stack = [];\n\t$open = ['(', '{', '['];\n\t\
    $close = [')', '}', ']'];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t\
    if (in_array($string[$i], $open)) {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else if (in_array($string[$i], $close)) {\n\t\t\tif (count($stack) == 0) {\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\t$last = array_pop($stack);\n\t\t\tif ($open[array_search($string[$i],\
    \ $close)] != $last) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "\t$stack = [];\n\t$open = ['(', '{', '['];\n\
    \t$close = [')', '}', ']'];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t\
    if (in_array($string[$i], $open)) {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else if (in_array($string[$i], $close)) {\n\t\t\tif (count($stack) == 0) {\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\t$last = array_pop($stack);\n\t\t\tif ($open[array_search($string[$i],\
    \ $close)] != $last) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']',\
    \ '}', ')'];\n    $pairs = ['[]', '{}', '()'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    if (empty($stack)) {\n                return false;\n            }\n    \
    \        $last = array_pop($stack);\n            if (!in_array($last . $string[$i],\
    \ $pairs)) {\n                return false;\n            }\n        }\n    }\n\
    \    return empty($stack);\n}\n", "    $stack = [];\n    $brackets = [\n     \
    \   ']' => '[',\n        '}' => '{',\n        ')' => '('\n    ];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if\
    \ (array_key_exists($char, $brackets)) {\n            if (array_pop($stack) !==\
    \ $brackets[$char]) {\n                return false;\n            }\n        }\
    \ else {\n            array_push($stack, $char);\n        }\n    }\n    return\
    \ empty($stack);\n}\n", "  $stack = [];\n  $open = ['(', '{', '['];\n  $close\
    \ = [')', '}', ']'];\n  for ($i = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i],\
    \ $open)) {\n      array_push($stack, $string[$i]);\n    } else if (in_array($string[$i],\
    \ $close)) {\n      $index = array_search($string[$i], $close);\n      if (empty($stack)\
    \ || $stack[count($stack) - 1] !== $open[$index]) {\n        return false;\n \
    \     }\n      array_pop($stack);\n    }\n  }\n  return empty($stack);\n}\n",
  "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $top = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $top) {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['(',\
    \ '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $map = array_combine($open,\
    \ $close);\n    foreach (str_split($string) as $char) {\n        if (in_array($char,\
    \ $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char,\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($map[$last]\
    \ != $char) {\n                return false;\n            }\n        }\n    }\n\
    \    return empty($stack);\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n\
    \    $close = [']', '}', ')'];\n    $map = [\n        ']' => '[',\n        '}'\
    \ => '{',\n        ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($last != $map[$string[$i]])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n\
    \    $close = [']', '}', ')'];\n    $map = [\n        ']' => '[',\n        '}'\
    \ => '{',\n        ')' => '('\n    ];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $top = array_pop($stack);\n            if ($top != $map[$string[$i]])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n\necho is_nested('[{}]') . PHP_EOL;\necho is_nested('[{]')\
    \ . PHP_EOL;\necho is_nested('[{}]{}') . PHP_EOL;\necho is_nested('[{}]{}[') .\
    \ PHP_EOL;\necho is_nested('[{}]{}[]') . PHP_EOL;\necho is_nested('[{}]{}[]{}')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]{}')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]{}[')", "  $stack = [];\n  for ($i\
    \ = 0; $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n      array_push($stack,\
    \ $string[$i]);\n    } else {\n      if (count($stack) == 0) {\n        return\
    \ false;\n      }\n      array_pop($stack);\n    }\n  }\n  return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "  $stack = [];\n  $pairs = [\n    '(' =>\
    \ ')',\n    '[' => ']',\n    '{' => '}'\n  ];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (array_key_exists($string[$i], $pairs)) {\n      array_push($stack,\
    \ $string[$i]);\n    } else {\n      if (empty($stack)) {\n        return false;\n\
    \      }\n      $last = array_pop($stack);\n      if ($pairs[$last] !== $string[$i])\
    \ {\n        return false;\n      }\n    }\n  }\n  return empty($stack);\n}\n",
  "  $stack = [];\n  $open = ['[', '{', '('];\n  $close = [']', '}', ')'];\n  $pairs\
    \ = [\n    ']' => '[',\n    '}' => '{',\n    ')' => '('\n  ];\n  for ($i = 0;\
    \ $i < strlen($string); $i++) {\n    if (in_array($string[$i], $open)) {\n   \
    \   array_push($stack, $string[$i]);\n    } else if (in_array($string[$i], $close))\
    \ {\n      if (count($stack) === 0) {\n        return false;\n      }\n      $last\
    \ = array_pop($stack);\n      if ($last !== $pairs[$string[$i]]) {\n        return\
    \ false;\n      }\n    }\n  }\n  return count($stack) === 0;\n}\n", "  $stack\
    \ = [];\n  $open = ['(', '{', '['];\n  $close = [')', '}', ']'];\n  for ($i =\
    \ 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i], $open)) {\n\
    \      array_push($stack, $string[$i]);\n    } elseif (in_array($string[$i], $close))\
    \ {\n      $last = array_pop($stack);\n      if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n        return false;\n      }\n    }\n  }\n  return count($stack)\
    \ == 0;\n}\n\necho is_nested('[(])');", "\t$open = 0;\n\t$close = 0;\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t} else if ($string[$i] == ']') {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close >\
    \ $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested('[[]][]');",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (empty($stack)) {\n                return false;\n           \
    \ } else {\n                array_pop($stack);\n            }\n        }\n   \
    \ }\n    return empty($stack);\n}\n", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $last_open = array_pop($stack);\n            if ($open[array_search($last_open,\
    \ $open)] != $string[$i]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n   \
    \ $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $map = array_combine($open,\
    \ $close);\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($map[$last]\
    \ != $string[$i]) {\n                return false;\n            }\n        }\n\
    \    }\n    return empty($stack);\n}\n", "    $stack = [];\n    $brackets = ['(',\
    \ ')', '[', ']', '{', '}'];\n    $pairs = ['()', '[]', '{}'];\n    $string = str_split($string);\n\
    \    foreach ($string as $char) {\n        if (in_array($char, $brackets)) {\n\
    \            if (empty($stack)) {\n                array_push($stack, $char);\n\
    \            } else {\n                $last = end($stack);\n                if\
    \ ($last . $char === $pairs[0] || $last . $char === $pairs[1] || $last . $char\
    \ === $pairs[2]) {\n                    array_pop($stack);\n                }\
    \ else {\n                    array_push($stack, $char);\n                }\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "  $stack =\
    \ [];\n  for ($i = 0; $i < strlen($string); $i++) {\n    $char = $string[$i];\n\
    \    if ($char == '[') {\n      array_push($stack, $char);\n    } else {\n   \
    \   if (count($stack) == 0) {\n        return false;\n      }\n      array_pop($stack);\n\
    \    }\n  }\n  return count($stack) == 0;\n}\n", "  $stack = [];\n  $open = ['[',\
    \ '{', '('];\n  $close = [']', '}', ')'];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else {\n      if (empty($stack)) {\n        return false;\n      }\n  \
    \    $last = array_pop($stack);\n      if ($open[array_search($last, $open)] !==\
    \ $close[array_search($string[$i], $close)]) {\n        return false;\n      }\n\
    \    }\n  }\n  return empty($stack);\n}\n", "    $stack = [];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n \
    \   $brackets = ['{', '[', '('];\n    $closing_brackets = ['}', ']', ')'];\n \
    \   for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $brackets)) {\n            array_push($stack, $string[$i]);\n        } elseif\
    \ (in_array($string[$i], $closing_brackets)) {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            $last_bracket\
    \ = array_pop($stack);\n            if ($string[$i] == '}' && $last_bracket !=\
    \ '{') {\n                return false;\n            } elseif ($string[$i] ==\
    \ ']' && $last_bracket != '[') {\n                return false;\n            }\
    \ elseif ($string[$i] == ')' && $last_bracket != '(') {\n                return\
    \ false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n",
  "  $stack = [];\n  $open = ['(', '{', '['];\n  $close = [')', '}', ']'];\n  $pairs\
    \ = [')' => '(', '}' => '{', ']' => '['];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } elseif (in_array($string[$i], $close)) {\n      if (empty($stack)) {\n\
    \        return false;\n      } elseif ($stack[count($stack) - 1] === $pairs[$string[$i]])\
    \ {\n        array_pop($stack);\n      } else {\n        return false;\n     \
    \ }\n    }\n  }\n  return empty($stack);\n}\n", "    $stack = [];\n    $open =\
    \ ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (in_array($string[$i], $open))\
    \ {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $open = ['[',\
    \ '{', '('];\n  $close = [']', '}', ')'];\n  $pairs = [\n    ']' => '[',\n   \
    \ '}' => '{',\n    ')' => '('\n  ];\n  for ($i = 0; $i < strlen($string); $i++)\
    \ {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      if (count($stack) == 0)\
    \ {\n        return false;\n      }\n      $last = array_pop($stack);\n      if\
    \ ($last != $pairs[$string[$i]]) {\n        return false;\n      }\n    }\n  }\n\
    \  return count($stack) == 0;\n}\n\necho is_nested('[{()}]') . \"\\n\"; // true\n\
    echo is_nested('[{]}') . \"\\n\"; // false\necho is_nested('[{}]') . \"\\n\";\
    \ // true\necho is_nested('[{]') . \"\\n\"; // false\necho is_nested('[{}]{}')\
    \ . \"\\n\"; // true\necho is_nested('[{}]{') . \"\\n\"; // false\necho is_nested('[{}]{}[')\
    \ . \"\\n\"; // false\necho is_nested('[{}]{}[]') . \"\\n\"; // true\necho is_nested('[{}]{}[{}]')\
    \ . \"\\n\"; // true\necho is_nested('[{}]{}[{}]{}') . \"\\n\"; // true\necho\
    \ is_nested('[{}]{}[{}]{') . \"\\n\"; // false\necho is_nested('[{}]{}[{}]{}[')\
    \ . \"\\n\"; // false\necho is_nested('[{}]{}[{}]{}[]') . \"\\n\"; // true\necho\
    \ is_nested('[{}]{}[{}]{", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        $char = $string[$i];\n        if ($char ==\
    \ '[') {\n            array_push($stack, $char);\n        } else if ($char ==\
    \ ']') {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $brackets = ['[' => ']'];\n    for ($i =\
    \ 0; $i < strlen($string); $i++) {\n        if (array_key_exists($string[$i],\
    \ $brackets)) {\n            array_push($stack, $string[$i]);\n        } else\
    \ {\n            if (empty($stack)) {\n                return false;\n       \
    \     }\n            $last = array_pop($stack);\n            if ($brackets[$last]\
    \ != $string[$i]) {\n                return false;\n            }\n        }\n\
    \    }\n    return empty($stack);\n}\n", "    $stack = [];\n    $open = ['[',\
    \ '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for ($i\
    \ = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n    \
    \        array_push($stack, $string[$i]);\n        } else if ($string[$i] == ']')\
    \ {\n            if (count($stack) == 0) {\n                return false;\n  \
    \          } else {\n                array_pop($stack);\n            }\n     \
    \   }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            }\n     \
    \       array_pop($stack);\n        }\n    }\n    return count($stack) == 0;\n\
    }\n", "  $stack = [];\n  $open = ['[', '{', '('];\n  $close = [']', '}', ')'];\n\
    \  $map = [\n    ']' => '[',\n    '}' => '{',\n    ')' => '('\n  ];\n  for ($i\
    \ = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i], $open)) {\n\
    \      array_push($stack, $string[$i]);\n    } else if (in_array($string[$i],\
    \ $close)) {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      $top = array_pop($stack);\n      if ($top != $map[$string[$i]]) {\n   \
    \     return false;\n      }\n    }\n  }\n  return count($stack) == 0;\n}\n\n\
    echo is_nested('[{}]') . PHP_EOL;\necho is_nested('[{]}') . PHP_EOL;\necho is_nested('[{}]{}')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[') . PHP_EOL;\necho is_nested('[{}]{}[]')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}') . PHP_EOL;\necho is_nested('[{}]{}[]{}[')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]')\
    \ . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]{}') . PHP_EOL;\necho is_nested('[{}]{}[]{}[]{}[]{}[')",
  "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $open = ['[',\
    \ '{', '('];\n  $close = [']', '}', ')'];\n  $map = [\n    ']' => '[',\n    '}'\
    \ => '{',\n    ')' => '('\n  ];\n  for ($i = 0; $i < strlen($string); $i++) {\n\
    \    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      if (count($stack) == 0)\
    \ {\n        return false;\n      }\n      $last = array_pop($stack);\n      if\
    \ ($last != $map[$string[$i]]) {\n        return false;\n      }\n    }\n  }\n\
    \  return count($stack) == 0;\n}\n\necho is_nested('[{()}]') . PHP_EOL;\necho\
    \ is_nested('[{()}]{}') . PHP_EOL;\necho is_nested('[{()}]{') . PHP_EOL;\necho\
    \ is_nested('[{()}]{}(') . PHP_EOL;\necho is_nested('[{()}]{}()') . PHP_EOL;\n\
    echo is_nested('[{()}]{}()[]') . PHP_EOL;\necho is_nested('[{()}]{}()[][]') .\
    \ PHP_EOL;\necho is_nested('[{()}]{}()[][]{}') . PHP_EOL;\necho is_nested('[{()}]{}()[][]{}(')\
    \ . PHP_EOL;\necho is_nested('[{()}]{}()[][]{}()') . PHP_EOL;\necho is_nested('[{()}]{}()[][]{}()[]')\
    \ . PHP_EOL;\necho is_nested('[{()}]{}()[][]{}()[][]') . PHP_EOL;\necho is_nested",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "  $stack = [];\n  $open = ['[', '{', '('];\n  $close = [']', '}',\
    \ ')'];\n  $map = [\n    ']' => '[',\n    '}' => '{',\n    ')' => '('\n  ];\n\
    \  for ($i = 0; $i < strlen($string); $i++) {\n    if (in_array($string[$i], $open))\
    \ {\n      array_push($stack, $string[$i]);\n    } else if (in_array($string[$i],\
    \ $close)) {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      $last = array_pop($stack);\n      if ($last != $map[$string[$i]]) {\n \
    \       return false;\n      }\n    }\n  }\n  return count($stack) == 0;\n}\n",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']',\
    \ '}', ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    $pairs = ['[]', '{}',\
    \ '()'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if (!in_array($last\
    \ . $string[$i], $pairs)) {\n                return false;\n            }\n  \
    \      }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n   \
    \ for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '(')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return true;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    $len = strlen($string);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $char = $string[$i];\n        if\
    \ ($char == '[') {\n            array_push($stack, $char);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "    $stack = [];\n    $open = ['[', '{',\
    \ '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } else if (in_array($string[$i], $close)) {\n       \
    \     if (count($stack) == 0) {\n                return false;\n            }\n\
    \            $popped = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $popped) {\n                return false;\n            }\n     \
    \   }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else if ($string[$i]\
    \ == ']') {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return count($stack) == 0;\n}\n", "  $stack = [];\n  $open\
    \ = ['[', '{', '('];\n  $close = [']', '}', ')'];\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (in_array($string[$i], $open)) {\n      array_push($stack, $string[$i]);\n\
    \    } else if (in_array($string[$i], $close)) {\n      if (count($stack) == 0)\
    \ {\n        return false;\n      }\n      $last = array_pop($stack);\n      if\
    \ ($open[array_search($string[$i], $close)] != $last) {\n        return false;\n\
    \      }\n    }\n  }\n  return count($stack) == 0;\n}\n\necho is_nested('[{}]')\
    \ . \"\\n\";\necho is_nested('[{]}') . \"\\n\";\necho is_nested('[{}]{}') . \"\
    \\n\";\necho is_nested('[{}]{}[') . \"\\n\";\necho is_nested('[{}]{}[]') . \"\\\
    n\";\necho is_nested('[{}]{}[]{}') . \"\\n\";\necho is_nested('[{}]{}[]{}[') .\
    \ \"\\n\";\necho is_nested('[{}]{}[]{}[]') . \"\\n\";\necho is_nested('[{}]{}[]{}[]{}')\
    \ . \"\\n\";\necho is_nested('[{}]{}[]{}[]{}[') . \"\\n\";\necho is_nested('[{}]{}[]{}[]{}[]')\
    \ . \"\\n\";\necho is_nested('[{}]{}[]{}[]{}[]{}') . \"\\n\";\necho is_nested('[{}]{}[]{}[]{}[]{}[')\
    \ . \"\\n\";\necho is_nested('[{}]{}[]{}[]{}[]{}[]') . \"\\n\";\necho is_nested('[{}]{}[]{}[]{",
  "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
