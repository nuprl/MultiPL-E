name: HumanEval_131_digits
language: php
prompt: "<?php\n// Given a positive integer n, return the product of the odd digits.\n\
  // Return 0 if all digits are even.\n// For example:\n// >>> digits(1) \n// 1\n\
  // >>> digits(4) \n// 0\nfunction digits($n) {\n"
tests: "function candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765)\
  \ !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543)\
  \ !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468)\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sum = 1;\n    $n = str_split($n);\n    foreach ($n as $value)\
    \ {\n        if ($value % 2 != 0) {\n            $sum *= $value;\n        }\n\
    \    }\n    return $sum;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\n\
    echo \"\\n\";\necho digits(123456789);\necho \"\\n\";\necho digits
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n    \
    \    if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n\
    \    if ($product == 1) {\n        return 0;\n    }\n    return $product;\n}",
  "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n        }\n\
    \    }\n    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\
    \\n\";\necho digits(123456789) . \"\\n\";", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n            $product\
    \ *= $num;\n        }\n    }\n    if ($product == 1) {\n        return 0;\n  \
    \  }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\\
    n\";\necho digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";", "    $digits\
    \ = str_split($n);\n    $odds = array_filter($digits, function($digit) {\n   \
    \     return $digit % 2 !== 0;\n    });\n    if (count($odds) === 0) {\n     \
    \   return 0;\n    }\n    return array_product($odds);\n}\n", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 != 0;\n    });\n    return array_product($odd_digits);\n}\n", "    $n =\
    \ str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n        if ($value\
    \ % 2 !== 0) {\n            $result *= $value;\n        }\n    }\n    return $result;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345) .\
    \ \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234567890123456789)\
    \ . \"\\n\";", "  $product = 1;\n  $n = str_split($n);\n  foreach ($n as $num)\
    \ {\n    if ($num % 2 != 0) {\n      $product *= $num;\n    }\n  }\n  return $product;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;", "\t$digits = str_split($n);\n\t$odd_digits = array_filter($digits,\
    \ function($digit) {\n\t\treturn $digit % 2 !== 0;\n\t});\n\tif (count($odd_digits)\
    \ === 0) {\n\t\treturn 0;\n\t}\n\treturn array_product($odd_digits);\n}\n", " \
    \   $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) ===\
    \ 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n",
  "    $result = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit\
    \ % 2 == 1) {\n            $result *= $digit;\n        }\n        $n = (int)($n\
    \ / 10);\n    }\n    return $result;\n}\n", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $num) {\n        if ($num % 2 !== 0) {\n          \
    \  $product *= $num;\n        }\n    }\n    if ($product === 1) {\n        return\
    \ 0;\n    }\n    return $product;\n}\n\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(1234) . PHP_EOL;\necho\
    \ digits(123456789) . PHP_EOL;\necho digits(1234567890123456789) . PHP_EOL;",
  "\t$n = str_split($n);\n\t$odd = 1;\n\tforeach ($n as $num) {\n\t\tif ($num % 2\
    \ == 1) {\n\t\t\t$odd *= $num;\n\t\t}\n\t}\n\treturn $odd;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;", "    $sum = 1;\n    $n = str_split($n);\n    foreach ($n as $num)\
    \ {\n        if ($num % 2 != 0) {\n            $sum *= $num;\n        }\n    }\n\
    \    return $sum;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho\
    \ digits(12345) . PHP_EOL;\necho digits(1234) . PHP_EOL;\necho digits(12) . PHP_EOL;\n\
    echo digits(123) . PHP_EOL;\necho digits(1234) . PHP_EOL;\necho digits(12345)\
    \ . PHP_EOL;\necho digits(123456) . PHP_EOL;\necho digits(1234567) . PHP_EOL;\n\
    echo digits(12345678) . PHP_EOL;\necho digits(123456789) . PHP_EOL;\necho digits(1234567890)\
    \ . PHP_EOL;\necho digits(12345678901) . PHP_EOL;\necho digits(123456789012) .\
    \ PHP_EOL;\necho digits(1234567890123) . PHP_EOL;\necho digits(12345678901234)\
    \ . PHP_EOL;\necho digits(123456789012345) . PHP_EOL;\necho digits(1234567890123456)\
    \ . PHP_EOL;\necho digits(12345678901234567) . PHP_EOL;\necho digits(123456789012345678)\
    \ . PHP_EOL;\necho digits(1234567890123456789) . PHP_EOL;\necho digits(12345678901234567890)\
    \ . PHP_EOL;\necho digits(123456789012345678901) . PHP_EOL;\necho digits(1234567890123456789012)\
    \ . PHP_EOL;\necho digits(12345678901234567890123) . PHP_EOL;\necho digits(123456789012345678901234)\
    \ . PHP_EOL;\necho digits(12345678901234567", "    $sum = 1;\n    while ($n >\
    \ 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n          \
    \  $sum *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return\
    \ $sum;\n}\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as\
    \ $num) {\n        if ($num % 2 != 0) {\n            $product *= $num;\n     \
    \   }\n    }\n    return $product;\n}\n", "    $product = 1;\n    while ($n >\
    \ 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n          \
    \  $product *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return\
    \ $product;\n}\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 == 1;\n    });\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n\
    \        if ($num % 2 != 0) {\n            $product *= $num;\n        }\n    }\n\
    \    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(12345) . PHP_EOL;\necho digits(123456789) . PHP_EOL;", "    $odds\
    \ = array();\n    $digits = str_split($n);\n    foreach ($digits as $digit) {\n\
    \        if ($digit % 2 != 0) {\n            array_push($odds, $digit);\n    \
    \    }\n    }\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return\
    \ array_product($odds);\n}\n", "    $sum = 1;\n    while ($n > 0) {\n        $digit\
    \ = $n % 10;\n        if ($digit % 2 != 0) {\n            $sum *= $digit;\n  \
    \      }\n        $n = (int)($n / 10);\n    }\n    return $sum;\n}\n", "    $result\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $value) {\n        if ($value\
    \ % 2 == 1) {\n            $result *= $value;\n        }\n    }\n    return $result;\n\
    }\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    return array_product($odd_digits);\n\
    }\n", "    $sum = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n  \
    \      if ($num % 2 == 1) {\n            $sum *= $num;\n        }\n    }\n   \
    \ return $sum;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho\
    \ digits(12345) . PHP_EOL;\necho digits(123456789) . PHP_EOL;", "    $n = str_split($n);\n\
    \    $sum = 1;\n    foreach ($n as $num) {\n        if ($num % 2 == 1) {\n   \
    \         $sum *= $num;\n        }\n    }\n    return $sum;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;", "    $n = str_split($n);\n    $odds = [];\n    foreach ($n as $num)\
    \ {\n        if ($num % 2 != 0) {\n            $odds[] = $num;\n        }\n  \
    \  }\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return array_product($odds);\n\
    }\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n       \
    \ }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789) . PHP_EOL;",
  "    $sum = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n        if\
    \ ($num % 2 != 0) {\n            $sum *= $num;\n        }\n    }\n    return $sum;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) .\
    \ PHP_EOL;\necho digits(1234) . PHP_EOL;\necho digits(123456789) . PHP_EOL;",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n    \
    \    if ($digit % 2 !== 0) {\n            $product *= $digit;\n        }\n   \
    \ }\n    return $product;\n}\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(123) . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;\necho digits(1234567890123456789) . PHP_EOL;", "    $product = 1;\n\
    \    $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit % 2\
    \ != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(123456789)\
    \ . \"\\n\";\necho digits(1234567890123456789) . \"\\n\";", "    $digits = str_split($n);\n\
    \    $odds = array_filter($digits, function($digit) {\n        return $digit %\
    \ 2;\n    });\n    return array_product($odds);\n}\n", "    $digits = str_split($n);\n\
    \    $odds = array_filter($digits, function($digit) {\n        return $digit %\
    \ 2 == 1;\n    });\n    if (count($odds) == 0) {\n        return 0;\n    }\n \
    \   return array_product($odds);\n}\n", "    $odds = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $odds\
    \ *= $digit;\n        }\n    }\n    return $odds;\n}\n", "    $product = 1;\n\
    \    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 != 0) {\n            $product *= $n[$i];\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(123456789)\
    \ . \"\\n\";\necho digits(1234567890123456789) . \"\\n\";", "    $product = 1;\n\
    \    $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit % 2\
    \ != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    return array_product($odd_digits);\n\
    }\n", "    $digits = str_split($n);\n    $odds = array_filter($digits, function($x)\
    \ {\n        return $x % 2 == 1;\n    });\n    if (count($odds) == 0) {\n    \
    \    return 0;\n    }\n    return array_product($odds);\n}\n", "    $n = str_split($n);\n\
    \    $product = 1;\n    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n\
    \            $product *= $num;\n        }\n    }\n    if ($product == 1) {\n \
    \       return 0;\n    }\n    return $product;\n}\necho digits(1);\necho \"\\\
    n\";\necho digits(4);\necho \"\\n\";\necho digits(123456789);\necho \"\\n\";\n\
    echo digits(12);\necho \"\\n\";\necho digits
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) ===\
    \ 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n      \
    \  if ($num % 2 != 0) {\n            $product *= $num;\n        }\n    }\n   \
    \ return $product;\n}\n", "\t$product = 1;\n\t$n = str_split($n);\n\tforeach ($n\
    \ as $value) {\n\t\tif ($value % 2 != 0) {\n\t\t\t$product *= $value;\n\t\t}\n\
    \t}\n\treturn $product;\n}\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(123456789) . PHP_EOL;\necho digits
  "    $digits = str_split($n);\n    $odds = [];\n    foreach ($digits as $digit)\
    \ {\n        if ($digit % 2 == 1) {\n            $odds[] = $digit;\n        }\n\
    \    }\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return array_product($odds);\n\
    }\n", "\t$n = str_split($n);\n\t$odds = array();\n\tforeach ($n as $num) {\n\t\
    \tif ($num % 2 != 0) {\n\t\t\t$odds[] = $num;\n\t\t}\n\t}\n\tif (count($odds)\
    \ == 0) {\n\t\treturn 0;\n\t}\n\treturn array_product($odds);\n}\n", "    $n =\
    \ str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n        if ($num\
    \ % 2 == 1) {\n            $product *= $num;\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) .\
    \ PHP_EOL;\necho digits(1234) . PHP_EOL;\necho digits(123456789) . PHP_EOL;",
  "    $result = 1;\n    $n = str_split($n);\n    foreach ($n as $value) {\n     \
    \   if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\n\
    echo digits(12345) . \"\\n\";\necho digits(1234) . \"\\n\";\necho digits(12) .\
    \ \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234567890123456789)\
    \ . \"\\n\";\necho digits(12345678901234567890123456789) . \"\\n\";\necho digits(123456789012345678901234567890123456789)\
    \ . \"\\n\";\necho digits(1234567890123456789012345678901234567890123456789) .\
    \ \"\\n\";\necho digits(12345678901234567890123456789012345678901234567890123456789)\
    \ . \"\\n\";\necho digits(123456789012345678901234567890123456789012345678901234567890123456789)\
    \ . \"\\n\";\necho digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789)\
    \ . \"\\n\";\necho digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\
    \ . \"\\n\";\necho digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\
    \ . \"\\n\";\necho digits(12345678901234567890123456789012345678901234567890123456789012345678901234567",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2;\n    });\n    if (empty($odd_digits)) {\n    \
    \    return 0;\n    }\n    return array_product($odd_digits);\n}\n", "    $odds\
    \ = array();\n    $digits = str_split($n);\n    foreach ($digits as $digit) {\n\
    \        if ($digit % 2 != 0) {\n            array_push($odds, $digit);\n    \
    \    }\n    }\n    if (count($odds) == 0) {\n        return 0;\n    }\n    $product\
    \ = 1;\n    foreach ($odds as $odd) {\n        $product *= $odd;\n    }\n    return\
    \ $product;\n}\n", "    $digits = str_split($n);\n    $product = 1;\n    foreach\
    \ ($digits as $digit) {\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product;\n}\n", "    $result = 1;\n\
    \    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 != 0) {\n            $result *= $n[$i];\n        }\n    }\n    return $result;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345) .\
    \ \"\\n\";\necho digits(123456789) . \"\\n\";", "    $digits = str_split($n);\n\
    \    $product = 1;\n    foreach ($digits as $digit) {\n        if ($digit % 2\
    \ == 1) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(123) .\
    \ \"\\n\";\necho digits(12345) . \"\\n\";", "    $result = 1;\n    $n = (string)$n;\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n \
    \           $result *= $n[$i];\n        }\n    }\n    return $result;\n}\necho\
    \ digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(123456789) . \"\
    \\n\";", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $number)\
    \ {\n        if ($number % 2 != 0) {\n            $product *= $number;\n     \
    \   }\n    }\n    if ($product == 1) {\n        return 0;\n    }\n    return $product;\n\
    }\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) ===\
    \ 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $result = 1;\n    $n = str_split($n);\n    foreach ($n as $value) {\n    \
    \    if ($value % 2 !== 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\n\
    echo digits(123456789) . \"\\n\";", "    $n = str_split($n);\n    $product = 1;\n\
    \    foreach ($n as $value) {\n        if ($value % 2 == 1) {\n            $product\
    \ *= $value;\n        }\n    }\n    return $product;\n}\necho digits(1) . \"\\\
    n\";\necho digits(4) . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(123456789)\
    \ . \"\\n\";", "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i <\
    \ strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result *=\
    \ $n[$i];\n        }\n    }\n    return $result;\n}\necho digits(1) . \"\\n\"\
    ;\necho digits(4) . \"\\n\";\necho digits(123456789) . \"\\n\";", "\t$n = str_split($n);\n\
    \t$odd = [];\n\tforeach ($n as $num) {\n\t\tif ($num % 2 != 0) {\n\t\t\t$odd[]\
    \ = $num;\n\t\t}\n\t}\n\tif (count($odd) == 0) {\n\t\treturn 0;\n\t}\n\treturn\
    \ array_product($odd);\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(123) . PHP_EOL;\necho digits(1234567890) . PHP_EOL;", "\t$n = str_split($n);\n\
    \t$product = 1;\n\tforeach ($n as $num) {\n\t\tif ($num % 2 != 0) {\n\t\t\t$product\
    \ *= $num;\n\t\t}\n\t}\n\treturn $product;\n}\necho digits(1) . PHP_EOL;\necho\
    \ digits(4) . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as\
    \ $digit) {\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(5) . \"\\n\";\necho digits(10) . \"\\n\";\necho digits(11)\
    \ . \"\\n\";\necho digits(12) . \"\\n\";\necho digits(13) . \"\\n\";\necho digits(14)\
    \ . \"\\n\";\necho digits(15) . \"\\n\";\necho digits(16) . \"\\n\";\necho digits(17)\
    \ . \"\\n\";\necho digits(18) . \"\\n\";\necho digits(19) . \"\\n\";\necho digits(20)\
    \ . \"\\n\";\necho digits(21) . \"\\n\";\necho digits(22) . \"\\n\";\necho digits(23)\
    \ . \"\\n\";\necho digits(24) . \"\\n\";\necho digits(25) . \"\\n\";\necho digits(26)\
    \ . \"\\n\";\necho digits(27) . \"\\n\";\necho digits(28) . \"\\n\";\necho digits(29)\
    \ . \"\\n\";\necho digits(30) . \"\\n\";\necho digits(31) . \"\\n\";\necho digits(32)\
    \ . \"\\n\";\necho digits(33) . \"\\n\";\necho digits(34) . \"\\n\";\necho digits(35)\
    \ . \"\\n\";\necho digits(36) . \"\\n\";\necho digits(37) . \"\\n\";\necho digits(38)\
    \ . \"\\n\";\necho digits(39) . \"\\n\";\necho digits(40) . \"\\n\";\necho digits(41)\
    \ . \"\\n\";\necho digits(42) . \"\\n\";\necho digits(43) . \"\\n\";\necho digits(44)\
    \ . \"\\n\";\necho digits(45) . \"\\n\";\necho digits(46) . \"\\n\";\necho digits(47)\
    \ . \"\\n\";\necho digits(48) . \"\\n\";\necho digits(49) . \"\\n\";\necho digits(50)\
    \ . \"\\n\";\necho digits(51) . \"\\n", "    $digits = str_split($n);\n    $odds\
    \ = array_filter($digits, function($digit) {\n        return $digit % 2 !== 0;\n\
    \    });\n    return array_product($odds);\n}\n", "    $sum = 1;\n    while ($n\
    \ > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n        \
    \    $sum *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return\
    \ $sum;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345)\
    \ . \"\\n\";\necho digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    return array_product($odd_digits);\n\
    }", "    $digits = str_split($n);\n    $odds = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (empty($odds)) {\n    \
    \    return 0;\n    }\n    return array_product($odds);\n}\n", "    $n = str_split($n);\n\
    \    $product = 1;\n    foreach ($n as $num) {\n        if ($num % 2 == 1) {\n\
    \            $product *= $num;\n        }\n    }\n    return $product;\n}\n",
  "    $digits = str_split($n);\n    $odds = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    return array_product($odds);\n\
    }\n", "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n  \
    \      }\n    }\n    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(123456789) . \"\\n\";",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $number) {\n   \
    \     if ($number % 2 == 1) {\n            $product *= $number;\n        }\n \
    \   }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(123) . PHP_EOL;\necho digits(1234) . PHP_EOL;\necho digits(12345)\
    \ . PHP_EOL;\necho digits(123456) . PHP_EOL;\necho digits(1234567) . PHP_EOL;\n\
    echo digits(12345678) . PHP_EOL;\necho digits(123456789) . PHP_EOL;\necho digits(1234567890)\
    \ . PHP_EOL;", "    $odd_digits = [];\n    $digits = str_split($n);\n    foreach\
    \ ($digits as $digit) {\n        if ($digit % 2 == 1) {\n            $odd_digits[]\
    \ = $digit;\n        }\n    }\n    if (count($odd_digits) == 0) {\n        return\
    \ 0;\n    }\n    return array_product($odd_digits);\n}\n", "    $digits = str_split($n);\n\
    \    $odds = array_filter($digits, function($digit) {\n        return $digit %\
    \ 2 !== 0;\n    });\n    if (empty($odds)) {\n        return 0;\n    }\n    return\
    \ array_product($odds);\n}\n", "\t$n = str_split($n);\n\t$odd = [];\n\tforeach\
    \ ($n as $num) {\n\t\tif ($num % 2 !== 0) {\n\t\t\t$odd[] = $num;\n\t\t}\n\t}\n\
    \tif (empty($odd)) {\n\t\treturn 0;\n\t}\n\treturn array_product($odd);\n}\necho\
    \ digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(1234) . PHP_EOL;\n\
    echo digits(12345) . PHP_EOL;\necho digits(123456789) . PHP_EOL;\necho digits
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n    \
    \    if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n    }\n\
    \    return $product;\n}", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 == 1;\n    });\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n", "    $n = str_split($n);\n    $total = 1;\n    foreach ($n as $num) {\n\
    \        if ($num % 2 == 1) {\n            $total *= $num;\n        }\n    }\n\
    \    return $total;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\necho\
    \ \"\\n\";\necho digits(123);\necho \"\\n\";\necho digits(1234);\necho \"\\n\"\
    ;\necho digits(12345);\necho \"\\n\";\necho digits(123456);\necho \"\\n\";\necho\
    \ digits(1234567);\necho \"\\n\";\necho digits(12345678);\necho \"\\n\";\necho\
    \ digits(123456789);\necho \"\\n\";\necho digits(1234567890);\necho \"\\n\";\n\
    echo digits(12345678901);\necho \"\\n\";\necho digits(123456789012);\necho \"\\\
    n\";\necho digits(1234567890123);\necho \"\\n\";\necho digits(12345678901234);\n\
    echo \"\\n\";\necho digits(123456789012345);\necho \"\\n\";\necho digits(1234567890123456);\n\
    echo \"\\n\";\necho digits(12345678901234567);\necho \"\\n\";\necho digits(123456789012345678);\n\
    echo \"\\n\";\necho digits(1234567890123456789);\necho \"\\n\";\necho digits(12345678901234567890);\n\
    echo \"\\n\";\necho digits(123456789012345678901);\necho \"\\n\";\necho digits(1234567890123456789012);\n\
    echo \"\\n\";\necho digits(12345678901234567890123);\necho \"\\n\";\necho digits(123456789012345678901234);\n\
    echo \"\\n\";\necho digits(1234567890123456789012345);\necho \"\\n\";\necho digits(12345678901234567890123456);\n\
    echo \"\\n\";\necho digits(123456789012345678901234567);\necho \"\\n\";\necho\
    \ digits(1234567", "\t$sum = 1;\n\t$n = (string)$n;\n\tfor ($i = 0; $i < strlen($n);\
    \ $i++) {\n\t\tif ($n[$i] % 2 == 1) {\n\t\t\t$sum *= $n[$i];\n\t\t}\n\t}\n\treturn\
    \ $sum;\n}\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(123)\
    \ . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(123456789) . \"\\n\";",
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $number) {\n   \
    \     if ($number % 2 != 0) {\n            $product *= $number;\n        }\n \
    \   }\n    if ($product == 1) {\n        return 0;\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345) .\
    \ \"\\n\";\necho digits(123456789) . \"\\n\";", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (empty($odd_digits)) {\n        return 0;\n    }\n\
    \    return array_product($odd_digits);\n}\n", "    $product = 1;\n    $n = (string)$n;\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n \
    \           $product *= $n[$i];\n        }\n    }\n    return $product;\n}\necho\
    \ digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345) . \"\\n\"\
    ;\necho digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";", "    $n =\
    \ str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n        if\
    \ ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n    }\n   \
    \ return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\n\
    echo digits(12345) . \"\\n\";\necho digits(1234) . \"\\n\";", "    $odds = 1;\n\
    \    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1)\
    \ {\n            $odds *= $digit;\n        }\n        $n = floor($n / 10);\n \
    \   }\n    return $odds;\n}\n", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product;\n}\necho digits(1) . \"\\\
    n\";\necho digits(4) . \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234567890123456789)\
    \ . \"\\n\";", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as\
    \ $number) {\n        if ($number % 2 != 0) {\n            $product *= $number;\n\
    \        }\n    }\n    if ($product == 1) {\n        return 0;\n    }\n    return\
    \ $product;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(123456789)\
    \ . \"\\n\";\necho digits
  "\t$result = 1;\n\t$n = (string)$n;\n\tfor ($i = 0; $i < strlen($n); $i++) {\n\t\
    \tif ($n[$i] % 2 != 0) {\n\t\t\t$result *= $n[$i];\n\t\t}\n\t}\n\treturn $result;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345) .\
    \ \"\\n\";\necho digits(123456789) . \"\\n\";", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 != 0;\n    });\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n       \
    \ }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789) . PHP_EOL;\n\
    echo digits(1234567890123456789) . PHP_EOL;", "    $result = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $result\
    \ *= $digit;\n        }\n    }\n    return $result;\n}\necho digits(4);", "  \
    \  $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    if (empty($odd_digits)) {\n\
    \        return 0;\n    }\n    return array_product($odd_digits);\n}\n", "   \
    \ $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n     \
    \   if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n\
    \    return $product;\n}\necho digits(4);", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n           \
    \ $product *= $num;\n        }\n    }\n    return $product;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(1234) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 !== 0;\n    });\n    if (empty($odd_digits))\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $digits = str_split($n);\n    $product = 1;\n    foreach ($digits as $digit)\
    \ {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n       \
    \ }\n    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(123456789) . \"\\n\";",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) ===\
    \ 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n",
  "    $product = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if\
    \ ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n        $n\
    \ = ($n - $digit) / 10;\n    }\n    return $product;\n}", "    $n = (string)$n;\n\
    \    $odd_digits = array_filter(str_split($n), function($digit) {\n        return\
    \ $digit % 2 != 0;\n    });\n    if (count($odd_digits) == 0) {\n        return\
    \ 0;\n    }\n    return array_product($odd_digits);\n}\n", "    $odd_digits =\
    \ array();\n    $digits = str_split($n);\n    foreach ($digits as $digit) {\n\
    \        if ($digit % 2 == 1) {\n            array_push($odd_digits, $digit);\n\
    \        }\n    }\n    if (count($odd_digits) == 0) {\n        return 0;\n   \
    \ }\n    return array_product($odd_digits);\n}\necho digits(1) . \"\\n\";\necho\
    \ digits(4) . \"\\n\";", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n", "    $result = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n   \
    \     if ($digit % 2 == 1) {\n            $result *= $digit;\n        }\n    \
    \    $n = floor($n / 10);\n    }\n    return $result;\n}\n", "    $n = str_split($n);\n\
    \    $total = 1;\n    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n \
    \           $total *= $num;\n        }\n    }\n    return $total;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;", "    $odds = array();\n    $n = str_split($n);\n    foreach ($n\
    \ as $num) {\n        if ($num % 2 != 0) {\n            $odds[] = $num;\n    \
    \    }\n    }\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return\
    \ array_product($odds);\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(123456789) . PHP_EOL;", "    $result = 1;\n    $n = (string)$n;\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n \
    \           $result *= $n[$i];\n        }\n    }\n    return $result;\n}\necho\
    \ digits(4);", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n       \
    \ }\n    }\n    return $product;\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(123) . \"\\n\";\necho digits(12345) . \"\\n\";\necho\
    \ digits(123456789) . \"\\n\";", "    $n = str_split($n);\n    $product = 1;\n\
    \    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n            $product\
    \ *= $num;\n        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(123456789) . PHP_EOL;\necho digits(1234567890123456789)\
    \ . PHP_EOL;", "    $n = str_split($n);\n    $odd = [];\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 !== 0) {\n            $odd[] = $digit;\n        }\n\
    \    }\n    if (count($odd) === 0) {\n        return 0;\n    }\n    return array_product($odd);\n\
    }\n", "    $n = (string)$n;\n    $n = str_split($n);\n    $result = 1;\n    foreach\
    \ ($n as $key => $value) {\n        if ($value % 2 != 0) {\n            $result\
    \ *= $value;\n        }\n    }\n    return $result;\n}\n", "\t$n = str_split($n);\n\
    \t$result = 1;\n\tforeach ($n as $num) {\n\t\tif ($num % 2 != 0) {\n\t\t\t$result\
    \ *= $num;\n\t\t}\n\t}\n\treturn $result;\n}\necho digits(1);\necho \"\\n\";\n\
    echo digits(4);\necho \"\\n\";\necho digits(123456789);\necho \"\\n\";\necho digits
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) ===\
    \ 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n      \
    \  if ($num % 2 != 0) {\n            $product *= $num;\n        }\n    }\n   \
    \ if ($product == 1) {\n        return 0;\n    }\n    return $product;\n}\n",
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n    \
    \    if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n    }\n\
    \    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(123456789) . PHP_EOL;\necho digits(1234567890) . PHP_EOL;", "    $digits\
    \ = str_split($n);\n    $odd_digits = array_filter($digits, function($digit) {\n\
    \        return $digit % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n\
    \        return 0;\n    }\n    return array_product($odd_digits);\n}\n", "   \
    \ $product = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit\
    \ % 2 == 1) {\n            $product *= $digit;\n        }\n        $n = (int)($n\
    \ / 10);\n    }\n    return $product;\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(123456789) . \"\\n\";", "  $digits = str_split($n);\n\
    \  $odd_digits = array_filter($digits, function($digit) {\n    return $digit %\
    \ 2 !== 0;\n  });\n  if (count($odd_digits) === 0) {\n    return 0;\n  }\n  return\
    \ array_product($odd_digits);\n}\n", "    $digits = str_split($n);\n    $odd_digits\
    \ = [];\n    foreach ($digits as $digit) {\n        if ($digit % 2 != 0) {\n \
    \           $odd_digits[] = $digit;\n        }\n    }\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    }\n    $product = 1;\n    foreach ($odd_digits\
    \ as $odd_digit) {\n        $product *= $odd_digit;\n    }\n    return $product;\n\
    }\n", "    $n = str_split($n);\n    $sum = 1;\n    foreach ($n as $num) {\n  \
    \      if ($num % 2 !== 0) {\n            $sum *= $num;\n        }\n    }\n  \
    \  return $sum;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho\
    \ digits(123) . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;", "    $sum = 1;\n    $n = str_split($n);\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 !== 0) {\n            $sum *= $digit;\n        }\n\
    \    }\n    return $sum;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(12345) . PHP_EOL;", "    $sum = 1;\n    $n = str_split($n);\n    foreach\
    \ ($n as $num) {\n        if ($num % 2 != 0) {\n            $sum *= $num;\n  \
    \      }\n    }\n    return $sum;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(5) . PHP_EOL;\necho digits(12) . PHP_EOL;\necho digits(123)\
    \ . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789) . PHP_EOL;",
  "    $sum = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n        if\
    \ ($num % 2 != 0) {\n            $sum *= $num;\n        }\n    }\n    return $sum;\n\
    }\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345)\
    \ . PHP_EOL;\necho digits(1234) . PHP_EOL;\necho digits(123) . PHP_EOL;\necho\
    \ digits(12) . PHP_EOL;\necho digits(1) . PHP_EOL;", "    $digits = str_split($n);\n\
    \    $product = 1;\n    foreach ($digits as $digit) {\n        if ($digit % 2\
    \ != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345) .\
    \ \"\\n\";\necho digits(123456789) . \"\\n\";", "\t$result = 1;\n\t$n = (string)$n;\n\
    \tfor ($i = 0; $i < strlen($n); $i++) {\n\t\tif ($n[$i] % 2 == 1) {\n\t\t\t$result\
    \ *= $n[$i];\n\t\t}\n\t}\n\treturn $result;\n}\necho digits(1) . \"\\n\";\necho\
    \ digits(4) . \"\\n\";\necho digits(123456789) . \"\\n\";", "    $product = 1;\n\
    \    $n = str_split($n);\n    foreach ($n as $num) {\n        if ($num % 2 !==\
    \ 0) {\n            $product *= $num;\n        }\n    }\n    return $product;\n\
    }\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(123456)\
    \ . \"\\n\";\necho digits(123456789) . \"\\n\";", "    $str = strval($n);\n  \
    \  $arr = str_split($str);\n    $product = 1;\n    foreach ($arr as $num) {\n\
    \        if ($num % 2 != 0) {\n            $product *= $num;\n        }\n    }\n\
    \    return $product;\n}\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\"\
    ;\necho digits(12345) . \"\\n\";", "    $n = str_split($n);\n    $sum = 1;\n \
    \   foreach ($n as $num) {\n        if ($num % 2 != 0) {\n            $sum *=\
    \ $num;\n        }\n    }\n    return $sum;\n}\necho digits(4);", "    $n = (string)$n;\n\
    \    $result = 1;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 != 0) {\n            $result *= $n[$i];\n        }\n    }\n    return $result;\n\
    }\n", "    $odd_digits = array();\n    $digits = str_split($n);\n    foreach ($digits\
    \ as $digit) {\n        if ($digit % 2 != 0) {\n            array_push($odd_digits,\
    \ $digit);\n        }\n    }\n    if (count($odd_digits) == 0) {\n        return\
    \ 0;\n    }\n    return array_product($odd_digits);\n}", "    $odds = 1;\n   \
    \ $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit % 2 !=\
    \ 0) {\n            $odds *= $digit;\n        }\n    }\n    return $odds;\n}\n\
    echo digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) . PHP_EOL;\n\
    echo digits(1234) . PHP_EOL;\necho digits(123456789) . PHP_EOL;\necho digits(12346789)\
    \ . PHP_EOL;\necho digits(1234567890123456789) . PHP_EOL;\necho digits(123467890123456789)\
    \ . PHP_EOL;", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as\
    \ $digit) {\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(1234) . PHP_EOL;\necho digits(123456789) . PHP_EOL;",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n   \
    \     if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n   \
    \ }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\\
    n\";\necho digits(12345) . \"\\n\";\necho digits(123456789) . \"\\n\";", "\t$sum\
    \ = 1;\n\t$n = (string)$n;\n\tfor ($i = 0; $i < strlen($n); $i++) {\n\t\tif ($n[$i]\
    \ % 2 != 0) {\n\t\t\t$sum *= $n[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\necho digits(1)\
    \ . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(1234)\
    \ . \"\\n\";", "    $result = 1;\n    $n = str_split($n);\n    foreach ($n as\
    \ $digit) {\n        if ($digit % 2 !== 0) {\n            $result *= $digit;\n\
    \        }\n    }\n    return $result;\n}\n", "    $product = 1;\n    $n = (string)$n;\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n \
    \           $product *= $n[$i];\n        }\n    }\n    return $product;\n}\n",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n\necho\
    \ digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345) . \"\\n\"\
    ;\necho digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234)\
    \ . \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234) . \"\\n\";\n\
    echo digits(123456789) . \"\\n\";\necho digits(1234) . \"\\n\";\necho digits(123456789)\
    \ . \"\\n\";\necho digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";\n\
    echo digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234)\
    \ . \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234) . \"\\n\";\n\
    echo digits(123456789) . \"\\n\";\necho digits(1234) . \"\\n\";\necho digits(123456789)\
    \ . \"\\n\";\necho digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";\n\
    echo digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234)\
    \ . \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234) . \"\\n\";\n\
    echo digits(123456789) . \"\\n\";\necho digits(1234) . \"\\n\";\necho digits(123456789)\
    \ . \"\\n\";\necho digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";\n\
    echo digits(1234) . \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234)\
    \ . \"\\n\";\necho digits", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 == 1;\n    });\n    if (empty($odd_digits))\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $digits = str_split($n);\n    $odds = [];\n    foreach ($digits as $digit)\
    \ {\n        if ($digit % 2 == 1) {\n            $odds[] = $digit;\n        }\n\
    \    }\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return array_product($odds);\n\
    }\n", "    $product = 1;\n    $digits = str_split($n);\n    foreach ($digits as\
    \ $digit) {\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(1234567890) . \"\\n\"\
    ;", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) ===\
    \ 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n",
  "    $result = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit\
    \ % 2 != 0) {\n            $result *= $digit;\n        }\n        $n = floor($n\
    \ / 10);\n    }\n    return $result;\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(123456789) . \"\\n\";",
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $value) {\n    \
    \    if ($value % 2 != 0) {\n            $product *= $value;\n        }\n    }\n\
    \    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\"\
    ;\necho digits(12345) . \"\\n\";\necho digits(123456789) . \"\\n\";", "    $n\
    \ = str_split($n);\n    $odds = [];\n    foreach ($n as $num) {\n        if ($num\
    \ % 2 !== 0) {\n            $odds[] = $num;\n        }\n    }\n    if (empty($odds))\
    \ {\n        return 0;\n    }\n    return array_product($odds);\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(123) . PHP_EOL;\necho digits(1234)\
    \ . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456) . PHP_EOL;\n\
    echo digits(1234567) . PHP_EOL;\necho digits(12345678) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;\necho digits(1234567890) . PHP_EOL;\necho digits(12345678901) . PHP_EOL;\n\
    echo digits(123456789012) . PHP_EOL;\necho digits(1234567890123) . PHP_EOL;\n\
    echo digits(12345678901234) . PHP_EOL;\necho digits(123456789012345) . PHP_EOL;\n\
    echo digits(1234567890123456) . PHP_EOL;\necho digits(12345678901234567) . PHP_EOL;\n\
    echo digits(123456789012345678) . PHP_EOL;\necho digits(1234567890123456789) .\
    \ PHP_EOL;\necho digits(12345678901234567890) . PHP_EOL;\necho digits(123456789012345678901)\
    \ . PHP_EOL;\necho digits(1234567890123456789012) . PHP_EOL;\necho digits(12345678901234567890123)\
    \ . PHP_EOL;\necho digits(123456789012345678901234) . PHP_EOL;\necho digits(1234567890123456789012345)\
    \ . PHP_EOL;\necho digits", "    $result = 1;\n    $n = (string)$n;\n    for ($i\
    \ = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result\
    \ *= $n[$i];\n        }\n    }\n    return $result;\n}\necho digits(1) . \"\\\
    n\";\necho digits(4) . \"\\n\";\necho digits(123456789) . \"\\n\";", "    $n =\
    \ str_split($n);\n    $odds = array_filter($n, function($num) {\n        return\
    \ $num % 2 != 0;\n    });\n    if (count($odds) == 0) {\n        return 0;\n \
    \   }\n    $odds = array_map(function($num) {\n        return (int)$num;\n   \
    \ }, $odds);\n    return array_product($odds);\n}\n", "    $digits = str_split($n);\n\
    \    $odds = array_filter($digits, function($digit) {\n        return $digit %\
    \ 2 !== 0;\n    });\n    if (count($odds) === 0) {\n        return 0;\n    }\n\
    \    return array_product($odds);\n}\n", "    $odd_digits = array();\n    $n_string\
    \ = strval($n);\n    $n_array = str_split($n_string);\n    foreach ($n_array as\
    \ $num) {\n        if ($num % 2 != 0) {\n            array_push($odd_digits, $num);\n\
    \        }\n    }\n    if (count($odd_digits) == 0) {\n        return 0;\n   \
    \ } else {\n        $product = 1;\n        foreach ($odd_digits as $num) {\n \
    \           $product *= $num;\n        }\n        return $product;\n    }\n}",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) ===\
    \ 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}",
  "    $result = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit\
    \ % 2 == 1) {\n            $result *= $digit;\n        }\n        $n = floor($n\
    \ / 10);\n    }\n    return $result;\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(123456789) . \"\\n\";",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $value) {\n    \
    \    if ($value % 2 != 0) {\n            $product *= $value;\n        }\n    }\n\
    \    return $product;\n}\n", "    $digits = str_split($n);\n    $odd_digits =\
    \ array_filter($digits, function($digit) {\n        return $digit % 2 == 1;\n\
    \    });\n    if (count($odd_digits) == 0) {\n        return 0;\n    }\n    $product\
    \ = array_reduce($odd_digits, function($product, $digit) {\n        return $product\
    \ * $digit;\n    });\n    return $product;\n}\n", "    $product = 1;\n    $n =\
    \ str_split($n);\n    foreach ($n as $number) {\n        if ($number % 2 != 0)\
    \ {\n            $product *= $number;\n        }\n    }\n    return $product;\n\
    }", "    $result = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n \
    \       if ($num % 2 != 0) {\n            $result *= $num;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(123) . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789)\
    \ . PHP_EOL;", "    $digits = str_split($n);\n    $product = 1;\n    foreach ($digits\
    \ as $digit) {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(123) . \"\\n\";\necho digits(12345) . \"\\n\";\necho\
    \ digits(123456789) . \"\\n\";", "    $digits = str_split($n);\n    $odd_digits\
    \ = array_filter($digits, function($digit) {\n        return $digit % 2 != 0;\n\
    \    });\n    return array_product($odd_digits);\n}\n", "    $digits = str_split($n);\n\
    \    $odds = array_filter($digits, function($digit) {\n        return $digit %\
    \ 2 !== 0;\n    });\n    return array_product($odds);\n}\n\necho digits(1);\n\
    echo \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(123456789);\necho \"\
    \\n\";\necho digits
  "    $n = str_split($n);\n    $odd = 1;\n    foreach ($n as $num) {\n        if\
    \ ($num % 2 == 1) {\n            $odd *= $num;\n        }\n    }\n    return $odd;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) .\
    \ PHP_EOL;\necho digits(123456789) . PHP_EOL;", "    $n = str_split($n);\n   \
    \ $product = 1;\n    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n\
    \            $product *= $digit;\n        }\n    }\n    return $product;\n}\n\
    echo digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) . PHP_EOL;\n\
    echo digits(123456789) . PHP_EOL;", "\t$n = str_split($n);\n\t$odds = [];\n\t\
    foreach ($n as $number) {\n\t\tif ($number % 2 === 1) {\n\t\t\t$odds[] = $number;\n\
    \t\t}\n\t}\n\tif (empty($odds)) {\n\t\treturn 0;\n\t}\n\treturn array_product($odds);\n\
    }\necho digits(4);\necho \"\\n\";\necho digits(1);\necho \"\\n\";\necho digits(123456789);\n\
    echo \"\\n\";\necho digits(1234);\necho \"\\n\";\necho digits(12346789);\necho\
    \ \"\\n\";\necho digits(123467890123456789);\necho \"\\n\";\necho digits(1234678901234567890123456789);\n\
    echo \"\\n\";\necho digits(12346789012345678901234567890123456789);\necho \"\\\
    n\";\necho digits(123467890123456789012345678901234567890123456789);\necho \"\\\
    n\";\necho digits(1234678901234567890123456789012345678901234567890123456789);\n\
    echo \"\\n\";\necho digits(12346789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"\\n\";\necho digits(123467890123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"\\n\";\necho digits(1234678901234567890123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"\\n\";\necho digits(12346789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"\\n\";\necho digits(12346789", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $number) {\n        if ($number % 2 != 0) {\n            $product\
    \ *= $number;\n        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(123) . PHP_EOL;\necho digits(12345) . PHP_EOL;\n\
    echo digits(123456789) . PHP_EOL;", "    $product = 1;\n    while ($n > 0) {\n\
    \        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n            $product\
    \ *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(12345) .\
    \ \"\\n\";\necho digits(1234567890) . \"\\n\";", "    $n = str_split($n);\n  \
    \  $product = 1;\n    foreach ($n as $number) {\n        if ($number % 2 != 0)\
    \ {\n            $product *= $number;\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(5) . PHP_EOL;\n\
    echo digits(12) . PHP_EOL;\necho digits(123) . PHP_EOL;\necho digits(12345) .\
    \ PHP_EOL;\necho digits(123456789) . PHP_EOL;\necho digits(12345678901234567890)\
    \ . PHP_EOL;", "    $digits = str_split($n);\n    $product = 1;\n    foreach ($digits\
    \ as $digit) {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(123456789) . \"\\n\";",
  "    $product = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 == 1) {\n            $product *= $n[$i];\n       \
    \ }\n    }\n    return $product;\n}\n", "\t$n = str_split($n);\n\t$odd = 1;\n\t\
    foreach ($n as $number) {\n\t\tif ($number % 2 == 1) {\n\t\t\t$odd *= $number;\n\
    \t\t}\n\t}\n\treturn $odd;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\n\
    echo \"\\n\";\necho digits(123456789);\necho \"\\n\";\necho digits(1234567890123456789);\n\
    echo \"\\n\";", "\t$digits = str_split($n);\n\t$odd_digits = array_filter($digits,\
    \ function($d) {\n\t\treturn $d % 2 == 1;\n\t});\n\tif (count($odd_digits) ==\
    \ 0) {\n\t\treturn 0;\n\t}\n\treturn array_product($odd_digits);\n}\n", "    $product\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit\
    \ % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(123) .\
    \ PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789) . PHP_EOL;\n\
    echo digits(1234567890123456789) . PHP_EOL;\necho digits
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $n = str_split($n);\n    $sum = 1;\n    foreach ($n as $num) {\n        if\
    \ ($num % 2 == 1) {\n            $sum *= $num;\n        }\n    }\n    return $sum;\n\
    }\necho digits(1);\necho \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(12345);\n\
    echo \"\\n\";\necho digits(123456789);\necho \"\\n\";", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 != 0;\n    });\n    if (empty($odd_digits)) {\n        return 0;\n    }\n\
    \    return array_product($odd_digits);\n}\n", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product;\n}\n", "    $n = str_split($n);\n\
    \    $product = 1;\n    foreach ($n as $num) {\n        if ($num % 2 == 1) {\n\
    \            $product *= $num;\n        }\n    }\n    return $product;\n}\necho\
    \ digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) . PHP_EOL;\n\
    echo digits(123456789) . PHP_EOL;", "    $odds = array();\n    $digits = str_split($n);\n\
    \    foreach ($digits as $digit) {\n        if ($digit % 2 != 0) {\n         \
    \   array_push($odds, $digit);\n        }\n    }\n    if (count($odds) == 0) {\n\
    \        return 0;\n    }\n    return array_product($odds);\n}\n", "    $sum =\
    \ 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n        if ($num %\
    \ 2 == 1) {\n            $sum *= $num;\n        }\n    }\n    return $sum;\n}\n",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $product = 1;\n    $n = str_split($n);\n    foreach ($n as $value) {\n   \
    \     if ($value % 2 != 0) {\n            $product *= $value;\n        }\n   \
    \ }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\\
    n\";\necho digits(123456789) . \"\\n\";", "    $odd_digits = array();\n    $digits\
    \ = str_split($n);\n    foreach ($digits as $digit) {\n        if ($digit % 2\
    \ == 1) {\n            array_push($odd_digits, $digit);\n        }\n    }\n  \
    \  if (count($odd_digits) == 0) {\n        return 0;\n    }\n    $product = 1;\n\
    \    foreach ($odd_digits as $odd_digit) {\n        $product *= $odd_digit;\n\
    \    }\n    return $product;\n}\n", "    $odds = 1;\n    $digits = str_split($n);\n\
    \    foreach ($digits as $digit) {\n        if ($digit % 2 == 1) {\n         \
    \   $odds *= $digit;\n        }\n    }\n    return $odds;\n}\necho digits(1) .\
    \ \"\\n\";\necho digits(4) . \"\\n\";\necho digits(123456789) . \"\\n\";", " \
    \   $n = str_split($n);\n    $odds = array_filter($n, function($x) {\n       \
    \ return $x % 2 == 1;\n    });\n    if (count($odds) == 0) {\n        return 0;\n\
    \    }\n    return array_product($odds);\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(123456789) . \"\\n\";\necho digits(1234567890123456789)\
    \ . \"\\n\";", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as\
    \ $digit) {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(12345) . PHP_EOL;\necho digits(123456789) . PHP_EOL;",
  "    $n = str_split($n);\n    $odds = [];\n    foreach ($n as $num) {\n        if\
    \ ($num % 2 !== 0) {\n            $odds[] = $num;\n        }\n    }\n    if (count($odds)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odds);\n}\n",
  "    $odds = array();\n    $n = str_split($n);\n    foreach ($n as $digit) {\n \
    \       if ($digit % 2 != 0) {\n            $odds[] = $digit;\n        }\n   \
    \ }\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return array_product($odds);\n\
    }\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $product = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if\
    \ ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n        $n\
    \ = floor($n / 10);\n    }\n    return $product;\n}\n", "    $result = 1;\n  \
    \  while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n\
    \            $result *= $digit;\n        }\n        $n = floor($n / 10);\n   \
    \ }\n    return $result;\n}", "    $n = str_split($n);\n    $odd = array();\n\
    \    foreach ($n as $number) {\n        if ($number % 2 != 0) {\n            $odd[]\
    \ = $number;\n        }\n    }\n    if (count($odd) == 0) {\n        return 0;\n\
    \    }\n    return array_product($odd);\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(1234) . PHP_EOL;\necho digits(123456789) . PHP_EOL;",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $number) {\n   \
    \     if ($number % 2 != 0) {\n            $product *= $number;\n        }\n \
    \   }\n    if ($product == 1) {\n        return 0;\n    }\n    return $product;\n\
    }\n", "    $digits = str_split($n);\n    $odds = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odds) === 0) {\n\
    \        return 0;\n    }\n    return array_product($odds);\n}\n", "  $product\
    \ = 1;\n  $n = str_split($n);\n  foreach ($n as $digit) {\n    if ($digit % 2\
    \ != 0) {\n      $product *= $digit;\n    }\n  }\n  return $product;\n}\necho\
    \ digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(12345) . PHP_EOL;\n\
    echo digits(1234) . PHP_EOL;\necho digits(123456789) . PHP_EOL;\necho digits(1234567890123456789)\
    \ . PHP_EOL;", "    $n = (string)$n;\n    $odds = array();\n    for ($i = 0; $i\
    \ < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $odds[] =\
    \ $n[$i];\n        }\n    }\n    if (count($odds) == 0) {\n        return 0;\n\
    \    }\n    return array_product($odds);\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(12345) . \"\\n\";\necho digits(123456789) . \"\\n\"\
    ;\necho digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567",
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n    \
    \    if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n    }\n\
    \    return $product;\n}\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(123456789) . PHP_EOL;\necho digits(1234567890123456789) . PHP_EOL;\n\
    echo digits
  "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n        }\n\
    \    }\n    return $result;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\n\
    echo \"\\n\";\necho digits(123456789);\necho \"\\n\";\necho digits(123456788);\n\
    echo \"\\n\";", "    $n = (string)$n;\n    $product = 1;\n    for ($i = 0; $i\
    \ < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $product\
    \ *= $n[$i];\n        }\n    }\n    return $product;\n}\necho digits(1) . \"\\\
    n\";\necho digits(4) . \"\\n\";\necho digits(123) . \"\\n\";\necho digits(12345)\
    \ . \"\\n\";\necho digits(123456789) . \"\\n\";", "    $n = (string)$n;\n    $odds\
    \ = array();\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] %\
    \ 2 != 0) {\n            $odds[] = $n[$i];\n        }\n    }\n    if (count($odds)\
    \ == 0) {\n        return 0;\n    }\n    return array_product($odds);\n}\n", " \
    \   $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n    \
    \    if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\necho\
    \ \"\\n\";\necho digits(123456789);\necho \"\\n\";", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_product($odd_digits);\n}\n", "    $digits = str_split($n);\n\
    \    $odds = array_filter($digits, function($digit) {\n        return $digit %\
    \ 2 == 1;\n    });\n    if (count($odds) == 0) {\n        return 0;\n    }\n \
    \   return array_product($odds);\n}\n", "    $product = 1;\n    while ($n > 0)\
    \ {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return $product;\n\
    }\n", "\t$sum = 1;\n\t$n = str_split($n);\n\tforeach ($n as $digit) {\n\t\tif\
    \ ($digit % 2 != 0) {\n\t\t\t$sum *= $digit;\n\t\t}\n\t}\n\treturn $sum;\n}\n\
    echo digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(123) . PHP_EOL;\n\
    echo digits(12345) . PHP_EOL;\necho digits(123456789) . PHP_EOL;", "    $product\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n        if ($num\
    \ % 2 != 0) {\n            $product *= $num;\n        }\n    }\n    if ($product\
    \ == 1) {\n        return 0;\n    }\n    return $product;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
