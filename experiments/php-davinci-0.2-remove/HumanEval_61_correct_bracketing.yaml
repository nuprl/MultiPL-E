name: HumanEval_61_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if every\
  \ opening bracket has a corresponding closing bracket.\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((((\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())())(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $stack = [];\n  $open = ['(', '{', '['];\n  $close = [')', '}', ']'];\n\
    \  for ($i = 0; $i < strlen($brackets); $i++) {\n    $char = $brackets[$i];\n\
    \    if (in_array($char, $open)) {\n      array_push($stack, $char);\n    } else\
    \ if (in_array($char, $close)) {\n      $last = array_pop($stack);\n      if ($open[array_search($char,\
    \ $close)] != $last) {\n        return False;\n      }\n    }\n  }\n  return True;\n\
    }\n", "    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n  \
    \      $char = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            }\n            array_pop($stack);\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $open\
    \ = [\"(\"];\n    $close = [\")\"];\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        $char = $brackets[$i];\n        if (in_array($char, $open))\
    \ {\n            array_push($stack, $char);\n        } elseif (in_array($char,\
    \ $close)) {\n            if (empty($stack)) {\n                return False;\n\
    \            }\n            $top = array_pop($stack);\n            if ($top !=\
    \ $open[0]) {\n                return False;\n            }\n        }\n    }\n\
    \    return empty($stack);\n}\n", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n", "  $stack\
    \ = [];\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $char = $brackets[$i];\n\
    \    if ($char == '(') {\n      array_push($stack, $char);\n    } else if ($char\
    \ == ')') {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      array_pop($stack);\n    }\n  }\n  return count($stack) == 0;\n}\n", " \
    \   $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $char\
    \ = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else if ($char == \")\") {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n \
    \   $brackets = str_split($brackets);\n    foreach ($brackets as $bracket) {\n\
    \        if ($bracket == '(') {\n            array_push($stack, $bracket);\n \
    \       } elseif ($bracket == ')') {\n            if (empty($stack)) {\n     \
    \           return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n", "\t$stack =\
    \ new SplStack();\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t$char =\
    \ $brackets[$i];\n\t\tif ($char == '(') {\n\t\t\t$stack->push($char);\n\t\t} else\
    \ {\n\t\t\tif ($stack->isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$stack->pop();\n\
    \t\t}\n\t}\n\treturn $stack->isEmpty();\n}\n", "    $bracket_stack = array();\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        $bracket = $brackets[$i];\n\
    \        if ($bracket == \"(\") {\n            array_push($bracket_stack, $bracket);\n\
    \        } else {\n            if (count($bracket_stack) == 0) {\n           \
    \     return False;\n            }\n            array_pop($bracket_stack);\n \
    \       }\n    }\n    return count($bracket_stack) == 0;\n}\n", "    $stack =\
    \ new SplStack();\n    $len = strlen($brackets);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $char = $brackets[$i];\n        if ($char == '(') {\n     \
    \       $stack->push($char);\n        } else {\n            if ($stack->isEmpty())\
    \ {\n                return false;\n            }\n            $stack->pop();\n\
    \        }\n    }\n    return $stack->isEmpty();\n}\n", "    $brackets_array =\
    \ str_split($brackets);\n    $stack = [];\n    foreach ($brackets_array as $bracket)\
    \ {\n        if ($bracket == \"(\") {\n            array_push($stack, $bracket);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n", "  $stack = [];\n  for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n    $char = $brackets[$i];\n    if ($char == \"(\") {\n      array_push($stack,\
    \ $char);\n    } else {\n      if (count($stack) == 0) {\n        return false;\n\
    \      }\n      array_pop($stack);\n    }\n  }\n  return count($stack) == 0;\n\
    }\n", "\t$opening = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif\
    \ ($brackets[$i] == \"(\") {\n\t\t\t$opening++;\n\t\t} else if ($brackets[$i]\
    \ == \")\") {\n\t\t\t$opening--;\n\t\t}\n\t\tif ($opening < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $opening == 0;\n}\n", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        $char = $brackets[$i];\n \
    \       if ($char == \"(\") {\n            array_push($stack, $char);\n      \
    \  } else {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "  $stack = array();\n  for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n    if ($brackets[$i] == '(') {\n      array_push($stack, $brackets[$i]);\n\
    \    } else {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      array_pop($stack);\n    }\n  }\n  return count($stack) == 0;\n}\n", " \
    \   $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $char\
    \ = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            }\n            array_pop($stack);\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = [];\n    $brackets\
    \ = str_split($brackets);\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == \"(\") {\n            array_push($stack, $bracket);\n        } else {\n \
    \           if (count($stack) == 0) {\n                return false;\n       \
    \     }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "    $brackets_stack = [];\n    $brackets_length = strlen($brackets);\n\
    \    for ($i = 0; $i < $brackets_length; $i++) {\n        $bracket = $brackets[$i];\n\
    \        if ($bracket == \"(\") {\n            array_push($brackets_stack, $bracket);\n\
    \        } else {\n            if (count($brackets_stack) == 0) {\n          \
    \      return false;\n            }\n            array_pop($brackets_stack);\n\
    \        }\n    }\n    return count($brackets_stack) == 0;\n}\n", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $char = $brackets[$i];\n\
    \        if ($char == \"(\") {\n            array_push($stack, $char);\n     \
    \   } else {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\
    \t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\
    \t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
