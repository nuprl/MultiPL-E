name: HumanEval_65_circular_shift
language: php
prompt: "<?php\n// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n// and return the result as a string.\n// If shift > number of digits,\
  \ return digits reversed.\nfunction circular_shift($x, $shift) {\n"
tests: "function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $digits = str_split($x);\n    $n = count($digits);\n    if ($shift\
    \ > $n) {\n        return implode('', array_reverse($digits));\n    }\n    $shifted\
    \ = array_merge(array_slice($digits, $shift), array_slice($digits, 0, $shift));\n\
    \    return implode('', $shifted);\n}\n", "    $x = (string) $x;\n    $len = strlen($x);\n\
    \    if ($shift >= $len) {\n        return strrev($x);\n    }\n    $y = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n    return $y;\n}\n", "    $x = (string) $x;\n\
    \    $len = strlen($x);\n    if ($shift >= $len) {\n        return strrev($x);\n\
    \    }\n    $y = substr($x, $shift) . substr($x, 0, $shift);\n    return $y;\n\
    }\n", "    $digits = str_split($x);\n    $n = count($digits);\n    if ($shift\
    \ >= $n) {\n        return implode('', array_reverse($digits));\n    }\n    $shifted\
    \ = array_merge(array_slice($digits, $shift), array_slice($digits, 0, $shift));\n\
    \    return implode('', $shifted);\n}\n", "    $x = (string) $x;\n    $len = strlen($x);\n\
    \    $shift = $shift % $len;\n    if ($shift == 0) {\n        return $x;\n   \
    \ }\n    return substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n}\n",
  "    $x = (string) $x;\n    $len = strlen($x);\n    if ($shift > $len) {\n     \
    \   return strrev($x);\n    }\n    $y = substr($x, $len - $shift) . substr($x,\
    \ 0, $len - $shift);\n    return $y;\n}\n", "    $x_str = strval($x);\n    $x_len\
    \ = strlen($x_str);\n    if ($shift >= $x_len) {\n        return strrev($x_str);\n\
    \    }\n    $x_str = substr($x_str, $shift) . substr($x_str, 0, $shift);\n   \
    \ return $x_str;\n}\n", "    $x = (string) $x;\n    $shift = (int) $shift;\n \
    \   $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $x = substr($x, $shift) . substr($x, 0, $shift);\n    return $x;\n\
    }\n", "    $digits = str_split($x);\n    $n = count($digits);\n    if ($shift\
    \ > $n) {\n        return implode('', array_reverse($digits));\n    }\n    $shifted\
    \ = array_slice($digits, $shift);\n    $shifted = array_merge($shifted, array_slice($digits,\
    \ 0, $shift));\n    return implode('', $shifted);\n}\n", "\t$digits = str_split($x);\n\
    \t$n = count($digits);\n\tif ($shift > $n) {\n\t\treturn implode('', array_reverse($digits));\n\
    \t}\n\t$shift_digits = array_splice($digits, $n - $shift);\n\treturn implode('',\
    \ array_merge($shift_digits, $digits));\n}\n", "    $x = (string) $x;\n    $len\
    \ = strlen($x);\n    if ($shift >= $len) {\n        return strrev($x);\n    }\n\
    \    $y = substr($x, $shift) . substr($x, 0, $shift);\n    return $y;\n}\n", "\t\
    $digits = str_split($x);\n\t$len = count($digits);\n\tif ($shift >= $len) {\n\t\
    \treturn implode('', array_reverse($digits));\n\t}\n\t$new_digits = array_slice($digits,\
    \ $shift);\n\t$new_digits = array_merge($new_digits, array_slice($digits, 0, $shift));\n\
    \treturn implode('', $new_digits);\n}\n", "    $digits = str_split($x);\n    $n\
    \ = count($digits);\n    if ($shift >= $n) {\n        return implode('', array_reverse($digits));\n\
    \    }\n    $shifted = array_slice($digits, $shift);\n    $shifted = array_merge($shifted,\
    \ array_slice($digits, 0, $shift));\n    return implode('', $shifted);\n}\n",
  "\t$digits = str_split($x);\n\t$num_digits = count($digits);\n\tif ($shift > $num_digits)\
    \ {\n\t\t$digits = array_reverse($digits);\n\t} else {\n\t\t$digits = array_merge(array_slice($digits,\
    \ $shift), array_slice($digits, 0, $shift));\n\t}\n\treturn implode($digits);\n\
    }\n", "    $x = (string) $x;\n    $shift = (int) $shift;\n    $len = strlen($x);\n\
    \    if ($shift >= $len) {\n        return strrev($x);\n    }\n    $y = substr($x,\
    \ $shift);\n    $y .= substr($x, 0, $shift);\n    return $y;\n}\n", "    $x =\
    \ (string) $x;\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $a = substr($x, 0, $len - $shift);\n    $b = substr($x,\
    \ $len - $shift);\n    return $b . $a;\n}\n", "    $x = (string) $x;\n    $len\
    \ = strlen($x);\n    if ($shift >= $len) {\n        return strrev($x);\n    }\n\
    \    $left = substr($x, 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n\
    \    return $right . $left;\n}\n", "    $x = strval($x);\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $y = substr($x,\
    \ $len - $shift, $shift);\n    $y .= substr($x, 0, $len - $shift);\n    return\
    \ $y;\n}\n", "    $digits = str_split($x);\n    $n = count($digits);\n    if ($shift\
    \ >= $n) {\n        return implode('', array_reverse($digits));\n    }\n    $shifted\
    \ = array_merge(array_slice($digits, $shift), array_slice($digits, 0, $shift));\n\
    \    return implode('', $shifted);\n}\n", "    $digits = strlen($x);\n    if ($shift\
    \ >= $digits) {\n        return strrev($x);\n    }\n    $y = substr($x, $shift,\
    \ $digits - $shift);\n    $z = substr($x, 0, $shift);\n    return $y . $z;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
