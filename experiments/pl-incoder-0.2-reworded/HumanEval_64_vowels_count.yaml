name: HumanEval_64_vowels_count
language: pl
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count(\"abcde\")\n# 2\n\
  # >>> vowels_count(\"ACEDY\")\n# 3\nsub vowels_count {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n\
  \        if(eq_deeply($candidate->(\"abcde\"),2)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  key\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"bye\"),1)) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  bYe\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"ACEDY\"),3)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return length($s);\n}", " \
    \   $s =~ tr/aeiouAEIOU/aeiou/;\n    return length($s);\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n\
    \    return length($s);\n}", "    my $vowels = \"aeiou\";\n    my $count = 0;\n\
    \    my $len = length($s);\n    for(my $i = 0; $i < $len; $i++) {\n        my\
    \ $c = substr($s, $i, 1);\n        if($c eq $vowels) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $vowels = \"aeiou\";\n    my\
    \ $vowels_count = () = $s =~ /($vowels)/g;\n    return $vowels_count;\n}", " \
    \   my $vowels = \"aeiou\";\n    my $count = 0;\n    my $i = 0;\n    while ($i\
    \ < length($s)) {\n        my $c = substr($s, $i, 1);\n        if ($c eq $vowels)\
    \ {\n            $count++;\n        }\n        $i++;\n    }\n    return $count;\n\
    }", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return length($s);\n}", "    $s\
    \ =~ s/[aeiou]//g;\n    return scalar keys %vowels;\n}", "    my $vowels = \"\
    aeiou\";\n    my $count = 0;\n    my $len = length($s);\n    my $i;\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if ($s =~ /($vowels)/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n\
    \    return length($s);\n}", "    my $count = 0;\n    my $vowels = \"aeiou\";\n\
    \    my $vowels_re = join \"|\", $vowels;\n    if ($s =~ /($vowels_re)y$/) {\n\
    \        $count++;\n    }\n    return $count;\n}", "    my $count = 0;\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_re = join \"|\", $vowels;\n    if ($s =~\
    \ /($vowels_re)y$/) {\n        $count++;\n    }\n    return $count;\n}", "   \
    \ my $vowels = \"aeiou\";\n    my $count = 0;\n    my $i = 0;\n    while($i <\
    \ length($s)) {\n        my $c = substr($s, $i, 1);\n        if($c eq $vowels)\
    \ {\n            $count++;\n        }\n        $i++;\n    }\n    return $count;\n\
    }", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return $-[0];\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n\
    \    return length($s);\n}", "    $s =~ tr/aeiouy//cd;\n    return length($s);\n\
    }", "    my $vowels = \"aeiou\";\n    my $vowels_count = () = $s =~ /($vowels)/g;\n\
    \    return $vowels_count;\n}", "    my $vowels = \"aeiou\";\n    $s =~ tr/aeiou/aeiou/;\n\
    \    return $s =~ /($vowels)/g;\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n \
    \   return length($s);\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return\
    \ length($s);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
