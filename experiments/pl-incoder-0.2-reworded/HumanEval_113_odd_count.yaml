name: HumanEval_113_odd_count
language: pl
prompt: "# Given an array of strings, where each string consists of only digits, return\
  \ an array.\n# Each element i of the output should be \"the number of odd elements\
  \ in the\n# string i of the input.\" where all the i's should be replaced by the\
  \ number\n# of odd digits in the i'th string of the input.\n# >>> odd_count([\"\
  1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
  # >>> odd_count([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng\
  \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
  ]\nsub odd_count {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_count;\n\
  \        if(eq_deeply($candidate->([\"1234567\"]),[\"the number of odd elements\
  \ 4n the str4ng 4 of the 4nput.\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"3\", \"11111111\"]),[\"the\
  \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
  \ 8n the str8ng 8 of the 8nput.\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"271\", \"137\", \"314\"]),[\"\
  the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
  \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
  \ str2ng 2 of the 2nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @res;\n    my $i = 0;\n    foreach my $str (@$lst) {\n     \
    \   my $odd_count = 0;\n        foreach my $digit (split(//, $str)) {\n      \
    \      $odd_count += $digit % 2 ? 1 : 0;\n        }\n        push(@res, \"the\
    \ number of odd elements $odd_count in the str$i of the $i$str\");\n        $i++;\n\
    \    }\n    return @res;\n}", "    my @res;\n    my $odd_count = 0;\n    foreach\
    \ my $str (@$lst) {\n        $odd_count += $str =~ tr/0-9//;\n    }\n    push\
    \ @res, sprintf(\"the number of odd elements %n the str%n %n of the %nput.\",\
    \ $odd_count, $odd_count, $odd_count);\n    return @res;\n}", "    my(@res);\n\
    \    foreach my $str (@$lst) {\n        my $count = 0;\n        foreach my $digit\
    \ (split(//, $str)) {\n            $count += $digit % 2;\n        }\n        push(@res,\
    \ \"the number of odd elements $count in the $str\");\n    }\n    return @res;\n\
    }", "    my(@odd_counts);\n    foreach my $str (@$lst) {\n        my $odd_count\
    \ = 0;\n        foreach my $digit (split(//, $str)) {\n            $odd_count\
    \ += $digit % 2 ? 1 : 0;\n        }\n        push(@odd_counts, $odd_count);\n\
    \    }\n    return @odd_counts;\n}", "    my @result;\n    my $odd_count = 0;\n\
    \    foreach my $str (@$lst) {\n        foreach my $digit (split(//, $str)) {\n\
    \            $odd_count += $digit % 2;\n        }\n        push(@result, $odd_count\
    \ . \" odd elements in the $str\");\n        $odd_count = 0;\n    }\n    return\
    \ @result;\n}", "    my @out;\n    my $odd_count = 0;\n    foreach my $str (@$lst)\
    \ {\n        my $count = 0;\n        foreach my $digit (split(//, $str)) {\n \
    \           $count += $digit % 2 ? 1 : 0;\n        }\n        $odd_count += $count;\n\
    \        push(@out, $count . \" \" . $str);\n    }\n    return @out;\n}", "  \
    \  my @odd_counts;\n    my $odd_count = 0;\n    foreach my $str (@$lst) {\n  \
    \      my $odd_count = 0;\n        foreach my $char (split(//, $str)) {\n    \
    \        $odd_count += $char % 2;\n        }\n        push @odd_counts, $odd_count\
    \ . \" \" . $str;\n    }\n    return @odd_counts;\n}", "    my @odd;\n    my $i\
    \ = 0;\n    foreach my $str (@$lst) {\n        $i++;\n        my @digits = split(//,\
    \ $str);\n        foreach my $digit (@digits) {\n            push(@odd, $digit\
    \ % 2 ? 1 : 0);\n        }\n    }\n    return @odd;\n}", "    my(@counts);\n \
    \   foreach my $str (@$lst) {\n        foreach my $digit (split(//, $str)) {\n\
    \            push(@counts, $digit % 2 ? 1 : 0);\n        }\n    }\n    return\
    \ @counts;\n}", "    my @res;\n    my $odd_count = 0;\n    foreach my $str (@$lst)\
    \ {\n        my $odd_digits = 0;\n        foreach my $digit (split(//, $str))\
    \ {\n            $odd_digits += $digit % 2;\n        }\n        push @res, sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", $odd_digits, $odd_count,\
    \ $odd_digits);\n        $odd_count += $odd_digits;\n    }\n    return @res;\n\
    }", "    my @out;\n    my $odd_count = 0;\n    my $odd_digit = 0;\n    foreach\
    \ my $str (@$lst) {\n        foreach my $digit (split(//, $str)) {\n         \
    \   $odd_digit++;\n            if ($odd_digit % 2 != 0) {\n                $odd_count++;\n\
    \            }\n        }\n    }\n    push(@out, $odd_count);\n    foreach my\
    \ $str (@$lst) {\n        foreach my $digit (split(//, $str)) {\n            $odd_digit--;\n\
    \            if ($odd_digit % 2 != 0) {\n                $odd_count--;\n     \
    \       }\n        }\n    }\n    push(@out, $odd_count);\n    return @out;\n}",
  "    my @result;\n    my $odd_count = 0;\n    foreach my $str (@$lst) {\n      \
    \  foreach my $digit (split(//, $str)) {\n            $odd_count += $digit % 2;\n\
    \        }\n        push(@result, $odd_count . \" odd digits in $str\");\n   \
    \     $odd_count = 0;\n    }\n    return @result;\n}", "    my @odd_counts;\n\
    \    my $odd_count = 0;\n    foreach my $str (@$lst) {\n        foreach my $digit\
    \ (split(//, $str)) {\n            $odd_count += $digit % 2;\n        }\n    \
    \    push @odd_counts, $odd_count if $odd_count > 0;\n        $odd_count = 0;\n\
    \    }\n    return @odd_counts;\n}", "    my @res;\n    my $odd_count = 0;\n \
    \   foreach my $str (@$lst) {\n        $odd_count += $str =~ /\\d/;\n    }\n \
    \   push @res, \"the number of odd elements $odd_count of the $lst[0]\";\n   \
    \ return @res;\n}", "    my @res;\n    my $odd_count = 0;\n    my $i;\n    for\
    \ ($i = 0; $i < @$lst; $i++) {\n        my $str = $lst->[$i];\n        $odd_count\
    \ += $str =~ tr/0-9//;\n    }\n    push @res, sprintf \"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\", $odd_count, @$lst;\n    return @res;\n}",
  "    my @res;\n    my $i = 0;\n    foreach my $str (@$lst) {\n        $i++;\n  \
    \      my $count = 0;\n        foreach my $digit (split(//, $str)) {\n       \
    \     $count += $digit % 2;\n        }\n        push @res, \"the number of odd\
    \ elements $count in the str$i of the $i\";\n    }\n    return @res;\n}", "  \
    \  my @result;\n    my $odd_count = 0;\n    foreach my $str (@$lst) {\n      \
    \  foreach my $digit (split(//, $str)) {\n            $odd_count += $digit % 2;\n\
    \        }\n        push(@result, $odd_count . \" odd digits in $str\");\n   \
    \     $odd_count = 0;\n    }\n    return @result;\n}", "    my @res;\n    my $odd_count\
    \ = 0;\n    my $digit;\n    foreach my $str (@$lst) {\n        $digit = 0;\n \
    \       foreach my $char (split(//, $str)) {\n            $digit += $char & 1;\n\
    \        }\n        $odd_count += $digit;\n    }\n    push @res, \"the number\
    \ of odd elements $odd_count of the $lst[0]\";\n    return @res;\n}", "    my\
    \ @res;\n    my $odd_count = 0;\n    foreach my $str (@$lst) {\n        $odd_count\
    \ += $str =~ /\\d/;\n    }\n    push @res, \"the number of odd elements $odd_count\
    \ of the $lst[0]\";\n    return @res;\n}", "    my @res;\n    my $odd_count =\
    \ 0;\n    foreach my $str (@$lst) {\n        my $count = 0;\n        foreach my\
    \ $char (split //, $str) {\n            $count += $char =~ /\\d/;\n        }\n\
    \        $odd_count += $count % 2;\n        push @res, \"the number of odd elements\
    \ $count in the $str\";\n    }\n    return @res;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
