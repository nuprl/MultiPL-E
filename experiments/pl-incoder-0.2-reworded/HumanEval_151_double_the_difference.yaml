name: HumanEval_151_double_the_difference
language: pl
prompt: "# Given an array of numbers, return the sum of squares of the numbers\n#\
  \ in the array that are odd. Ignore numbers that are negative or not integers.\n\
  # >>> double_the_difference([1, 3, 2, 0])\n# 10\n# >>> double_the_difference([-1,\
  \ -2, 0])\n# 0\n# >>> double_the_difference([9, -2])\n# 81\n# >>> double_the_difference([0])\n\
  # 0\n# If the input array is empty, return 0.\nsub double_the_difference {\n   \
  \ my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
  \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
  \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
  \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0, -7.0,\
  \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >\
    \ 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >= 0) {\n\
    \            $sum += $num;\n        }\n    }\n    return $sum if $sum;\n    return\
    \ 0;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum if $sum >\
    \ 0;\n    return 0;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n  \
    \      if ($num >= 0) {\n            $sum += $num;\n        }\n    }\n    return\
    \ $sum if $sum > 0;\n    return 0;\n}", "    my $sum = 0;\n    foreach my $num\
    \ (@$lst) {\n        if ($num < 0) {\n            $sum -= $num;\n        } elsif\
    \ ($num == 0 ) {\n            $sum -= $num;\n        } else {\n            $sum\
    \ += $num * $num;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $num (@$lst) {\n        if ($num > 0) {\n            $sum += $num\
    \ * $num;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach\
    \ my $num (@$lst) {\n        if ($num < 0) {\n            next;\n        }\n \
    \       if ($num % 2 == 1) {\n            $sum += $num;\n        }\n    }\n  \
    \  return $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n      \
    \  if ($num >= 0) {\n            $sum += $num;\n        }\n    }\n    return $sum\
    \ if $sum > 0;\n    return 0;\n}", "    my $sum = 0;\n    foreach my $num (@$lst)\
    \ {\n        if ($num > 0) {\n            $sum += $num * $num;\n        }\n  \
    \  }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n\
    \        if ($num < 0) {\n            $sum -= $num;\n        } else {\n      \
    \      $sum += $num;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $num (@$lst) {\n        if ($num < 0) {\n            $sum -= $num;\n\
    \        } else {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num != 0) {\n\
    \            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num != 0) {\n  \
    \          $sum += $num * $num;\n        }\n    }\n    return $sum;\n}", "   \
    \ my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >= 0) {\n    \
    \        $sum += $num;\n        }\n    }\n    return $sum if $sum > 0;\n    return\
    \ 0;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num <\
    \ 0) {\n            $sum -= $num;\n        } elsif ($num == 0 || !int($num)) {\n\
    \            $sum += $num;\n        } else {\n            $sum += $num * $num;\n\
    \        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num\
    \ (@$lst) {\n        if ($num < 0) {\n            $sum -= $num;\n        } elsif\
    \ ($num == $num) {\n            $sum += $num;\n        } else {\n            $sum\
    \ += $num * $num;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $num (@$lst) {\n        if ($num > 0) {\n            $sum += $num\
    \ * $num;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach\
    \ my $num (@$lst) {\n        if ($num > 0) {\n            $sum += $num * $num;\n\
    \        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num\
    \ (@$lst) {\n        if ($num < 0) {\n            $sum -= $num;\n        } elsif\
    \ ($num == $num) {\n            $sum += $num;\n        } else {\n            $sum\
    \ += $num * $num;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $num (@$lst) {\n        if ($num >= 0) {\n            $sum +=\
    \ $num;\n        } else {\n            $sum += $num * $num;\n        }\n    }\n\
    \    return $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
