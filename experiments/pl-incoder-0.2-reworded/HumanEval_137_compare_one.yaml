name: HumanEval_137_compare_one
language: pl
prompt: "# Create a function that takes integers, floats, or strings representing\n\
  # real numbers, and returns the larger variable in its given variable type.\n# Return\
  \ undef if the values are equal.\n# Note: If a real number is represented as a string,\
  \ the floating point might be . or ,\n# >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1,\
  \ \"2,3\")\n# \"2,3\"\n# >>> compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one(\"\
  1\", 1)\n# undef\nsub compare_one {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare_one;\n\
  \        if(eq_deeply($candidate->(1, 2),2)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2.5),2.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
  \ 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
  \ 6),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ \"2,3\"),\"2,3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5,1\", \"6\"),\"6\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"\
  2\"),\"2\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"1\", 1),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return undef unless defined $a && defined $b;\n    return undef\
    \ if $a eq $b;\n    return $a > $b ? $a : $b;\n}", "    my $type = ref($a);\n\
    \    my $type2 = ref($b);\n    if ($type eq $type2) {\n        if ($type eq \"\
    HASH\") {\n            foreach my $key (keys %{$a}) {\n                if ($a->{$key}\
    \ ne $b->{$key}) {\n                    return $a->{$key};\n                }\n\
    \            }\n        } elsif ($type eq \"ARRAY\") {\n            foreach my\
    \ $i (0 .. @{$a} - 1) {\n                if ($a->[$i] ne $b->[$i]) {\n       \
    \             return $a->[$i];\n                }\n            }\n        } elsif\
    \ ($type eq \"SCALAR\") {\n            if ($a->[0] ne $b->[0]) {\n           \
    \     return $a->[0];\n            }\n        } elsif ($type eq \"IO::Handle\"\
    ) {\n            if ($a->fileno() ne $b->fileno()) {\n                return $a->fileno();\n\
    \            }\n        } elsif ($type eq \"IO::File\") {\n            if ($a->fileno()\
    \ ne $b->fileno()) {\n                return $a->fileno();\n            }\n  \
    \      } elsif ($type eq \"IO::Scalar\") {\n            if ($a->[0] ne $b->[0])\
    \ {\n                return $a->[0];\n            }\n        } elsif ($type eq\
    \ \"IO::Scalar::INLINE\") {\n            if ($a->[0] ne $b->[0]) {\n         \
    \       return $a->[0];\n            }\n        } else {\n            return undef;\n\
    \        }\n    } else {\n        return undef;\n    }\n}", "    return undef\
    \ unless defined $a && defined $b;\n    return undef if $a eq $b;\n    return\
    \ $a if $a < $b;\n    return $b;\n}", "    return undef unless defined $a && defined\
    \ $b;\n    return undef if $a eq $b;\n    return $a > $b ? $a : $b;\n}", "   \
    \ return undef unless defined $a && defined $b;\n    return $a cmp $b if ($a =~\
    \ /^-?\\d+$/) && ($b =~ /^-?\\d+$/);\n    return $a cmp $b if ($a =~ /^-?\\d+\\\
    .\\d+$/) && ($b =~ /^-?\\d+\\.\\d+$/);\n    return $a cmp $b if ($a =~ /^-?\\\
    d+\\.\\d$/) && ($b =~ /^-?\\d+\\.\\d$/);\n    return $a cmp $b if ($a =~ /^-?\\\
    d+,\\d+$/) && ($b =~ /^-?\\d+,\\d+$/);\n    return $a cmp $b if ($a =~ /^-?\\\
    d+\\.\\d+$/) && ($b =~ /^-?\\d+\\.\\d+$/);\n    return $a cmp $b if ($a =~ /^-?\\\
    d+,\\d+\\.\\d+$/) && ($b =~ /^-?\\d+,\\d+\\.\\d+$/);\n    return $a cmp $b if\
    \ ($a =~ /^-?\\d+\\.\\d+$/) && ($b =~ /^-?\\d+\\.\\d+$/);\n    return $a cmp $b\
    \ if ($a =~ /^-?\\d+,\\d+\\.\\d+$/) && ($b =~ /^-?\\d+,\\d+\\.\\d+$/);\n    return\
    \ $a cmp $b if ($a =~ /^-?\\d+\\.\\d+$/) && ($b =~ /^-?\\d+\\.\\d+$/);\n    return\
    \ $a cmp $b if ($a =~ /^-?\\d+,\\d+\\.\\d+$/) && ($b =~ /^-?\\d+,\\d+\\.\\d+$/);\n\
    \    return $a cmp $b if ($a =~ /^-?\\d+\\.\\d+$/) && ($b =~ /^-?\\d+\\.\\d+$/);\n\
    \    return $a cmp $b if ($a =~ /^-?\\d+,\\d+\\.\\d+$/) && ($b =~ /^-?\\d+,\\\
    d+\\.\\d+$/);\n    return $a cmp $b if ($a =~ /^-?\\d+\\.\\d+$/) && ($b =~ /^-?\\\
    d+\\.\\d+$/);\n    return $a cmp $b if ($a =~ /^-?\\d+,\\d+\\.\\d+$/) && ($b =~\
    \ /^-?\\d+,\\d+\\.\\d+$/);\n    return $a cmp $b if ($a =~ /^-?\\d+\\.\\d+$/)\
    \ && ($b =~ /^-?\\d+\\.\\d+$/);\n    return $a cmp $b if ($a =~ /^-?\\d+,\\d+\\\
    .\\d+$/) && ($b =~ /^-?\\d+,", "    return undef unless $a eq $b;\n    return\
    \ $a if $a =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d+$/;\n    return $a\
    \ if $a =~ /^\\d+\\.\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a\
    \ =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a\
    \ =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a\
    \ =~ /^\\d+\\.\\d\\d$/;\n    return $a if $a =~ /^\\d+\\.\\d\\d$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d\\d", "    return undef unless defined $a && defined\
    \ $b;\n    return $a > $b ? $a : $b;\n}", "    return undef unless $a =~ /^-?\\\
    d+$/;\n    return undef unless $b =~ /^-?\\d+$/;\n    return undef if $a eq $b;\n\
    \    return undef if $a =~ /^-?\\d+\\.\\d*$/;\n    return undef if $b =~ /^-?\\\
    d+\\.\\d*$/;\n    return undef if $a =~ /^-?\\d+\\.\\d*\\+$/;\n    return undef\
    \ if $b =~ /^-?\\d+\\.\\d*\\+$/;\n    return undef if $a =~ /^-?\\d+\\.\\d*\\\
    +\\.\\d*$/;\n    return undef if $b =~ /^-?\\d+\\.\\d*\\+\\.\\d*$/;\n    return\
    \ undef if $a =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+$/;\n    return undef if $b =~ /^-?\\\
    d+\\.\\d*\\+\\.\\d*\\+$/;\n    return undef if $a =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\\
    +\\.\\d*$/;\n    return undef if $b =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*$/;\n\
    \    return undef if $a =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+$/;\n    return\
    \ undef if $b =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+$/;\n    return undef if\
    \ $a =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\.\\d*$/;\n    return undef if\
    \ $b =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\.\\d*$/;\n    return undef if\
    \ $a =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+$/;\n    return undef\
    \ if $b =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+$/;\n    return undef\
    \ if $a =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\.\\d*$/;\n    return\
    \ undef if $b =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\.\\d*$/;\n\
    \    return undef if $a =~ /^-?\\d+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\.\\d*\\+\\\
    .\\d*\\+$/;\n    return undef if $b =~ /^-", "    return undef unless $a eq $b;\n\
    \    return $a if $a =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n \
    \   return $a if $a =~ /^\\d+\\.\\d*,\\d*$/;\n    return $a if $a =~ /^\\d+\\\
    .\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $a =~\
    \ /^\\d+,\\d+$/;\n    return $a if $a =~ /^\\d+,\\d*$/;\n    return $a if $a =~\
    \ /^\\d+,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n\
    \    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a\
    \ =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n\
    \    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a\
    \ =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n\
    \    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a\
    \ =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return\
    \ $a if $", "    return undef unless defined $a and defined $b;\n    return $a\
    \ > $b ? $a : $b;\n}", "    my $type = ref($a);\n    my $type2 = ref($b);\n  \
    \  if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($type eq \"ARRAY\") {\n        return compare_one($a->[0], $b->[0]) ? $a->[1]\
    \ > $b->[1] ? $a->[1] : $b->[1] : undef;\n    }\n    elsif ($type eq \"HASH\"\
    ) {\n        return compare_one($a->{val}, $b->{val}) ? $a->{val} > $b->{val}\
    \ ? $a->{val} : $b->{val} : undef;\n    }\n    elsif ($type eq \"CODE\") {\n \
    \       return compare_one($a->($a->[0]), $b->($b->[0])) ? $a->($a->[1]) > $b->($b->[1])\
    \ ? $a->($a->[1]) : $b->($b->[1]) : undef;\n    }\n    elsif ($type eq \"SCALAR\"\
    ) {\n        return compare_one($a, $b);\n    }\n    elsif ($type eq \"IO::Handle\"\
    ) {\n        return compare_one($a->fileno(), $b->fileno());\n    }\n    elsif\
    \ ($type eq \"IO::File\") {\n        return compare_one($a->fileno(), $b->fileno());\n\
    \    }\n    elsif ($type eq \"IO::Pipe\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Socket\") {\n        return\
    \ compare_one($a->fileno(), $b->fileno());\n    }\n    elsif ($type eq \"IO::Dir\"\
    ) {\n        return compare_one($a->fileno(), $b->fileno());\n    }\n    elsif\
    \ ($type eq \"IO::Select\") {\n        return compare_one($a->fileno(), $b->fileno());\n\
    \    }\n    elsif ($type eq \"IO::Poll\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Select\") {\n        return\
    \ compare_one($a->fileno(), $b->fileno());\n    }\n    elsif ($type eq \"IO::Poll\"\
    ) {\n        return compare_one($a->fileno(), $b->fileno());\n    }\n    elsif\
    \ ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(), $b->fileno());\n\
    \    }\n    elsif ", "    return undef unless defined $a && defined $b;\n    return\
    \ undef if $a eq $b;\n    return $a > $b ? $a : $b;\n}", "    return undef unless\
    \ defined $a && defined $b;\n    return $a > $b ? $a : $b;\n}", "    return undef\
    \ unless $a =~ /^-?\\d+$/;\n    return undef unless $b =~ /^-?\\d+$/;\n    return\
    \ undef if $a == $b;\n    return undef if $a eq $b;\n    return undef if $a =~\
    \ /^-?\\d+\\.?\\d*$/;\n    return undef if $b =~ /^-?\\d+\\.?\\d*$/;\n    return\
    \ undef if $a =~ /^-?\\d+,\\d+$/;\n    return undef if $b =~ /^-?\\d+,\\d+$/;\n\
    \    return undef if $a =~ /^-?\\d+\\.?\\d*,\\d+$/;\n    return undef if $b =~\
    \ /^-?\\d+\\.?\\d*,\\d+$/;\n    return undef if $a =~ /^-?\\d+,\\d+\\.?\\d*$/;\n\
    \    return undef if $b =~ /^-?\\d+,\\d+\\.?\\d*$/;\n    return undef if $a =~\
    \ /^-?\\d+\\.?\\d*,\\d+\\.?\\d*$/;\n    return undef if $b =~ /^-?\\d+\\.?\\d*,\\\
    d+\\.?\\d*$/;\n    return undef if $a =~ /^-?\\d+,\\d+\\.?\\d*,\\d+$/;\n    return\
    \ undef if $b =~ /^-?\\d+,\\d+\\.?\\d*,\\d+$/;\n    return undef if $a =~ /^-?\\\
    d+\\.?\\d*,\\d+\\.?\\d*,\\d+$/;\n    return undef if $b =~ /^-?\\d+\\.?\\d*,\\\
    d+\\.?\\d*,\\d+$/;\n    return undef if $a =~ /^-?\\d+,\\d+\\.?\\d*,\\d+\\.?\\\
    d*$/;\n    return undef if $b =~ /^-?\\d+,\\d+\\.?\\d*,\\d+\\.?\\d*$/;\n    return\
    \ undef if $a =~ /^-?\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*$/;\n    return undef\
    \ if $b =~ /^-?\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*$/;\n    return undef if\
    \ $a =~ /^-?\\d+,\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+$/;\n    return undef if $b =~\
    \ /^-?\\d+,\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+$/;\n    return undef if $a =~ /^-?\\\
    d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+$/;\n    return undef if $b =~ /^", " \
    \   return undef unless defined $a and defined $b;\n    return $a if $a eq $b;\n\
    \    return $a <=> $b;\n}", "    if ($a eq $b) {\n        return $a;\n    }\n\
    \    elsif ($a =~ /^\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif ($b\
    \ =~ /^\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+$/)\
    \ {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+$/) {\n        return $a;\n\
    \    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $b;\n\
    \    }\n    elsif ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $a;\n\
    \    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+$/) {\n        return $b;\n    }\n\
    \    elsif ($b =~ /^\\d+\\.?\\d*,\\d+$/) {\n        return $a;\n    }\n    elsif\
    \ ($a =~ /^\\d+,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif ($b =~\
    \ /^\\d+,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+,\\\
    d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+,\\d+$/) {\n      \
    \  return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n    \
    \    return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n  \
    \      return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n\
    \        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n\
    \        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n\
    \        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n\
    \        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n\
    \        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n\
    \        return $a;\n    }\n    elsif ($a =~ /^", "    return undef unless defined\
    \ $a && defined $b;\n    return $a if $a eq $b;\n    return $a if $a lt $b;\n\
    \    return $a if $a gt $b;\n    return $a if $a le $b;\n    return $a if $a ge\
    \ $b;\n    return $a if $a cmp $b;\n    return $a if $a cmp $b;\n    return $a\
    \ if $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a eq $b;\n    return\
    \ $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n  \
    \  return $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne\
    \ $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if\
    \ $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n    return\
    \ $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n  \
    \  return $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne\
    \ $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if\
    \ $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n    return\
    \ $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n  \
    \  return $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne\
    \ $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if\
    \ $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n    return\
    \ $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne $b;\n  \
    \  return $a if $a ne $b;\n    return $a if $a ne $b;\n    return $a if $a ne\
    \ $b;\n    return $a if $a ne $b;\n    return ", "    my $type = ref($a);\n  \
    \  if ($type eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n    } elsif ($type\
    \ eq 'ARRAY') {\n        my $cmp = 0;\n        foreach my $elem (@$a) {\n    \
    \        $cmp = compare_one($elem, $b) ? $elem : $b;\n        }\n        return\
    \ $cmp;\n    } elsif ($type eq 'HASH') {\n        my $cmp = 0;\n        foreach\
    \ my $key (keys %$a) {\n            $cmp = compare_one($key, $b) ? $key : $b;\n\
    \        }\n        return $cmp;\n    } elsif ($type eq 'CODE') {\n        return\
    \ compare_one($a->($b), $b);\n    } elsif ($type eq 'GLOB') {\n        return\
    \ compare_one($a->($b), $b);\n    } elsif ($type eq 'IO::Handle') {\n        return\
    \ compare_one($a->($b), $b);\n    } elsif ($type eq 'overload::') {\n        return\
    \ compare_one($a->($b), $b);\n    } elsif ($type eq 'UNIVERSAL') {\n        return\
    \ compare_one($a->($b), $b);\n    } elsif ($type eq 'integer') {\n        return\
    \ $a > $b ? $a : $b;\n    } elsif ($type eq 'float') {\n        return $a > $b\
    \ ? $a : $b;\n    } elsif ($type eq 'undef') {\n        return $a eq $b ? $a :\
    \ $b;\n    } else {\n        return undef;\n    }\n}", "    my $type = ref($a);\n\
    \    my $type2 = ref($b);\n    if ($type eq $type2) {\n        return $a cmp $b;\n\
    \    }\n    if ($type eq \"HASH\") {\n        return compare_one($a->{val}, $b->{val});\n\
    \    }\n    if ($type eq \"ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n\
    \    }\n    if ($type eq \"SCALAR\") {\n        return compare_one($a, $b);\n\
    \    }\n    if ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    if ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    if ($type eq \"IO::Seekable\") {\n        return\
    \ compare_one($a->{fh}, $b->{fh});\n    }\n    if ($type eq \"IO::Dir\") {\n \
    \       return compare_one($a->{name}, $b->{name});\n    }\n    if ($type eq \"\
    IO::Socket\") {\n        return compare_one($a->{peer}, $b->{peer});\n    }\n\
    \    if ($type eq \"IO::Select\") {\n        return compare_one($a->{fds}, $b->{fds});\n\
    \    }\n    if ($type eq \"IO::Poll\") {\n        return compare_one($a->{fds},\
    \ $b->{fds});\n    }\n    if ($type eq \"IO::Select\") {\n        return compare_one($a->{fds},\
    \ $b->{fds});\n    }\n    if ($type eq \"IO::Poll\") {\n        return compare_one($a->{fds},\
    \ $b->{fds});\n    }\n    if ($type eq \"IO::Select\") {\n        return compare_one($a->{fds},\
    \ $b->{fds});\n    }\n    if ($type eq \"IO::Poll\") {\n        return compare_one($a->{fds},\
    \ $b->{fds});\n    }\n    if ($type eq \"IO::Poll\") {\n        return compare_one($a->{fds},\
    \ $b->{fds});\n    }\n    if ($type eq \"IO::Poll\") {\n        return compare_one($a->{fds},\
    \ $b->{fds});\n    }\n    if ($type eq \"IO::Poll\") {\n        return compare_one($a->{fds},\
    \ $b->{fds});\n    }\n    if ($type eq \"IO::Poll\") {\n        return compare_one($a->{fds},\
    \ $b->", "    my $type = ref($a);\n    if ($type eq 'ARRAY') {\n        my $cmp\
    \ = 0;\n        foreach my $elem (@$a) {\n            $cmp = compare_one($elem,\
    \ $b) if $elem ne $b;\n        }\n        return $cmp if $cmp;\n    } elsif ($type\
    \ eq 'HASH') {\n        my $cmp = 0;\n        foreach my $key (keys %$a) {\n \
    \           $cmp = compare_one($a->{$key}, $b->{$key}) if $a->{$key} ne $b->{$key};\n\
    \        }\n        return $cmp if $cmp;\n    } elsif ($type eq 'SCALAR') {\n\
    \        return $a > $b ? 1 : 0;\n    } elsif ($type eq 'CODE') {\n        return\
    \ $a->($b) ? 1 : 0;\n    } elsif ($type eq 'GLOB') {\n        return $a->($b)\
    \ ? 1 : 0;\n    } elsif ($type eq 'IO::Handle') {\n        return $a->($b) ? 1\
    \ : 0;\n    } elsif ($type eq 'IO::File') {\n        return $a->($b) ? 1 : 0;\n\
    \    } elsif ($type eq 'IO::Scalar') {\n        return $a->($b) ? 1 : 0;\n   \
    \ } elsif ($type eq 'IO::Scalar::INLINE') {\n        return $a->($b) ? 1 : 0;\n\
    \    } elsif ($type eq 'IO::Scalar::Util') {\n        return $a->($b) ? 1 : 0;\n\
    \    } elsif ($type eq 'IO::Scalar::Concise') {\n        return $a->($b) ? 1 :\
    \ 0;\n    } elsif ($type eq 'IO::Scalar::Util::INLINE') {\n        return $a->($b)\
    \ ? 1 : 0;\n    } elsif ($type eq 'IO::Scalar::Util::Concise') {\n        return\
    \ $a->($b) ? 1 : 0;\n    } elsif ($type eq 'IO::Scalar::Util::Any') {\n      \
    \  return $a->($b) ? 1 : 0;\n    } elsif ($type eq 'IO::Scalar::Util::Any::INLINE')\
    \ {\n        return $a->($b) ? 1 : 0;\n    } elsif ($type eq 'IO::Scalar::Util::Any::Concise')\
    \ {\n        return $a->($b) ? 1 : 0;\n    } elsif ($type eq 'IO::Scalar::Util::Any::Any')\
    \ {\n        return $a->($b) ? 1 : 0;\n    } elsif ($type eq 'IO::Scalar::Util::Any::Any::INLINE')\
    \ {"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
