name: HumanEval_49_modp
language: pl
prompt: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n# >>>\
  \ modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100,\
  \ 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n \
  \       if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
  \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
  \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
  \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $r = $n % $p;\n    if ($r == 0) {\n        $r = $p;\n    }\n\
    \    return $r;\n}", "    my $r = $n % $p;\n    if ($r == 0) {\n        $r = 1;\n\
    \    }\n    return $r;\n}", "    my $m = $n % $p;\n    if ($m == 0) {\n      \
    \  return $n;\n    }\n    elsif ($m < 0) {\n        return $p + modp($n, $p);\n\
    \    }\n    else {\n        return $n;\n    }\n}", "    return $n if $n <= 0;\n\
    \    return $n if $n >= $p;\n    return $n % $p;\n}", "    my $n = int($n);\n\
    \    my $p = int($p);\n    my $r = $n % $p;\n    if ($r == 0) {\n        return\
    \ $n;\n    }\n    my $q = $p / $r;\n    return $q * $n + $r;\n}", "    my $x =\
    \ $n % $p;\n    return $x if $x == 0;\n    return $p if $x == $p;\n    return\
    \ $x % $p;\n}", "    my $r = $n % $p;\n    if ($r == 0) {\n        return 1;\n\
    \    }\n    return $p;\n}", "    my $x = $n;\n    my $y = $p;\n    my $z = 1;\n\
    \    my $r = 1;\n    my $m = 1;\n    my $k = 0;\n    my $w = 0;", "    my $s =\
    \ $n % $p;\n    if ($s == 0) {\n        return $n;\n    }\n    return $p - ($s\
    \ * ($p - 1));\n}", "    my $x = $n;\n    my $y = $p;\n    my $z = 1;\n    while\
    \ ($x != 0) {\n        $z = ($x % $y) * $z;\n        $x = int($x / $y);\n    }\n\
    \    return $z;\n}", "    my $x = $n % $p;\n    return $x if $x == 0;\n    return\
    \ $p - ($x - $p) % $p;\n}", "    my $m = $p % $n;\n    return $m if $m != 0;\n\
    \    return $n;\n}", "    my $n = int($n);\n    my $p = int($p);\n    my $r =\
    \ $n % $p;\n    $r = 0 if $r == 0;\n    return $r;\n}", "    my $x = $n % $p;\n\
    \    if ($x == 0) {\n        return $p;\n    }\n    my $r = $p - $x;\n    return\
    \ $r if $r < 0;\n    return $p;\n}", "    return $n if $n < 0;\n    return $n\
    \ if $n == 0;\n    return $n if $p < 0;\n    return $n if $p == 0;\n    return\
    \ $n if $n == $p;\n    return $n % $p;\n}", "    my $result = $n % $p;\n    if\
    \ ($result < 0) {\n        $result += $p;\n    }\n    return $result;\n}", " \
    \   return $n if $n <= 0;\n    return $n if $n >= $p;\n    return $n % $p;\n}",
  "    my $n = int($n);\n    my $p = int($p);\n    my $r = $n % $p;\n    return $r\
    \ if $r == 0;\n    return $p - $r;\n}", "    return $n if $n == 0;\n    return\
    \ $n if $n == 1;\n    return $n if $n <= $p;\n    return $n % $p;\n}", "    my\
    \ $r = $n % $p;\n    return $r if $r;\n    return $p if $n == 0;\n    return $p\
    \ - 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
