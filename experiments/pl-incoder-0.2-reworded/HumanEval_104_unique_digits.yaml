name: HumanEval_104_unique_digits
language: pl
prompt: "# Given an array of positive integers x. return a sorted array of all \n\
  # elements that hasn't any even digit.\n# Note: Returned array should be sorted\
  \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
  # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
  \ {\n    my($x) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
  \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
  \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
  \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n\
    \    \n    while($i < $#x) {\n        while($j < $#x && $x[$j] % 2 == 0) {\n \
    \           $j++;\n        }\n        if($j < $#x) {\n            push(@result,\
    \ $x[$i]);\n            $i++;\n            $j++;\n        }\n    }\n    return\
    \ @result;\n}", "    my @res;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $tmp = 0;\n    my $flag = 0;\n    \n    foreach my $num (@$x) {\n    \
    \    $flag = 0;\n        \n        foreach my $digit (@digits) {\n           \
    \ if ($num % $digit == 0) {\n                $flag = 1;\n            }\n     \
    \   }\n        \n        if ($flag == 0) {\n            $res[$i] = $num;\n   \
    \         $i++;\n        }\n    }\n    \n    return @res;\n}", "    my @result;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n    my $temp;\n    my $count\
    \ = 0;\n    my $temp2;\n    \n    while($i < @$x) {\n        $temp = $x->[$i];\n\
    \        $temp2 = $x->[$j];\n        \n        if($temp2 =~ /\\d/ && $temp =~\
    \ /\\d/) {\n            $count++;\n        }\n        \n        if($temp2 =~ /\\\
    d/ && $temp =~ /\\d/ && $temp2 ne $temp) {\n            $flag = 1;\n        }\n\
    \        \n        if($flag == 1) {\n            push(@result, $temp);\n     \
    \   }\n        \n        $i++;\n        $j++;\n    }\n    \n    return @result;\n\
    }", "    my @result;\n    my $i = 0;\n    \n    while($i < $#x) {\n        my\
    \ $digit = $x[$i];\n        \n        while($i < $#x && $x[$i] % $digit == 0)\
    \ {\n            $i++;\n        }\n        \n        if($i < $#x) {\n        \
    \    push (@result, $x[$i]);\n        }\n    }\n    \n    return @result;\n}",
  "    my @result = ();\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    \n    while($i\
    \ < $#x) {\n        $tmp = $x[$i];\n        while($j < $#x && $x[$j] % $tmp ==\
    \ 0) {\n            $j++;\n        }\n        \n        if($j < $#x) {\n     \
    \       push(@result, $tmp);\n            $i++;\n            $j++;\n        }\n\
    \    }\n    \n    return @result;\n}", "    my @res;\n    my $i = 0;\n    \n \
    \   while($i < @$x) {\n        if($x->[$i] % 2 == 0) {\n            push @res,\
    \ @$x->[$i];\n        }\n        $i++;\n    }\n    \n    return @res;\n}", " \
    \   my @a = ();\n    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n    my $temp;\n\
    \    \n    foreach my $num (@$x) {\n        if ($num % 2 == 0) {\n           \
    \ $flag = 1;\n        }\n        elsif ($flag == 1) {\n            $a[$i] = $num;\n\
    \            $i++;\n        }\n    }\n    \n    foreach my $num (@$x) {\n    \
    \    if ($num % 2 != 0) {\n            $flag = 0;\n        }\n        elsif ($flag\
    \ == 1) {\n            $a[$j] = $num;\n            $j++;\n        }\n    }\n \
    \   \n    return @a;\n}", "    my @result;\n    my $i = 0;\n    \n    foreach\
    \ my $num (@$x) {\n        my $digit = $num % 10;\n        \n        if ($digit\
    \ != 0) {\n            push(@result, $num);\n        }\n    }\n    \n    return\
    \ @result;\n}", "    my @result;\n    my $i = 0;\n    \n    foreach my $num (@$x)\
    \ {\n        if ($num % 2 == 0) {\n            $result[$i] = $num;\n         \
    \   $i++;\n        }\n    }\n    \n    return @result;\n}", "    my @result;\n\
    \    \n    foreach my $i (0..$#$x) {\n        my $digit = $x->[$i];\n        \n\
    \        foreach my $j ($i+1..$#$x) {\n            my $jdigit = $x->[$j];\n  \
    \          \n            next if $jdigit =~ /\\d/;\n            \n           \
    \ next if $digit == $jdigit;\n            \n            push @result, $x->[$i];\n\
    \        }\n    }\n    \n    return @result;\n}", "    my @result;\n    \n   \
    \ foreach my $i (@$x) {\n        foreach my $j (@$x) {\n            next if $i\
    \ == $j;\n            next if $i =~ /^$j/;\n            \n            push(@result,\
    \ $i);\n        }\n    }\n    \n    return @result;\n}", "    my @result;\n  \
    \  my $i = 0;\n    \n    foreach my $num (@$x) {\n        if ($num % 2 == 0) {\n\
    \            $result[$i] = $num;\n            $i++;\n        }\n    }\n    \n\
    \    return @result;\n}", "    my @result;\n    my $i = 0;\n    \n    while($i\
    \ < $#x) {\n        my $digit = $x[$i];\n        \n        for(my $j = $i+1; $j\
    \ < $#x; $j++) {\n            my $digit2 = $x[$j];\n            \n           \
    \ if($digit == $digit2) {\n                next;\n            }\n            \n\
    \            if($digit < $digit2) {\n                last;\n            }\n  \
    \      }\n        \n        push @result, $digit;\n        $i++;\n    }\n    \n\
    \    return @result;\n}", "    my @result;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $flag = 0;\n    my $temp;\n    \n    while($i < $#x) {\n        $flag =\
    \ 0;\n        $temp = $x[$i];\n        while($j < $#x) {\n            if($x[$j]\
    \ % $temp == 0) {\n                $flag = 1;\n            }\n            $j++;\n\
    \        }\n        if($flag == 0) {\n            push(@result, $temp);\n    \
    \    }\n        $i++;\n    }\n    return @result;\n}", "    my @x;\n    my $i\
    \ = 0;\n    foreach my $num (@$x) {\n        my $digit = $num % 10;\n        push(@x,\
    \ $num) if $digit != 0;\n    }\n    foreach my $num (@x) {\n        my $digit\
    \ = $num % 10;\n        push(@x, $num) if $digit == 0;\n    }\n    return @x;\n\
    }", "    my @a = ();\n    my $i = 0;\n    \n    for(my $j = 0; $j < @$x; ++$j)\
    \ {\n        my $d = $x->[$j];\n        \n        if($d % 2 == 0) {\n        \
    \    push(@a, $d);\n        }\n    }\n    \n    for(my $j = 0; $j < @$x; ++$j)\
    \ {\n        my $d = $x->[$j];\n        \n        if($d % 2 != 0) {\n        \
    \    push(@a, $d);\n        }\n    }\n    \n    return @a;\n}", "    my @res;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $tmp86", "    my @result;\n\
    \    \n    foreach my $i (0..$#{$x}) {\n        my $digit = $x->[$i];\n      \
    \  \n        foreach my $j ($i+1..$#{$x}) {\n            my $jdigit = $x->[$j];\n\
    \            \n            next if $jdigit % 2 != 0;\n            \n         \
    \   next if $digit == $jdigit;\n            \n            push @result, $j;\n\
    \        }\n    }\n    \n    return @result;\n}", "    my @result;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $tmp;\n    \n    while($i < $#x) {\n        $tmp\
    \ = $x[$i];\n        while($j < $#x && $x[$j] % $tmp == 0) {\n            $j++;\n\
    \        }\n        if($j < $#x) {\n            $result[$i] = $x[$j];\n      \
    \      $i++;\n        }\n    }\n    return @result;\n}", "    my @result;\n  \
    \  my $count = 0;\n    foreach my $num (@$x) {\n        my $digit = $num % 10;\n\
    \        next if $digit == 0;\n        $count++;\n        push @result, $num if\
    \ $count > 1;\n    }\n    return @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
