name: HumanEval_95_check_dict_case
language: pl
prompt: "# Given a hash, return 1 if all keys are strings in lower \n# case or all\
  \ keys are strings in upper case, else return .\n# The function should return  is\
  \ the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" => \"apple\"\
  , \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" =>\
  \ \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"\
  apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
  \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
  \ {\n    my($dict) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
  \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
  }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
  Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $case = 1;\n    foreach my $key (keys %$dict) {\n        my\
    \ $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n            $case\
    \ = 0;\n            last;\n        }\n        if ($value =~ /^[A-Z]+$/i) {\n \
    \           $case = 1;\n            last;\n        }\n    }\n    return $case;\n\
    }", "    my $result = 1;\n    foreach my $key (keys %$dict) {\n        my $value\
    \ = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n            $result\
    \ = 1;\n        } elsif ($value =~ /^[A-Z]+$/i) {\n            $result = 1;\n\
    \        } else {\n            $result = 0;\n        }\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    foreach my $key (keys %$dict) {\n        my $value\
    \ = $dict->{$key};\n        if ($key =~ /^[a-z]+$/i) {\n            $result =\
    \ 1;\n        } elsif ($key =~ /^[A-Z]+$/i) {\n            $result = 1;\n    \
    \    } else {\n            $result = 0;\n        }\n    }\n    return $result;\n\
    }", "    my $case = lc($dict->{case});\n    my $case2 = lc($dict->{case2});\n\
    \    my $case3 = lc($dict->{case3});\n    my $case4 = lc($dict->{case4});\n  \
    \  my $case5 = lc($dict->{case5});\n    my $case6 = lc($dict->{case6});\n    my\
    \ $case7 = lc($dict->{case7});\n    my $case8 = lc($dict->{case8});\n    my $case9\
    \ = lc($dict->{case9});\n    my $case10 = lc($dict->{case10});\n    my $case11\
    \ = lc($dict->{case11});\n    my $case12 = lc($dict->{case12});\n    my $case13\
    \ = lc($dict->{case13});\n    my $case14 = lc($dict->{case14});\n    my $case15\
    \ = lc($dict->{case15});\n    my $case16 = lc($dict->{case16});\n    my $case17\
    \ = lc($dict->{case17});\n    my $case18 = lc($dict->{case18});\n    my $case19\
    \ = lc($dict->{case19});\n    my $case20 = lc($dict->{case20});\n    my $case21\
    \ = lc($dict->{case21});\n    my $case22 = lc($dict->{case22});\n    my $case23\
    \ = lc($dict->{case23});\n    my $case24 = lc($dict->{case24});\n    my $case25\
    \ = lc($dict->{case25});\n    my $case26 = lc($dict->{case26});\n    my $case27\
    \ = lc($dict->{case27});\n    my $case28 = lc($dict->{case28});\n    my $case29\
    \ = lc($dict->{case29});\n    my $case30 = lc($dict->{case30});\n    my $case31\
    \ = lc($dict->{case31});\n    my $case32 = lc($dict->{case32});\n    my $case33\
    \ = lc($dict->{case33});\n    my $case34 = lc($dict->{case34});\n    my $case35\
    \ = lc($dict->{case35});\n", "    my $case = uc($dict->{case});\n    my $case_insensitive\
    \ = uc($dict->{case_insensitive});\n    my $case_sensitive = uc($dict->{case_sensitive});\n\
    \    my $is_empty = scalar(keys(%$dict));\n    \n    if ($case eq 'lower' && $case_insensitive\
    \ eq 'upper' && $case_sensitive eq 'lower') {\n        return 1;\n    }\n    elsif\
    \ ($case eq 'upper' && $case_insensitive eq 'upper' && $case_sensitive eq 'upper')\
    \ {\n        return 1;\n    }\n    elsif ($case eq 'lower' && $case_insensitive\
    \ eq 'lower' && $case_sensitive eq 'upper') {\n        return 1;\n    }\n    elsif\
    \ ($case eq 'upper' && $case_insensitive eq 'upper' && $case_sensitive eq 'lower')\
    \ {\n        return 1;\n    }\n    elsif ($case eq 'lower' && $case_insensitive\
    \ eq 'upper' && $case_sensitive eq 'upper') {\n        return 1;\n    }\n    elsif\
    \ ($case eq 'upper' && $case_insensitive eq 'lower' && $case_sensitive eq 'lower')\
    \ {\n        return 1;\n    }\n    elsif ($case eq 'lower' && $case_insensitive\
    \ eq 'lower' && $case_sensitive eq 'lower') {\n        return 1;\n    }\n    elsif\
    \ ($case eq 'upper' && $case_insensitive eq 'upper' && $case_sensitive eq 'upper')\
    \ {\n        return 1;\n    }\n    elsif ($case eq 'upper' && $case_insensitive\
    \ eq 'lower' && $case_sensitive eq 'lower') {\n        return 1;\n    }\n    elsif\
    \ ($case eq 'upper' && $case_insensitive eq 'upper' && $case_sensitive eq 'upper')\
    \ {\n        return 1;\n    }\n    elsif ($case eq 'lower' && $case_insensitive\
    \ eq 'upper' && $case_sensitive eq 'upper') {\n        return 1;\n    }\n    elsif\
    \ ($case eq 'upper' && $case_insensitive eq 'upper' && $case_sensitive eq 'upper')\
    \ {\n        return 1;\n    }\n    elsif ($case eq 'upper' && $case_insensitive\
    \ eq 'lower' && $case_sensitive eq 'upper') {\n        return 1;\n    }\n    elsif\
    \ ($case eq 'upper' && $case_insensitive eq 'upper' && $case_sensitive eq 'upper')\
    \ {\n        return 1;\n    }\n    elsif ($case eq 'lower' && $case_insensitive\
    \ eq 'upper' && $case_sensitive eq", "    my $case = lc($dict->{case});\n    my\
    \ $case2 = lc($dict->{case2});\n    my $case3 = lc($dict->{case3});\n    my $case4\
    \ = lc($dict->{case4});\n    my $case5 = lc($dict->{case5});\n    my $case6 =\
    \ lc($dict->{case6});\n    my $case7 = lc($dict->{case7});\n    my $case8 = lc($dict->{case8});\n\
    \    my $case9 = lc($dict->{case9});\n    my $case10 = lc($dict->{case10});\n\
    \    my $case11 = lc($dict->{case11});\n    my $case12 = lc($dict->{case12});\n\
    \    my $case13 = lc($dict->{case13});\n    my $case14 = lc($dict->{case14});\n\
    \    my $case15 = lc($dict->{case15});\n    my $case16 = lc($dict->{case16});\n\
    \    my $case17 = lc($dict->{case17});\n    my $case18 = lc($dict->{case18});\n\
    \    my $case19 = lc($dict->{case19});\n    my $case20 = lc($dict->{case20});\n\
    \    my $case21 = lc($dict->{case21});\n    my $case22 = lc($dict->{case22});\n\
    \    my $case23 = lc($dict->{case23});\n    my $case24 = lc($dict->{case24});\n\
    \    my $case25 = lc($dict->{case25});\n    my $case26 = lc($dict->{case26});\n\
    \    my $case27 = lc($dict->{case27});\n    my $case28 = lc($dict->{case28});\n\
    \    my $case29 = lc($dict->{case29});\n    my $case30 = lc($dict->{case30});\n\
    \    my $case31 = lc($dict->{case31});\n    my $case32 = lc($dict->{case32});\n\
    \    my $case33 = lc($dict->{case33});\n    my $case34 = lc($dict->{case34});\n\
    \    my $case35 = lc($dict->{case35});\n", "    my $case = lc($dict->{case});\n\
    \    my $ok = 1;\n    foreach my $key (keys %$dict) {\n        my $value = $dict->{$key};\n\
    \        my $type = ref($value);\n        my $ok_string = 1;\n        if ($type\
    \ eq \"HASH\") {\n            $ok_string = check_dict_case($value);\n        }\n\
    \        if ($type eq \"ARRAY\") {\n            foreach my $item (@{$value}) {\n\
    \                $ok_string = check_dict_case($item);\n                if ($ok_string\
    \ eq \"\") {\n                    $ok = 0;\n                    last;\n      \
    \          }\n            }\n        }\n        if ($ok_string eq \"\") {\n  \
    \          $ok = 0;\n            last;\n        }\n        if ($case eq \"lower\"\
    ) {\n            $ok_string = lc($value);\n        }\n        if ($case eq \"\
    upper\") {\n            $ok_string = uc($value);\n        }\n        if ($ok_string\
    \ ne $value) {\n            $ok = 0;\n            last;\n        }\n    }\n  \
    \  return $ok;\n}", "    my $case = 1;\n    foreach my $key (sort keys %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/i) {\n            $case = 0;\n            last;\n\
    \        }\n        if ($key =~ /^[A-Z]+$/i) {\n            $case = 0;\n     \
    \       last;\n        }\n    }\n    return $case;\n}", "    my $result = 1;\n\
    \    foreach my $key (sort keys %$dict) {\n        my $value = $dict->{$key};\n\
    \        if ($key =~ /^[a-z]+$/i) {\n            $result = $result && $value =~\
    \ /^[a-z]+$/i;\n        } elsif ($key =~ /^[A-Z]+$/i) {\n            $result =\
    \ $result && $value =~ /^[A-Z]+$/i;\n        } else {\n            $result = $result\
    \ && $value =~ /^[A-Z][a-z]+$/i;\n        }\n    }\n    return $result;\n}", " \
    \   my $case = 1;\n    foreach my $key (sort keys %$dict) {\n        my $value\
    \ = $dict->{$key};\n        if ($value =~ /^[A-Z]+$/) {\n            $case = \"\
    \";\n            last;\n        }\n        if ($value =~ /^[a-z]+$/) {\n     \
    \       $case = 1;\n            last;\n        }\n    }\n    return $case;\n}",
  "    my $result = 1;\n    foreach my $key (keys %$dict) {\n        my $value = $dict->{$key};\n\
    \        next if !defined($value) || !defined($key) || !defined($value) || !defined($key);\n\
    \        my $lowercase_key = lc($key);\n        my $uppercase_key = uc($key);\n\
    \        my $lowercase_value = lc($value);\n        my $uppercase_value = uc($value);\n\
    \        if ($lowercase_key eq $lowercase_value) {\n            $result = $result\
    \ && 1;\n        }\n        if ($uppercase_key eq $uppercase_value) {\n      \
    \      $result = $result && 1;\n        }\n    }\n    return $result;\n}", " \
    \   my $case = 1;\n    foreach my $key (keys %$dict) {\n        my $value = $dict->{$key};\n\
    \        if ($value =~ /^[a-z]+$/i) {\n            $case = 0;\n            last;\n\
    \        }\n        if ($value =~ /^[A-Z]+$/i) {\n            $case = 1;\n   \
    \         last;\n        }\n    }\n    return $case;\n}", "    my $case = 0;\n\
    \    foreach my $key (sort keys %$dict) {\n        my $value = $dict->{$key};\n\
    \        next if !defined $value;\n        my $lower;\n        my $upper;\n  \
    \      if ($value =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n     \
    \   if ($value =~ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n        if\
    \ ($lower && $upper) {\n            $case = 1;\n        }\n    }\n    return $case;\n\
    }", "    my $case = lc($dict->{case});\n    my $result = \"\";\n    foreach my\
    \ $key (sort keys %$dict) {\n        my $value = $dict->{$key};\n        next\
    \ if $case eq \"upper\" && lc($key) eq $key;\n        next if $case eq \"lower\"\
    \ && lc($key) ne $key;\n        $result .= $key . \":\" . $value . \"\\n\";\n\
    \    }\n    return $result;\n}", "    my $case = lc $dict->{keys}->[0]; # Get\
    \ the first key\n    my $result = $dict->{keys}->[0]; # Get the first key\n  \
    \  foreach my $key (@{$dict->{keys}->[1..$#{$dict->{keys}}]}){\n        my $value\
    \ = $dict->{$key};\n        if ($case eq $key && $value =~ /^[[:lower:]]/){\n\
    \            $result = $key;\n        }\n        elsif ($case eq $key && $value\
    \ =~ /^[[:upper:]]/){\n            $result = $key;\n        }\n    }\n    return\
    \ $result;\n}", "    my $case = 1;\n    foreach my $key (sort keys %$dict) {\n\
    \        my $value = $dict->{$key};\n        my $type = ref($value);\n       \
    \ if ($type eq \"HASH\") {\n            $case = check_dict_case($value) if (keys\
    \ %$value);\n        } elsif ($type eq \"ARRAY\") {\n            $case = check_dict_case($value)\
    \ if (@$value);\n        } elsif ($type eq \"SCALAR\") {\n            $case =\
    \ check_dict_case($value) if ($value =~ /^[A-Z_]/);\n        }\n        if ($case\
    \ == 1) {\n            return 1;\n        }\n    }\n    return \"\";\n}", "  \
    \  my $case = 1;\n    foreach my $key (sort keys %$dict) {\n        my $value\
    \ = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n            $case =\
    \ 0;\n            last;\n        }\n        if ($value =~ /^[A-Z]+$/i) {\n   \
    \         $case = 0;\n            last;\n        }\n    }\n    return $case;\n\
    }", "    my $case = 1;\n    foreach my $key (sort keys %$dict) {\n        my $value\
    \ = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n            $case =\
    \ 0;\n            last;\n        }\n        if ($value =~ /^[A-Z]+$/i) {\n   \
    \         $case = 0;\n            last;\n        }\n    }\n    return $case;\n\
    }", "    my $case = check_dict_case($dict);\n    return $case if $case;\n    my\
    \ $keys;\n    foreach my $key (keys %$dict) {\n        $keys .= $key if is_string($key);\n\
    \    }\n    return $keys =~ /^[a-z]+$/i ? 1 : $keys =~ /^[A-Z]+$/i ? \"\" : \"\
    \";\n}", "    my $case = 1;\n    foreach my $key (keys %$dict) {\n        my $value\
    \ = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n            $case =\
    \ 0;\n            last;\n        } elsif ($value =~ /^[A-Z]+$/i) {\n         \
    \   $case = 0;\n            last;\n        }\n    }\n    return $case;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
