name: HumanEval_16_count_distinct_characters
language: pl
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n# >>> count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters(\"\
  Jerry\")\n# 4\nsub count_distinct_characters {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdecadeCADE\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry\
  \ jERRY JeRRRY\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    my $char;\n    foreach $char (split(//, $string))\
    \ {\n        $count++ if $char ne \"\\0\";\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    my $char;\n    foreach $char (split(//, $string)) {\n\
    \        $count++ if $char !~ /[a-z]/i;\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    my $char;\n    my $prev_char;\n    foreach $char (split //,\
    \ $string) {\n        if ($char ne $prev_char) {\n            $count++;\n    \
    \        $prev_char = $char;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    my $chars = $string =~ /([A-Za-z])/g;\n    foreach my $char\
    \ (@$chars) {\n        $count++ if $string =~ /$char/i;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $char;\n    my $prev_char;\n    my $prev_char_case;\n\
    \    my $prev_char_case_insensitive;\n    my $prev_char_case_insensitive_lower;\n\
    \    my $prev_char_case_insensitive_upper;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_lower;\n    my $prev_char_case_insensitive_upper;\n\
    \    my $prev_char_case_insensitive_", "    my $count = 0;\n    my $char;\n  \
    \  foreach $char (split(//, $string)) {\n        $count++ if $char =~ /[a-z]/i;\n\
    \        $count++ if $char =~ /[A-Z]/i;\n        $count++ if $char =~ /[0-9]/i;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $char;\n    my $lowercase;\n\
    \    my $uppercase;\n    foreach $char (split(//, $string)) {\n        $lowercase\
    \ = $char =~ /[a-z]/;\n        $uppercase = $char =~ /[A-Z]/;\n        if ($lowercase\
    \ || $uppercase) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $char;\n    foreach $char (split(//, $string))\
    \ {\n        $count++ if $char ne $char;\n    }\n    return $count;\n}", "   \
    \ my $count = 0;\n    my $char;\n    foreach $char (split(//, $string)) {\n  \
    \      $count++ if $char =~ /[a-z]/i;\n        $count++ if $char =~ /[A-Z]/i;\n\
    \        $count++ if $char =~ /[0-9]/i;\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    my $char;\n    my $prev_char;\n    foreach $char (split(//,\
    \ $string)) {\n        if ($char ne $prev_char) {\n            $count++;\n   \
    \     }\n        $prev_char = $char;\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $char;\n    my $prev_char;\n    foreach $char (split(//, $string))\
    \ {\n        $prev_char = $char;\n        $count++;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $char;\n    foreach $char (split(//, $string))\
    \ {\n        $count++ if $char ne $char;\n    }\n    return $count;\n}", "   \
    \ my $count = 0;\n    my $char;\n    my $prev_char;\n    foreach $char (split(//,\
    \ $string)) {\n        if ($char ne $prev_char) {\n            $count++;\n   \
    \     }\n        $prev_char = $char;\n    }\n    return $count;\n}", "    my($count)\
    \ = 0;\n    foreach my $char (split(//, $string)) {\n        $count++ if $char\
    \ ne \"\\0\";\n    }\n    return $count;\n}", "    my $count = 0;\n    my $char;\n\
    \    foreach $char (split //, $string) {\n        $count++ if $char ne \"\\0\"\
    ;\n    }\n    return $count;\n}", "    my $count = 0;\n    my $char;\n    my $prev_char;\n\
    \    foreach $char (split(//, $string)) {\n        $count++ if $char ne $prev_char;\n\
    \        $prev_char = $char;\n    }\n    return $count;\n}", "    my $count =\
    \ 0;\n    my $char;\n    foreach $char (split(//, $string)) {\n        $count++\
    \ if $char ne \"\\0\";\n    }\n    return $count;\n}", "    my $count = 0;\n \
    \   my $char;\n    foreach $char (split(//, $string)) {\n        $count++ if $char\
    \ ne \"\\0\";\n    }\n    return $count;\n}", "    my $count = 0;\n    my $char;\n\
    \    foreach $char (split //, $string) {\n        $count++ if $char !~ /[^A-Z]/;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $char;\n    foreach\
    \ $char (split(//, $string)) {\n        $count++ if $char ne $char;\n    }\n \
    \   return $count;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
