name: HumanEval_155_even_odd_count
language: pl
prompt: "# Given an integer. return an array that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n\
  # [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n\
  \        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2,\
  \ 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my(@even, @odd);\n    \n    for(my $i = 0; $i < $num; $i++) {\n\
    \        my $digit = $num % 10;\n        if ($digit == 0) {\n            push(@even,\
    \ $i);\n        } else {\n            push(@odd, $i);\n        }\n        $num\
    \ = $num / 10;\n    }\n    \n    return [@even, @odd];\n}", "    my @even = ();\n\
    \    my @odd = ();\n    my $i = 0;\n    while($num > 0) {\n        my $remainder\
    \ = $num % 10;\n        if ($remainder == 0) {\n            push(@even, $i);\n\
    \        }\n        elsif ($remainder == 1) {\n            push(@odd, $i);\n \
    \       }\n        $num = $num / 10;\n        $i++;\n    }\n    return [@even,\
    \ @odd];\n}", "    my @even = ();\n    my @odd = ();\n    my $i = 0;\n    while($num\
    \ > 0) {\n        $num = $num / 10;\n        $i++;\n        if($num % 2 == 0)\
    \ {\n            push(@even, $num);\n        } else {\n            push(@odd,\
    \ $num);\n        }\n    }\n    return ($i, @even, @odd);\n}", "    my @even =\
    \ ();\n    my @odd = ();\n    my $i = 0;\n    while($num > 0) {\n        my $remainder\
    \ = $num % 10;\n        if($remainder == 0) {\n            push(@even, $remainder);\n\
    \        } else {\n            push(@odd, $remainder);\n        }\n        $num\
    \ = $num / 10;\n        $i++;\n    }\n    return [@even, @odd];\n}", "    my(@result);\n\
    \    \n    for(my $i = 0; $i < $num; $i++) {\n        my $remainder = $num % 10;\n\
    \        \n        if($remainder == 0) {\n            push(@result, 1);\n    \
    \    }\n        elsif($remainder == 1) {\n            push(@result, 0);\n    \
    \    }\n        else {\n            push(@result, $remainder);\n        }\n  \
    \      $num = $num / 10;\n    }\n    \n    return @result;\n}", "    my(@even,\
    \ @odd);\n    \n    for(my $i = 0; $i < $num; $i++) {\n        if($num % 2 ==\
    \ 0) {\n            push(@even, $i);\n        } else {\n            push(@odd,\
    \ $i);\n        }\n    }\n    return [@even, @odd];\n}", "    my @even = ();\n\
    \    my @odd = ();\n    my $i = 0;\n    while ($num > 0) {\n        my $digit\
    \ = $num % 10;\n        if ($digit == 0) {\n            push(@even, $i);\n   \
    \     } else {\n            push(@odd, $i);\n        }\n        $num = $num /\
    \ 10;\n        $i++;\n    }\n    return [@even, @odd];\n}", "    my @even = ();\n\
    \    my @odd = ();\n    my $i = 0;\n    while($i < $num) {\n        my $digit\
    \ = $num % 10;\n        if($digit == 0) {\n            push(@even, $i);\n    \
    \    } else {\n            push(@odd, $i);\n        }\n        $num = $num / 10;\n\
    \        $i++;\n    }\n    return [@even, @odd];\n}", "    my @even_odd = ();\n\
    \    my $i = 0;\n    while ($num > 0) {\n        $even_odd[$i++] = $num % 2 ==\
    \ 0 ? 1 : 0;\n        $num = int($num / 10);\n    }\n    return @even_odd;\n}",
  "    my @even_odd = ();\n    my $odd = $num % 10;\n    my $even = $num / 10;\n \
    \   push(@even_odd, $even);\n    push(@even_odd, $odd);\n    return @even_odd;\n\
    }", "    my($even, $odd);\n    if ($num < 0) {\n        $even = $odd = $num;\n\
    \    } else {\n        $even = $num / 2;\n        $odd = $num % 2;\n    }\n  \
    \  return ($even, $odd);\n}", "    my($even, $odd);\n    \n    if ($num < 0) {\n\
    \        $even = $odd = 0;\n    }\n    else {\n        $even = int(($num / 10)\
    \ % 2);\n        $odd = int(($num / 100) % 2);\n    }\n    return ($even, $odd);\n\
    }", "    my @even = ();\n    my @odd = ();\n    my $i = 0;\n    while ($num >\
    \ 0) {\n        $even[$i] = $num % 2;\n        $num = $num / 2;\n        $odd[$i]\
    \ = $num % 2;\n        $i++;\n    }\n    return [@even, @odd];\n}", "    my(@result);\n\
    \    my $i = 0;\n    while($num > 0) {\n        my $remainder = $num % 10;\n \
    \       if ($remainder == 0) {\n            push(@result, $i);\n        }\n  \
    \      $num = $num / 10;\n        $i++;\n    }\n    return @result;\n}", "   \
    \ my @even = ();\n    my @odd = ();\n    my $i = 0;\n    while($num > 0) {\n \
    \       $even[$i] = $num % 2 == 0;\n        $odd[$i] = $num % 2 != 0;\n      \
    \  $num = $num / 10;\n        $i++;\n    }\n    return [@even, @odd];\n}", " \
    \   my(@result);\n    my $i = 0;\n    while($num > 0) {\n        $result[$i] =\
    \ $num % 2 == 0 ? 1 : 0;\n        $num = $num / 2;\n        $i++;\n    }\n   \
    \ return @result;\n}", "    my(@even_odd_digits);\n    \n    my $i = 0;\n    \n\
    \    while ($num > 0) {\n        my $digit = $num % 10;\n        \n        if\
    \ ($digit == 0) {\n            push(@even_odd_digits, $i);\n        }\n      \
    \  \n        $num = ($num / 10) + 1;\n        $i++;\n    }\n    \n    return @even_odd_digits;\n\
    }", "    my(@results);\n    my $odd = $num % 2;\n    my $even = $num / 2;\n  \
    \  push(@results, $even);\n    push(@results, $odd);\n    return @results;\n}",
  "    my @even = ();\n    my @odd = ();\n    my $i = 0;\n    while($num > 0) {\n\
    \        $even[$i] = $num % 2;\n        $num = $num / 2;\n        $odd[$i] = $num\
    \ % 2;\n        $i++;\n    }\n    return \\@even, \\@odd;\n}", "    my @even =\
    \ ();\n    my @odd = ();\n    my $i = 0;\n    while($num > 0) {\n        my $digit\
    \ = $num % 10;\n        if($digit == 0) {\n            push @even, $i;\n     \
    \   }\n        else {\n            push @odd, $i;\n        }\n        $num = $num\
    \ / 10;\n        $i++;\n    }\n    return [@even, @odd];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
