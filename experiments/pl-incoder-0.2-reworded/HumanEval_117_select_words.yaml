name: HumanEval_117_select_words
language: pl
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns an array of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty array.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words(\"\
  Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"Mary had a little\
  \ lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple white space\"\
  , 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words(\"\
  Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n    my($s, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
  \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\"\
  , 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n \
    \   my $word = \"\";\n    my $count = 0;\n    my $flag = 0;\n    my $temp = \"\
    \";\n    \n    while($i < length($s)) {\n        $flag = 0;\n        $word = \"\
    \";\n        $count = 0;\n        $temp = \"\";\n        \n        while($j <\
    \ length($s)) {\n            if($s[$j] eq \"_\") {\n                $flag = 1;\n\
    \                $temp .= $s[$j];\n            }\n            else {\n       \
    \         $word .= $s[$j];\n                $count++;\n            }\n       \
    \     $j++;\n        }\n        \n        if($flag == 1) {\n            push(@result,\
    \ $word);\n        }\n        \n        $i++;\n    }\n    \n    if($count == $n)\
    \ {\n        return @result;\n    }\n    else {\n        return ();\n    }\n}",
  "    my @words = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $word\
    \ = \"\";\n    my $found = 0;\n    \n    while ($i < length($s)) {\n        if\
    \ ($s[i] eq ' ') {\n            $word = \"\";\n            $i++;\n        }\n\
    \        elsif ($s[i] eq '.') {\n            $word = \"\";\n            $i++;\n\
    \        }\n        elsif ($s[i] eq '?') {\n            $word = \"\";\n      \
    \      $i++;\n        }\n        elsif ($s[i] eq '!') {\n            $word = \"\
    \";\n            $i++;\n        }\n        elsif ($s[i] eq ';') {\n          \
    \  $word = \"\";\n            $i++;\n        }\n        elsif ($s[i] eq '!') {\n\
    \            $word = \"\";\n            $i++;\n        }\n        elsif ($s[i]\
    \ eq '?') {\n            $word = \"\";\n            $i++;\n        }\n       \
    \ elsif ($s[i] eq '.') {\n            $word = \"\";\n            $i++;\n     \
    \   }\n        elsif ($s[i] eq '!') {\n            $word = \"\";\n           \
    \ $i++;\n        }\n        elsif ($s[i] eq '?') {\n            $word = \"\";\n\
    \            $i++;\n        }\n        elsif ($s[i] eq '.') {\n            $word\
    \ = \"\";\n            $i++;\n        }\n        elsif ($s[i] eq '!') {\n    \
    \        $word = \"\";\n            $i++;\n        }\n        elsif ($s[i] eq\
    \ '?') {\n            $word = \"\";\n            $i++;\n        }\n        elsif\
    \ ($s[i] eq '.') {\n            $word = \"\";\n            $i++;\n        }\n\
    \        elsif ($s[i] eq '!') {\n            $word = \"\";\n            $i++;\n\
    \        }\n        elsif ($s[i] eq '?') {\n            $word = \"\";\n      \
    \      $i++;\n        }\n        elsif ($s[i] eq '.') {\n            $word = \"\
    \";\n            $i++;\n        }\n        elsif ($s[i] eq '!') {\n          \
    \  $word = \"\";\n            $i++;\n        }\n        elsif ($s[i] eq '?') {\n\
    \            $word = \"\";\n            $i++;\n        }\n        elsif ($s[i]\
    \ eq '.') {\n            $word = \"\";\n            $i++;\n        }\n       \
    \ elsif ($s[i] eq '!') {\n            $word = \"\";\n            $i++;\n     \
    \   }\n        elsif ($s[i] eq '?') {\n            $word = \"\";\n           \
    \ $i++;\n        }\n        elsif ($s[i] eq '.') {\n            $word = \"\";\n",
  "    my @words = ();\n    \n    foreach my $word (split /\\s+/, $s) {\n        push\
    \ @words, $word if length($word) == $n;\n    }\n    \n    return @words;\n}",
  "    my @words = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $word\
    \ = \"\";\n    \n    while ($i < length($s)) {\n        if ($s[i] eq \" \") {\n\
    \            push @words, $word;\n            $word = \"\";\n            $i++;\n\
    \        }\n        elsif ($s[i] eq \"a\") {\n            push @words, $word;\n\
    \            $word = \"\";\n            $i++;\n        }\n        elsif ($s[i]\
    \ eq \"e\") {\n            push @words, $word;\n            $word = \"\";\n  \
    \          $i++;\n        }\n        elsif ($s[i] eq \"i\") {\n            push\
    \ @words, $word;\n            $word = \"\";\n            $i++;\n        }\n  \
    \      elsif ($s[i] eq \"o\") {\n            push @words, $word;\n           \
    \ $word = \"\";\n            $i++;\n        }\n        elsif ($s[i] eq \"u\")\
    \ {\n            push @words, $word;\n            $word = \"\";\n            $i++;\n\
    \        }\n        elsif ($s[i] eq \"y\") {\n            push @words, $word;\n\
    \            $word = \"\";\n            $i++;\n        }\n        elsif ($s[i]\
    \ eq \"h\") {\n            push @words, $word;\n            $word = \"\";\n  \
    \          $i++;\n        }\n        elsif ($s[i] eq \"l\") {\n            push\
    \ @words, $word;\n            $word = \"\";\n            $i++;\n        }\n  \
    \      elsif ($s[i] eq \"l\") {\n            push @words, $word;\n           \
    \ $word = \"\";\n            $i++;\n        }\n        elsif ($s[i] eq \"o\")\
    \ {\n            push @words, $word;\n            $word = \"\";\n            $i++;\n\
    \        }\n        elsif ($s[i] eq \"n\") {\n            push @words, $word;\n\
    \            $word = \"\";\n            $i++;\n        }\n        elsif ($s[i]\
    \ eq \"d\") {\n            push @words, $word;\n            $word = \"\";\n  \
    \          $i++;\n        }\n        elsif ($s[i] eq \"a\") {\n            push\
    \ @words, $word;\n            $word = \"\";\n            $i++;\n        }\n  \
    \      elsif ($s[i] eq \"m\") {\n            push @words, $word;\n           \
    \ $word = \"\";\n            $i++;\n        }\n        elsif ($s[i] eq \"e\")\
    \ {\n            push @words, $word;\n            $word = \"\";\n            $i++;\n\
    \        }\n        elsif ($s[i] eq \"s\") {\n            push @words, $word;",
  "    my @result;\n    \n    if ($n > 0) {\n        my @words = split /\\s+/, $s;\n\
    \        foreach my $word (@words) {\n            push @result, $word if $word\
    \ =~ /^($n)*$/;\n        }\n    }\n    \n    return @result;\n}", "    my @words\
    \ = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $word = \"\";\n\
    \    my $found = 0;\n    \n    while ($i < length($s)) {\n        $word = \"\"\
    ;\n        $found = 0;\n        $j = 0;\n        while ($j < length($s)) {\n \
    \           if ($j == $i) {\n                $word .= $s[$j];\n              \
    \  $found = 1;\n            }\n            $j++;\n        }\n        if ($found\
    \ == 1) {\n            push(@words, $word);\n        }\n        $i++;\n    }\n\
    \    \n    if ($n == 0) {\n        return @words;\n    }\n    \n    my @return\
    \ = ();\n    \n    foreach my $word (@words) {\n        foreach my $letter (split(//,\
    \ $word)) {\n            if (length($letter) == $n) {\n                push(@return,\
    \ $word);\n            }\n        }\n    }\n    \n    return @return;\n}", " \
    \   my @words;\n    \n    my $i = 0;\n    my $j = 0;\n    \n    while($i < length($s))\
    \ {\n        while($j < length($s) && $s[i] eq $s[$j]) {\n            $j++;\n\
    \        }\n        \n        push(@words, $s[$i..$j]);\n        $i = $j;\n  \
    \      $j = 0;\n    }\n    \n    return @words;\n}", "    my @words;\n    \n \
    \   my $i = 0;\n    \n    while ($i < length($s)) {\n        my $c = substr($s,\
    \ $i, 1);\n        \n        if ($c eq ' ') {\n            push @words, substr($s,\
    \ 0, $i);\n            $i = 0;\n        }\n        elsif ($c eq 'a') {\n     \
    \       push @words, $s;\n            $i = 0;\n        }\n        elsif ($c eq\
    \ 'e') {\n            push @words, $s;\n            $i = 0;\n        }\n     \
    \   elsif ($c eq 'i') {\n            push @words, $s;\n            $i = 0;\n \
    \       }\n        elsif ($c eq 'o') {\n            push @words, $s;\n       \
    \     $i = 0;\n        }\n        elsif ($c eq 'u') {\n            push @words,\
    \ $s;\n            $i = 0;\n        }\n        elsif ($c eq 'y') {\n         \
    \   push @words, $s;\n            $i = 0;\n        }\n        elsif ($c eq 'h')\
    \ {\n            push @words, $s;\n            $i = 0;\n        }\n        elsif\
    \ ($c eq 'l') {\n            push @words, $s;\n            $i = 0;\n        }\n\
    \        elsif ($c eq 's') {\n            push @words, $s;\n            $i = 0;\n\
    \        }\n        elsif ($c eq 't') {\n            push @words, $s;\n      \
    \      $i = 0;\n        }\n        elsif ($c eq 'd') {\n            push @words,\
    \ $s;\n            $i = 0;\n        }\n        elsif ($c eq 'n') {\n         \
    \   push @words, $s;\n            $i = 0;\n        }\n        elsif ($c eq 'g')\
    \ {\n            push @words, $s;\n            $i = 0;\n        }\n        elsif\
    \ ($c eq 'p') {\n            push @words, $s;\n            $i = 0;\n        }\n\
    \        elsif ($c eq 'f') {\n            push @words, $s;\n            $i = 0;\n\
    \        }\n        elsif ($c eq 'v') {\n            push @words, $s;\n      \
    \      $i = 0;\n        }\n        elsif ($c eq 'b') {\n            push @words,\
    \ $s;\n            $i = 0;\n        }\n        elsif ($c eq 'm') {\n         \
    \   push @words, $s;\n            $i = 0;\n        }\n        elsif ($c eq 'j')\
    \ {\n            push @words, $s;\n            $i = 0;\n        }\n        elsif\
    \ ($c eq 'q') {\n            push @words, $s;\n            $", "    my @words;\n\
    \    \n    if ($n > 0) {\n        my @words = split /\\s+/, $s;\n        \n  \
    \      foreach my $word (@words) {\n            my $count = 0;\n            \n\
    \            foreach my $letter (split //, $word) {\n                $count +=\
    \ $letter =~ /[b-df-hj-np-tv-z]/g;\n            }\n            \n            if\
    \ ($count == $n) {\n                push @words, $word;\n            }\n     \
    \   }\n    }\n    \n    return @words;\n}", "    my @words;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $word = \"\";\n    my $count = 0;\n  \
    \  \n    while($i < length($s)) {\n        while($j < length($s) && $k <= $n)\
    \ {\n            $word .= $s[$j];\n            $j++;\n            $k++;\n    \
    \    }\n        \n        if($word eq \"\") {\n            $word = \"\";\n   \
    \         $j = 0;\n            $k = 0;\n        }\n        \n        if($word\
    \ eq \"\") {\n            $word = \"\";\n            $j = 0;\n            $k =\
    \ 0;\n        }\n        \n        if($word eq \"\") {\n            $word = \"\
    \";\n            $j = 0;\n            $k = 0;\n        }\n        \n        if($word\
    \ eq \"\") {\n            $word = \"\";\n            $j = 0;\n            $k =\
    \ 0;\n        }\n        \n        if($word eq \"\") {\n            $word = \"\
    \";\n            $j = 0;\n            $k = 0;\n        }\n        \n        if($word\
    \ eq \"\") {\n            $word = \"\";\n            $j = 0;\n            $k =\
    \ 0;\n        }\n        \n        if($word eq \"\") {\n            $word = \"\
    \";\n            $j = 0;\n            $k = 0;\n        }\n        \n        if($word\
    \ eq \"\") {\n            $word = \"\";\n            $j = 0;\n            $k =\
    \ 0;\n        }\n        \n        if($word eq \"\") {\n            $word = \"\
    \";\n            $j = 0;\n            $k = 0;\n        }\n        \n        if($word\
    \ eq \"\") {\n            $word = \"\";\n            $j = 0;\n            $k =\
    \ 0;\n        }\n        \n        if($word eq \"\") {\n            $word = \"\
    \";\n            $j = 0;\n            $k = 0;\n        }\n        \n        if($word\
    \ eq \"\") {\n            $word = \"\";\n            $j = 0;\n            $k =\
    \ 0;\n        }\n        \n        if($word eq \"\") {\n            $word = \"\
    \";\n            $j = 0;\n            $k = 0;\n        }\n        \n        if($word\
    \ eq \"\") {\n            $word = \"\";\n            $j = 0;\n            $k =\
    \ 0;\n        }\n        \n        if($word eq \"\") {\n            $word = \"\
    \";\n            $j = 0;\n            $k = 0;\n        }\n        \n        if($word\
    \ eq \"\") {\n            $word = \"\";\n            $j = 0;\n            $k =\
    \ 0;\n        }\n        \n        if($word eq \"\") {\n            $word = \"\
    \";\n            $j = 0;\n            $k = 0;\n        }\n        \n        if($word\
    \ eq \"\") {\n            $word = \"\";\n            $j = 0;\n            $k =\
    \ 0;\n        }\n        \n        if($word eq \"\"", "    my @words;\n    \n\
    \    if ($n > 0) {\n        my @words = split /\\s+/, $s;\n        \n        foreach\
    \ my $word (@words) {\n            my $count = 0;\n            \n            foreach\
    \ my $char (split //, $word) {\n                $count++ if ($char =~ /[aeiou]/);\n\
    \            }\n            \n            if ($count == $n) {\n              \
    \  push @words, $word;\n            }\n        }\n    }\n    \n    return @words;\n\
    }", "    my @words = ();\n    my $i = 0;\n    \n    while ($i < length($s)) {\n\
    \        my $c = substr($s, $i, 1);\n        \n        if ($c =~ /[aeiou]/) {\n\
    \            push(@words, $c);\n            $i++;\n        }\n        elsif ($c\
    \ == \" \") {\n            push(@words, \"\");\n            $i++;\n        }\n\
    \        else {\n            push(@words, \"\");\n        }\n    }\n    \n   \
    \ return @words;\n}", "    my @words;\n    \n    if ($n > 0) {\n        my @words\
    \ = split /\\s+/, $s;\n        \n        foreach my $word (@words) {\n       \
    \     my @letters = split //, $word;\n            \n            foreach my $letter\
    \ (@letters) {\n                if ($letter =~ /[aeiou]/) {\n                \
    \    push (@words, $word);\n                }\n            }\n        }\n    }\n\
    \    \n    return @words;\n}", "    my @words = ();\n    \n    my $i = 0;\n  \
    \  my $j = 0;\n    \n    while ($i < length($s)) {\n        my $c = substr($s,\
    \ $i, 1);\n        \n        if ($c eq \"a\") {\n            push(@words, substr($s,\
    \ $i, $j));\n            $i += $j;\n            $j = 0;\n        }\n        elsif\
    \ ($c eq \"e\") {\n            push(@words, substr($s, $i, $j));\n           \
    \ $i += $j;\n            $j = 0;\n        }\n        elsif ($c eq \"i\") {\n \
    \           push(@words, substr($s, $i, $j));\n            $i += $j;\n       \
    \     $j = 0;\n        }\n        elsif ($c eq \"o\") {\n            push(@words,\
    \ substr($s, $i, $j));\n            $i += $j;\n            $j = 0;\n        }\n\
    \        elsif ($c eq \"u\") {\n            push(@words, substr($s, $i, $j));\n\
    \            $i += $j;\n            $j = 0;\n        }\n        elsif ($c eq \"\
    y\") {\n            push(@words, substr($s, $i, $j));\n            $i += $j;\n\
    \            $j = 0;\n        }\n        elsif ($c eq \"h\") {\n            push(@words,\
    \ substr($s, $i, $j));\n            $i += $j;\n            $j = 0;\n        }\n\
    \        elsif ($c eq \"l\") {\n            push(@words, substr($s, $i, $j));\n\
    \            $i += $j;\n            $j = 0;\n        }\n        elsif ($c eq \"\
    l\") {\n            push(@words, substr($s, $i, $j));\n            $i += $j;\n\
    \            $j = 0;\n        }\n        elsif ($c eq \"s\") {\n            push(@words,\
    \ substr($s, $i, $j));\n            $i += $j;\n            $j = 0;\n        }\n\
    \        elsif ($c eq \"t\") {\n            push(@words, substr($s, $i, $j));\n\
    \            $i += $j;\n            $j = 0;\n        }\n        elsif ($c eq \"\
    e\") {\n            push(@words, substr($s, $i, $j));\n            $i += $j;\n\
    \            $j = 0;\n        }\n        elsif ($c eq \"a\") {\n            push(@words,\
    \ substr($s, $i, $j));\n            $i += $j;\n            $j = 0;\n        }\n\
    \        elsif ($c eq \"m\") {", "    my @words = ();\n    \n    foreach my $word\
    \ (split /\\s+/, $s) {\n        push @words, $word if length($word) == $n;\n \
    \   }\n    \n    return @words;\n}", "    my @words = ();\n    \n    for(my $i\
    \ = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        \n\
    \        if($c eq \"a\" || $c eq \"e\" || $c eq \"i\" || $c eq \"o\" || $c eq\
    \ \"u\" || $c eq \"y\") {\n            push(@words, $s);\n        }\n    }\n \
    \   \n    return @words;\n}", "    my @words;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $word = \"\";\n    my $word_count = 0;\n    my $word_length\
    \ = 0;\n    my $word_length_count = 0;\n    my $word_length_count2 = 0;\n    my\
    \ $word_length_count3 = 0;\n    my $word_length_count4 = 0;\n    my $word_length_count5\
    \ = 0;\n    my $word_length_count6 = 0;\n    my $word_length_count7 = 0;\n   \
    \ my $word_length_count8 = 0;\n    my $word_length_count9 = 0;\n    my $word_length_count10\
    \ = 0;\n    my $word_length_count11 = 0;\n    my $word_length_count12 = 0;\n \
    \   my $word_length_count13 = 0;\n    my $word_length_count14 = 0;\n    my $word_length_count15\
    \ = 0;\n    my $word_length_count16 = 0;\n    my $word_length_count17 = 0;\n \
    \   my $word_length_count18 = 0;\n    my $word_length_count19 = 0;\n    my $word_length_count20\
    \ = 0;\n    my $word_length_count21 = 0;\n    my $word_length_count22 = 0;\n \
    \   my $word_length_count23 = 0;\n    my $word_length_count24 = 0;\n    my $word_length_count25\
    \ = 0;\n    my $word_length_count26 = 0;\n    my $word_length_count27 = 0;\n \
    \   my $word_length_count28 = 0;\n    my $word_length_count29 = 0;\n    my $word_length_count30\
    \ = 0;\n    my $word_length_count31 = 0;\n    my $word_length_count32 = 0;\n \
    \   my $word_length_count33 = 0;\n    my $word_length_count34 = 0;\n    my $word_length_count35\
    \ = 0;\n    my $word_length_count36 = 0;\n    my $word_length_count37 = 0;\n \
    \   my $word_length_count38 = 0;\n    my $word_length_count39 = 0;\n    my $word_length_count40\
    \ = 0;\n    my $word_length_count41 = 0;\n    my $word_length_count42 = 0;\n \
    \   my $word_length_count43 = 0;\n    my $word_length_count44 = 0;\n    my $word_length_count45\
    \ = 0;\n    my $word_length_count46 = 0;\n    my $word_length_count47 = 0;\n \
    \   my $word_length_count48 = 0;\n    my $word_length_count49 = 0;\n    my $word_length_count50\
    \ = 0;\n    my $word_length_count51 = 0;\n    my $word_length_count52 = 0;\n \
    \   my $word_length_count53 = 0;\n    my $word_length_count54 = 0;\n    my $word_length_count55\
    \ = 0;\n    my $word_length_count56 = 0;\n    my $word_length_count57 = 0;\n \
    \   my $word_length_count58 = 0;\n    my $word_length_count59 = 0;\n    my $word_length_count60\
    \ = 0;\n    my $", "    my @words;\n    \n    foreach my $word (split /\\s+/,\
    \ $s) {\n        push @words, $word if length($word) == $n;\n    }\n    \n   \
    \ return @words;\n}", "    my @words = ();\n    my $i = 0;\n    \n    while($i\
    \ < length($s)) {\n        my $c = substr($s, $i, 1);\n        \n        if($c\
    \ =~ /[aeiou]/) {\n            push(@words, $c);\n            $i++;\n        }\n\
    \        elsif($c == \" \") {\n            push(@words, \"\");\n            $i++;\n\
    \        }\n        elsif($c =~ /[a-z]/) {\n            push(@words, $c);\n  \
    \          $i++;\n        }\n        elsif($c =~ /[A-Z]/) {\n            push(@words,\
    \ $c);\n            $i++;\n        }\n        elsif($c =~ /[0-9]/) {\n       \
    \     push(@words, $c);\n            $i++;\n        }\n        elsif($c =~ /[!,.?]/)\
    \ {\n            push(@words, $c);\n            $i++;\n        }\n        elsif($c\
    \ =~ /[,]/) {\n            push(@words, $c);\n            $i++;\n        }\n \
    \       elsif($c =~ /[;]/) {\n            push(@words, $c);\n            $i++;\n\
    \        }\n        elsif($c =~ /[/]/) {\n            push(@words, $c);\n    \
    \        $i++;\n        }\n        elsif($c =~ /[']/) {\n            push(@words,\
    \ $c);\n            $i++;\n        }\n        elsif($c =~ /[/]/) {\n         \
    \   push(@words, $c);\n            $i++;\n        }\n        elsif($c =~ /[,]/)\
    \ {\n            push(@words, $c);\n            $i++;\n        }\n        elsif($c\
    \ =~ /[;]/) {\n            push(@words, $c);\n            $i++;\n        }\n \
    \       elsif($c =~ /[']/) {\n            push(@words, $c);\n            $i++;\n\
    \        }\n        elsif($c =~ /[!,.?]/) {\n            push(@words, $c);\n \
    \           $i++;\n        }\n        elsif($c =~ /[,]/) {\n            push(@words,\
    \ $c);\n            $i++;\n        }\n        elsif($c =~ /[;]/) {\n         \
    \   push(@words, $c);\n            $i++;\n        }\n        elsif($c =~ /[/]/)\
    \ {\n            push(@words, $c);\n            $i++;\n        }\n        elsif($c\
    \ =~ /[']/) {\n            push(@words, ", "    my @words = ();\n    my $i = 0;\n\
    \    \n    while($i < length($s)) {\n        my $c = substr($s, $i, 1);\n    \
    \    \n        if($c =~ /[aeiou]/) {\n            push(@words, $c);\n        \
    \    $i++;\n        }\n        elsif($c =~ /[^aeiou]/) {\n            while($i\
    \ < length($s)) {\n                my $c = substr($s, $i, 1);\n              \
    \  \n                if($c =~ /[aeiou]/) {\n                    push(@words, $c);\n\
    \                    $i++;\n                }\n                elsif($c =~ /[^aeiou]/)\
    \ {\n                    last;\n                }\n            }\n        }\n\
    \    }\n    \n    if($i == length($s)) {\n        push(@words, $s);\n    }\n \
    \   \n    return @words;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
