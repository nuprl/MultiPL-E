name: HumanEval_42_incr_list
language: pl
prompt: "# Return array with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n\
  # [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4,\
  \ 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @r = ();\n    my $i = 0;\n    foreach my $x (@$l) {\n      \
    \  $r[$i] = $x + 1;\n        $i++;\n    }\n    return @r;\n}", "    my $i = 0;\n\
    \    my @r;\n    foreach my $x (@$l) {\n        $i++;\n        push @r, $x;\n\
    \    }\n    return @r;\n}", "    my @r = ();\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $n = @$l;\n    while($i < $n) {\n        $r[$j] = $l->[$i];\n\
    \        $i++;\n        $j++;\n    }\n    $j = 0;\n    while($j < $n) {\n    \
    \    $r[$j] = $r[$j] + 1;\n        $j++;\n    }\n    return @r;\n}", "    my @r;\n\
    \    my $i = 0;\n    foreach my $x (@$l) {\n        $r[$i++] = $x + 1;\n    }\n\
    \    return @r;\n}", "    my @r = ();\n    my $i = 0;\n    foreach my $x (@$l)\
    \ {\n        $r[$i] = $x + 1;\n        $i++;\n    }\n    return @r;\n}", "   \
    \ my $i = 0;\n    my @ret;\n    while($i < @$l) {\n        push @ret, $l->[$i]\
    \ + 1;\n        $i++;\n    }\n    return @ret;\n}", "    my @r = ();\n    my $i\
    \ = 0;\n    foreach my $x (@$l) {\n        $r[$i] = $x + 1;\n        $i++;\n \
    \   }\n    return @r;\n}", "    my @r = ();\n    my $i = 0;\n    foreach my $x\
    \ (@$l) {\n        $r[$i++] = $x + 1;\n    }\n    return @r;\n}", "    my @r =\
    \ ();\n    my $i = 0;\n    foreach my $x (@$l) {\n        $r[$i] = $x + 1;\n \
    \       $i++;\n    }\n    return @r;\n}", "    my @r = ();\n    my $i = 0;\n \
    \   my $n = @$l;\n    while($i < $n) {\n        push @r, $l->[$i] + 1;\n     \
    \   $i++;\n    }\n    return @r;\n}", "    my @r = ();\n    my $i = 0;\n    my\
    \ $n = @$l;\n    for (; $i < $n; ++$i) {\n        push @r, $l->[$i] + 1;\n   \
    \ }\n    return @r;\n}", "    my @r = ();\n    my $i = 0;\n    my $n = @$l;\n\
    \    while($i < $n) {\n        push(@r, $l->[$i] + 1);\n        $i++;\n    }\n\
    \    return @r;\n}", "    my @r = ();\n    my $i = 0;\n    foreach my $x (@$l)\
    \ {\n        $r[$i++] = $x + 1;\n    }\n    return @r;\n}", "    my @r = ();\n\
    \    my $i = 0;\n    my $n = @$l;\n    foreach my $x (@$l) {\n        $r[$i] =\
    \ $x + 1;\n        $i++;\n    }\n    return @r;\n}", "    my @r = ();\n    my\
    \ $i = 0;\n    foreach my $x (@$l) {\n        $r[$i] = $x + 1;\n        $i++;\n\
    \    }\n    return @r;\n}", "    my @r = ();\n    my $i = 1;\n    foreach my $x\
    \ (@$l) {\n        $r[$i++] = $x;\n    }\n    return @r;\n}", "    my @r;\n  \
    \  my $i = 0;\n    foreach my $x (@$l) {\n        $r[$i++] = $x + 1;\n    }\n\
    \    return @r;\n}", "    my @r;\n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    my $n = @$l;\n    my $m;\n    my $x;\n    my $y;\n    my $z;\n    my\
    \ $w;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my\
    \ $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n\
    \    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my\
    \ $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n\
    \    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $_;\n    my\
    \ $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n\
    \    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my\
    \ $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n\
    \    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my\
    \ $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n\
    \    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my\
    \ $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n\
    \    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y", "    my @r = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while($i < @$l) {\n     \
    \   $r[$j] = $l->[$i];\n        $i++;\n        $j++;\n    }\n    while($j < @$l)\
    \ {\n        $r[$k] = $l->[$j];\n        $k++;\n        $j++;\n    }\n    return\
    \ @r;\n}", "    my @r = ();\n    my $i = 0;\n    foreach my $x (@$l) {\n     \
    \   $r[$i++] = $x;\n    }\n    return @r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
