name: HumanEval_106_f
language: pl
prompt: "# Implement the function f that takes n as a parameter,\n# and returns an\
  \ array of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts\
  \ from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i\
  \ (1 * 2 * ... * i).\n# Example:\n# >>> f(5)\n# [1, 2, 6, 24, 15]\nsub f {\n   \
  \ my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n    \
  \    if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 2, 6, 24,\
  \ 15, 720, 28])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(1),[1])) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2, 6])) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    my $factorial = 1;\n    for(my $i = 1; $i <= $n;\
    \ $i++) {\n        if($i % 2 == 0) {\n            $factorial *= $i;\n        }\
    \ else {\n            $factorial += $i;\n        }\n    }\n    push(@result, $factorial);\n\
    \    return @result;\n}", "    my @result;\n    my $i = 1;\n    for(my $j = 1;\
    \ $j <= $n; $j++) {\n        if($j % 2 == 0) {\n            $result[$j] = $i *\
    \ $j;\n        } else {\n            $result[$j] = $i + $j;\n        }\n     \
    \   $i++;\n    }\n    return @result;\n}", "    my @result;\n    for(my $i = 1;\
    \ $i <= $n; $i++) {\n        if($i % 2 == 0) {\n            $result[$i-1] = $result[$i-1]\
    \ * $i;\n        } else {\n            $result[$i-1] = $result[$i-1] + $i;\n \
    \       }\n    }\n    return @result;\n}", "    my @result;\n    for(my $i = 1;\
    \ $i <= $n; $i++) {\n        if($i % 2 == 0) {\n            push(@result, $i *\
    \ $i);\n        } else {\n            push(@result, $i + 1);\n        }\n    }\n\
    \    return @result;\n}", "    my;\n    my $fact = 1;\n    for(my $i = 1; $i <=\
    \ $n; $i++) {\n        if($i % 2 == 0) {\n            $fact *= $i;\n        }\n\
    \        else {\n            $fact = $fact + $i;\n        }\n    }\n    return\
    \ @fact;\n}", "    my @result;\n    for(my $i = 1; $i <= $n; $i++) {\n       \
    \ if($i % 2 == 0) {\n            push(@result, $i * $i);\n        } else {\n \
    \           push(@result, $i + 1);\n        }\n    }\n    return @result;\n}",
  "    my @result;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($i % 2 == 0)\
    \ {\n            push(@result, $i * $i);\n        } else {\n            push(@result,\
    \ $i + 1);\n        }\n    }\n    return @result;\n}", "    my @result;\n    for(my\
    \ $i = 1; $i <= $n; $i++) {\n        if($i % 2 == 0) {\n            $result[$i\
    \ - 1] = $i * $i;\n        } else {\n            $result[$i - 1] = $i;\n     \
    \   }\n    }\n    return @result;\n}", "    my @result;\n    my $fact = 1;\n \
    \   for(my $i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ $fact *= $i;\n        } else {\n            $fact += $i;\n        }\n      \
    \  push(@result, $fact);\n    }\n    return @result;\n}", "    my @result;\n \
    \   my $i = 1;\n    for(; $i <= $n; $i++) {\n        my $fact = 1;\n        for(;\
    \ $i <= $n; $i++) {\n            $fact *= $i;\n        }\n        push(@result,\
    \ $fact);\n    }\n    return @result;\n}", "    my @result;\n    for(my $i = 1;\
    \ $i <= $n; $i++) {\n        if($i % 2 == 0) {\n            push(@result, $i *\
    \ $i);\n        } else {\n            push(@result, $i + 1);\n        }\n    }\n\
    \    return @result;\n}", "    my @result;\n    my $fact = 1;\n    my $sum = 1;\n\
    \    for(my $i = 1; $i <= $n; $i++) {\n        if($i % 2 == 0) {\n           \
    \ $fact *= $i;\n        }\n        else {\n            $sum += $i;\n        }\n\
    \    }\n    for(my $i = 1; $i <= $n; $i++) {\n        $result[$i] = $fact;\n \
    \   }\n    $result[$n] = $sum;\n    return @result;\n}", "    my @result;\n  \
    \  my $i = 1;\n    for(my $j = 1; $j <= $n; $j++) {\n        if($j % 2 == 0) {\n\
    \            $result[$j] = $i;\n            $i = $i * $j;\n        } else {\n\
    \            $result[$j] = $i + 1;\n            $i = $i;\n        }\n    }\n \
    \   return @result;\n}", "    my @result;\n    for(my $i = 1; $i <= $n; $i++)\
    \ {\n        if($i % 2 == 0) {\n            push(@result, $i * $i);\n        }\
    \ else {\n            push(@result, $i + 1);\n        }\n    }\n    return @result;\n\
    }", "    my @result;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($i % 2\
    \ == 0) {\n            push(@result, $i * $i);\n        } else {\n           \
    \ push(@result, $i + 1);\n        }\n    }\n    return @result;\n}", "    my;\n\
    \    my $fact = 1;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($i % 2 ==\
    \ 0) {\n            $fact *= $i;\n        } else {\n            $fact = $fact\
    \ + $i;\n        }\n        push(@fact, $fact);\n    }\n    return @fact;\n}",
  "    my @result;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($i % 2 == 0)\
    \ {\n            push(@result, $i * $i);\n        } else {\n            push(@result,\
    \ $i + 1);\n        }\n    }\n    return @result;\n}", "    my @result;\n    my\
    \ $factorial = 1;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($i % 2 ==\
    \ 0) {\n            $factorial *= $i;\n        } else {\n            $factorial\
    \ += $i;\n        }\n    }\n    push(@result, $factorial);\n    return @result;\n\
    }", "    my;\n    for(my $i = 1; $i <= $n; $i++) {\n        if($i % 2 == 0) {\n\
    \            push, $i * $i;\n        } else {\n            push, $i;\n       \
    \ }\n    }\n    return;\n}", "    my @result;\n    for(my $i = 1; $i <= $n; $i++)\
    \ {\n        if($i % 2 == 0) {\n            push(@result, $i * $i);\n        }\
    \ else {\n            push(@result, $i + 1);\n        }\n    }\n    return @result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
