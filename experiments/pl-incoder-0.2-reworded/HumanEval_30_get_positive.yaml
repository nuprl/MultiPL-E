name: HumanEval_30_get_positive
language: pl
prompt: "# Return only positive numbers in the array.\n# >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
  \ -10])\n# [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n\
  \        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
  \ -2]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @r;\n    my $neg;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $max;\n    my $min;\n    my $min_index;\n    my $max_index;\n    my $max_value;\n\
    \    my $min_value;\n    my $neg_index;\n    my $neg_index2;\n    my $neg_index3;\n\
    \    my $neg_index4;\n    my $neg_index5;\n    my $neg_index6;\n    my $neg_index7;\n\
    \    my $neg_index8;\n    my $neg_index9;\n    my $neg_index10;\n    my $neg_index11;\n\
    \    my $neg_index12;\n    my $neg_index13;\n    my $neg_index14;\n    my $neg_index15;\n\
    \    my $neg_index16;\n    my $neg_index17;\n    my $neg_index18;\n    my $neg_index19;\n\
    \    my $neg_index20;\n    my $neg_index21;\n    my $neg_index22;\n    my $neg_index23;\n\
    \    my $neg_index24;\n    my $neg_index25;\n    my $neg_index26;\n    my $neg_index27;\n\
    \    my $neg_index28;\n    my $neg_index29;\n    my $neg_index30;\n    my $neg_index31;\n\
    \    my $neg_index32;\n    my $neg_index33;\n    my $neg_index34;\n    my $neg_index35;\n\
    \    my $neg_index36;\n    my $neg_index37;\n    my $neg_index38;\n    my $neg_index39;\n\
    \    my $neg_index40;\n    my $neg_index41;\n    my $neg_index42;\n    my $neg_index43;\n\
    \    my $neg_index44;\n    my $neg_index45;\n    my $neg_index46;\n    my $neg_index47;\n\
    \    my $neg_index48;\n    my $neg_index49;\n    my $neg_index50;\n    my $neg_index51;\n\
    \    my $neg_index52;\n    my $neg_index53;\n    my $neg_index54;\n    my $neg_index55;\n\
    \    my $neg_index56;\n    my $neg_index57;\n    my $neg_index58;\n    my $neg_index59;\n\
    \    my $neg_index60;\n    my $neg_index61;\n    my $neg_index62;\n    my $neg_index63;\n\
    \    my $neg_index64;\n    my $neg_index65;\n    my $neg_index66;\n    my $neg_index67;\n\
    \    my $neg_index68;\n    my $neg", "    my @r;\n    foreach my $x (@$l) {\n\
    \        if ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return\
    \ @r;\n}", "    my @r = ();\n    my $neg = 0;\n    foreach my $x (@$l) {\n   \
    \     if ($x > 0) {\n            $neg = 0;\n        }\n        elsif ($x < 0)\
    \ {\n            $neg = 1;\n        }\n        else {\n            push(@r, $x);\n\
    \        }\n    }\n    return @r;\n}", "    my @r;\n    my $i = 0;\n    foreach\
    \ my $x (@$l) {\n        if ($x > 0) {\n            $r[$i] = $x;\n        }\n\
    \        $i++;\n    }\n    return @r;\n}", "    my @a;\n    my $i = 0;\n    foreach\
    \ my $x (@$l) {\n        if ($x > 0) {\n            push @a, $x;\n        }\n\
    \        $i++;\n    }\n    return @a;\n}", "    my @r;\n    foreach my $x (@$l)\
    \ {\n        if ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return\
    \ @r;\n}", "    my @r = ();\n    foreach my $x (@$l) {\n        if ($x > 0) {\n\
    \            push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n\
    \    foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@r, $x);\n\
    \        }\n    }\n    return @r;\n}", "    my @a = @$l;\n    my @b = ();\n  \
    \  foreach my $x (@a) {\n        if ($x > 0) {\n            push(@b, $x);\n  \
    \      }\n    }\n    return @b;\n}", "    my @a = @$l;\n    my @b = ();\n    foreach\
    \ my $x (@a) {\n        if ($x > 0) {\n            push(@b, $x);\n        }\n\
    \    }\n    return @b;\n}", "    my @r = ();\n    foreach my $x (@$l) {\n    \
    \    if ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return @r;\n\
    }", "    my @r;\n    my $sign = 1;\n    foreach my $x (@$l) {\n        if ($x\
    \ > 0) {\n            push(@r, $x);\n        } else {\n            push(@r, $sign\
    \ * $x);\n            $sign = -$sign;\n        }\n    }\n    return @r;\n}", " \
    \   my @r;\n    foreach my $i (@$l) {\n        if ($i > 0){\n            push(@r,\
    \ $i);\n        }\n    }\n    return @r;\n}", "    my @r = ();\n    foreach my\
    \ $x (@$l) {\n        if ($x > 0) {\n            push(@r, $x);\n        }\n  \
    \  }\n    return @r;\n}", "    my @r = ();\n    my $i = 0;\n    my $neg = 0;\n\
    \    my $neg_inc = 1;\n    my $neg_inc_max = -1;\n    my $neg_inc_min = 1;\n \
    \   my $neg_inc_step = 1;\n    my $neg_inc_max2 = -1;\n    my $neg_inc_min2 =\
    \ 1;\n    my $neg_inc_step2 = 1;\n    my $neg_inc_max3 = -1;\n    my $neg_inc_min3\
    \ = 1;\n    my $neg_inc_step3 = 1;\n    my $neg_inc_max4 = -1;\n    my $neg_inc_min4\
    \ = 1;\n    my $neg_inc_step4 = 1;\n    my $neg_inc_max5 = -1;\n    my $neg_inc_min5\
    \ = 1;\n    my $neg_inc_step5 = 1;\n    my $neg_inc_max6 = -1;\n    my $neg_inc_min6\
    \ = 1;\n    my $neg_inc_step6 = 1;\n    my $neg_inc_max7 = -1;\n    my $neg_inc_min7\
    \ = 1;\n    my $neg_inc_step7 = 1;\n    my $neg_inc_max8 = -1;\n    my $neg_inc_min8\
    \ = 1;\n    my $neg_inc_step8 = 1;\n    my $neg_inc_max9 = -1;\n    my $neg_inc_min9\
    \ = 1;\n    my $neg_inc_step9 = 1;\n    my $neg_inc_max10 = -1;\n    my $neg_inc_min10\
    \ = 1;\n    my $neg_inc_step10 = 1;\n    my $neg_inc_max11 = -1;\n    my $neg_inc_min11\
    \ = 1;\n    my $neg_inc_step11 = 1;\n    my $neg_inc_max12 = -1;\n    my $neg_inc_min12\
    \ = 1;\n    my $neg_inc_step12 = 1;\n    my $neg_inc_max13 = -1;\n    my $neg_inc_min13\
    \ = 1;\n    my $neg_inc_step13 = 1;\n    my $neg_inc_max14 = -1;\n    my $neg_inc_min14\
    \ = 1;\n    my $neg_inc_step14 = 1;\n    my $neg_inc_max15 = -1;\n    my $neg_inc_min15\
    \ = 1;\n    my $neg_inc_step15 = 1;\n    my $neg_inc_max16 = -1;\n    my $neg_inc_min16\
    \ = 1;\n    my $neg_inc_step16 = 1;\n    my $neg_inc_max17 = -1;\n    my $neg_inc_min17\
    \ = 1;\n    my $neg_inc_step17 = 1;\n    my $neg_inc_max18 = -1;\n    my $neg_inc_min18\
    \ = 1;\n    my $neg_inc_step18 = 1;\n    my $neg_in", "    my @a = @$l;\n    my\
    \ @b = ();\n    foreach my $x (@a) {\n        if ($x > 0) {\n            push(@b,\
    \ $x);\n        }\n    }\n    return @b;\n}", "    my @r;\n    my $i = 0;\n  \
    \  foreach my $x (@$l) {\n        if ($x > 0) {\n            $r[$i] = $x;\n  \
    \          $i++;\n        }\n    }\n    return @r;\n}", "    my @r;\n    foreach\
    \ my $x (@$l) {\n        if ($x > 0) {\n            push(@r, $x);\n        }\n\
    \    }\n    return @r;\n}", "    my @a = @$l;\n    my @b = ();\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $", "    my @r;\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $k = 0;\n    my $n = @$l;\n    while($i < $n) {\n        while($j < $n) {\n\
    \            while($k < $n) {\n                if($l->[$i] >= $l->[$j] && $l->[$i]\
    \ >= $l->[$k]) {\n                    push(@r, $l->[$i]);\n                  \
    \  $i++;\n                    $j++;\n                    $k++;\n             \
    \   }\n                else {\n                    $j++;\n                }\n\
    \            }\n            $k = 0;\n        }\n        $i = 0;\n    }\n    return\
    \ @r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
