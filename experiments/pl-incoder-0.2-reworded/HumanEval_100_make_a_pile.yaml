name: HumanEval_100_make_a_pile
language: pl
prompt: "# Given a positive integer n, you have to make a pile of n levels of stones.\n\
  # The first level has n stones.\n# The number of stones in the next level is:\n\
  # - the next odd number if n is odd.\n# - the next even number if n is even.\n#\
  \ Return the number of stones in each level in an array, where element at index\n\
  # i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile(3)\n\
  # [3, 5, 7]\nsub make_a_pile {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_a_pile;\n\
  \        if(eq_deeply($candidate->(3),[3, 5, 7])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4, 6, 8, 10]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5,\
  \ 7, 9, 11, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[8,\
  \ 10, 12, 14, 16, 18, 20, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @stones;\n    my $i = 0;\n    my $odd = $n % 2;\n    my $even\
    \ = $n % 2 ? 0 : 1;\n    my $next_odd = $odd ? $n + 1 : $n;\n    my $next_even\
    \ = $even ? $n + 1 : $n;\n    while($i < $n) {\n        push(@stones, $next_odd);\n\
    \        $next_odd += $odd ? 2 : 1;\n        $next_even += $even ? 2 : 1;\n  \
    \      $i++;\n    }\n    return @stones;\n}", "    my @pile;\n    my $i = 0;\n\
    \    for(; $i <= $n; $i++) {\n        push @pile, $i + ($i%2 ? $n+1 : $n+2);\n\
    \    }\n    return @pile;\n}", "    my @pile;\n    my $odd = $n % 2;\n    my $even\
    \ = $n % 2 ? 0 : 1;\n    my $level = $odd ? $n : $n + 1;\n    my $stones = $even\
    \ ? $level : $level - 1;\n    push(@pile, $stones);\n    for(my $i = 1; $i <=\
    \ $level; $i++) {\n        $stones = $odd ? $level - $i : $level - $i - 1;\n \
    \       push(@pile, $stones);\n    }\n    return @pile;\n}", "    my @pile;\n\
    \    my $i = 0;\n    my $odd = $n % 2;\n    my $even = $n % 2 ? 0 : 1;\n    my\
    \ $next_odd = $odd ? $n + 1 : $n;\n    my $next_even = $even ? $n + 1 : $n;\n\
    \    for(; $i < $n; $i++) {\n        push(@pile, $i);\n    }\n    push(@pile,\
    \ $next_odd);\n    push(@pile, $next_even);\n    return @pile;\n}", "    my @stones\
    \ = ();\n    my $i = 0;\n    while(1) {\n        push(@stones, $i+1);\n      \
    \  $i++;\n        if($n % 2 == 0) {\n            $i++;\n        }\n        if($i\
    \ == $n) {\n            last;\n        }\n        $n++;\n    }\n    return @stones;\n\
    }", "    my @pile;\n    my $i = 0;\n    while($i < $n) {\n        push(@pile,\
    \ $i+1);\n        $i += 2 if $i%2 == 1;\n    }\n    return @pile;\n}", "    my\
    \ @result;\n    my $i = 0;\n    while(1) {\n        push(@result, $i+1);\n   \
    \     if($n%2 == 0) {\n            $n = $n/2;\n        } else {\n            $n\
    \ = $n*3 + 1;\n        }\n        $i++;\n        if($i == $n) {\n            last;\n\
    \        }\n    }\n    return @result;\n}", "    my @stones;\n    my $i = 0;\n\
    \    my $odd = $n % 2;\n    my $even = $n % 2 ? 0 : 1;\n    while($i < $n) {\n\
    \        push(@stones, $odd);\n        $i += $even;\n        $odd = $odd ? $odd\
    \ + 1 : $odd;\n        $even = $even ? $even + 1 : $even;\n    }\n    return @stones;\n\
    }", "    my @pile;\n    my $i = 0;\n    while($i < $n) {\n        push @pile,\
    \ $i+1;\n        $i += 2 if $i&1;\n    }\n    return @pile;\n}", "    my @stones;\n\
    \    my $i = 0;\n    my $odd = $n % 2;\n    my $even = $n % 2 ? 1 : 0;\n    while($i\
    \ < $n) {\n        push @stones, $odd ? $i + 1 : $i;\n        $i += $even;\n \
    \       $even = $odd ? $i + 1 : $i;\n    }\n    return @stones;\n}", "    my @pile;\n\
    \    my $i = 0;\n    while($i < $n) {\n        my $next = ($n % 2 == 0) ? $n+1\
    \ : $n;\n        push(@pile, $next);\n        $n = $next;\n        $i++;\n   \
    \ }\n    return @pile;\n}", "    my @pile;\n    my $i = 0;\n    while($i <= $n)\
    \ {\n        push @pile, $i++;\n    }\n    return @pile;\n}", "    my @stones\
    \ = ();\n    my $i = 0;\n    for(my $j = 1; $j <= $n; $j++) {\n        my $stones\
    \ = $j % 2 ? $j + 1 : $j;\n        push(@stones, $stones);\n        $i++;\n  \
    \  }\n    return @stones;\n}", "    my @pile;\n    my $i = 0;\n    while($i <\
    \ $n) {\n        push @pile, $i+1;\n        my $odd = $i+1;\n        $odd += $i%2\
    \ ? 1 : 0;\n        $i++;\n    }\n    return @pile;\n}", "    my @result;\n  \
    \  my $i = 0;\n    my $odd = $n % 2;\n    my $even = $n % 2 ? 0 : 1;\n    my $next_odd\
    \ = $odd ? $n + 1 : $n + 2;\n    my $next_even = $even ? $n + 1 : $n + 2;\n  \
    \  while($i < $n) {\n        push(@result, $next_odd + ($i % 2 ? 1 : 0));\n  \
    \      push(@result, $next_even + ($i % 2 ? 0 : 1));\n        $i++;\n    }\n \
    \   return @result;\n}", "    my @pile;\n    my $i = 0;\n    my $odd = $n % 2;\n\
    \    my $even = $n % 2 ? 0 : 1;\n    for(; $i < $n; $i++) {\n        push(@pile,\
    \ $odd ? $i + 1 : $i);\n    }\n    return @pile;\n}", "    my @stones = ();\n\
    \    my $i = 0;\n    while($i < $n) {\n        push(@stones, $i+1);\n        $i\
    \ += $n%2 ? 2 : 1;\n    }\n    return @stones;\n}", "    my @pile;\n    my $i\
    \ = 0;\n    my $odd = $n % 2;\n    my $even = $n % 2 ? 0 : 1;\n    my $next_odd\
    \ = $odd ? $n + 1 : $n;\n    my $next_even = $even ? $n + 1 : $n;\n    foreach\
    \ my $level (1 .. $n) {\n        push(@pile, $level);\n        $i++;\n       \
    \ if ($odd && $next_odd > $level) {\n            $next_odd -= $level;\n      \
    \  }\n        if ($even && $next_even > $level) {\n            $next_even -= $level;\n\
    \        }\n    }\n    return @pile;\n}", "    my @pile;\n    my $i = 0;\n   \
    \ while($i < $n) {\n        push(@pile, $i+1);\n        $i += $n%2 ? 2 : 1;\n\
    \    }\n    return @pile;\n}", "    my @pile;\n    my $odd = $n % 2;\n    my $even\
    \ = $n % 2 ? 1 : 0;\n    my $i = 1;\n    my $level;\n    my $stones;\n    my $next_odd;\n\
    \    my $next_even;\n    my $num_stones;\n    \n    foreach $level (1 .. $n) {\n\
    \        $num_stones = $odd + $even;\n        $next_odd = $odd ? $odd : $even;\n\
    \        $next_even = $even ? $even : $odd;\n        $pile[$level] = $num_stones;\n\
    \        $i += $num_stones;\n    }\n    return @pile;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
