language: pl
name: HumanEval_116_sort_array
results:
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n \
    \   my $j = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n  \
    \  my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n   \
    \ my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_sbkidvk.pl line 142,
    at end of line

    syntax error at /tmp/tmp_sbkidvk.pl line 142, at EOF

    Execution of /tmp/tmp_sbkidvk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $len = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt = 0;\n\
    \    my $tmp_cnt = 0;\n    my $tmp_cnt2 = 0;\n    my $tmp_cnt3 = 0;\n    my $tmp_cnt4\
    \ = 0;\n    my $tmp_cnt5 = 0;\n    my $tmp_cnt6 = 0;\n    my $tmp_cnt7 = 0;\n\
    \    my $tmp_cnt8 = 0;\n    my $tmp_cnt9 = 0;\n    my $tmp_cnt10 = 0;\n    my\
    \ $tmp_cnt11 = 0;\n    my $tmp_cnt12 = 0;\n    my $tmp_cnt13 = 0;\n    my $tmp_cnt14\
    \ = 0;\n    my $tmp_cnt15 = 0;\n    my $tmp_cnt16 = 0;\n    my $tmp_cnt17 = 0;\n\
    \    my $tmp_cnt18 = 0;\n    my $tmp_cnt19 = 0;\n    my $tmp_cnt20 = 0;\n    my\
    \ $tmp_cnt21 = 0;\n    my $tmp_cnt22 = 0;\n    my $tmp_cnt23 = 0;\n    my $tmp_cnt24\
    \ = 0;\n    my $tmp_cnt25 = 0;\n    my $tmp_cnt26 = 0;\n    my $tmp_cnt27 = 0;\n\
    \    my $tmp_cnt28 = 0;\n    my $tmp_cnt29 = 0;\n    my $tmp_cnt30 = 0;\n    my\
    \ $tmp_cnt31 = 0;\n    my $tmp_cnt32 = 0;\n    my $tmp_cnt33 = 0;\n    my $tmp_cnt34\
    \ = 0;\n    my $tmp_cnt35 = 0;\n    my $tmp_cnt36 = 0;\n    my $tmp_cnt37 = 0;\n\
    \    my $tmp_cnt38 = 0;\n    my $tmp_cnt39 = 0;\n    my $tmp_cnt40 = 0;\n    my\
    \ $tmp_cnt41 = 0;\n    my $tmp_cnt42 = 0;\n    my $tmp_cnt43 = 0;\n    my $tmp_cnt44\
    \ = 0;\n    my $tmp_cnt45 = 0;\n    my $tmp_cnt46 = 0;\n    my $tmp_cnt47 = 0;\n\
    \    my $tmp_cnt48 = 0;\n    my $tmp_cnt49 = 0;\n    my $tmp_cnt50 = 0;\n    my\
    \ $tmp_cnt51 = 0;\n    my $tmp_cnt52 = 0;\n    my $tmp_cnt53 = 0;\n    my $tmp_cnt54\
    \ = 0;\n    my $tmp_cnt55 = 0;\n    my $tmp_cnt56 = 0;\n    my $tmp_cnt57 = 0;\n\
    \    my $tmp_cnt58 = 0;\n    my $tmp_cnt59 = 0;\n    my $tmp_cnt60 = 0;\n    my\
    \ $tmp_cnt61\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz8ubjcuv.pl line 80, at end
    of line

    syntax error at /tmp/tmpz8ubjcuv.pl line 80, near "$tmp_cnt61

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz8ubjcuv.pl line 119, at end
    of line

    syntax error at /tmp/tmpz8ubjcuv.pl line 119, at EOF

    Execution of /tmp/tmpz8ubjcuv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $count\
    \ = 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my $maxmin = 0;\n  \
    \  my $maxmax = 0;\n    my $minmax = 0;\n    my $maxminmax = 0;\n    my $maxminmaxcount\
    \ = 0;\n    my $maxminmaxmin = 0;\n    my $maxminmaxmax = 0;\n    my $minmaxmax\
    \ = 0;\n    my $minmaxmaxcount = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax\
    \ = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin\
    \ = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax\
    \ = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin\
    \ = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax\
    \ = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin\
    \ = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax\
    \ = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin\
    \ = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax\
    \ = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin\
    \ = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax\
    \ = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin\
    \ = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax\
    \ = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin\
    \ = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax\
    \ = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin\
    \ = 0;\n    my $minmaxmaxmax = 0;\n    my $minmaxmaxmin = 0;\n    my $minmaxmaxmax\
    \ = 0;\n    my $minmaxmaxmin = 0;\n    my $min\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp61owmpaz.pl line 82, at end
    of line

    syntax error at /tmp/tmp61owmpaz.pl line 82, near "$min

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp61owmpaz.pl line 121, at end
    of line

    syntax error at /tmp/tmp61owmpaz.pl line 121, at EOF

    Execution of /tmp/tmp61owmpaz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n\
    \    my @sorted = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n\
    \    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpgk76w067.pl line 142,
    at end of line

    syntax error at /tmp/tmpgk76w067.pl line 142, at EOF

    Execution of /tmp/tmpgk76w067.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $num_ones);\n    my($min_val, $max_val);\n    my($min_val_str,\
    \ $max_val_str);\n    my($min_val_int, $max_val_int);\n    my($min_val_int, $max_val_int);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmppm3t66sh.pl line 58, at
    end of line

    syntax error at /tmp/tmppm3t66sh.pl line 58, at EOF

    Execution of /tmp/tmppm3t66sh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpc9iyyay7.pl line 140,
    at end of line

    syntax error at /tmp/tmpc9iyyay7.pl line 140, at EOF

    Execution of /tmp/tmpc9iyyay7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $cnt\
    \ = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81\
    \ = 0;\n    my $tmp82 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzxgzq4m0.pl line 140,
    at end of line

    syntax error at /tmp/tmpzxgzq4m0.pl line 140, at EOF

    Execution of /tmp/tmpzxgzq4m0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($num_ones);\n    my($dec);\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max_dec = 0;\n    my $max_num_ones = 0;\n    my $max_i = 0;\n\
    \    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my $max_num_ones\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec\
    \ = 0;\n    my $max_num_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n  \
    \  my $max_len = 0;\n    my $max_dec = 0;\n    my $max_num_ones = 0;\n    my $max_i\
    \ = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my\
    \ $max_num_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len\
    \ = 0;\n    my $max_dec = 0;\n    my $max_num_ones = 0;\n    my $max_i = 0;\n\
    \    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my $max_num_ones\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec\
    \ = 0;\n    my $max_num_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n  \
    \  my $max_len = 0;\n    my $max_dec = 0;\n    my $max_num_ones = 0;\n    my $max_i\
    \ = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my\
    \ $max_num_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len\
    \ = 0;\n    my $max_dec = 0;\n    my $max_num_ones = 0;\n    my $max_i = 0;\n\
    \    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my $max_num_ones\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec\
    \ = 0;\n    my $max_num_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n  \
    \  my $max_len = 0;\n    my $max_dec = 0;\n    my $max_num_ones = 0;\n    my $max_i\
    \ = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my\
    \ $max_num_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len\
    \ = 0;\n    my $max_dec = 0;\n    my $max_num_ones = 0;\n    my $max_i = 0;\n\
    \    my $max_j = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwlijt6_g.pl line 138,
    at end of line

    syntax error at /tmp/tmpwlijt6_g.pl line 138, at EOF

    Execution of /tmp/tmpwlijt6_g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $tmp;\n  \
    \  my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n   \
    \ my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n  \
    \  my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n    my $tmp85;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpr93s73e6.pl line 142,
    at end of line

    syntax error at /tmp/tmpr93s73e6.pl line 142, at EOF

    Execution of /tmp/tmpr93s73e6.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n \
    \   my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n \
    \   my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n  \
    \  my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n\
    \    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n\
    \    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n\
    \    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n\
    \    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n\
    \    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n\
    \    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n\
    \    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n\
    \    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n\
    \    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n\
    \    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n\
    \    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n\
    \    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n\
    \    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n\
    \    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp3u4en69y.pl line 103,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp3u4en69y.pl line 103, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp3u4en69y.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmp3u4en69y.pl line 142, at EOF\nExecution of /tmp/tmp3u4en69y.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplgyhg9bj.pl line 101, at end
    of line

    syntax error at /tmp/tmplgyhg9bj.pl line 101, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplgyhg9bj.pl line 140, at end
    of line

    syntax error at /tmp/tmplgyhg9bj.pl line 140, at EOF

    Execution of /tmp/tmplgyhg9bj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz9jawo9u.pl line 101, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz9jawo9u.pl line 140, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 140, at EOF

    Execution of /tmp/tmpz9jawo9u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $max = 0;\n\
    \    my $min = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n  \
    \  my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n  \
    \  my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n\
    \    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n\
    \    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n\
    \    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n\
    \    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n\
    \    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n\
    \    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n\
    \    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n\
    \    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n\
    \    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n\
    \    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n\
    \    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n\
    \    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n\
    \    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n\
    \    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n\
    \    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n\
    \    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n\
    \    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n\
    \    my $tmp80 = 0;\n    my $tmp81\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4grapkgr.pl line 101, at end
    of line

    syntax error at /tmp/tmp4grapkgr.pl line 101, near "$tmp81

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4grapkgr.pl line 140, at end
    of line

    syntax error at /tmp/tmp4grapkgr.pl line 140, at EOF

    Execution of /tmp/tmp4grapkgr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqhabn4n_.pl line 139,
    at end of line

    syntax error at /tmp/tmpqhabn4n_.pl line 139, at EOF

    Execution of /tmp/tmpqhabn4n_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp;\n    my @ret;\n    my $ones = 0;\n    my $dec = 0;\n    my $cmp\
    \ = 0;\n    my $cmp_ones = 0;\n    my $cmp_dec = 0;\n    my $cmp_max = 0;\n  \
    \  my $cmp_max_ones = 0;\n    my $cmp_max_dec = 0;\n    my $cmp_max_max = 0;\n\
    \    my $cmp_max_max_ones = 0;\n    my $cmp_max_max_dec = 0;\n    my $cmp_max_max_max\
    \ = 0;\n    my $cmp_max_max_max_ones = 0;\n    my $cmp_max_max_max_dec = 0;\n\
    \    my $cmp_max_max_max_max = 0;\n    my $cmp_max_max_max_max_ones = 0;\n   \
    \ my $cmp_max_max_max_max_dec = 0;\n    my $cmp_max_max_max_max_max = 0;\n   \
    \ my $cmp_max_max_max_max_max_ones = 0;\n    my $cmp_max_max_max_max_max_dec =\
    \ 0;\n    my $cmp_max_max_max_max_max_max = 0;\n    my $cmp_max_max_max_max_max_max_ones\
    \ = 0;\n    my $cmp_max_max_max_max_max_max_dec = 0;\n    my $cmp_max_max_max_max_max_max_max\
    \ = 0;\n    my $cmp_max_max_max_max_max_max_max_ones = 0;\n    my $cmp_max_max_max_max_max_max_max_dec\
    \ = 0;\n    my $cmp_max_max_max_max_max_max_max_max = 0;\n    my $cmp_max_max_max_max_max_max_max_max_ones\
    \ = 0;\n    my $cmp_max_max_max_max_max_max_max_max_dec = 0;\n    my $cmp_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    my $cmp_max_max_max_max_max_max_max_max_max_ones = 0;\n    my $cmp_max_max_max_max_max_max_max_max_max_dec\
    \ = 0;\n    my $cmp_max_max_max_max_max_max_max_max_max_max = 0;\n    my $cmp_max_max_max_max_max_max_max_max_max_max_ones\
    \ = 0;\n    my $cmp_max_max_max_max_max_max_max_max_max_max_dec = 0;\n    my $cmp_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    my $cmp_max_max_max_max_max_max_max_max_max_max_ones = 0;\n    my\
    \ $cmp_max_max_max_max_max_max_max_max_max_max_dec = 0;\n    my $cmp_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    my $cmp_max_max_max_max_max_max_max_max_\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpryh34ymh.pl line 60, at end
    of line

    syntax error at /tmp/tmpryh34ymh.pl line 60, near "$cmp_max_max_max_max_max_max_max_max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpryh34ymh.pl line 99, at end of
    line

    syntax error at /tmp/tmpryh34ymh.pl line 99, at EOF

    Execution of /tmp/tmpryh34ymh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = scalar(@$arr);\n\
    \    my $max = 0;\n    my $min = 0;\n    my $temp = 0;\n    my $count = 0;\n \
    \   my $maxcount = 0;\n    my $mincount = 0;\n    my $maxtemp = 0;\n    my $mintemp\
    \ = 0;\n    my $maxtemp2 = 0;\n    my $mintemp2 = 0;\n    my $maxtemp3 = 0;\n\
    \    my $mintemp3 = 0;\n    my $maxtemp4 = 0;\n    my $mintemp4 = 0;\n    my $maxtemp5\
    \ = 0;\n    my $mintemp5 = 0;\n    my $maxtemp6 = 0;\n    my $mintemp6 = 0;\n\
    \    my $maxtemp7 = 0;\n    my $mintemp7 = 0;\n    my $maxtemp8 = 0;\n    my $mintemp8\
    \ = 0;\n    my $maxtemp9 = 0;\n    my $mintemp9 = 0;\n    my $maxtemp10 = 0;\n\
    \    my $mintemp10 = 0;\n    my $maxtemp11 = 0;\n    my $mintemp11 = 0;\n    my\
    \ $maxtemp12 = 0;\n    my $mintemp12 = 0;\n    my $maxtemp13 = 0;\n    my $mintemp13\
    \ = 0;\n    my $maxtemp14 = 0;\n    my $mintemp14 = 0;\n    my $maxtemp15 = 0;\n\
    \    my $mintemp15 = 0;\n    my $maxtemp16 = 0;\n    my $mintemp16 = 0;\n    my\
    \ $maxtemp17 = 0;\n    my $mintemp17 = 0;\n    my $maxtemp18 = 0;\n    my $mintemp18\
    \ = 0;\n    my $maxtemp19 = 0;\n    my $mintemp19 = 0;\n    my $maxtemp20 = 0;\n\
    \    my $mintemp20 = 0;\n    my $maxtemp21 = 0;\n    my $mintemp21 = 0;\n    my\
    \ $maxtemp22 = 0;\n    my $mintemp22 = 0;\n    my $maxtemp23 = 0;\n    my $mintemp23\
    \ = 0;\n    my $maxtemp24 = 0;\n    my $mintemp24 = 0;\n    my $maxtemp25 = 0;\n\
    \    my $mintemp25 = 0;\n    my $maxtemp26 = 0;\n    my $mintemp26 = 0;\n    my\
    \ $maxtemp27 = 0;\n    my $mintemp27 = 0;\n    my $maxtemp28 = 0;\n    my $mintemp28\
    \ = 0;\n    my $maxtemp29 = 0;\n    my $mintemp29 = 0;\n    my $maxtemp30 = 0;\n\
    \    my $mintemp30 = 0;\n    my $maxtemp31 = 0;\n    my $mintemp31 = 0;\n    my\
    \ $maxtemp32 = 0;\n    my $mintemp32 = 0;\n    my $maxtemp33 = 0;\n    my $mintemp33\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp1c8zw7fs.pl line 91,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp1c8zw7fs.pl line 91, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp1c8zw7fs.pl line 130, at end of line\nsyntax\
    \ error at /tmp/tmp1c8zw7fs.pl line 130, at EOF\nExecution of /tmp/tmp1c8zw7fs.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqhabn4n_.pl line 139,
    at end of line

    syntax error at /tmp/tmpqhabn4n_.pl line 139, at EOF

    Execution of /tmp/tmpqhabn4n_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpn9ct_qen.pl line 103,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpn9ct_qen.pl line 103, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpn9ct_qen.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmpn9ct_qen.pl line 142, at EOF\nExecution of /tmp/tmpn9ct_qen.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $count = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $tmp = 0;\n \
    \   my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n \
    \   my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n \
    \   my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n\
    \    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n\
    \    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n\
    \    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n\
    \    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n\
    \    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n\
    \    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n\
    \    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n\
    \    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n\
    \    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n\
    \    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n\
    \    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n\
    \    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n\
    \    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n\
    \    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n\
    \    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n\
    \    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n\
    \    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpyfsqzzjd.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpyfsqzzjd.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpyfsqzzjd.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpyfsqzzjd.pl line 140, at EOF\nExecution of /tmp/tmpyfsqzzjd.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3\
    \ = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5\
    \ = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7\
    \ = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9\
    \ = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpcury444l.pl line 141,
    at end of line

    syntax error at /tmp/tmpcury444l.pl line 141, at EOF

    Execution of /tmp/tmpcury444l.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n\
    \    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpg_9_7j3t.pl line 104,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpg_9_7j3t.pl line 104, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpg_9_7j3t.pl line 143, at end of line\nsyntax\
    \ error at /tmp/tmpg_9_7j3t.pl line 143, at EOF\nExecution of /tmp/tmpg_9_7j3t.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $cur = 0;\n    my $cnt = 0;\n    my $tmp;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $cnt;\n    my $cnt2;\n    my $cnt3;\n\
    \    my $cnt4;\n    my $cnt5;\n    my $cnt6;\n    my $cnt7;\n    my $cnt8;\n \
    \   my $cnt9;\n    my $cnt10;\n    my $cnt11;\n    my $cnt12;\n    my $cnt13;\n\
    \    my $cnt14;\n    my $cnt15;\n    my $cnt16;\n    my $cnt17;\n    my $cnt18;\n\
    \    my $cnt19;\n    my $cnt20;\n    my $cnt21;\n    my $cnt22;\n    my $cnt23;\n\
    \    my $cnt24;\n    my $cnt25;\n    my $cnt26;\n    my $cnt27;\n    my $cnt28;\n\
    \    my $cnt29;\n    my $cnt30;\n    my $cnt31;\n    my $cnt32;\n    my $cnt33;\n\
    \    my $cnt34;\n    my $cnt35;\n    my $cnt36;\n    my $cnt37;\n    my $cnt38;\n\
    \    my $cnt39;\n    my $cnt40;\n    my $cnt41;\n    my $cnt42;\n    my $cnt43;\n\
    \    my $cnt44;\n    my $cnt45;\n    my $cnt46;\n    my $cnt47;\n    my $cnt48;\n\
    \    my $cnt49;\n    my $cnt50;\n    my $cnt51;\n    my $cnt52;\n    my $cnt53;\n\
    \    my $cnt54;\n    my $cnt55;\n    my $cnt56;\n    my $cnt57;\n    my $cnt58;\n\
    \    my $cnt59;\n    my $cnt60;\n    my $cnt61;\n    my $cnt62;\n    my $cnt63;\n\
    \    my $cnt64;\n    my $cnt65;\n    my $cnt66;\n    my $cnt67;\n    my $cnt68;\n\
    \    my $cnt69;\n    my $cnt70;\n    my $cnt71;\n    my $cnt72;\n    my $cnt73;\n\
    \    my $cnt74;\n    my $cnt75;\n    my $cnt76;\n    my $cnt77;\n    my $cnt78;\n\
    \    my $cnt79;\n    my $cnt80;\n    my $cnt81;\n    my $cnt8\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvhac6nfq.pl line 104, at end
    of line

    syntax error at /tmp/tmpvhac6nfq.pl line 104, near "$cnt8

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvhac6nfq.pl line 143, at end
    of line

    syntax error at /tmp/tmpvhac6nfq.pl line 143, at EOF

    Execution of /tmp/tmpvhac6nfq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_len = 0;\n    my\
    \ $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpcw_ymmuc.pl line 107,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpcw_ymmuc.pl line 107, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpcw_ymmuc.pl line 146, at end of line\nsyntax\
    \ error at /tmp/tmpcw_ymmuc.pl line 146, at EOF\nExecution of /tmp/tmpcw_ymmuc.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz9jawo9u.pl line 101, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz9jawo9u.pl line 140, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 140, at EOF

    Execution of /tmp/tmpz9jawo9u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $cnt;\n    my $tmp;\n    my $max;\n    my $min;\n    my $mincnt;\n    my $maxcnt;\n\
    \    my $minval;\n    my $maxval;\n    my $mincnt2;\n    my $maxcnt2;\n    my\
    \ $minval2;\n    my $maxval2;\n    my $minval3;\n    my $maxval3;\n    my $minval4;\n\
    \    my $maxval4;\n    my $minval5;\n    my $maxval5;\n    my $minval6;\n    my\
    \ $maxval6;\n    my $minval7;\n    my $maxval7;\n    my $minval8;\n    my $maxval8;\n\
    \    my $minval9;\n    my $maxval9;\n    my $minval10;\n    my $maxval10;\n  \
    \  my $minval11;\n    my $maxval11;\n    my $minval12;\n    my $maxval12;\n  \
    \  my $minval13;\n    my $maxval13;\n    my $minval14;\n    my $maxval14;\n  \
    \  my $minval15;\n    my $maxval15;\n    my $minval16;\n    my $maxval16;\n  \
    \  my $minval17;\n    my $maxval17;\n    my $minval18;\n    my $maxval18;\n  \
    \  my $minval19;\n    my $maxval19;\n    my $minval20;\n    my $maxval20;\n  \
    \  my $minval21;\n    my $maxval21;\n    my $minval22;\n    my $maxval22;\n  \
    \  my $minval23;\n    my $maxval23;\n    my $minval24;\n    my $maxval24;\n  \
    \  my $minval25;\n    my $maxval25;\n    my $minval26;\n    my $maxval26;\n  \
    \  my $minval27;\n    my $maxval27;\n    my $minval28;\n    my $maxval28;\n  \
    \  my $minval29;\n    my $maxval29;\n    my $minval30;\n    my $maxval30;\n  \
    \  my $minval31;\n    my $maxval31;\n    my $minval32;\n    my $maxval32;\n  \
    \  my $minval33;\n    my $maxval33;\n    my $minval34;\n    my $maxval34;\n  \
    \  my $minval35;\n    my $maxval35;\n    my $minval36;\n    my $maxval36\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpyfr5ix6f.pl line 94, at end
    of line

    syntax error at /tmp/tmpyfr5ix6f.pl line 94, near "$maxval36

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpyfr5ix6f.pl line 133, at end
    of line

    syntax error at /tmp/tmpyfr5ix6f.pl line 133, at EOF

    Execution of /tmp/tmpyfr5ix6f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sort) = ();\n\
    \    my($i, $j);\n    \n    # sort by number of ones in binary representation\n\
    \    foreach $i (0 .. $#$arr) {\n        $j = 0;\n        foreach $j (0 .. $#$arr)\
    \ {\n            if ($arr[$i] & 1) {\n                push(@sort, $j);\n     \
    \       }\n            $arr[$i] &= ~1;\n        }\n    }\n    \n    # sort by\
    \ decimal value\n    foreach $i (0 .. $#$arr) {\n        $j = 0;\n        foreach\
    \ $j (0 .. $#$arr) {\n            if ($arr[$i] < $arr[$j]) {\n               \
    \ push(@sort, $i);\n            }\n        }\n    }\n    \n    return @sort;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_ones = 0;\n   \
    \ my $max_dec = 0;\n    my $max_dec_index = 0;\n    my $max_dec_len = 0;\n   \
    \ my $max_dec_len_index = 0;\n    my $max_dec_len_index2 = 0;\n    my $max_dec_len_index3\
    \ = 0;\n    my $max_dec_len_index4 = 0;\n    my $max_dec_len_index5 = 0;\n   \
    \ my $max_dec_len_index6 = 0;\n    my $max_dec_len_index7 = 0;\n    my $max_dec_len_index8\
    \ = 0;\n    my $max_dec_len_index9 = 0;\n    my $max_dec_len_index10 = 0;\n  \
    \  my $max_dec_len_index11 = 0;\n    my $max_dec_len_index12 = 0;\n    my $max_dec_len_index13\
    \ = 0;\n    my $max_dec_len_index14 = 0;\n    my $max_dec_len_index15 = 0;\n \
    \   my $max_dec_len_index16 = 0;\n    my $max_dec_len_index17 = 0;\n    my $max_dec_len_index18\
    \ = 0;\n    my $max_dec_len_index19 = 0;\n    my $max_dec_len_index20 = 0;\n \
    \   my $max_dec_len_index21 = 0;\n    my $max_dec_len_index22 = 0;\n    my $max_dec_len_index23\
    \ = 0;\n    my $max_dec_len_index24 = 0;\n    my $max_dec_len_index25 = 0;\n \
    \   my $max_dec_len_index26 = 0;\n    my $max_dec_len_index27 = 0;\n    my $max_dec_len_index28\
    \ = 0;\n    my $max_dec_len_index29 = 0;\n    my $max_dec_len_index30 = 0;\n \
    \   my $max_dec_len_index31 = 0;\n    my $max_dec_len_index32 = 0;\n    my $max_dec_len_index33\
    \ = 0;\n    my $max_dec_len_index34 = 0;\n    my $max_dec_len_index35 = 0;\n \
    \   my $max_dec_len_index36 = 0;\n    my $max_dec_len_index37 = 0;\n    my $max_dec_len_index38\
    \ = 0;\n    my $max_dec_len_index39 = 0;\n    my $max_dec_len_index40 = 0;\n \
    \   my $max_dec_len_index41 = 0;\n    my $max_dec_len_index42 = 0;\n    my $max_dec_len_index43\
    \ = 0;\n    my $max_dec_len_index44 = 0;\n    my $max_dec_len_index45 = 0;\n \
    \   my $max_dec_len_index46 = 0;\n    my $max_dec_len_index47 = 0;\n    my $max_dec_len_index48\
    \ = 0;\n    my $max_dec_len_index49 = 0;\n    my $max_dec_len_index50 = 0;\n \
    \   my $max_dec_len_index51 = 0;\n    my $max_dec_len_index52 = 0;\n    my $max_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp_1nn676t.pl line 74, at end
    of line

    syntax error at /tmp/tmp_1nn676t.pl line 74, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp_1nn676t.pl line 113, at end
    of line

    syntax error at /tmp/tmp_1nn676t.pl line 113, at EOF

    Execution of /tmp/tmp_1nn676t.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($num_ones);\n    my($dec);\n    my($i);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp0sng6r7y.pl line 56, at
    end of line

    syntax error at /tmp/tmp0sng6r7y.pl line 56, at EOF

    Execution of /tmp/tmp0sng6r7y.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp;\n    my @res;\n\
    \    my $max = 0;\n    my $min = 0;\n    my $min_index = 0;\n    my $max_index\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_diff = 0;\n\
    \    my $max_diff = 0;\n    my $min_diff_index = 0;\n    my $max_diff_index =\
    \ 0;\n    my $min_diff_count = 0;\n    my $max_diff_count = 0;\n    my $min_diff_rev\
    \ = 0;\n    my $max_diff_rev = 0;\n    my $min_diff_rev_index = 0;\n    my $max_diff_rev_index\
    \ = 0;\n    my $min_diff_rev_count = 0;\n    my $max_diff_rev_count = 0;\n   \
    \ my $min_diff_rev_rev = 0;\n    my $max_diff_rev_rev = 0;\n    my $min_diff_rev_rev_index\
    \ = 0;\n    my $max_diff_rev_rev_index = 0;\n    my $min_diff_rev_rev_count =\
    \ 0;\n    my $max_diff_rev_rev_count = 0;\n    my $min_diff_rev_rev_rev = 0;\n\
    \    my $max_diff_rev_rev_rev = 0;\n    my $min_diff_rev_rev_rev_index = 0;\n\
    \    my $max_diff_rev_rev_rev_index = 0;\n    my $min_diff_rev_rev_rev_count =\
    \ 0;\n    my $max_diff_rev_rev_rev_count = 0;\n    my $min_diff_rev_rev_rev =\
    \ 0;\n    my $max_diff_rev_rev_rev = 0;\n    my $min_diff_rev_rev_rev_index =\
    \ 0;\n    my $max_diff_rev_rev_rev_index = 0;\n    my $min_diff_rev_rev_rev_count\
    \ = 0;\n    my $max_diff_rev_rev_rev_count = 0;\n    my $min_diff_rev_rev_rev\
    \ = 0;\n    my $max_diff_rev_rev_rev = 0;\n    my $min_diff_rev_rev_rev_index\
    \ = 0;\n    my $max_diff_rev_rev_rev_index = 0;\n    my $min_diff_rev_rev_rev_count\
    \ = 0;\n    my $max_diff_rev_rev_rev_count = 0;\n    my $min_diff_rev_rev_rev\
    \ = 0;\n    my $max_diff_rev_rev_rev = 0;\n    my $min_diff_rev_rev_rev_index\
    \ = 0;\n    my $max_diff_rev_rev_rev_index = 0;\n    my $min_diff_rev_rev_rev_count\
    \ = 0;\n    my $max_diff_rev_rev_rev_count = 0;\n    my $min_diff_rev_rev_rev\
    \ = 0;\n    my $max_diff_rev_rev_rev = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpmvyjqke9.pl line 108,
    at end of line

    syntax error at /tmp/tmpmvyjqke9.pl line 108, at EOF

    Execution of /tmp/tmpmvyjqke9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqhabn4n_.pl line 139,
    at end of line

    syntax error at /tmp/tmpqhabn4n_.pl line 139, at EOF

    Execution of /tmp/tmpqhabn4n_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $ones = 0;\n    my $dec\
    \ = 0;\n    my $cmp = 0;\n    my $cmp2 = 0;\n    my $cmp3 = 0;\n    my $cmp4 =\
    \ 0;\n    my $cmp5 = 0;\n    my $cmp6 = 0;\n    my $cmp7 = 0;\n    my $cmp8 =\
    \ 0;\n    my $cmp9 = 0;\n    my $cmp10 = 0;\n    my $cmp11 = 0;\n    my $cmp12\
    \ = 0;\n    my $cmp13 = 0;\n    my $cmp14 = 0;\n    my $cmp15 = 0;\n    my $cmp16\
    \ = 0;\n    my $cmp17 = 0;\n    my $cmp18 = 0;\n    my $cmp19 = 0;\n    my $cmp20\
    \ = 0;\n    my $cmp21 = 0;\n    my $cmp22 = 0;\n    my $cmp23 = 0;\n    my $cmp24\
    \ = 0;\n    my $cmp25 = 0;\n    my $cmp26 = 0;\n    my $cmp27 = 0;\n    my $cmp28\
    \ = 0;\n    my $cmp29 = 0;\n    my $cmp30 = 0;\n    my $cmp31 = 0;\n    my $cmp32\
    \ = 0;\n    my $cmp33 = 0;\n    my $cmp34 = 0;\n    my $cmp35 = 0;\n    my $cmp36\
    \ = 0;\n    my $cmp37 = 0;\n    my $cmp38 = 0;\n    my $cmp39 = 0;\n    my $cmp40\
    \ = 0;\n    my $cmp41 = 0;\n    my $cmp42 = 0;\n    my $cmp43 = 0;\n    my $cmp44\
    \ = 0;\n    my $cmp45 = 0;\n    my $cmp46 = 0;\n    my $cmp47 = 0;\n    my $cmp48\
    \ = 0;\n    my $cmp49 = 0;\n    my $cmp50 = 0;\n    my $cmp51 = 0;\n    my $cmp52\
    \ = 0;\n    my $cmp53 = 0;\n    my $cmp54 = 0;\n    my $cmp55 = 0;\n    my $cmp56\
    \ = 0;\n    my $cmp57 = 0;\n    my $cmp58 = 0;\n    my $cmp59 = 0;\n    my $cmp60\
    \ = 0;\n    my $cmp61 = 0;\n    my $cmp62 = 0;\n    my $cmp63 = 0;\n    my $cmp64\
    \ = 0;\n    my $cmp65 = 0;\n    my $cmp66 = 0;\n    my $cmp67 = 0;\n    my $cmp68\
    \ = 0;\n    my $cmp69 = 0;\n    my $cmp70 = 0;\n    my $cmp71 = 0;\n    my $cmp72\
    \ = 0;\n    my $cmp73 = 0;\n    my $cmp74 = 0;\n    my $cmp75 = 0;\n    my $cmp76\
    \ = 0;\n    my $cmp77 = 0;\n    my $cmp78 = 0;\n    my $cmp79 = 0;\n    my $cmp80\
    \ = 0;\n    my $cmp81 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6hai8gg9.pl line 140,
    at end of line

    syntax error at /tmp/tmp6hai8gg9.pl line 140, at EOF

    Execution of /tmp/tmp6hai8gg9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $temp\
    \ = 0;\n    my $count = 0;\n    my @res;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp1avtcy2n.pl line 60, at
    end of line

    syntax error at /tmp/tmp1avtcy2n.pl line 60, at EOF

    Execution of /tmp/tmp1avtcy2n.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 =\
    \ 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 =\
    \ 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12\
    \ = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16\
    \ = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20\
    \ = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24\
    \ = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28\
    \ = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32\
    \ = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36\
    \ = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40\
    \ = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44\
    \ = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48\
    \ = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52\
    \ = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56\
    \ = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60\
    \ = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64\
    \ = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68\
    \ = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72\
    \ = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76\
    \ = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80\
    \ = 0;\n    my $tmp81 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpdd5t48_h.pl line 140,
    at end of line

    syntax error at /tmp/tmpdd5t48_h.pl line 140, at EOF

    Execution of /tmp/tmpdd5t48_h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j);\n    my($num_ones);\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbenfo1xa.pl line 55, at
    end of line

    syntax error at /tmp/tmpbenfo1xa.pl line 55, at EOF

    Execution of /tmp/tmpbenfo1xa.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max = -1;\n    my\
    \ $min = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $ones = 0;\n    my\
    \ $dec = 0;\n    my $maxdec = 0;\n    my $maxcount = 0;\n    my $maxdeccount =\
    \ 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount\
    \ = 0;\n    my $maxdeccount = 0;\n    my $maxdeccount = 0;\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpiple3e1r.pl line 139,
    at end of line

    syntax error at /tmp/tmpiple3e1r.pl line 139, at EOF

    Execution of /tmp/tmpiple3e1r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $k = 0;\n    my $tmp;\n    my $ones = 0;\n    my $dec = 0;\n    my $ones_cnt\
    \ = 0;\n    my $dec_cnt = 0;\n    my $cnt = 0;\n    my $tmp_cnt = 0;\n    my $tmp_dec\
    \ = 0;\n    my $tmp_ones = 0;\n    my $tmp_ones_cnt = 0;\n    my $tmp_dec_cnt\
    \ = 0;\n    my $tmp_max_ones = 0;\n    my $tmp_max_dec = 0;\n    my $tmp_max_ones_cnt\
    \ = 0;\n    my $tmp_max_dec_cnt = 0;\n    my $tmp_max_cnt = 0;\n    my $tmp_max_ones_dec\
    \ = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt = 0;\n   \
    \ my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt\
    \ = 0;\n    my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n   \
    \ my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt\
    \ = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt = 0;\n   \
    \ my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt\
    \ = 0;\n    my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n   \
    \ my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt\
    \ = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt = 0;\n   \
    \ my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt\
    \ = 0;\n    my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n   \
    \ my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt\
    \ = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt = 0;\n   \
    \ my $tmp_max_ones_dec_cnt = 0;\n    my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt\
    \ = 0;\n    my $tmp_max_ones_cnt = 0;\n    my $tmp_max_ones_dec_cnt = 0;\n   \
    \ my $tmp_max_ones_cnt = 0;\n    my $tmp_max_one\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpfr587p91.pl line 75, at end
    of line

    syntax error at /tmp/tmpfr587p91.pl line 75, near "$tmp_max_one

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpfr587p91.pl line 114, at end
    of line

    syntax error at /tmp/tmpfr587p91.pl line 114, at EOF

    Execution of /tmp/tmpfr587p91.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp64ouxl8h.pl line 103,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp64ouxl8h.pl line 103, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp64ouxl8h.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmp64ouxl8h.pl line 142, at EOF\nExecution of /tmp/tmp64ouxl8h.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my $num_ones = 0;\n    my $num_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $num_ones_max = 0;\n    my $num_dec_max\
    \ = 0;\n    my $num_ones_max_i = 0;\n    my $num_dec_max_i = 0;\n    my $num_ones_max_j\
    \ = 0;\n    my $num_dec_max_j = 0;\n    my $num_ones_max_k = 0;\n    my $num_dec_max_k\
    \ = 0;\n    my $num_ones_max_l = 0;\n    my $num_dec_max_l = 0;\n    my $num_ones_max_m\
    \ = 0;\n    my $num_dec_max_m = 0;\n    my $num_ones_max_n = 0;\n    my $num_dec_max_n\
    \ = 0;\n    my $num_ones_max_o = 0;\n    my $num_dec_max_o = 0;\n    my $num_ones_max_p\
    \ = 0;\n    my $num_dec_max_p = 0;\n    my $num_ones_max_q = 0;\n    my $num_dec_max_q\
    \ = 0;\n    my $num_ones_max_r = 0;\n    my $num_dec_max_r = 0;\n    my $num_ones_max_s\
    \ = 0;\n    my $num_dec_max_s = 0;\n    my $num_ones_max_t = 0;\n    my $num_dec_max_t\
    \ = 0;\n    my $num_ones_max_u = 0;\n    my $num_dec_max_u = 0;\n    my $num_ones_max_v\
    \ = 0;\n    my $num_dec_max_v = 0;\n    my $num_ones_max_w = 0;\n    my $num_dec_max_w\
    \ = 0;\n    my $num_ones_max_x = 0;\n    my $num_dec_max_x = 0;\n    my $num_ones_max_y\
    \ = 0;\n    my $num_dec_max_y = 0;\n    my $num_ones_max_z = 0;\n    my $num_dec_max_z\
    \ = 0;\n    my $num_ones_max_a = 0;\n    my $num_dec_max_a = 0;\n    my $num_ones_max_b\
    \ = 0;\n    my $num_dec_max_b = 0;\n    my $num_ones_max_c = 0;\n    my $num_dec_max_c\
    \ = 0;\n    my $num_ones_max_d = 0;\n    my $num_dec_max_d = 0;\n    my $num_ones_max_e\
    \ = 0;\n    my $num_dec_max_e = 0;\n    my $num_ones_max_f = 0;\n    my $num_dec_max_f\
    \ = 0;\n    my $num_ones_max_g = 0;\n    my $num_dec_max_g = 0;\n    my $num_ones_max_h\
    \ = 0;\n    my $num_dec_max_h = 0;\n    my $num_ones_max_i = 0;\n    my $num_dec_max_i\
    \ = 0;\n    my $num_ones_max_j = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpi26ameui.pl line 116,
    at end of line

    syntax error at /tmp/tmpi26ameui.pl line 116, at EOF

    Execution of /tmp/tmpi26ameui.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_bin = 0;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n\
    \    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n\
    \    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n\
    \    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n\
    \    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n\
    \    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n\
    \    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n\
    \    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n\
    \    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n\
    \    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n\
    \    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n\
    \    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n\
    \    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n\
    \    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n\
    \    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n\
    \    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n\
    \    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n\
    \    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n\
    \    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n\
    \    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n\
    \    my $tmp79 = 0;\n    my $tmp80 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8cqs9f26.pl line 139,
    at end of line

    syntax error at /tmp/tmp8cqs9f26.pl line 139, at EOF

    Execution of /tmp/tmp8cqs9f26.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $num);\n    my $len = @$arr;\n    my $max_num = 0;\n    my $max_num_index\
    \ = 0;\n    my $max_num_len = 0;\n    my $max_num_len_index = 0;\n    my $max_num_len_value\
    \ = 0;\n    my $max_num_len_value_index = 0;\n    my $max_num_len_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_len_value_value_value\
    \ = 0;\n    my $max_num_len_value_value_index = 0;\n    my $max_num_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpei9i7gtk.pl line 67, at end
    of line

    syntax error at /tmp/tmpei9i7gtk.pl line 67, near "$max_num_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpei9i7gtk.pl line 106, at end
    of line

    syntax error at /tmp/tmpei9i7gtk.pl line 106, at EOF

    Execution of /tmp/tmpei9i7gtk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $tmp2;\n   \
    \ my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my\
    \ $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my\
    \ $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n  \
    \  my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $tmp86\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprnyfu78m.pl line 103, at end
    of line

    syntax error at /tmp/tmprnyfu78m.pl line 103, near "$tmp86

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprnyfu78m.pl line 142, at end
    of line

    syntax error at /tmp/tmprnyfu78m.pl line 142, at EOF

    Execution of /tmp/tmprnyfu78m.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 =\
    \ 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 =\
    \ 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 =\
    \ 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 =\
    \ 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpyb4y4ugg.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpyb4y4ugg.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpyb4y4ugg.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpyb4y4ugg.pl line 140, at EOF\nExecution of /tmp/tmpyb4y4ugg.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min = 0;\n\
    \    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n\
    \    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n\
    \    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n\
    \    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n\
    \    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n\
    \    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n\
    \    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n\
    \    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n\
    \    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n\
    \    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n\
    \    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n\
    \    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n\
    \    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n\
    \    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n\
    \    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n\
    \    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n\
    \    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n\
    \    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n\
    \    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n\
    \    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n\
    \    my $max42 = 0;\n    my $min42 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpoqpdlwbz.pl line 141,
    at end of line

    syntax error at /tmp/tmpoqpdlwbz.pl line 141, at EOF

    Execution of /tmp/tmpoqpdlwbz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $num_ones);\n    my($num_ones_arr);\n    my($num_ones_arr_copy);\n\
    \    my($num_ones_arr_copy_size);\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpt9mw_zm3.pl line 57, at
    end of line

    syntax error at /tmp/tmpt9mw_zm3.pl line 57, at EOF

    Execution of /tmp/tmpt9mw_zm3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $cnt = 0;\n    my $tmp;\n    foreach my\
    \ $num (@$arr) {\n        $cnt++;\n        $tmp = $num;\n        $tmp = $cnt if\
    \ $cnt > $max;\n        $tmp = $min if $cnt < $min;\n        $tmp = $num if $tmp\
    \ == 0;\n        $max = $tmp if $tmp > $max;\n        $min = $tmp if $tmp < $min;\n\
    \    }\n    foreach my $num (@$arr) {\n        $cnt++;\n        $tmp = $num;\n\
    \        $tmp = $cnt if $cnt > $max;\n        $tmp = $min if $cnt < $min;\n  \
    \      $tmp = $num if $tmp == 0;\n        $max = $tmp if $tmp > $max;\n      \
    \  $min = $tmp if $tmp < $min;\n    }\n    foreach my $num (@$arr) {\n       \
    \ $cnt++;\n        $tmp = $num;\n        $tmp = $cnt if $cnt > $max;\n       \
    \ $tmp = $min if $cnt < $min;\n        $tmp = $num if $tmp == 0;\n        $max\
    \ = $tmp if $tmp > $max;\n        $min = $tmp if $tmp < $min;\n    }\n    foreach\
    \ my $num (@$arr) {\n        $cnt++;\n        $tmp = $num;\n        $tmp = $cnt\
    \ if $cnt > $max;\n        $tmp = $min if $cnt < $min;\n        $tmp = $num if\
    \ $tmp == 0;\n        $max = $tmp if $tmp > $max;\n        $min = $tmp if $tmp\
    \ < $min;\n    }\n    foreach my $num (@$arr) {\n        $cnt++;\n        $tmp\
    \ = $num;\n        $tmp = $cnt if $cnt > $max;\n        $tmp = $min if $cnt <\
    \ $min;\n        $tmp = $num if $tmp == 0;\n        $max = $tmp if $tmp > $max;\n\
    \        $min = $tmp if $tmp < $min;\n    }\n    foreach my $num (@$arr) {\n \
    \       $cnt++;\n        $tmp = $num;\n        $tmp = $cnt if $cnt > $max;\n \
    \       $tmp = $min if $cnt < $min;\n        $tmp = $num if $tmp == 0;\n     \
    \   $max = $tmp if $tmp > $max;\n        $min = $tmp if $tmp < $min;\n    }\n\
    \    fore\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp_xw4xhr2.pl line 73, at end
    of line

    syntax error at /tmp/tmp_xw4xhr2.pl line 73, near "fore

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp_xw4xhr2.pl line 112, at end
    of line

    syntax error at /tmp/tmp_xw4xhr2.pl line 112, at EOF

    Execution of /tmp/tmp_xw4xhr2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $cmp;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpss43mzy4.pl line 100, at end
    of line

    syntax error at /tmp/tmpss43mzy4.pl line 100, near "$cmp_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpss43mzy4.pl line 139, at end
    of line

    syntax error at /tmp/tmpss43mzy4.pl line 139, at EOF

    Execution of /tmp/tmpss43mzy4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min = 0;\n\
    \    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n\
    \    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n\
    \    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n\
    \    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n\
    \    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n\
    \    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n\
    \    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n\
    \    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n\
    \    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n\
    \    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n\
    \    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n\
    \    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n\
    \    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n\
    \    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n\
    \    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n\
    \    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n\
    \    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n\
    \    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n\
    \    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n\
    \    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n\
    \    my $max42 = 0;\n    my $min42 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpli6d018h.pl line 141,
    at end of line

    syntax error at /tmp/tmpli6d018h.pl line 141, at EOF

    Execution of /tmp/tmpli6d018h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len =\
    \ 0;\n    my $max = 0;\n    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n\
    \    my $max5 = 0;\n    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n\
    \    my $max9 = 0;\n    my $max10 = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n\
    \    my $max13 = 0;\n    my $max14 = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n\
    \    my $max17 = 0;\n    my $max18 = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n\
    \    my $max21 = 0;\n    my $max22 = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n\
    \    my $max25 = 0;\n    my $max26 = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n\
    \    my $max29 = 0;\n    my $max30 = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n\
    \    my $max33 = 0;\n    my $max34 = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n\
    \    my $max37 = 0;\n    my $max38 = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n\
    \    my $max41 = 0;\n    my $max42 = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n\
    \    my $max45 = 0;\n    my $max46 = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n\
    \    my $max49 = 0;\n    my $max50 = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n\
    \    my $max53 = 0;\n    my $max54 = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n\
    \    my $max57 = 0;\n    my $max58 = 0;\n    my $max59 = 0;\n    my $max60 = 0;\n\
    \    my $max61 = 0;\n    my $max62 = 0;\n    my $max63 = 0;\n    my $max64 = 0;\n\
    \    my $max65 = 0;\n    my $max66 = 0;\n    my $max67 = 0;\n    my $max68 = 0;\n\
    \    my $max69 = 0;\n    my $max70 = 0;\n    my $max71 = 0;\n    my $max72 = 0;\n\
    \    my $max73 = 0;\n    my $max74 = 0;\n    my $max75 = 0;\n    my $max76 = 0;\n\
    \    my $max77 = 0;\n    my $max78 = 0;\n    my $max79 = 0;\n    my $max80 = 0;\n\
    \    my $max81 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvny38o5l.pl line 101, at end
    of line

    syntax error at /tmp/tmpvny38o5l.pl line 101, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvny38o5l.pl line 140, at end
    of line

    syntax error at /tmp/tmpvny38o5l.pl line 140, at EOF

    Execution of /tmp/tmpvny38o5l.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $max = 0;\n    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n    my $max5\
    \ = 0;\n    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n    my $max9\
    \ = 0;\n    my $max10 = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n    my $max13\
    \ = 0;\n    my $max14 = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n    my $max17\
    \ = 0;\n    my $max18 = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n    my $max21\
    \ = 0;\n    my $max22 = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n    my $max25\
    \ = 0;\n    my $max26 = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n    my $max29\
    \ = 0;\n    my $max30 = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n    my $max33\
    \ = 0;\n    my $max34 = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n    my $max37\
    \ = 0;\n    my $max38 = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n    my $max41\
    \ = 0;\n    my $max42 = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n    my $max45\
    \ = 0;\n    my $max46 = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n    my $max49\
    \ = 0;\n    my $max50 = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n    my $max53\
    \ = 0;\n    my $max54 = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n    my $max57\
    \ = 0;\n    my $max58 = 0;\n    my $max59 = 0;\n    my $max60 = 0;\n    my $max61\
    \ = 0;\n    my $max62 = 0;\n    my $max63 = 0;\n    my $max64 = 0;\n    my $max65\
    \ = 0;\n    my $max66 = 0;\n    my $max67 = 0;\n    my $max68 = 0;\n    my $max69\
    \ = 0;\n    my $max70 = 0;\n    my $max71 = 0;\n    my $max72 = 0;\n    my $max73\
    \ = 0;\n    my $max74 = 0;\n    my $max75 = 0;\n    my $max76 = 0;\n    my $max77\
    \ = 0;\n    my $max78 = 0;\n    my $max79 = 0;\n    my $max80 = 0;\n    my $max81\
    \ = 0;\n    my $max82 = 0;\n    my $max83 = 0;\n    my $max84 = 0;\n    my $max85\
    \ = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprsk8qw5r.pl line 100, at end
    of line

    syntax error at /tmp/tmprsk8qw5r.pl line 100, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprsk8qw5r.pl line 139, at end
    of line

    syntax error at /tmp/tmprsk8qw5r.pl line 139, at EOF

    Execution of /tmp/tmprsk8qw5r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $max = 0;\n    my $i;\n    my $j;\n   \
    \ my $k;\n    my $tmp;\n    my $cnt = 0;\n    my $cnt2 = 0;\n    my $cnt3 = 0;\n\
    \    my $cnt4 = 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n    my $cnt7 = 0;\n\
    \    my $cnt8 = 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n    my $cnt11 = 0;\n\
    \    my $cnt12 = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n    my $cnt15 = 0;\n\
    \    my $cnt16 = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n    my $cnt19 = 0;\n\
    \    my $cnt20 = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n    my $cnt23 = 0;\n\
    \    my $cnt24 = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n    my $cnt27 = 0;\n\
    \    my $cnt28 = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n    my $cnt31 = 0;\n\
    \    my $cnt32 = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n    my $cnt35 = 0;\n\
    \    my $cnt36 = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n    my $cnt39 = 0;\n\
    \    my $cnt40 = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n    my $cnt43 = 0;\n\
    \    my $cnt44 = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n    my $cnt47 = 0;\n\
    \    my $cnt48 = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n    my $cnt51 = 0;\n\
    \    my $cnt52 = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n    my $cnt55 = 0;\n\
    \    my $cnt56 = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n    my $cnt59 = 0;\n\
    \    my $cnt60 = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n    my $cnt63 = 0;\n\
    \    my $cnt64 = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n    my $cnt67 = 0;\n\
    \    my $cnt68 = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n    my $cnt71 = 0;\n\
    \    my $cnt72 = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n    my $cnt75 = 0;\n\
    \    my $cnt76 = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n    my $cnt79 = 0;\n\
    \    my $cnt80 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp18h92gxe.pl line 141,
    at end of line

    syntax error at /tmp/tmp18h92gxe.pl line 141, at EOF

    Execution of /tmp/tmp18h92gxe.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp64ouxl8h.pl line 103,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp64ouxl8h.pl line 103, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp64ouxl8h.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmp64ouxl8h.pl line 142, at EOF\nExecution of /tmp/tmp64ouxl8h.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $count\
    \ = 0;\n    my $max = 0;\n    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 =\
    \ 0;\n    my $max5 = 0;\n    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 =\
    \ 0;\n    my $max9 = 0;\n    my $max10 = 0;\n    my $max11 = 0;\n    my $max12\
    \ = 0;\n    my $max13 = 0;\n    my $max14 = 0;\n    my $max15 = 0;\n    my $max16\
    \ = 0;\n    my $max17 = 0;\n    my $max18 = 0;\n    my $max19 = 0;\n    my $max20\
    \ = 0;\n    my $max21 = 0;\n    my $max22 = 0;\n    my $max23 = 0;\n    my $max24\
    \ = 0;\n    my $max25 = 0;\n    my $max26 = 0;\n    my $max27 = 0;\n    my $max28\
    \ = 0;\n    my $max29 = 0;\n    my $max30 = 0;\n    my $max31 = 0;\n    my $max32\
    \ = 0;\n    my $max33 = 0;\n    my $max34 = 0;\n    my $max35 = 0;\n    my $max36\
    \ = 0;\n    my $max37 = 0;\n    my $max38 = 0;\n    my $max39 = 0;\n    my $max40\
    \ = 0;\n    my $max41 = 0;\n    my $max42 = 0;\n    my $max43 = 0;\n    my $max44\
    \ = 0;\n    my $max45 = 0;\n    my $max46 = 0;\n    my $max47 = 0;\n    my $max48\
    \ = 0;\n    my $max49 = 0;\n    my $max50 = 0;\n    my $max51 = 0;\n    my $max52\
    \ = 0;\n    my $max53 = 0;\n    my $max54 = 0;\n    my $max55 = 0;\n    my $max56\
    \ = 0;\n    my $max57 = 0;\n    my $max58 = 0;\n    my $max59 = 0;\n    my $max60\
    \ = 0;\n    my $max61 = 0;\n    my $max62 = 0;\n    my $max63 = 0;\n    my $max64\
    \ = 0;\n    my $max65 = 0;\n    my $max66 = 0;\n    my $max67 = 0;\n    my $max68\
    \ = 0;\n    my $max69 = 0;\n    my $max70 = 0;\n    my $max71 = 0;\n    my $max72\
    \ = 0;\n    my $max73 = 0;\n    my $max74 = 0;\n    my $max75 = 0;\n    my $max76\
    \ = 0;\n    my $max77 = 0;\n    my $max78 = 0;\n    my $max79 = 0;\n    my $max80\
    \ = 0;\n    my $max81 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmped_i3cba.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmped_i3cba.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmped_i3cba.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmped_i3cba.pl line 140, at EOF\nExecution of /tmp/tmped_i3cba.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_len = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpe9f42q1d.pl line 155,
    at end of line

    syntax error at /tmp/tmpe9f42q1d.pl line 155, at EOF

    Execution of /tmp/tmpe9f42q1d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqhabn4n_.pl line 139,
    at end of line

    syntax error at /tmp/tmpqhabn4n_.pl line 139, at EOF

    Execution of /tmp/tmpqhabn4n_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_len = 0;\n    my\
    \ $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n\
    \    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n    my $max_count\
    \ = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val = 0;\n \
    \   my $max_count = 0;\n    my $max_val = 0;\n    my $max_count = 0;\n    my $max_val\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpcw_ymmuc.pl line 107,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpcw_ymmuc.pl line 107, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpcw_ymmuc.pl line 146, at end of line\nsyntax\
    \ error at /tmp/tmpcw_ymmuc.pl line 146, at EOF\nExecution of /tmp/tmpcw_ymmuc.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $size = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n   \
    \ my $min = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $ones = 0;\n   \
    \ my $dec = 0;\n    my $temp2 = 0;\n    my $temp3 = 0;\n    my $temp4 = 0;\n \
    \   my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7 = 0;\n    my $temp8 = 0;\n\
    \    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11 = 0;\n    my $temp12\
    \ = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my $temp15 = 0;\n    my\
    \ $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n    my $temp19 = 0;\n\
    \    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22 = 0;\n    my $temp23\
    \ = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my $temp26 = 0;\n    my\
    \ $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n    my $temp30 = 0;\n\
    \    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33 = 0;\n    my $temp34\
    \ = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my $temp37 = 0;\n    my\
    \ $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n    my $temp41 = 0;\n\
    \    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44 = 0;\n    my $temp45\
    \ = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my $temp48 = 0;\n    my\
    \ $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n    my $temp52 = 0;\n\
    \    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55 = 0;\n    my $temp56\
    \ = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my $temp59 = 0;\n    my\
    \ $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n    my $temp63 = 0;\n\
    \    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66 = 0;\n    my $temp67\
    \ = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my $temp70 = 0;\n    my\
    \ $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n    my $temp74 = 0;\n\
    \    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77 = 0;\n    my $temp78\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmplygc2c00.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmplygc2c00.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmplygc2c00.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmplygc2c00.pl line 140, at EOF\nExecution of /tmp/tmplygc2c00.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz9jawo9u.pl line 101, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz9jawo9u.pl line 140, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 140, at EOF

    Execution of /tmp/tmpz9jawo9u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $tmp\
    \ = 0;\n    my $count = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4\
    \ = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8\
    \ = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12\
    \ = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16\
    \ = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20\
    \ = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24\
    \ = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28\
    \ = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32\
    \ = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36\
    \ = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40\
    \ = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44\
    \ = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48\
    \ = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52\
    \ = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56\
    \ = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60\
    \ = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64\
    \ = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68\
    \ = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72\
    \ = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76\
    \ = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80\
    \ = 0;\n    my $tmp81 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmprw_xepka.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmprw_xepka.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmprw_xepka.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmprw_xepka.pl line 140, at EOF\nExecution of /tmp/tmprw_xepka.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max\
    \ = -1;\n    my $min = 0;\n    my $maxi = 0;\n    my $mini = 0;\n    my $maxj\
    \ = 0;\n    my $minij = 0;\n    my $maxk = 0;\n    my $minik = 0;\n    my $maxn\
    \ = 0;\n    my $minin = 0;\n    my $maxmax = 0;\n    my $minimax = 0;\n    my\
    \ $maxmin = 0;\n    my $minimin = 0;\n    my $maxmax2 = 0;\n    my $minimax2 =\
    \ 0;\n    my $maxmin2 = 0;\n    my $minimin2 = 0;\n    my $maxmax3 = 0;\n    my\
    \ $minimax3 = 0;\n    my $maxmin3 = 0;\n    my $minimin3 = 0;\n    my $maxmax4\
    \ = 0;\n    my $minimax4 = 0;\n    my $maxmin4 = 0;\n    my $minimin4 = 0;\n \
    \   my $maxmax5 = 0;\n    my $minimax5 = 0;\n    my $maxmin5 = 0;\n    my $minimin5\
    \ = 0;\n    my $maxmax6 = 0;\n    my $minimax6 = 0;\n    my $maxmin6 = 0;\n  \
    \  my $minimin6 = 0;\n    my $maxmax7 = 0;\n    my $minimax7 = 0;\n    my $maxmin7\
    \ = 0;\n    my $minimin7 = 0;\n    my $maxmax8 = 0;\n    my $minimax8 = 0;\n \
    \   my $maxmin8 = 0;\n    my $minimin8 = 0;\n    my $maxmax9 = 0;\n    my $minimax9\
    \ = 0;\n    my $maxmin9 = 0;\n    my $minimin9 = 0;\n    my $maxmax10 = 0;\n \
    \   my $minimax10 = 0;\n    my $maxmin10 = 0;\n    my $minimin10 = 0;\n    my\
    \ $maxmax11 = 0;\n    my $minimax11 = 0;\n    my $maxmin11 = 0;\n    my $minimin11\
    \ = 0;\n    my $maxmax12 = 0;\n    my $minimax12 = 0;\n    my $maxmin12 = 0;\n\
    \    my $minimin12 = 0;\n    my $maxmax13 = 0;\n    my $minimax13 = 0;\n    my\
    \ $maxmin13 = 0;\n    my $minimin13 = 0;\n    my $maxmax14 = 0;\n    my $minimax14\
    \ = 0;\n    my $maxmin14 = 0;\n    my $minimin14 = 0;\n    my $maxmax15 = 0;\n\
    \    my $minimax15 = 0;\n    my $maxmin15 = 0;\n    my $minimin15 = 0;\n    my\
    \ $maxmax16 = 0;\n    my $minimax16 = 0;\n    my $maxmin16 = 0;\n    my $minimin16\
    \ = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpdm1mx84d.pl line 132,
    at end of line

    syntax error at /tmp/tmpdm1mx84d.pl line 132, at EOF

    Execution of /tmp/tmpdm1mx84d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec_index = 0;\n   \
    \ my $max_dec_val = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $l = 0;\n    my $count = 0;\n    my $max_count = 0;\n    my $max_ones_index\
    \ = 0;\n    my $max_ones_val = 0;\n    my $max_ones_count = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val = 0;\n    my $max_dec_val\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwz9cakhd.pl line 127,
    at end of line

    syntax error at /tmp/tmpwz9cakhd.pl line 127, at EOF

    Execution of /tmp/tmpwz9cakhd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max_count = 0;\n\
    \    my $max_index = 0;\n    my $max_val = 0;\n    my $max_val_pos = 0;\n    my\
    \ $max_val_neg = 0;\n    my $max_val_zero = 0;\n    my $max_val_neg_inf = -1;\n\
    \    my $max_val_pos_inf = -1;\n    my $max_val_zero_inf = -1;\n    my $max_val_neg_inf_inf\
    \ = -1;\n    my $max_val_pos_inf_inf = -1;\n    my $max_val_zero_inf_inf = -1;\n\
    \    my $max_val_neg_inf_pos = -1;\n    my $max_val_pos_inf_pos = -1;\n    my\
    \ $max_val_zero_inf_pos = -1;\n    my $max_val_neg_inf_neg = -1;\n    my $max_val_pos_inf_neg\
    \ = -1;\n    my $max_val_zero_inf_neg = -1;\n    my $max_val_neg_inf_zero = -1;\n\
    \    my $max_val_pos_inf_zero = -1;\n    my $max_val_zero_inf_zero = -1;\n   \
    \ my $max_val_neg_inf_inf_inf = -1;\n    my $max_val_pos_inf_inf_inf = -1;\n \
    \   my $max_val_zero_inf_inf_inf_inf = -1;\n    my $max_val_neg_inf_pos = -1;\n\
    \    my $max_val_pos_inf_pos = -1;\n    my $max_val_zero_inf_pos = -1;\n    my\
    \ $max_val_neg_inf_neg = -1;\n    my $max_val_pos_inf_neg = -1;\n    my $max_val_zero_inf_neg\
    \ = -1;\n    my $max_val_neg_inf_zero = -1;\n    my $max_val_pos_inf_zero = -1;\n\
    \    my $max_val_zero_inf_zero = -1;\n    my $max_val_neg_inf_inf = -1;\n    my\
    \ $max_val_pos_inf_inf_inf = -1;\n    my $max_val_zero_inf_inf_inf = -1;\n   \
    \ my $max_val_neg_inf_pos = -1;\n    my $max_val_pos_inf_pos = -1;\n    my $max_val_zero_inf_pos\
    \ = -1;\n    my $max_val_neg_inf_neg = -1;\n    my $max_val_pos_inf_neg = -1;\n\
    \    my $max_val_zero_inf_neg = -1;\n    my $max_val_neg_inf_zero = -1;\n    my\
    \ $max_val_pos_inf_zero = -1;\n    my $max_val_zero_inf_zero = -1;\n    my $max_val_neg_inf_inf\
    \ = -1;\n    my $max_val_pos_inf_inf_inf = -1;\n    my $max_val_zero_inf_inf_inf\
    \ = -1;\n    my $max_val_neg_inf_pos = -1;\n    my $max_val_pos_inf_pos = -1;\n\
    \    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp9j557s1h.pl line 107,
    at end of line

    syntax error at /tmp/tmp9j557s1h.pl line 107, at EOF

    Execution of /tmp/tmp9j557s1h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my $num_ones = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct\
    \ = 0;\n    my $num_bin = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n   \
    \ my $num_oct = 0;\n    my $num_bin = 0;\n    my $num_dec = 0;\n    my $num_hex\
    \ = 0;\n    my $num_oct = 0;\n    my $num_bin = 0;\n    my $num_dec = 0;\n   \
    \ my $num_hex = 0;\n    my $num_oct = 0;\n    my $num_bin = 0;\n    my $num_dec\
    \ = 0;\n    my $num_hex = 0;\n    my $num_oct = 0;\n    my $num_bin = 0;\n   \
    \ my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct = 0;\n    my $num_bin\
    \ = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct = 0;\n   \
    \ my $num_bin = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct\
    \ = 0;\n    my $num_bin = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n   \
    \ my $num_oct = 0;\n    my $num_bin = 0;\n    my $num_dec = 0;\n    my $num_hex\
    \ = 0;\n    my $num_oct = 0;\n    my $num_bin = 0;\n    my $num_dec = 0;\n   \
    \ my $num_hex = 0;\n    my $num_oct = 0;\n    my $num_bin = 0;\n    my $num_dec\
    \ = 0;\n    my $num_hex = 0;\n    my $num_oct = 0;\n    my $num_bin = 0;\n   \
    \ my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct = 0;\n    my $num_bin\
    \ = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct = 0;\n   \
    \ my $num_bin = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct\
    \ = 0;\n    my $num_bin = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n   \
    \ my $num_oct = 0;\n    my $num_bin = 0;\n    my $num_dec = 0;\n    my $num_hex\
    \ = 0;\n    my $num_oct = 0;\n    my $num_bin = 0;\n    my $num_dec = 0;\n   \
    \ my $num_hex = 0;\n    my $num_oct = 0;\n    my $num_bin = 0;\n    my $num_dec\
    \ = 0;\n    my $num_hex = 0;\n    my $num_oct = 0;\n    my $num_bin = 0;\n   \
    \ my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct = 0;\n    my $num_bin\
    \ = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct = 0;\n   \
    \ \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpe4p8o2bu.pl line 138,
    at end of line

    syntax error at /tmp/tmpe4p8o2bu.pl line 138, at EOF

    Execution of /tmp/tmpe4p8o2bu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my $max = 0;\n    my $min = $len;\n    my $mid;\n    my $cmp;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n\
    \    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n \
    \   my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpdp4p2g9o.pl line 103,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpdp4p2g9o.pl line 103, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpdp4p2g9o.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmpdp4p2g9o.pl line 142, at EOF\nExecution of /tmp/tmpdp4p2g9o.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sort) = ();\n\
    \    my($i, $j, $tmp);\n    \n    foreach $i (0 .. $#$arr) {\n        $tmp = $arr[$i];\n\
    \        $j = 0;\n        foreach $j (0 .. $#$arr) {\n            if ($arr[$j]\
    \ == $tmp) {\n                last;\n            }\n        }\n        push(@sort,\
    \ $tmp);\n    }\n    \n    foreach $i (0 .. $#$arr) {\n        $tmp = $arr[$i];\n\
    \        $j = 0;\n        foreach $j (0 .. $#$arr) {\n            if ($arr[$j]\
    \ == $tmp) {\n                last;\n            }\n        }\n        push(@sort,\
    \ $tmp);\n    }\n    \n    return @sort;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxlen\
    \ = 0;\n    my $maxleni = 0;\n    my $maxlenj = 0;\n    my $maxlenlen = 0;\n \
    \   my $maxlenleni = 0;\n    my $maxlenlenj = 0;\n    my $maxlenlenlen = 0;\n\
    \    my $maxlenlenleni = 0;\n    my $maxlenlenlenj = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenleni = 0;\n    my $maxlenlenlenlenj = 0;\n    my $maxlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n\
    \    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my\
    \ $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenlenj =\
    \ 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n \
    \   my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenlenleni\
    \ = 0;\n    my $maxlenlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenlenj =\
    \ 0;\n    my $maxlenlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenlenleni =\
    \ 0;\n    my $maxlenlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlenlen =\
    \ 0;\n    my $maxlenlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenlenj = 0;\n\
    \    my $maxlenlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenlenleni = 0;\n\
    \    my $maxlenlenlenlenlenlenj = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp7paypeii.pl line 68,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp7paypeii.pl line 68, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp7paypeii.pl line 107, at end of line\nsyntax\
    \ error at /tmp/tmp7paypeii.pl line 107, at EOF\nExecution of /tmp/tmp7paypeii.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2jytshtl.pl line 140,
    at end of line

    syntax error at /tmp/tmp2jytshtl.pl line 140, at EOF

    Execution of /tmp/tmp2jytshtl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2jytshtl.pl line 140,
    at end of line

    syntax error at /tmp/tmp2jytshtl.pl line 140, at EOF

    Execution of /tmp/tmp2jytshtl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = scalar(@$arr);\n    my\
    \ $max = -1;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3\
    \ = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5\
    \ = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7\
    \ = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9\
    \ = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmppkh1addf.pl line 101, at end
    of line

    syntax error at /tmp/tmppkh1addf.pl line 101, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmppkh1addf.pl line 140, at end
    of line

    syntax error at /tmp/tmppkh1addf.pl line 140, at EOF

    Execution of /tmp/tmppkh1addf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxlen\
    \ = 0;\n    my $maxleni = 0;\n    my $maxlenj = 0;\n    my $maxlenlen = 0;\n \
    \   my $maxlenleni = 0;\n    my $maxlenlenj = 0;\n    my $maxlenlenlen = 0;\n\
    \    my $maxlenlenleni = 0;\n    my $maxlenlenlenj = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenleni = 0;\n    my $maxlenlenlenlenj = 0;\n    my $maxlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n\
    \    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my\
    \ $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenlenj =\
    \ 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenlenleni = 0;\n\
    \    my $maxlenlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlenlen = 0;\n\
    \    my $maxlenlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenlenj = 0;\n  \
    \  my $maxlenlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenlenleni = 0;\n  \
    \  my $maxlenlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlenlen = 0;\n  \
    \  my $maxlenlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenlenj = 0;\n    my\
    \ $maxlenlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenlenleni = 0;\n    my\
    \ $maxlenlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlenlen = 0;\n    my\
    \ $maxlenlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenlenj = 0;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5i39p6nh.pl line 106,
    at end of line

    syntax error at /tmp/tmp5i39p6nh.pl line 106, at EOF

    Execution of /tmp/tmp5i39p6nh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my @res;\n    my $max;\n  \
    \  my $min;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp8pim3zhd.pl line 100, at end
    of line

    syntax error at /tmp/tmp8pim3zhd.pl line 100, near "$cmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp8pim3zhd.pl line 139, at end
    of line

    syntax error at /tmp/tmp8pim3zhd.pl line 139, at EOF

    Execution of /tmp/tmp8pim3zhd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $size = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $temp;\n    my $ones = 0;\n    my $dec =\
    \ 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpr6owe_1f.pl line 62, at
    end of line

    syntax error at /tmp/tmpr6owe_1f.pl line 62, at EOF

    Execution of /tmp/tmpr6owe_1f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpayha_515.pl line 101, at end
    of line

    syntax error at /tmp/tmpayha_515.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpayha_515.pl line 140, at end
    of line

    syntax error at /tmp/tmpayha_515.pl line 140, at EOF

    Execution of /tmp/tmpayha_515.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $maxdec;\n    my $mindec;\n    my\
    \ $maxbin;\n    my $minbin;\n    my $i;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2fknjkbe.pl line 61, at
    end of line

    syntax error at /tmp/tmp2fknjkbe.pl line 61, at EOF

    Execution of /tmp/tmp2fknjkbe.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sort) = ();\n\
    \    my($i, $j, $n);\n    foreach $i (@$arr) {\n        $n = $i & 1;\n       \
    \ $j = $i;\n        $j += $n;\n        $sort[$n] = $j;\n    }\n    foreach $i\
    \ (@sort) {\n        push @$arr, $i;\n    }\n    return @$arr;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max\
    \ = -1;\n    my $min = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my\
    \ $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n\
    \    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpbiw5cexo.pl line 103,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpbiw5cexo.pl line 103, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpbiw5cexo.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmpbiw5cexo.pl line 142, at EOF\nExecution of /tmp/tmpbiw5cexo.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $n);\n    my($ones);\n    my($dec);\n    foreach $n (@$arr) {\n\
    \        $ones = 0;\n        $dec = 0;\n        foreach $i (0 .. $#$n) {\n   \
    \         $ones += $n->[$i];\n            $dec += $n->[$i] * $i;\n        }\n\
    \        $sorted[$n] = $ones;\n        $sorted[$n] = $dec if $dec < $ones;\n \
    \   }\n    foreach $n (@sorted) {\n        $n++;\n    }\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Modification of non-creatable array value attempted, subscript -2 at /tmp/tmpxljbsedt.pl
    line 24.

    '
  stdout: ok!
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = @$arr;\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n\
    \    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n \
    \   my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpffzpmzay.pl line 103, at end
    of line

    syntax error at /tmp/tmpffzpmzay.pl line 103, near "$tmp79

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpffzpmzay.pl line 142, at end
    of line

    syntax error at /tmp/tmpffzpmzay.pl line 142, at EOF

    Execution of /tmp/tmpffzpmzay.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $numOnes);\n    my($max);\n    my($min);\n    my($maxVal);\n   \
    \ my($minVal);\n    my($maxCount);\n    my($minCount);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    \    my($minCountVal);\n    my($maxCountVal);\n    my($minCountVal);\n    my($maxCountVal);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl62dk02k.pl line 117,
    at end of line

    syntax error at /tmp/tmpl62dk02k.pl line 117, at EOF

    Execution of /tmp/tmpl62dk02k.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $tmp = 0;\n\
    \    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n\
    \    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n\
    \    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n\
    \    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n\
    \    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n\
    \    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n\
    \    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n\
    \    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n\
    \    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n\
    \    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n\
    \    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n\
    \    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n\
    \    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n\
    \    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n\
    \    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n\
    \    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n\
    \    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n\
    \    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n\
    \    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n\
    \    my $tmp78 = 0;\n    my $tmp79\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7gpouglx.pl line 100, at end
    of line

    syntax error at /tmp/tmp7gpouglx.pl line 100, near "$tmp79

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7gpouglx.pl line 139, at end
    of line

    syntax error at /tmp/tmp7gpouglx.pl line 139, at EOF

    Execution of /tmp/tmp7gpouglx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $cur = 0;\n    my $cnt = 0;\n    my $tmp;\n\
    \    my $i;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmppmf2uuh1.pl line 59, at
    end of line

    syntax error at /tmp/tmppmf2uuh1.pl line 59, at EOF

    Execution of /tmp/tmppmf2uuh1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $tmp;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpb3hz3j5h.pl line 100, at end
    of line

    syntax error at /tmp/tmpb3hz3j5h.pl line 100, near "$cmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpb3hz3j5h.pl line 139, at end
    of line

    syntax error at /tmp/tmpb3hz3j5h.pl line 139, at EOF

    Execution of /tmp/tmpb3hz3j5h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $len = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cmp;\n\
    \    my $cmp_sign;\n    my $cmp_val;\n    my $cmp_val_sign;\n    my $cmp_val_sign2;\n\
    \    my $cmp_val_sign3;\n    my $cmp_val_sign4;\n    my $cmp_val_sign5;\n    my\
    \ $cmp_val_sign6;\n    my $cmp_val_sign7;\n    my $cmp_val_sign8;\n    my $cmp_val_sign9;\n\
    \    my $cmp_val_sign10;\n    my $cmp_val_sign11;\n    my $cmp_val_sign12;\n \
    \   my $cmp_val_sign13;\n    my $cmp_val_sign14;\n    my $cmp_val_sign15;\n  \
    \  my $cmp_val_sign16;\n    my $cmp_val_sign17;\n    my $cmp_val_sign18;\n   \
    \ my $cmp_val_sign19;\n    my $cmp_val_sign20;\n    my $cmp_val_sign21;\n    my\
    \ $cmp_val_sign22;\n    my $cmp_val_sign23;\n    my $cmp_val_sign24;\n    my $cmp_val_sign25;\n\
    \    my $cmp_val_sign26;\n    my $cmp_val_sign27;\n    my $cmp_val_sign28;\n \
    \   my $cmp_val_sign29;\n    my $cmp_val_sign30;\n    my $cmp_val_sign31;\n  \
    \  my $cmp_val_sign32;\n    my $cmp_val_sign33;\n    my $cmp_val_sign34;\n   \
    \ my $cmp_val_sign35;\n    my $cmp_val_sign36;\n    my $cmp_val_sign37;\n    my\
    \ $cmp_val_sign38;\n    my $cmp_val_sign39;\n    my $cmp_val_sign40;\n    my $cmp_val_sign41;\n\
    \    my $cmp_val_sign42;\n    my $cmp_val_sign43;\n    my $cmp_val_sign44;\n \
    \   my $cmp_val_sign45;\n    my $cmp_val_sign46;\n    my $cmp_val_sign47;\n  \
    \  my $cmp_val_sign48;\n    my $cmp_val_sign49;\n    my $cmp_val_sign50;\n   \
    \ my $cmp_val_sign51;\n    my $cmp_val_sign52;\n    my $cmp_val_sign53;\n    my\
    \ $cmp_val_sign54;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwtj4smz8.pl line 115,
    at end of line

    syntax error at /tmp/tmpwtj4smz8.pl line 115, at EOF

    Execution of /tmp/tmpwtj4smz8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $temp;\n    my @res;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpyiw5_0r3.pl line 57, at
    end of line

    syntax error at /tmp/tmpyiw5_0r3.pl line 57, at EOF

    Execution of /tmp/tmpyiw5_0r3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n\
    \    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n \
    \   my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpoo6xw9xs.pl line 143,
    at end of line

    syntax error at /tmp/tmpoo6xw9xs.pl line 143, at EOF

    Execution of /tmp/tmpoo6xw9xs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpxii73evl.pl line 141,
    at end of line

    syntax error at /tmp/tmpxii73evl.pl line 141, at EOF

    Execution of /tmp/tmpxii73evl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmph0r7egh9.pl line 100,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmph0r7egh9.pl line 100, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmph0r7egh9.pl line 139, at end of line\nsyntax\
    \ error at /tmp/tmph0r7egh9.pl line 139, at EOF\nExecution of /tmp/tmph0r7egh9.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz9jawo9u.pl line 101, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz9jawo9u.pl line 140, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 140, at EOF

    Execution of /tmp/tmpz9jawo9u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $tmp84\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpf31ovjb7.pl line 100, at end
    of line

    syntax error at /tmp/tmpf31ovjb7.pl line 100, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpf31ovjb7.pl line 139, at end
    of line

    syntax error at /tmp/tmpf31ovjb7.pl line 139, at EOF

    Execution of /tmp/tmpf31ovjb7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $size = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n   \
    \ my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my\
    \ $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my\
    \ $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my\
    \ $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my\
    \ $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n   \
    \ my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n\
    \    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n\
    \    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n\
    \    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n\
    \    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n\
    \    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n\
    \    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n\
    \    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n\
    \    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n\
    \    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n\
    \    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n\
    \    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n\
    \    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n\
    \    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n\
    \    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n\
    \    my $min41 = 0;\n    my $max42 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp17m2hfcd.pl line 140,
    at end of line

    syntax error at /tmp/tmp17m2hfcd.pl line 140, at EOF

    Execution of /tmp/tmp17m2hfcd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec_index = 0;\n   \
    \ my $max_dec_val = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmppjtgdxi2.pl line 100, at end
    of line

    syntax error at /tmp/tmppjtgdxi2.pl line 100, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmppjtgdxi2.pl line 139, at end
    of line

    syntax error at /tmp/tmppjtgdxi2.pl line 139, at EOF

    Execution of /tmp/tmppjtgdxi2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $len = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $cmp = 0;\n    my $cmp2 = 0;\n  \
    \  my $cmp3 = 0;\n    my $cmp4 = 0;\n    my $cmp5 = 0;\n    my $cmp6 = 0;\n  \
    \  my $cmp7 = 0;\n    my $cmp8 = 0;\n    my $cmp9 = 0;\n    my $cmp10 = 0;\n \
    \   my $cmp11 = 0;\n    my $cmp12 = 0;\n    my $cmp13 = 0;\n    my $cmp14 = 0;\n\
    \    my $cmp15 = 0;\n    my $cmp16 = 0;\n    my $cmp17 = 0;\n    my $cmp18 = 0;\n\
    \    my $cmp19 = 0;\n    my $cmp20 = 0;\n    my $cmp21 = 0;\n    my $cmp22 = 0;\n\
    \    my $cmp23 = 0;\n    my $cmp24 = 0;\n    my $cmp25 = 0;\n    my $cmp26 = 0;\n\
    \    my $cmp27 = 0;\n    my $cmp28 = 0;\n    my $cmp29 = 0;\n    my $cmp30 = 0;\n\
    \    my $cmp31 = 0;\n    my $cmp32 = 0;\n    my $cmp33 = 0;\n    my $cmp34 = 0;\n\
    \    my $cmp35 = 0;\n    my $cmp36 = 0;\n    my $cmp37 = 0;\n    my $cmp38 = 0;\n\
    \    my $cmp39 = 0;\n    my $cmp40 = 0;\n    my $cmp41 = 0;\n    my $cmp42 = 0;\n\
    \    my $cmp43 = 0;\n    my $cmp44 = 0;\n    my $cmp45 = 0;\n    my $cmp46 = 0;\n\
    \    my $cmp47 = 0;\n    my $cmp48 = 0;\n    my $cmp49 = 0;\n    my $cmp50 = 0;\n\
    \    my $cmp51 = 0;\n    my $cmp52 = 0;\n    my $cmp53 = 0;\n    my $cmp54 = 0;\n\
    \    my $cmp55 = 0;\n    my $cmp56 = 0;\n    my $cmp57 = 0;\n    my $cmp58 = 0;\n\
    \    my $cmp59 = 0;\n    my $cmp60 = 0;\n    my $cmp61 = 0;\n    my $cmp62 = 0;\n\
    \    my $cmp63 = 0;\n    my $cmp64 = 0;\n    my $cmp65 = 0;\n    my $cmp66 = 0;\n\
    \    my $cmp67 = 0;\n    my $cmp68 = 0;\n    my $cmp69 = 0;\n    my $cmp70 = 0;\n\
    \    my $cmp71 = 0;\n    my $cmp72 = 0;\n    my $cmp73 = 0;\n    my $cmp74 = 0;\n\
    \    my $cmp75 = 0;\n    my $cmp76 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpzqjtsotk.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpzqjtsotk.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpzqjtsotk.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpzqjtsotk.pl line 140, at EOF\nExecution of /tmp/tmpzqjtsotk.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $cmp;\n    my\
    \ $cmp_res;\n    my $cmp_res_tmp;\n    my $cmp_res_tmp2;\n    my $cmp_res_tmp3;\n\
    \    my $cmp_res_tmp4;\n    my $cmp_res_tmp5;\n    my $cmp_res_tmp6;\n    my $cmp_res_tmp7;\n\
    \    my $cmp_res_tmp8;\n    my $cmp_res_tmp9;\n    my $cmp_res_tmp10;\n    my\
    \ $cmp_res_tmp11;\n    my $cmp_res_tmp12;\n    my $cmp_res_tmp13;\n    my $cmp_res_tmp14;\n\
    \    my $cmp_res_tmp15;\n    my $cmp_res_tmp16;\n    my $cmp_res_tmp17;\n    my\
    \ $cmp_res_tmp18;\n    my $cmp_res_tmp19;\n    my $cmp_res_tmp20;\n    my $cmp_res_tmp21;\n\
    \    my $cmp_res_tmp22;\n    my $cmp_res_tmp23;\n    my $cmp_res_tmp24;\n    my\
    \ $cmp_res_tmp25;\n    my $cmp_res_tmp26;\n    my $cmp_res_tmp27;\n    my $cmp_res_tmp28;\n\
    \    my $cmp_res_tmp29;\n    my $cmp_res_tmp30;\n    my $cmp_res_tmp31;\n    my\
    \ $cmp_res_tmp32;\n    my $cmp_res_tmp33;\n    my $cmp_res_tmp34;\n    my $cmp_res_tmp35;\n\
    \    my $cmp_res_tmp36;\n    my $cmp_res_tmp37;\n    my $cmp_res_tmp38;\n    my\
    \ $cmp_res_tmp39;\n    my $cmp_res_tmp40;\n    my $cmp_res_tmp41;\n    my $cmp_res_tmp42;\n\
    \    my $cmp_res_tmp43;\n    my $cmp_res_tmp44;\n    my $cmp_res_tmp45;\n    my\
    \ $cmp_res_tmp46;\n    my $cmp_res_tmp47;\n    my $cmp_res_tmp48;\n    my $cmp_res_tmp49;\n\
    \    my $cmp_res_tmp50;\n    my $cmp_res_tmp51;\n    my $cmp_res_tmp52;\n    my\
    \ $cmp_res_tmp53;\n    my $cmp_res_tmp54;\n    my $cmp_res_tmp55;\n    my $\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmptq6dtpp3.pl line 76,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmptq6dtpp3.pl line 76, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmptq6dtpp3.pl line 115, at end of line\nsyntax\
    \ error at /tmp/tmptq6dtpp3.pl line 115, at EOF\nExecution of /tmp/tmptq6dtpp3.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max_i\
    \ = 0;\n    my $min_i = 0;\n    my $max_j = 0;\n    my $min_j = 0;\n    my $count\
    \ = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $tmp = 0;\n    my $tmp2 =\
    \ 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 =\
    \ 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 =\
    \ 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpnpg0invk.pl line 141,
    at end of line

    syntax error at /tmp/tmpnpg0invk.pl line 141, at EOF

    Execution of /tmp/tmpnpg0invk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $n);\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmporqtp8kf.pl line 123,
    at end of line

    syntax error at /tmp/tmporqtp8kf.pl line 123, at EOF

    Execution of /tmp/tmporqtp8kf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $maxlen = 0;\n    my $minlen\
    \ = 0;\n    my $tmp;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpuzkj02_s.pl line 63, at
    end of line

    syntax error at /tmp/tmpuzkj02_s.pl line 63, at EOF

    Execution of /tmp/tmpuzkj02_s.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $len = 0;\n    my $max\
    \ = 0;\n    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n    my $max5\
    \ = 0;\n    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n    my $max9\
    \ = 0;\n    my $max10 = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n    my $max13\
    \ = 0;\n    my $max14 = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n    my $max17\
    \ = 0;\n    my $max18 = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n    my $max21\
    \ = 0;\n    my $max22 = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n    my $max25\
    \ = 0;\n    my $max26 = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n    my $max29\
    \ = 0;\n    my $max30 = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n    my $max33\
    \ = 0;\n    my $max34 = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n    my $max37\
    \ = 0;\n    my $max38 = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n    my $max41\
    \ = 0;\n    my $max42 = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n    my $max45\
    \ = 0;\n    my $max46 = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n    my $max49\
    \ = 0;\n    my $max50 = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n    my $max53\
    \ = 0;\n    my $max54 = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n    my $max57\
    \ = 0;\n    my $max58 = 0;\n    my $max59 = 0;\n    my $max60 = 0;\n    my $max61\
    \ = 0;\n    my $max62 = 0;\n    my $max63 = 0;\n    my $max64 = 0;\n    my $max65\
    \ = 0;\n    my $max66 = 0;\n    my $max67 = 0;\n    my $max68 = 0;\n    my $max69\
    \ = 0;\n    my $max70 = 0;\n    my $max71 = 0;\n    my $max72 = 0;\n    my $max73\
    \ = 0;\n    my $max74 = 0;\n    my $max75 = 0;\n    my $max76 = 0;\n    my $max77\
    \ = 0;\n    my $max78 = 0;\n    my $max79 = 0;\n    my $max80 = 0;\n    my $max81\
    \ = 0;\n    my $max82 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpof8f_tye.pl line 140,
    at end of line

    syntax error at /tmp/tmpof8f_tye.pl line 140, at EOF

    Execution of /tmp/tmpof8f_tye.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max = 0;\n    my $min = 0;\n    my $cnt = 0;\n    foreach my $num (@$arr)\
    \ {\n        $cnt += $num;\n        $max = $num if $cnt > $max;\n        $min\
    \ = $num if $cnt < $min;\n    }\n    foreach my $num (@$arr) {\n        $cnt -=\
    \ $num;\n        $max = $num if $cnt > $max;\n        $min = $num if $cnt < $min;\n\
    \    }\n    foreach my $num (@$arr) {\n        $cnt += $num;\n        $max = $num\
    \ if $cnt > $max;\n        $min = $num if $cnt < $min;\n    }\n    foreach my\
    \ $num (@$arr) {\n        $cnt -= $num;\n        $max = $num if $cnt > $max;\n\
    \        $min = $num if $cnt < $min;\n    }\n    foreach my $num (@$arr) {\n \
    \       $cnt += $num;\n        $max = $num if $cnt > $max;\n        $min = $num\
    \ if $cnt < $min;\n    }\n    foreach my $num (@$arr) {\n        $cnt -= $num;\n\
    \        $max = $num if $cnt > $max;\n        $min = $num if $cnt < $min;\n  \
    \  }\n    foreach my $num (@$arr) {\n        $cnt += $num;\n        $max = $num\
    \ if $cnt > $max;\n        $min = $num if $cnt < $min;\n    }\n    foreach my\
    \ $num (@$arr) {\n        $cnt -= $num;\n        $max = $num if $cnt > $max;\n\
    \        $min = $num if $cnt < $min;\n    }\n    foreach my $num (@$arr) {\n \
    \       $cnt += $num;\n        $max = $num if $cnt > $max;\n        $min = $num\
    \ if $cnt < $min;\n    }\n    foreach my $num (@$arr) {\n        $cnt -= $num;\n\
    \        $max = $num if $cnt > $max;\n        $min = $num if $cnt < $min;\n  \
    \  }\n    foreach my $num (@$arr) {\n        $cnt += $num;\n        $max = $num\
    \ if $cnt > $max;\n        $min = $num if $cnt < $min;\n    }\n    foreach my\
    \ $num (@\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpa50av4b0.pl line 73,\
    \ near \"@\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpa50av4b0.pl line 73, near \"@\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpa50av4b0.pl line 112, at end of line\nsyntax\
    \ error at /tmp/tmpa50av4b0.pl line 112, at EOF\nExecution of /tmp/tmpa50av4b0.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3\
    \ = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5\
    \ = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7\
    \ = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9\
    \ = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n    my $min42 = 0;\n    my $max43\
    \ = 0;\n    my $min43 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp2skslaqr.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp2skslaqr.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp2skslaqr.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmp2skslaqr.pl line 140, at EOF\nExecution of /tmp/tmp2skslaqr.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n \
    \   my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n \
    \   my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp81 = 0;\n    my $tmp82\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9i5vc8av.pl line 100, at end
    of line

    syntax error at /tmp/tmp9i5vc8av.pl line 100, near "$tmp82

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9i5vc8av.pl line 139, at end
    of line

    syntax error at /tmp/tmp9i5vc8av.pl line 139, at EOF

    Execution of /tmp/tmp9i5vc8av.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqhabn4n_.pl line 139,
    at end of line

    syntax error at /tmp/tmpqhabn4n_.pl line 139, at EOF

    Execution of /tmp/tmpqhabn4n_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt;\n    my $max;\n    my $min;\n\
    \    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp85rs9p_0.pl line 140,
    at end of line

    syntax error at /tmp/tmp85rs9p_0.pl line 140, at EOF

    Execution of /tmp/tmp85rs9p_0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz9jawo9u.pl line 101, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz9jawo9u.pl line 140, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 140, at EOF

    Execution of /tmp/tmpz9jawo9u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my $i = 0;\n    my $j = 0;\n    my $num_ones = 0;\n    my $num_zeros = 0;\n\
    \    foreach my $num (@$arr) {\n        if ($num == 1) {\n            $num_ones++;\n\
    \        }\n        else {\n            $num_zeros++;\n        }\n    }\n    foreach\
    \ my $num (@$arr) {\n        if ($num == 1) {\n            $sorted_arr[$j] = $num;\n\
    \            $j++;\n        }\n        else {\n            if ($num_ones == $num_zeros)\
    \ {\n                $sorted_arr[$i] = $num;\n                $i++;\n        \
    \    }\n            else {\n                if ($num_ones > $num_zeros) {\n  \
    \                  $sorted_arr[$i] = $num;\n                    $i++;\n      \
    \          }\n                else {\n                    $sorted_arr[$j] = $num;\n\
    \                    $j++;\n                }\n            }\n        }\n    }\n\
    \    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $tmp;\n\
    \    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n \
    \   my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpc_rixyid.pl line 142,
    at end of line

    syntax error at /tmp/tmpc_rixyid.pl line 142, at EOF

    Execution of /tmp/tmpc_rixyid.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqhabn4n_.pl line 139,
    at end of line

    syntax error at /tmp/tmpqhabn4n_.pl line 139, at EOF

    Execution of /tmp/tmpqhabn4n_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $num_ones);\n    my($max_ones);\n    my($max_dec);\n    my($max_dec_len);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjj7_9tfk.pl line 57, at
    end of line

    syntax error at /tmp/tmpjj7_9tfk.pl line 57, at EOF

    Execution of /tmp/tmpjj7_9tfk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $sum = 0;\n    my $count = 0;\n    my $maxcount = 0;\n    my $maxsum\
    \ = 0;\n    my $minsum = 0;\n    my $mincount = 0;\n    my $minmax = 0;\n    my\
    \ $minmin = 0;\n    my $maxmax = 0;\n    my $maxmin = 0;\n    my $minmaxsum =\
    \ 0;\n    my $minmaxcount = 0;\n    my $minmaxmin = 0;\n    my $maxminsum = 0;\n\
    \    my $maxmincount = 0;\n    my $maxminmin = 0;\n    my $minminsum = 0;\n  \
    \  my $minmincount = 0;\n    my $minminmax = 0;\n    my $minminmin = 0;\n    my\
    \ $maxminmax = 0;\n    my $maxminmin = 0;\n    my $maxminmin = 0;\n    my $minminmin\
    \ = 0;\n    my $maxminmin = 0;\n    my $maxminmin = 0;\n    my $minminmin = 0;\n\
    \    my $maxminmin = 0;\n    my $maxminmin = 0;\n    my $minminmin = 0;\n    my\
    \ $maxminmin = 0;\n    my $maxminmin = 0;\n    my $minminmin = 0;\n    my $maxminmin\
    \ = 0;\n    my $maxminmin = 0;\n    my $minminmin = 0;\n    my $maxminmin = 0;\n\
    \    my $maxminmin = 0;\n    my $minminmin = 0;\n    my $maxminmin = 0;\n    my\
    \ $maxminmin = 0;\n    my $minminmin = 0;\n    my $maxminmin = 0;\n    my $maxminmin\
    \ = 0;\n    my $minminmin = 0;\n    my $maxminmin = 0;\n    my $maxminmin = 0;\n\
    \    my $minminmin = 0;\n    my $maxminmin = 0;\n    my $maxminmin = 0;\n    my\
    \ $minminmin = 0;\n    my $maxminmin = 0;\n    my $maxminmin = 0;\n    my $minminmin\
    \ = 0;\n    my $maxminmin = 0;\n    my $maxminmin = 0;\n    my $minminmin = 0;\n\
    \    my $maxminmin = 0;\n    my $maxminmin = 0;\n    my $minminmin = 0;\n    my\
    \ $maxminmin = 0;\n    my $maxminmin = 0;\n    my $minminmin = 0;\n    my $maxminmin\
    \ = 0;\n    my $maxminmin = 0;\n    my $minminmin = 0;\n    my $maxminmin = 0;\n\
    \    my $maxminmin = 0;\n    my $minminmin = 0;\n    my $maxminmin = 0;\n    my\
    \ $maxminmin = 0;\n    my $min\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplds6i6vy.pl line 91, at end
    of line

    syntax error at /tmp/tmplds6i6vy.pl line 91, near "$min

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplds6i6vy.pl line 130, at end
    of line

    syntax error at /tmp/tmplds6i6vy.pl line 130, at EOF

    Execution of /tmp/tmplds6i6vy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $i;\n    my $j;\n    my $tmp;\n  \
    \  my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n   \
    \ my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n  \
    \  my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmppr6bmmsp.pl line 143,
    at end of line

    syntax error at /tmp/tmppr6bmmsp.pl line 143, at EOF

    Execution of /tmp/tmppr6bmmsp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $tmp84\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpf31ovjb7.pl line 100, at end
    of line

    syntax error at /tmp/tmpf31ovjb7.pl line 100, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpf31ovjb7.pl line 139, at end
    of line

    syntax error at /tmp/tmpf31ovjb7.pl line 139, at EOF

    Execution of /tmp/tmpf31ovjb7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt;\n    my $tmp2;\n \
    \   my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n  \
    \  my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp43sdzrqm.pl line 103,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp43sdzrqm.pl line 103, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp43sdzrqm.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmp43sdzrqm.pl line 142, at EOF\nExecution of /tmp/tmp43sdzrqm.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $tmp = 0;\n\
    \    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n\
    \    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n\
    \    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n\
    \    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n\
    \    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n\
    \    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n\
    \    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n\
    \    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n\
    \    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n\
    \    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n\
    \    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n\
    \    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n\
    \    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n\
    \    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n\
    \    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n\
    \    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n\
    \    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n\
    \    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n\
    \    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n\
    \    my $tmp78 = 0;\n    my $tmp79\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7gpouglx.pl line 100, at end
    of line

    syntax error at /tmp/tmp7gpouglx.pl line 100, near "$tmp79

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7gpouglx.pl line 139, at end
    of line

    syntax error at /tmp/tmp7gpouglx.pl line 139, at EOF

    Execution of /tmp/tmp7gpouglx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my\
    \ $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp3rti7vun.pl line 140,
    at end of line

    syntax error at /tmp/tmp3rti7vun.pl line 140, at EOF

    Execution of /tmp/tmp3rti7vun.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max_i\
    \ = 0;\n    my $min_i = 0;\n    my $max_j = 0;\n    my $min_j = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpnrmqqjen.pl line 155,
    at end of line

    syntax error at /tmp/tmpnrmqqjen.pl line 155, at EOF

    Execution of /tmp/tmpnrmqqjen.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $tmp84\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpf31ovjb7.pl line 100, at end
    of line

    syntax error at /tmp/tmpf31ovjb7.pl line 100, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpf31ovjb7.pl line 139, at end
    of line

    syntax error at /tmp/tmpf31ovjb7.pl line 139, at EOF

    Execution of /tmp/tmpf31ovjb7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my @res;\n    my $tmp2;\n \
    \   my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n  \
    \  my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjs05c3_y.pl line 142,
    at end of line

    syntax error at /tmp/tmpjs05c3_y.pl line 142, at EOF

    Execution of /tmp/tmpjs05c3_y.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz9jawo9u.pl line 101, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz9jawo9u.pl line 140, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 140, at EOF

    Execution of /tmp/tmpz9jawo9u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sort) = ();\n\
    \    my($i, $j, $k, $n);\n    my($ones);\n    my($dec);\n    my($tmp);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp1y3abopy.pl line 57, at
    end of line

    syntax error at /tmp/tmp1y3abopy.pl line 57, at EOF

    Execution of /tmp/tmp1y3abopy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp;\n    my $cnt = 0;\n    my $cnt2 = 0;\n    my $cnt3 = 0;\n    my\
    \ $cnt4 = 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n    my $cnt7 = 0;\n    my\
    \ $cnt8 = 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n    my $cnt11 = 0;\n    my\
    \ $cnt12 = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n    my $cnt15 = 0;\n  \
    \  my $cnt16 = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n    my $cnt19 = 0;\n\
    \    my $cnt20 = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n    my $cnt23 = 0;\n\
    \    my $cnt24 = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n    my $cnt27 = 0;\n\
    \    my $cnt28 = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n    my $cnt31 = 0;\n\
    \    my $cnt32 = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n    my $cnt35 = 0;\n\
    \    my $cnt36 = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n    my $cnt39 = 0;\n\
    \    my $cnt40 = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n    my $cnt43 = 0;\n\
    \    my $cnt44 = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n    my $cnt47 = 0;\n\
    \    my $cnt48 = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n    my $cnt51 = 0;\n\
    \    my $cnt52 = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n    my $cnt55 = 0;\n\
    \    my $cnt56 = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n    my $cnt59 = 0;\n\
    \    my $cnt60 = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n    my $cnt63 = 0;\n\
    \    my $cnt64 = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n    my $cnt67 = 0;\n\
    \    my $cnt68 = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n    my $cnt71 = 0;\n\
    \    my $cnt72 = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n    my $cnt75 = 0;\n\
    \    my $cnt76 = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n    my $cnt79 = 0;\n\
    \    my $cnt80 = 0;\n    my $cnt81 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmphz2zxpqv.pl line 139,
    at end of line

    syntax error at /tmp/tmphz2zxpqv.pl line 139, at EOF

    Execution of /tmp/tmphz2zxpqv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $size = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81\
    \ = 0;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplbnfl93a.pl line 100, at end
    of line

    syntax error at /tmp/tmplbnfl93a.pl line 100, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplbnfl93a.pl line 139, at end
    of line

    syntax error at /tmp/tmplbnfl93a.pl line 139, at EOF

    Execution of /tmp/tmplbnfl93a.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $n);\n    foreach $i (@$arr) {\n        $n = $i & 1;\n        $j\
    \ = $i;\n        foreach $j (@$arr) {\n            if ($j == $i) {\n         \
    \       $n = 1;\n                last;\n            }\n            $n += $j &\
    \ 1;\n            $j = $j >> 1;\n        }\n        push(@sorted, $j);\n    }\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my @ret;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $max = 0;\n    my $min = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n\
    \    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n\
    \    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n\
    \    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n\
    \    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n\
    \    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n\
    \    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n\
    \    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n\
    \    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n\
    \    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n\
    \    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n\
    \    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n\
    \    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n\
    \    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n\
    \    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n\
    \    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n\
    \    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n\
    \    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n\
    \    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n\
    \    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n\
    \    my $tmp79 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpjl34l6fr.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpjl34l6fr.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpjl34l6fr.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpjl34l6fr.pl line 140, at EOF\nExecution of /tmp/tmpjl34l6fr.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max = -1;\n    my $maxi\
    \ = 0;\n    my $maxj = 0;\n    my $maxlen = 0;\n    my $maxleni = 0;\n    my $maxlenj\
    \ = 0;\n    my $maxlenlen = 0;\n    my $maxlenleni = 0;\n    my $maxlenlenj =\
    \ 0;\n    my $maxlenlenlen = 0;\n    my $maxlenlenleni = 0;\n    my $maxlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlen = 0;\n    my $maxlenlenlenleni = 0;\n    my $maxlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n  \
    \  my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni\
    \ = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen = 0;\n\
    \    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n\
    \    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my\
    \ $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my $maxlenlenlenlenleni = 0;\n\
    \    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen = 0;\n    my\
    \ $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpe0ivjd22.pl line 68, at end
    of line

    syntax error at /tmp/tmpe0ivjd22.pl line 68, near "$maxlenlenlenlenlenj

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpe0ivjd22.pl line 107, at end
    of line

    syntax error at /tmp/tmpe0ivjd22.pl line 107, at EOF

    Execution of /tmp/tmpe0ivjd22.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max_bits = 0;\n\
    \    my $max_bits_len = 0;\n    my $max_bits_len2 = 0;\n    my $max_bits_len3\
    \ = 0;\n    my $max_bits_len4 = 0;\n    my $max_bits_len5 = 0;\n    my $max_bits_len6\
    \ = 0;\n    my $max_bits_len7 = 0;\n    my $max_bits_len8 = 0;\n    my $max_bits_len9\
    \ = 0;\n    my $max_bits_len10 = 0;\n    my $max_bits_len11 = 0;\n    my $max_bits_len12\
    \ = 0;\n    my $max_bits_len13 = 0;\n    my $max_bits_len14 = 0;\n    my $max_bits_len15\
    \ = 0;\n    my $max_bits_len16 = 0;\n    my $max_bits_len17 = 0;\n    my $max_bits_len18\
    \ = 0;\n    my $max_bits_len19 = 0;\n    my $max_bits_len20 = 0;\n    my $max_bits_len21\
    \ = 0;\n    my $max_bits_len22 = 0;\n    my $max_bits_len23 = 0;\n    my $max_bits_len24\
    \ = 0;\n    my $max_bits_len25 = 0;\n    my $max_bits_len26 = 0;\n    my $max_bits_len27\
    \ = 0;\n    my $max_bits_len28 = 0;\n    my $max_bits_len29 = 0;\n    my $max_bits_len30\
    \ = 0;\n    my $max_bits_len31 = 0;\n    my $max_bits_len32 = 0;\n    my $max_bits_len33\
    \ = 0;\n    my $max_bits_len34 = 0;\n    my $max_bits_len35 = 0;\n    my $max_bits_len36\
    \ = 0;\n    my $max_bits_len37 = 0;\n    my $max_bits_len38 = 0;\n    my $max_bits_len39\
    \ = 0;\n    my $max_bits_len40 = 0;\n    my $max_bits_len41 = 0;\n    my $max_bits_len42\
    \ = 0;\n    my $max_bits_len43 = 0;\n    my $max_bits_len44 = 0;\n    my $max_bits_len45\
    \ = 0;\n    my $max_bits_len46 = 0;\n    my $max_bits_len47 = 0;\n    my $max_bits_len48\
    \ = 0;\n    my $max_bits_len49 = 0;\n    my $max_bits_len50 = 0;\n    my $max_bits_len51\
    \ = 0;\n    my $max_bits_len52 = 0;\n    my $max_bits_len53 = 0;\n    my $max_bits_len54\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpp88o1p5i.pl line 73,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpp88o1p5i.pl line 73, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpp88o1p5i.pl line 112, at end of line\nsyntax\
    \ error at /tmp/tmpp88o1p5i.pl line 112, at EOF\nExecution of /tmp/tmpp88o1p5i.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my\
    \ $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp3rti7vun.pl line 140,
    at end of line

    syntax error at /tmp/tmp3rti7vun.pl line 140, at EOF

    Execution of /tmp/tmp3rti7vun.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $tmp2;\n   \
    \ my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my\
    \ $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my\
    \ $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n  \
    \  my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $tmp86\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprnyfu78m.pl line 103, at end
    of line

    syntax error at /tmp/tmprnyfu78m.pl line 103, near "$tmp86

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprnyfu78m.pl line 142, at end
    of line

    syntax error at /tmp/tmprnyfu78m.pl line 142, at EOF

    Execution of /tmp/tmprnyfu78m.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = scalar(@$arr);\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec2 = 0;\n    my $max_dec3\
    \ = 0;\n    my $max_dec4 = 0;\n    my $max_dec5 = 0;\n    my $max_dec6 = 0;\n\
    \    my $max_dec7 = 0;\n    my $max_dec8 = 0;\n    my $max_dec9 = 0;\n    my $max_dec10\
    \ = 0;\n    my $max_dec11 = 0;\n    my $max_dec12 = 0;\n    my $max_dec13 = 0;\n\
    \    my $max_dec14 = 0;\n    my $max_dec15 = 0;\n    my $max_dec16 = 0;\n    my\
    \ $max_dec17 = 0;\n    my $max_dec18 = 0;\n    my $max_dec19 = 0;\n    my $max_dec20\
    \ = 0;\n    my $max_dec21 = 0;\n    my $max_dec22 = 0;\n    my $max_dec23 = 0;\n\
    \    my $max_dec24 = 0;\n    my $max_dec25 = 0;\n    my $max_dec26 = 0;\n    my\
    \ $max_dec27 = 0;\n    my $max_dec28 = 0;\n    my $max_dec29 = 0;\n    my $max_dec30\
    \ = 0;\n    my $max_dec31 = 0;\n    my $max_dec32 = 0;\n    my $max_dec33 = 0;\n\
    \    my $max_dec34 = 0;\n    my $max_dec35 = 0;\n    my $max_dec36 = 0;\n    my\
    \ $max_dec37 = 0;\n    my $max_dec38 = 0;\n    my $max_dec39 = 0;\n    my $max_dec40\
    \ = 0;\n    my $max_dec41 = 0;\n    my $max_dec42 = 0;\n    my $max_dec43 = 0;\n\
    \    my $max_dec44 = 0;\n    my $max_dec45 = 0;\n    my $max_dec46 = 0;\n    my\
    \ $max_dec47 = 0;\n    my $max_dec48 = 0;\n    my $max_dec49 = 0;\n    my $max_dec50\
    \ = 0;\n    my $max_dec51 = 0;\n    my $max_dec52 = 0;\n    my $max_dec53 = 0;\n\
    \    my $max_dec54 = 0;\n    my $max_dec55 = 0;\n    my $max_dec56 = 0;\n    my\
    \ $max_dec57 = 0;\n    my $max_dec58 = 0;\n    my $max_dec59 = 0;\n    my $max_dec60\
    \ = 0;\n    my $max_dec61 = 0;\n    my $max_dec62 = 0;\n    my $max_dec63 = 0;\n\
    \    my $max_dec64 = 0;\n    my $max_dec65 = 0;\n    my $max_dec66 = 0;\n    my\
    \ $max_dec67 = 0;\n    my $max_dec68 = 0;\n    my $max_dec69 = 0;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpeptkhl1w.pl line 127,
    at end of line

    syntax error at /tmp/tmpeptkhl1w.pl line 127, at EOF

    Execution of /tmp/tmpeptkhl1w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my @sorted = ();\n    my $max = 0;\n    my $min = 0;\n    my $max_count =\
    \ 0;\n    my $min_count = 0;\n    my $max_val = 0;\n    my $min_val = 0;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 =\
    \ 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 =\
    \ 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 =\
    \ 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp1s835ptl.pl line 140,
    at end of line

    syntax error at /tmp/tmp1s835ptl.pl line 140, at EOF

    Execution of /tmp/tmp1s835ptl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n \
    \   my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my\
    \ $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my\
    \ $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my\
    \ $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n  \
    \  my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n\
    \    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n\
    \    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n\
    \    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n\
    \    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n\
    \    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n\
    \    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n\
    \    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n\
    \    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n\
    \    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n\
    \    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n\
    \    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n\
    \    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n\
    \    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n\
    \    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n\
    \    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n\
    \    my $tmp80 = 0;\n    my $tmp81\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp66jfehqp.pl line 100, at end
    of line

    syntax error at /tmp/tmp66jfehqp.pl line 100, near "$tmp81

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp66jfehqp.pl line 139, at end
    of line

    syntax error at /tmp/tmp66jfehqp.pl line 139, at EOF

    Execution of /tmp/tmp66jfehqp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n\
    \    my @res;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n\
    \    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n \
    \   my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvbft18kx.pl line 103, at end
    of line

    syntax error at /tmp/tmpvbft18kx.pl line 103, near "$tmp83

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvbft18kx.pl line 142, at end
    of line

    syntax error at /tmp/tmpvbft18kx.pl line 142, at EOF

    Execution of /tmp/tmpvbft18kx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sort) = ();\n\
    \    my($i, $j, $n);\n    \n    foreach $i (0 .. $#$arr) {\n        $n = $arr[$i];\n\
    \        $j = 0;\n        foreach $j (0 .. $#$sort) {\n            if ($sort[$j]\
    \ >= $n) {\n                last;\n            }\n        }\n        push(@sort,\
    \ $j);\n    }\n    \n    @sort = sort { $sort[$a] <=> $sort[$b] } @sort;\n   \
    \ \n    return @sort;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n\
    \    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n \
    \   my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n\
    \    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n\
    \    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n\
    \    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n\
    \    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n\
    \    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n\
    \    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n\
    \    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n\
    \    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n\
    \    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n\
    \    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n\
    \    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n\
    \    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n\
    \    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n\
    \    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n\
    \    my $tmp84;\n    my $tmp85;\n    my $tmp86;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4xra8yg4.pl line 142,
    at end of line

    syntax error at /tmp/tmp4xra8yg4.pl line 142, at EOF

    Execution of /tmp/tmp4xra8yg4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $cnt = 0;\n\
    \    my $tmpcnt = 0;\n    my $tmpcnt2 = 0;\n    my $tmpcnt3 = 0;\n    my $tmpcnt4\
    \ = 0;\n    my $tmpcnt5 = 0;\n    my $tmpcnt6 = 0;\n    my $tmpcnt7 = 0;\n   \
    \ my $tmpcnt8 = 0;\n    my $tmpcnt9 = 0;\n    my $tmpcnt10 = 0;\n    my $tmpcnt11\
    \ = 0;\n    my $tmpcnt12 = 0;\n    my $tmpcnt13 = 0;\n    my $tmpcnt14 = 0;\n\
    \    my $tmpcnt15 = 0;\n    my $tmpcnt16 = 0;\n    my $tmpcnt17 = 0;\n    my $tmpcnt18\
    \ = 0;\n    my $tmpcnt19 = 0;\n    my $tmpcnt20 = 0;\n    my $tmpcnt21 = 0;\n\
    \    my $tmpcnt22 = 0;\n    my $tmpcnt23 = 0;\n    my $tmpcnt24 = 0;\n    my $tmpcnt25\
    \ = 0;\n    my $tmpcnt26 = 0;\n    my $tmpcnt27 = 0;\n    my $tmpcnt28 = 0;\n\
    \    my $tmpcnt29 = 0;\n    my $tmpcnt30 = 0;\n    my $tmpcnt31 = 0;\n    my $tmpcnt32\
    \ = 0;\n    my $tmpcnt33 = 0;\n    my $tmpcnt34 = 0;\n    my $tmpcnt35 = 0;\n\
    \    my $tmpcnt36 = 0;\n    my $tmpcnt37 = 0;\n    my $tmpcnt38 = 0;\n    my $tmpcnt39\
    \ = 0;\n    my $tmpcnt40 = 0;\n    my $tmpcnt41 = 0;\n    my $tmpcnt42 = 0;\n\
    \    my $tmpcnt43 = 0;\n    my $tmpcnt44 = 0;\n    my $tmpcnt45 = 0;\n    my $tmpcnt46\
    \ = 0;\n    my $tmpcnt47 = 0;\n    my $tmpcnt48 = 0;\n    my $tmpcnt49 = 0;\n\
    \    my $tmpcnt50 = 0;\n    my $tmpcnt51 = 0;\n    my $tmpcnt52 = 0;\n    my $tmpcnt53\
    \ = 0;\n    my $tmpcnt54 = 0;\n    my $tmpcnt55 = 0;\n    my $tmpcnt56 = 0;\n\
    \    my $tmpcnt57 = 0;\n    my $tmpcnt58 = 0;\n    my $tmpcnt59 = 0;\n    my $tmpcnt60\
    \ = 0;\n    my $tmpcnt61 = 0;\n    my $tmpcnt62 = 0;\n    my $tmpcnt63 = 0;\n\
    \    my $tmpcnt64 = 0;\n    my $tmpcnt65 = 0;\n    my $tmpcnt66 = 0;\n    my $tmpcnt67\
    \ = 0;\n    my $tmpcnt68 = 0;\n    my $tmpcnt69 = 0;\n    my $tmpcnt\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6xcq6xy_.pl line 89, at end
    of line

    syntax error at /tmp/tmp6xcq6xy_.pl line 89, near "$tmpcnt

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6xcq6xy_.pl line 128, at end
    of line

    syntax error at /tmp/tmp6xcq6xy_.pl line 128, at EOF

    Execution of /tmp/tmp6xcq6xy_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max_i\
    \ = 0;\n    my $min_i = 0;\n    my $max_j = 0;\n    my $min_j = 0;\n    my $count\
    \ = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $tmp;\n    my $tmp2;\n   \
    \ my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my\
    \ $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my\
    \ $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n  \
    \  my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpwlj17czx.pl line 104, at end
    of line

    syntax error at /tmp/tmpwlj17czx.pl line 104, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpwlj17czx.pl line 143, at end
    of line

    syntax error at /tmp/tmpwlj17czx.pl line 143, at EOF

    Execution of /tmp/tmpwlj17czx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my @res;\n    my $max = 0;\n\
    \    my $min = 0;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res_size;\n   \
    \ my $cmp_res_i;\n    my $cmp_res_j;\n    my $cmp_res_tmp;\n    my $cmp_res_max;\n\
    \    my $cmp_res_min;\n    my $cmp_res_cmp;\n    my $cmp_res_cmp_res;\n    my\
    \ $cmp_res_cmp_res_size;\n    my $cmp_res_cmp_res_i;\n    my $cmp_res_cmp_res_j;\n\
    \    my $cmp_res_cmp_res_tmp;\n    my $cmp_res_cmp_res_max;\n    my $cmp_res_cmp_res_min;\n\
    \    my $cmp_res_cmp_res_cmp;\n    my $cmp_res_cmp_res_cmp_res;\n    my $cmp_res_cmp_res_cmp_res_size;\n\
    \    my $cmp_res_cmp_res_cmp_res_i;\n    my $cmp_res_cmp_res_cmp_res_j;\n    my\
    \ $cmp_res_cmp_res_cmp_res_tmp;\n    my $cmp_res_cmp_res_cmp_res_max;\n    my\
    \ $cmp_res_cmp_res_cmp_res_min;\n    my $cmp_res_cmp_res_cmp_res_cmp;\n    my\
    \ $cmp_res_cmp_res_cmp_res_cmp_res;\n    my $cmp_res_cmp_res_cmp_res_cmp_res_size;\n\
    \    my $cmp_res_cmp_res_cmp_res_cmp_res_i;\n    my $cmp_res_cmp_res_cmp_res_cmp_res_j;\n\
    \    my $cmp_res_cmp_res_cmp_res_cmp_res_tmp;\n    my $cmp_res_cmp_res_cmp_res_cmp_res_max;\n\
    \    my $cmp_res_cmp_res_cmp_res_cmp_res_min;\n    my $cmp_res_cmp_res_cmp_res_cmp_res_cmp;\n\
    \    my $cmp_res_cmp_res_cmp_res_cmp_res_cmp_res;\n    my $cmp_res_cmp_res_cmp_res_cmp_res_cmp_res_size;\n\
    \    my $cmp_res_cmp_res_cmp_res_cmp_res_cmp_res_i;\n    my $cmp_res_cmp_res_cmp_res_cmp_res_cmp_res_j;\n\
    \    my $cmp_res_cmp_res_cmp_res_\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6w500950.pl line 58, at end
    of line

    syntax error at /tmp/tmp6w500950.pl line 58, near "$cmp_res_cmp_res_cmp_res_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6w500950.pl line 97, at end of
    line

    syntax error at /tmp/tmp6w500950.pl line 97, at EOF

    Execution of /tmp/tmp6w500950.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $temp;\n    my $cnt;\n\
    \    my $max;\n    my $min;\n    my $min_index;\n    my $max_index;\n    my $min_cnt;\n\
    \    my $max_cnt;\n    my $cnt2;\n    my $cnt3;\n    my $cnt4;\n    my $cnt5;\n\
    \    my $cnt6;\n    my $cnt7;\n    my $cnt8;\n    my $cnt9;\n    my $cnt10;\n\
    \    my $cnt11;\n    my $cnt12;\n    my $cnt13;\n    my $cnt14;\n    my $cnt15;\n\
    \    my $cnt16;\n    my $cnt17;\n    my $cnt18;\n    my $cnt19;\n    my $cnt20;\n\
    \    my $cnt21;\n    my $cnt22;\n    my $cnt23;\n    my $cnt24;\n    my $cnt25;\n\
    \    my $cnt26;\n    my $cnt27;\n    my $cnt28;\n    my $cnt29;\n    my $cnt30;\n\
    \    my $cnt31;\n    my $cnt32;\n    my $cnt33;\n    my $cnt34;\n    my $cnt35;\n\
    \    my $cnt36;\n    my $cnt37;\n    my $cnt38;\n    my $cnt39;\n    my $cnt40;\n\
    \    my $cnt41;\n    my $cnt42;\n    my $cnt43;\n    my $cnt44;\n    my $cnt45;\n\
    \    my $cnt46;\n    my $cnt47;\n    my $cnt48;\n    my $cnt49;\n    my $cnt50;\n\
    \    my $cnt51;\n    my $cnt52;\n    my $cnt53;\n    my $cnt54;\n    my $cnt55;\n\
    \    my $cnt56;\n    my $cnt57;\n    my $cnt58;\n    my $cnt59;\n    my $cnt60;\n\
    \    my $cnt61;\n    my $cnt62;\n    my $cnt63;\n    my $cnt64;\n    my $cnt65;\n\
    \    my $cnt66;\n    my $cnt67;\n    my $cnt68;\n    my $cnt69;\n    my $cnt70;\n\
    \    my $cnt71;\n    my $cnt72;\n    my $cnt73;\n    my $cnt74;\n    my $cnt75;\n\
    \    my $cnt76;\n    my $cnt77;\n    my $cnt78;\n    my $cnt\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmps4e5zpis.pl line 103, at end
    of line

    syntax error at /tmp/tmps4e5zpis.pl line 103, near "$cnt

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmps4e5zpis.pl line 142, at end
    of line

    syntax error at /tmp/tmps4e5zpis.pl line 142, at EOF

    Execution of /tmp/tmps4e5zpis.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j);\n    my($ones);\n    my($dec);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_gg7pel_.pl line 56, at
    end of line

    syntax error at /tmp/tmp_gg7pel_.pl line 56, at EOF

    Execution of /tmp/tmp_gg7pel_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpephuvo1u.pl line 139,
    at end of line

    syntax error at /tmp/tmpephuvo1u.pl line 139, at EOF

    Execution of /tmp/tmpephuvo1u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_bits = 0;\n    my $max_val = 0;\n    my $max_val_pos = 0;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $bits;\n    my $val;\n    my $val_pos;\n\
    \    my $max_val_pos;\n    my $num_ones;\n    my $num_zeros;\n    my $num_zeros_pos;\n\
    \    my $num_ones_pos;\n    my $num_ones_neg;\n    my $num_zeros_neg;\n    my\
    \ $num_ones_neg;\n    my $num_ones_pos;\n    my $num_zeros_pos;\n    my $num_ones_neg;\n\
    \    my $num_zeros_neg;\n    my $num_ones_pos;\n    my $num_zeros_pos;\n    my\
    \ $num_ones_neg;\n    my $num_zeros_neg;\n    my $num_ones_pos;\n    my $num_zeros_pos;\n\
    \    my $num_ones_neg;\n    my $num_zeros_neg;\n    my $num_ones_pos;\n    my\
    \ $num_zeros_pos;\n    my $num_ones_neg;\n    my $num_zeros_neg;\n    my $num_ones_pos;\n\
    \    my $num_zeros_pos;\n    my $num_ones_neg;\n    my $num_zeros_neg;\n    my\
    \ $num_ones_pos;\n    my $num_zeros_pos;\n    my $num_ones_neg;\n    my $num_zeros_neg;\n\
    \    my $num_ones_pos;\n    my $num_zeros_pos;\n    my $num_ones_neg;\n    my\
    \ $num_zeros_neg;\n    my $num_ones_pos;\n    my $num_zeros_pos;\n    my $num_ones_neg;\n\
    \    my $num_zeros_neg;\n    my $num_ones_pos;\n    my $num_zeros_pos;\n    my\
    \ $num_ones_neg;\n    my $num_zeros_neg;\n    my $num_ones_pos;\n    my $num_zeros_pos;\n\
    \    my $num_ones_neg;\n    my $num_zeros_neg;\n    my $num_ones_pos;\n    my\
    \ $num_zeros_pos;\n    my $num_ones_neg;\n    my $num_zeros_neg;\n    my $num_ones_pos;\n\
    \    my $num_zeros_pos;\n    my $num_ones_neg;\n    my $num_zeros_neg;\n    my\
    \ $num_ones_pos;\n    my $num_zeros_pos;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpb3bb7l1i.pl line 121,
    at end of line

    syntax error at /tmp/tmpb3bb7l1i.pl line 121, at EOF

    Execution of /tmp/tmpb3bb7l1i.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j);\n    \n    foreach $i (0..$#$arr) {\n        my $count = 0;\n \
    \       my $j = $i;\n        \n        foreach $j ($i+1..$#$arr) {\n         \
    \   if ($arr->[$i] & $arr->[$j]) {\n                $count++;\n            }\n\
    \        }\n        \n        if ($count == 0) {\n            push(@sorted, $arr->[$i]);\n\
    \        }\n        elsif ($count == 1) {\n            push(@sorted, $arr->[$i]);\n\
    \            push(@sorted, $arr->[$j]);\n        }\n        else {\n         \
    \   push(@sorted, $arr->[$i]);\n            push(@sorted, $arr->[$j]);\n     \
    \       push(@sorted, $arr->[$i]);\n        }\n    }\n    \n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz9jawo9u.pl line 101, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz9jawo9u.pl line 140, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 140, at EOF

    Execution of /tmp/tmpz9jawo9u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $n);\n    my($ones);\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp3qimlqiz.pl line 55, at
    end of line

    syntax error at /tmp/tmp3qimlqiz.pl line 55, at EOF

    Execution of /tmp/tmp3qimlqiz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sort) = ();\n\
    \    my($i, $j, $n);\n    my($ones);\n    my($dec);\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzfbvg0ud.pl line 56, at
    end of line

    syntax error at /tmp/tmpzfbvg0ud.pl line 56, at EOF

    Execution of /tmp/tmpzfbvg0ud.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpayha_515.pl line 101, at end
    of line

    syntax error at /tmp/tmpayha_515.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpayha_515.pl line 140, at end
    of line

    syntax error at /tmp/tmpayha_515.pl line 140, at EOF

    Execution of /tmp/tmpayha_515.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my @res;\n    my $max = 0;\n    my $min = 0;\n    my $i;\n    my $j;\n  \
    \  my $k;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n\
    \    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n\
    \    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n\
    \    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n\
    \    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n\
    \    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n\
    \    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n\
    \    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n\
    \    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n\
    \    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n\
    \    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n\
    \    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n\
    \    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n\
    \    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n\
    \    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n\
    \    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n\
    \    my $tmp81;\n    my $tmp82;\n    my $tmp83;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpr71ii073.pl line 142,
    at end of line

    syntax error at /tmp/tmpr71ii073.pl line 142, at EOF

    Execution of /tmp/tmpr71ii073.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = scalar(@$arr);\n\
    \    while($i < $l) {\n        $j = 0;\n        while($j < $l) {\n           \
    \ $k = 0;\n            while($k < $l) {\n                if($arr->[$i] & 1) {\n\
    \                    $arr->[$k] = $arr->[$k] | 1;\n                    $k++;\n\
    \                } else {\n                    $arr->[$k] = $arr->[$k] & $arr->[$k];\n\
    \                    $k++;\n                }\n            }\n            $j++;\n\
    \        }\n        $sorted->[$i] = $arr->[$i];\n        $i++;\n    }\n    return\
    \ @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $n);\n\
    \    my($ones, $dec);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmperiw94zx.pl line 54, at
    end of line

    syntax error at /tmp/tmperiw94zx.pl line 54, at EOF

    Execution of /tmp/tmperiw94zx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $cnt = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2\
    \ = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4\
    \ = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6\
    \ = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8\
    \ = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10\
    \ = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12\
    \ = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14\
    \ = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16\
    \ = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18\
    \ = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20\
    \ = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22\
    \ = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24\
    \ = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26\
    \ = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28\
    \ = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30\
    \ = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32\
    \ = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34\
    \ = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36\
    \ = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38\
    \ = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40\
    \ = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n    my $min42\
    \ = 0;\n    my $max43 = 0;\n    my $min\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpo16fodq5.pl line 101, at end
    of line

    syntax error at /tmp/tmpo16fodq5.pl line 101, near "$min

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpo16fodq5.pl line 140, at end
    of line

    syntax error at /tmp/tmpo16fodq5.pl line 140, at EOF

    Execution of /tmp/tmpo16fodq5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $flag = 0;\n    my\
    \ @temp;\n    my @res;\n    my $max = 0;\n    my $min = 0;\n    my $temp2 = 0;\n\
    \    my $temp3 = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n\
    \    my $temp7 = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10 =\
    \ 0;\n    my $temp11 = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my $temp14\
    \ = 0;\n    my $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n    my\
    \ $temp18 = 0;\n    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21 = 0;\n\
    \    my $temp22 = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my $temp25\
    \ = 0;\n    my $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n    my\
    \ $temp29 = 0;\n    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32 = 0;\n\
    \    my $temp33 = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my $temp36\
    \ = 0;\n    my $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n    my\
    \ $temp40 = 0;\n    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43 = 0;\n\
    \    my $temp44 = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my $temp47\
    \ = 0;\n    my $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n    my\
    \ $temp51 = 0;\n    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54 = 0;\n\
    \    my $temp55 = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my $temp58\
    \ = 0;\n    my $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n    my\
    \ $temp62 = 0;\n    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65 = 0;\n\
    \    my $temp66 = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my $temp69\
    \ = 0;\n    my $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n    my\
    \ $temp73 = 0;\n    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76 = 0;\n\
    \    my $temp77 = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my $\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpvatmyurx.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpvatmyurx.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpvatmyurx.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpvatmyurx.pl line 140, at EOF\nExecution of /tmp/tmpvatmyurx.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: -1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j);\n    my $ones = 0;\n    my $dec = 0;\n    foreach $i (@$arr) {\n\
    \        $ones = $i & 1;\n        $dec += $i >> 1;\n        push(@sorted, $i);\n\
    \    }\n    foreach $i (@sorted) {\n        $j = 0;\n        while ($j < @sorted\
    \ and $sorted[$j] == $i) {\n            $j++;\n        }\n        splice(@sorted,\
    \ $j, 0, $i);\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013462
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $tmp;\n    my $cmp;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpx4dkjs2d.pl line 62, at
    end of line

    syntax error at /tmp/tmpx4dkjs2d.pl line 62, at EOF

    Execution of /tmp/tmpx4dkjs2d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_bin = 0;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $cnt = 0;\n    my\
    \ $tmp_bin;\n    my $tmp_ones;\n    my $tmp_ones_cnt;\n    my $tmp_ones_sum;\n\
    \    my $tmp_ones_sum_cnt;\n    my $tmp_ones_sum_cnt2;\n    my $tmp_ones_sum_cnt3;\n\
    \    my $tmp_ones_sum_cnt4;\n    my $tmp_ones_sum_cnt5;\n    my $tmp_ones_sum_cnt6;\n\
    \    my $tmp_ones_sum_cnt7;\n    my $tmp_ones_sum_cnt8;\n    my $tmp_ones_sum_cnt9;\n\
    \    my $tmp_ones_sum_cnt10;\n    my $tmp_ones_sum_cnt11;\n    my $tmp_ones_sum_cnt12;\n\
    \    my $tmp_ones_sum_cnt13;\n    my $tmp_ones_sum_cnt14;\n    my $tmp_ones_sum_cnt15;\n\
    \    my $tmp_ones_sum_cnt16;\n    my $tmp_ones_sum_cnt17;\n    my $tmp_ones_sum_cnt18;\n\
    \    my $tmp_ones_sum_cnt19;\n    my $tmp_ones_sum_cnt20;\n    my $tmp_ones_sum_cnt21;\n\
    \    my $tmp_ones_sum_cnt22;\n    my $tmp_ones_sum_cnt23;\n    my $tmp_ones_sum_cnt24;\n\
    \    my $tmp_ones_sum_cnt25;\n    my $tmp_ones_sum_cnt26;\n    my $tmp_ones_sum_cnt27;\n\
    \    my $tmp_ones_sum_cnt28;\n    my $tmp_ones_sum_cnt29;\n    my $tmp_ones_sum_cnt30;\n\
    \    my $tmp_ones_sum_cnt31;\n    my $tmp_ones_sum_cnt32;\n    my $tmp_ones_sum_cnt33;\n\
    \    my $tmp_ones_sum_cnt34;\n    my $tmp_ones_sum_cnt35;\n    my $tmp_ones_sum_cnt36;\n\
    \    my $tmp_ones_sum_cnt37;\n    my $tmp_ones_sum_cnt38;\n    my $tmp_ones_sum_cnt39;\n\
    \    my $tmp_ones_sum_cnt40;\n    my $tmp_ones_sum_cnt41;\n    my $tmp_one\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp645a9jdu.pl line 68, at end
    of line

    syntax error at /tmp/tmp645a9jdu.pl line 68, near "$tmp_one

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp645a9jdu.pl line 107, at end
    of line

    syntax error at /tmp/tmp645a9jdu.pl line 107, at EOF

    Execution of /tmp/tmp645a9jdu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplgyhg9bj.pl line 101, at end
    of line

    syntax error at /tmp/tmplgyhg9bj.pl line 101, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplgyhg9bj.pl line 140, at end
    of line

    syntax error at /tmp/tmplgyhg9bj.pl line 140, at EOF

    Execution of /tmp/tmplgyhg9bj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $max2\
    \ = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n    my $max5 = 0;\n    my $max6\
    \ = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n    my $max9 = 0;\n    my $max10\
    \ = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n    my $max13 = 0;\n    my $max14\
    \ = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n    my $max17 = 0;\n    my $max18\
    \ = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n    my $max21 = 0;\n    my $max22\
    \ = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n    my $max25 = 0;\n    my $max26\
    \ = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n    my $max29 = 0;\n    my $max30\
    \ = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n    my $max33 = 0;\n    my $max34\
    \ = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n    my $max37 = 0;\n    my $max38\
    \ = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n    my $max41 = 0;\n    my $max42\
    \ = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n    my $max45 = 0;\n    my $max46\
    \ = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n    my $max49 = 0;\n    my $max50\
    \ = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n    my $max53 = 0;\n    my $max54\
    \ = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n    my $max57 = 0;\n    my $max58\
    \ = 0;\n    my $max59 = 0;\n    my $max60 = 0;\n    my $max61 = 0;\n    my $max62\
    \ = 0;\n    my $max63 = 0;\n    my $max64 = 0;\n    my $max65 = 0;\n    my $max66\
    \ = 0;\n    my $max67 = 0;\n    my $max68 = 0;\n    my $max69 = 0;\n    my $max70\
    \ = 0;\n    my $max71 = 0;\n    my $max72 = 0;\n    my $max73 = 0;\n    my $max74\
    \ = 0;\n    my $max75 = 0;\n    my $max76 = 0;\n    my $max77 = 0;\n    my $max78\
    \ = 0;\n    my $max79 = 0;\n    my $max80 = 0;\n    my $max81 = 0;\n    my $max82\
    \ = 0;\n    my $max83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwnyp68ua.pl line 139,
    at end of line

    syntax error at /tmp/tmpwnyp68ua.pl line 139, at EOF

    Execution of /tmp/tmpwnyp68ua.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $size = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81\
    \ = 0;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplbnfl93a.pl line 100, at end
    of line

    syntax error at /tmp/tmplbnfl93a.pl line 100, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplbnfl93a.pl line 139, at end
    of line

    syntax error at /tmp/tmplbnfl93a.pl line 139, at EOF

    Execution of /tmp/tmplbnfl93a.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max = -1;\n   \
    \ my $min = 0;\n    my $maxi = 0;\n    my $mini = 0;\n    my $maxj = 0;\n    my\
    \ $minij = 0;\n    my $maxlen = 0;\n    my $minilen = 0;\n    my $maxlen2 = 0;\n\
    \    my $minilen2 = 0;\n    my $maxlen3 = 0;\n    my $minilen3 = 0;\n    my $maxlen4\
    \ = 0;\n    my $minilen4 = 0;\n    my $maxlen5 = 0;\n    my $minilen5 = 0;\n \
    \   my $maxlen6 = 0;\n    my $minilen6 = 0;\n    my $maxlen7 = 0;\n    my $minilen7\
    \ = 0;\n    my $maxlen8 = 0;\n    my $minilen8 = 0;\n    my $maxlen9 = 0;\n  \
    \  my $minilen9 = 0;\n    my $maxlen10 = 0;\n    my $minilen10 = 0;\n    my $maxlen11\
    \ = 0;\n    my $minilen11 = 0;\n    my $maxlen12 = 0;\n    my $minilen12 = 0;\n\
    \    my $maxlen13 = 0;\n    my $minilen13 = 0;\n    my $maxlen14 = 0;\n    my\
    \ $minilen14 = 0;\n    my $maxlen15 = 0;\n    my $minilen15 = 0;\n    my $maxlen16\
    \ = 0;\n    my $minilen16 = 0;\n    my $maxlen17 = 0;\n    my $minilen17 = 0;\n\
    \    my $maxlen18 = 0;\n    my $minilen18 = 0;\n    my $maxlen19 = 0;\n    my\
    \ $minilen19 = 0;\n    my $maxlen20 = 0;\n    my $minilen20 = 0;\n    my $maxlen21\
    \ = 0;\n    my $minilen21 = 0;\n    my $maxlen22 = 0;\n    my $minilen22 = 0;\n\
    \    my $maxlen23 = 0;\n    my $minilen23 = 0;\n    my $maxlen24 = 0;\n    my\
    \ $minilen24 = 0;\n    my $maxlen25 = 0;\n    my $minilen25 = 0;\n    my $maxlen26\
    \ = 0;\n    my $minilen26 = 0;\n    my $maxlen27 = 0;\n    my $minilen27 = 0;\n\
    \    my $maxlen28 = 0;\n    my $minilen28 = 0;\n    my $maxlen29 = 0;\n    my\
    \ $minilen29 = 0;\n    my $maxlen30 = 0;\n    my $minilen30 = 0;\n    my $maxlen31\
    \ = 0;\n    my $minilen31 = 0;\n    my $maxlen32 = 0;\n    my $minilen32 = 0;\n\
    \    my $maxlen33 = 0;\n    my $minilen33 = 0;\n    my $maxlen34\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpgi3qzidm.pl line 90, at end
    of line

    syntax error at /tmp/tmpgi3qzidm.pl line 90, near "$maxlen34

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpgi3qzidm.pl line 129, at end
    of line

    syntax error at /tmp/tmpgi3qzidm.pl line 129, at EOF

    Execution of /tmp/tmpgi3qzidm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n \
    \   my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n \
    \   my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp81 = 0;\n    my $tmp82\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9i5vc8av.pl line 100, at end
    of line

    syntax error at /tmp/tmp9i5vc8av.pl line 100, near "$tmp82

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9i5vc8av.pl line 139, at end
    of line

    syntax error at /tmp/tmp9i5vc8av.pl line 139, at EOF

    Execution of /tmp/tmp9i5vc8av.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplgyhg9bj.pl line 101, at end
    of line

    syntax error at /tmp/tmplgyhg9bj.pl line 101, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplgyhg9bj.pl line 140, at end
    of line

    syntax error at /tmp/tmplgyhg9bj.pl line 140, at EOF

    Execution of /tmp/tmplgyhg9bj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $mincnt;\n    my $maxcnt;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $cnt;\n    my $tmp;\n    my $tmpcnt;\n \
    \   my $tmpmax;\n    my $tmpmin;\n    my $tmpmincnt;\n    my $tmpmaxcnt;\n   \
    \ my $tmpi;\n    my $tmpj;\n    my $tmpk;\n    my $tmpcnt2;\n    my $tmpmax2;\n\
    \    my $tmpmin2;\n    my $tmpmincnt2;\n    my $tmpmaxcnt2;\n    my $tmpi2;\n\
    \    my $tmpj2;\n    my $tmpk2;\n    my $tmpcnt3;\n    my $tmpmax3;\n    my $tmpmin3;\n\
    \    my $tmpmincnt3;\n    my $tmpmaxcnt3;\n    my $tmpi3;\n    my $tmpj3;\n  \
    \  my $tmpk3;\n    my $tmpcnt4;\n    my $tmpmax4;\n    my $tmpmin4;\n    my $tmpmincnt4;\n\
    \    my $tmpmaxcnt4;\n    my $tmpi4;\n    my $tmpj4;\n    my $tmpk4;\n    my $tmpcnt5;\n\
    \    my $tmpmax5;\n    my $tmpmin5;\n    my $tmpmincnt5;\n    my $tmpmaxcnt5;\n\
    \    my $tmpi5;\n    my $tmpj5;\n    my $tmpk5;\n    my $tmpcnt6;\n    my $tmpmax6;\n\
    \    my $tmpmin6;\n    my $tmpmincnt6;\n    my $tmpmaxcnt6;\n    my $tmpi6;\n\
    \    my $tmpj6;\n    my $tmpk6;\n    my $tmpcnt7;\n    my $tmpmax7;\n    my $tmpmin7;\n\
    \    my $tmpmincnt7;\n    my $tmpmaxcnt7;\n    my $tmpi7;\n    my $tmpj7;\n  \
    \  my $tmpk7;\n    my $tmpcnt8;\n    my $tmpmax8;\n    my $tmpmin8;\n    my $tmpmincnt8;\n\
    \    my $tmpmaxcnt8;\n    my $tmpi8;\n    my $tmpj8;\n    my $tmpk8;\n    my $tmpcnt9;\n\
    \    my $tmpmax9;\n    my $tmpmin9;\n    my $tmpmincnt9;\n    my $tmpmaxcnt9;\n\
    \    my $tmpi9;\n    my $tmpj9;\n    my $tmpk9;\n    my $tmpcnt10;\n    my $tmpmax\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpozlcpuyy.pl line 98, at end
    of line

    syntax error at /tmp/tmpozlcpuyy.pl line 98, near "$tmpmax

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpozlcpuyy.pl line 137, at end
    of line

    syntax error at /tmp/tmpozlcpuyy.pl line 137, at EOF

    Execution of /tmp/tmpozlcpuyy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt =\
    \ 0;\n    my $cnt2 = 0;\n    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 =\
    \ 0;\n    my $cnt6 = 0;\n    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 =\
    \ 0;\n    my $cnt10 = 0;\n    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13\
    \ = 0;\n    my $cnt14 = 0;\n    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17\
    \ = 0;\n    my $cnt18 = 0;\n    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21\
    \ = 0;\n    my $cnt22 = 0;\n    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25\
    \ = 0;\n    my $cnt26 = 0;\n    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29\
    \ = 0;\n    my $cnt30 = 0;\n    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33\
    \ = 0;\n    my $cnt34 = 0;\n    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37\
    \ = 0;\n    my $cnt38 = 0;\n    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41\
    \ = 0;\n    my $cnt42 = 0;\n    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45\
    \ = 0;\n    my $cnt46 = 0;\n    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49\
    \ = 0;\n    my $cnt50 = 0;\n    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53\
    \ = 0;\n    my $cnt54 = 0;\n    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57\
    \ = 0;\n    my $cnt58 = 0;\n    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61\
    \ = 0;\n    my $cnt62 = 0;\n    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65\
    \ = 0;\n    my $cnt66 = 0;\n    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69\
    \ = 0;\n    my $cnt70 = 0;\n    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73\
    \ = 0;\n    my $cnt74 = 0;\n    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77\
    \ = 0;\n    my $cnt78 = 0;\n    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81\
    \ = 0;\n    my $cnt82 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpm083p6ah.pl line 140,
    at end of line

    syntax error at /tmp/tmpm083p6ah.pl line 140, at EOF

    Execution of /tmp/tmpm083p6ah.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my @res;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $tmp2;\n \
    \   my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n  \
    \  my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_093lh5f.pl line 142,
    at end of line

    syntax error at /tmp/tmp_093lh5f.pl line 142, at EOF

    Execution of /tmp/tmp_093lh5f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $temp);\n    my $len = @$arr;\n    my $ones = 0;\n    my $dec =\
    \ 0;\n    my $max = 0;\n    my $min = 0;\n    my $maxdec = 0;\n    my $mindec\
    \ = 0;\n    my $maxlen = 0;\n    my $minlen = 0;\n    my $maxlendec = 0;\n   \
    \ my $minlendec = 0;\n    my $maxlenlen = 0;\n    my $minlenlen = 0;\n    my $maxdecdec\
    \ = 0;\n    my $mindecdec = 0;\n    my $maxdeclen = 0;\n    my $mindeclen = 0;\n\
    \    my $maxdecdecdec = 0;\n    my $mindecdec = 0;\n    my $maxdeclen = 0;\n \
    \   my $mindeclen = 0;\n    my $maxdecdec = 0;\n    my $mindecdec = 0;\n    my\
    \ $maxdeclen = 0;\n    my $mindeclen = 0;\n    my $maxdecdec = 0;\n    my $mindecdec\
    \ = 0;\n    my $maxdeclen = 0;\n    my $mindeclen = 0;\n    my $maxdecdec = 0;\n\
    \    my $mindecdec = 0;\n    my $maxdeclen = 0;\n    my $mindeclen = 0;\n    my\
    \ $maxdecdec = 0;\n    my $mindecdec = 0;\n    my $maxdeclen = 0;\n    my $mindeclen\
    \ = 0;\n    my $maxdecdec = 0;\n    my $mindecdec = 0;\n    my $maxdeclen = 0;\n\
    \    my $mindeclen = 0;\n    my $maxdecdec = 0;\n    my $mindecdec = 0;\n    my\
    \ $maxdeclen = 0;\n    my $mindeclen = 0;\n    my $maxdecdec = 0;\n    my $mindecdec\
    \ = 0;\n    my $maxdeclen = 0;\n    my $mindeclen = 0;\n    my $maxdecdec = 0;\n\
    \    my $mindecdec = 0;\n    my $maxdeclen = 0;\n    my $mindeclen = 0;\n    my\
    \ $maxdecdec = 0;\n    my $mindecdec = 0;\n    my $maxdeclen = 0;\n    my $mindeclen\
    \ = 0;\n    my $maxdecdec = 0;\n    my $mindecdec = 0;\n    my $maxdeclen = 0;\n\
    \    my $mindeclen = 0;\n    my $maxdecdec = 0;\n    my $mindecdec = 0;\n    my\
    \ $maxdeclen = 0;\n    my $mindeclen = 0;\n    my $maxdecdec = 0;\n    my $mindecdec\
    \ = 0;\n    my $maxdeclen = 0;\n    my $mindeclen = 0;\n    my $maxdecdec = 0;\n\
    \    my $mindecdec = 0;\n    my $maxdeclen = 0;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpydvzmgtr.pl line 88,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpydvzmgtr.pl line 88, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpydvzmgtr.pl line 127, at end of line\nsyntax\
    \ error at /tmp/tmpydvzmgtr.pl line 127, at EOF\nExecution of /tmp/tmpydvzmgtr.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n\
    \    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n \
    \   my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpozy_5ptg.pl line 142,
    at end of line

    syntax error at /tmp/tmpozy_5ptg.pl line 142, at EOF

    Execution of /tmp/tmpozy_5ptg.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len =\
    \ @$arr;\n    my $tmp;\n    my $cmp = 0;\n    my $cmp2 = 0;\n    my $cmp3 = 0;\n\
    \    my $cmp4 = 0;\n    my $cmp5 = 0;\n    my $cmp6 = 0;\n    my $cmp7 = 0;\n\
    \    my $cmp8 = 0;\n    my $cmp9 = 0;\n    my $cmp10 = 0;\n    my $cmp11 = 0;\n\
    \    my $cmp12 = 0;\n    my $cmp13 = 0;\n    my $cmp14 = 0;\n    my $cmp15 = 0;\n\
    \    my $cmp16 = 0;\n    my $cmp17 = 0;\n    my $cmp18 = 0;\n    my $cmp19 = 0;\n\
    \    my $cmp20 = 0;\n    my $cmp21 = 0;\n    my $cmp22 = 0;\n    my $cmp23 = 0;\n\
    \    my $cmp24 = 0;\n    my $cmp25 = 0;\n    my $cmp26 = 0;\n    my $cmp27 = 0;\n\
    \    my $cmp28 = 0;\n    my $cmp29 = 0;\n    my $cmp30 = 0;\n    my $cmp31 = 0;\n\
    \    my $cmp32 = 0;\n    my $cmp33 = 0;\n    my $cmp34 = 0;\n    my $cmp35 = 0;\n\
    \    my $cmp36 = 0;\n    my $cmp37 = 0;\n    my $cmp38 = 0;\n    my $cmp39 = 0;\n\
    \    my $cmp40 = 0;\n    my $cmp41 = 0;\n    my $cmp42 = 0;\n    my $cmp43 = 0;\n\
    \    my $cmp44 = 0;\n    my $cmp45 = 0;\n    my $cmp46 = 0;\n    my $cmp47 = 0;\n\
    \    my $cmp48 = 0;\n    my $cmp49 = 0;\n    my $cmp50 = 0;\n    my $cmp51 = 0;\n\
    \    my $cmp52 = 0;\n    my $cmp53 = 0;\n    my $cmp54 = 0;\n    my $cmp55 = 0;\n\
    \    my $cmp56 = 0;\n    my $cmp57 = 0;\n    my $cmp58 = 0;\n    my $cmp59 = 0;\n\
    \    my $cmp60 = 0;\n    my $cmp61 = 0;\n    my $cmp62 = 0;\n    my $cmp63 = 0;\n\
    \    my $cmp64 = 0;\n    my $cmp65 = 0;\n    my $cmp66 = 0;\n    my $cmp67 = 0;\n\
    \    my $cmp68 = 0;\n    my $cmp69 = 0;\n    my $cmp70 = 0;\n    my $cmp71 = 0;\n\
    \    my $cmp72 = 0;\n    my $cmp73 = 0;\n    my $cmp74 = 0;\n    my $cmp75 = 0;\n\
    \    my $cmp76 = 0;\n    my $cmp77 = 0;\n    my $cmp78 = 0;\n    my $cmp79 = 0;\n\
    \    my $cmp80 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpha3kk8g7.pl line 140,
    at end of line

    syntax error at /tmp/tmpha3kk8g7.pl line 140, at EOF

    Execution of /tmp/tmpha3kk8g7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $maxcnt;\n    my $mincnt;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $cnt;\n    my $tmp;\n    my $tmpcnt;\n \
    \   my $tmpmax;\n    my $tmpmin;\n    my $tmpmaxcnt;\n    my $tmpmincnt;\n   \
    \ my $tmpi;\n    my $tmpj;\n    my $tmpk;\n    my $tmpcnt2;\n    my $tmpmax2;\n\
    \    my $tmpmin2;\n    my $tmpmaxcnt2;\n    my $tmpmincnt2;\n    my $tmpi2;\n\
    \    my $tmpj2;\n    my $tmpk2;\n    my $tmpcnt3;\n    my $tmpmax3;\n    my $tmpmin3;\n\
    \    my $tmpmaxcnt3;\n    my $tmpmincnt3;\n    my $tmpi3;\n    my $tmpj3;\n  \
    \  my $tmpk3;\n    my $tmpcnt4;\n    my $tmpmax4;\n    my $tmpmin4;\n    my $tmpmaxcnt4;\n\
    \    my $tmpmincnt4;\n    my $tmpi4;\n    my $tmpj4;\n    my $tmpk4;\n    my $tmpcnt5;\n\
    \    my $tmpmax5;\n    my $tmpmin5;\n    my $tmpmaxcnt5;\n    my $tmpmincnt5;\n\
    \    my $tmpi5;\n    my $tmpj5;\n    my $tmpk5;\n    my $tmpcnt6;\n    my $tmpmax6;\n\
    \    my $tmpmin6;\n    my $tmpmaxcnt6;\n    my $tmpmincnt6;\n    my $tmpi6;\n\
    \    my $tmpj6;\n    my $tmpk6;\n    my $tmpcnt7;\n    my $tmpmax7;\n    my $tmpmin7;\n\
    \    my $tmpmaxcnt7;\n    my $tmpmincnt7;\n    my $tmpi7;\n    my $tmpj7;\n  \
    \  my $tmpk7;\n    my $tmpcnt8;\n    my $tmpmax8;\n    my $tmpmin8;\n    my $tmpmaxcnt8;\n\
    \    my $tmpmincnt8;\n    my $tmpi8;\n    my $tmpj8;\n    my $tmpk8;\n    my $tmpcnt9;\n\
    \    my $tmpmax9;\n    my $tmpmin9;\n    my $tmpmaxcnt9;\n    my $tmpmincnt9;\n\
    \    my $tmpi9;\n    my $tmpj9;\n    my $tmpk9;\n    my $tmpcnt10;\n    my $tmpmax\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpztdh4vwi.pl line 98, at end
    of line

    syntax error at /tmp/tmpztdh4vwi.pl line 98, near "$tmpmax

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpztdh4vwi.pl line 137, at end
    of line

    syntax error at /tmp/tmpztdh4vwi.pl line 137, at EOF

    Execution of /tmp/tmpztdh4vwi.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my @res;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpd52mcizd.pl line 59, at
    end of line

    syntax error at /tmp/tmpd52mcizd.pl line 59, at EOF

    Execution of /tmp/tmpd52mcizd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_bits = 0;\n    my $max_num = 0;\n    my $max_dec = 0;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n\
    \    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n\
    \    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n\
    \    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n\
    \    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n\
    \    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n\
    \    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n\
    \    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n\
    \    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n\
    \    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n\
    \    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n\
    \    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n\
    \    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n\
    \    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n\
    \    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n\
    \    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n\
    \    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n\
    \    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n\
    \    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n\
    \    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n\
    \    my $tmp79 = 0;\n    my $tmp80 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpucjlytul.pl line 139,
    at end of line

    syntax error at /tmp/tmpucjlytul.pl line 139, at EOF

    Execution of /tmp/tmpucjlytul.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n\
    \    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n\
    \    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n\
    \    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n\
    \    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n\
    \    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n\
    \    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n\
    \    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n\
    \    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n\
    \    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n\
    \    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n\
    \    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n\
    \    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n\
    \    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n\
    \    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n\
    \    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n\
    \    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n\
    \    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n\
    \    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n\
    \    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n\
    \    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n\
    \    my $tmp83 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2r910p0a.pl line 140,
    at end of line

    syntax error at /tmp/tmp2r910p0a.pl line 140, at EOF

    Execution of /tmp/tmp2r910p0a.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    my $cmp = 0;\n    my $cmp2 = 0;\n    my $cmp3 =\
    \ 0;\n    my $cmp4 = 0;\n    my $cmp5 = 0;\n    my $cmp6 = 0;\n    my $cmp7 =\
    \ 0;\n    my $cmp8 = 0;\n    my $cmp9 = 0;\n    my $cmp10 = 0;\n    my $cmp11\
    \ = 0;\n    my $cmp12 = 0;\n    my $cmp13 = 0;\n    my $cmp14 = 0;\n    my $cmp15\
    \ = 0;\n    my $cmp16 = 0;\n    my $cmp17 = 0;\n    my $cmp18 = 0;\n    my $cmp19\
    \ = 0;\n    my $cmp20 = 0;\n    my $cmp21 = 0;\n    my $cmp22 = 0;\n    my $cmp23\
    \ = 0;\n    my $cmp24 = 0;\n    my $cmp25 = 0;\n    my $cmp26 = 0;\n    my $cmp27\
    \ = 0;\n    my $cmp28 = 0;\n    my $cmp29 = 0;\n    my $cmp30 = 0;\n    my $cmp31\
    \ = 0;\n    my $cmp32 = 0;\n    my $cmp33 = 0;\n    my $cmp34 = 0;\n    my $cmp35\
    \ = 0;\n    my $cmp36 = 0;\n    my $cmp37 = 0;\n    my $cmp38 = 0;\n    my $cmp39\
    \ = 0;\n    my $cmp40 = 0;\n    my $cmp41 = 0;\n    my $cmp42 = 0;\n    my $cmp43\
    \ = 0;\n    my $cmp44 = 0;\n    my $cmp45 = 0;\n    my $cmp46 = 0;\n    my $cmp47\
    \ = 0;\n    my $cmp48 = 0;\n    my $cmp49 = 0;\n    my $cmp50 = 0;\n    my $cmp51\
    \ = 0;\n    my $cmp52 = 0;\n    my $cmp53 = 0;\n    my $cmp54 = 0;\n    my $cmp55\
    \ = 0;\n    my $cmp56 = 0;\n    my $cmp57 = 0;\n    my $cmp58 = 0;\n    my $cmp59\
    \ = 0;\n    my $cmp60 = 0;\n    my $cmp61 = 0;\n    my $cmp62 = 0;\n    my $cmp63\
    \ = 0;\n    my $cmp64 = 0;\n    my $cmp65 = 0;\n    my $cmp66 = 0;\n    my $cmp67\
    \ = 0;\n    my $cmp68 = 0;\n    my $cmp69 = 0;\n    my $cmp70 = 0;\n    my $cmp71\
    \ = 0;\n    my $cmp72 = 0;\n    my $cmp73 = 0;\n    my $cmp74 = 0;\n    my $cmp75\
    \ = 0;\n    my $cmp76 = 0;\n    my $cmp77\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpfpr8xza1.pl line 101, at end
    of line

    syntax error at /tmp/tmpfpr8xza1.pl line 101, near "$cmp77

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpfpr8xza1.pl line 140, at end
    of line

    syntax error at /tmp/tmpfpr8xza1.pl line 140, at EOF

    Execution of /tmp/tmpfpr8xza1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplgyhg9bj.pl line 101, at end
    of line

    syntax error at /tmp/tmplgyhg9bj.pl line 101, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplgyhg9bj.pl line 140, at end
    of line

    syntax error at /tmp/tmplgyhg9bj.pl line 140, at EOF

    Execution of /tmp/tmplgyhg9bj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $max_cnt\
    \ = 0;\n    my $max_cnt2 = 0;\n    my $max_cnt3 = 0;\n    my $max_cnt4 = 0;\n\
    \    my $max_cnt5 = 0;\n    my $max_cnt6 = 0;\n    my $max_cnt7 = 0;\n    my $max_cnt8\
    \ = 0;\n    my $max_cnt9 = 0;\n    my $max_cnt10 = 0;\n    my $max_cnt11 = 0;\n\
    \    my $max_cnt12 = 0;\n    my $max_cnt13 = 0;\n    my $max_cnt14 = 0;\n    my\
    \ $max_cnt15 = 0;\n    my $max_cnt16 = 0;\n    my $max_cnt17 = 0;\n    my $max_cnt18\
    \ = 0;\n    my $max_cnt19 = 0;\n    my $max_cnt20 = 0;\n    my $max_cnt21 = 0;\n\
    \    my $max_cnt22 = 0;\n    my $max_cnt23 = 0;\n    my $max_cnt24 = 0;\n    my\
    \ $max_cnt25 = 0;\n    my $max_cnt26 = 0;\n    my $max_cnt27 = 0;\n    my $max_cnt28\
    \ = 0;\n    my $max_cnt29 = 0;\n    my $max_cnt30 = 0;\n    my $max_cnt31 = 0;\n\
    \    my $max_cnt32 = 0;\n    my $max_cnt33 = 0;\n    my $max_cnt34 = 0;\n    my\
    \ $max_cnt35 = 0;\n    my $max_cnt36 = 0;\n    my $max_cnt37 = 0;\n    my $max_cnt38\
    \ = 0;\n    my $max_cnt39 = 0;\n    my $max_cnt40 = 0;\n    my $max_cnt41 = 0;\n\
    \    my $max_cnt42 = 0;\n    my $max_cnt43 = 0;\n    my $max_cnt44 = 0;\n    my\
    \ $max_cnt45 = 0;\n    my $max_cnt46 = 0;\n    my $max_cnt47 = 0;\n    my $max_cnt48\
    \ = 0;\n    my $max_cnt49 = 0;\n    my $max_cnt50 = 0;\n    my $max_cnt51 = 0;\n\
    \    my $max_cnt52 = 0;\n    my $max_cnt53 = 0;\n    my $max_cnt54 = 0;\n    my\
    \ $max_cnt55 = 0;\n    my $max_cnt56 = 0;\n    my $max_cnt57 = 0;\n    my $max_cnt58\
    \ = 0;\n    my $max_cnt59 = 0;\n    my $max_cnt60 = 0;\n    my $max_cnt61 = 0;\n\
    \    my $max_cnt62 = 0;\n    my $max_cnt63 = 0;\n    my $max_cnt64 = 0;\n    my\
    \ $max_cnt65 = 0;\n    my $max_cnt66 = 0;\n    my $max_cnt67 = 0;\n    my $max_cnt68\
    \ = 0;\n    my $max_cnt69 = 0;\n    my $max_cnt70 = 0;\n    my $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpvvtrfjl5.pl line 89,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpvvtrfjl5.pl line 89, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpvvtrfjl5.pl line 128, at end of line\nsyntax\
    \ error at /tmp/tmpvvtrfjl5.pl line 128, at EOF\nExecution of /tmp/tmpvvtrfjl5.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $k, $n);\n    my($ones);\n    my($dec);\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpej116tgm.pl line 56, at
    end of line

    syntax error at /tmp/tmpej116tgm.pl line 56, at EOF

    Execution of /tmp/tmpej116tgm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max = -1;\n\
    \    my $min = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n\
    \    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n \
    \   my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprlm9vj_m.pl line 103, at end
    of line

    syntax error at /tmp/tmprlm9vj_m.pl line 103, near "$tmp83

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprlm9vj_m.pl line 142, at end
    of line

    syntax error at /tmp/tmprlm9vj_m.pl line 142, at EOF

    Execution of /tmp/tmprlm9vj_m.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max = -1;\n   \
    \ my $min = 0;\n    my $tmp;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpw8o5588x.pl line 59, at
    end of line

    syntax error at /tmp/tmpw8o5588x.pl line 59, at EOF

    Execution of /tmp/tmpw8o5588x.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_ones = 0;\n   \
    \ my $max_dec = 0;\n    my $max_dec_index = 0;\n    my $max_dec_len = 0;\n   \
    \ my $max_dec_len_index = 0;\n    my $max_dec_len_index2 = 0;\n    my $max_dec_len_index3\
    \ = 0;\n    my $max_dec_len_index4 = 0;\n    my $max_dec_len_index5 = 0;\n   \
    \ my $max_dec_len_index6 = 0;\n    my $max_dec_len_index7 = 0;\n    my $max_dec_len_index8\
    \ = 0;\n    my $max_dec_len_index9 = 0;\n    my $max_dec_len_index10 = 0;\n  \
    \  my $max_dec_len_index11 = 0;\n    my $max_dec_len_index12 = 0;\n    my $max_dec_len_index13\
    \ = 0;\n    my $max_dec_len_index14 = 0;\n    my $max_dec_len_index15 = 0;\n \
    \   my $max_dec_len_index16 = 0;\n    my $max_dec_len_index17 = 0;\n    my $max_dec_len_index18\
    \ = 0;\n    my $max_dec_len_index19 = 0;\n    my $max_dec_len_index20 = 0;\n \
    \   my $max_dec_len_index21 = 0;\n    my $max_dec_len_index22 = 0;\n    my $max_dec_len_index23\
    \ = 0;\n    my $max_dec_len_index24 = 0;\n    my $max_dec_len_index25 = 0;\n \
    \   my $max_dec_len_index26 = 0;\n    my $max_dec_len_index27 = 0;\n    my $max_dec_len_index28\
    \ = 0;\n    my $max_dec_len_index29 = 0;\n    my $max_dec_len_index30 = 0;\n \
    \   my $max_dec_len_index31 = 0;\n    my $max_dec_len_index32 = 0;\n    my $max_dec_len_index33\
    \ = 0;\n    my $max_dec_len_index34 = 0;\n    my $max_dec_len_index35 = 0;\n \
    \   my $max_dec_len_index36 = 0;\n    my $max_dec_len_index37 = 0;\n    my $max_dec_len_index38\
    \ = 0;\n    my $max_dec_len_index39 = 0;\n    my $max_dec_len_index40 = 0;\n \
    \   my $max_dec_len_index41 = 0;\n    my $max_dec_len_index42 = 0;\n    my $max_dec_len_index43\
    \ = 0;\n    my $max_dec_len_index44 = 0;\n    my $max_dec_len_index45 = 0;\n \
    \   my $max_dec_len_index46 = 0;\n    my $max_dec_len_index47 = 0;\n    my $max_dec_len_index48\
    \ = 0;\n    my $max_dec_len_index49 = 0;\n    my $max_dec_len_index50 = 0;\n \
    \   my $max_dec_len_index51 = 0;\n    my $max_dec_len_index52 = 0;\n    my $max_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp_1nn676t.pl line 74, at end
    of line

    syntax error at /tmp/tmp_1nn676t.pl line 74, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp_1nn676t.pl line 113, at end
    of line

    syntax error at /tmp/tmp_1nn676t.pl line 113, at EOF

    Execution of /tmp/tmp_1nn676t.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $cnt2;\n    my $cnt3;\n    my $cnt4;\n    my $cnt5;\n    my $cnt6;\n    my $cnt7;\n\
    \    my $cnt8;\n    my $cnt9;\n    my $cnt10;\n    my $cnt11;\n    my $cnt12;\n\
    \    my $cnt13;\n    my $cnt14;\n    my $cnt15;\n    my $cnt16;\n    my $cnt17;\n\
    \    my $cnt18;\n    my $cnt19;\n    my $cnt20;\n    my $cnt21;\n    my $cnt22;\n\
    \    my $cnt23;\n    my $cnt24;\n    my $cnt25;\n    my $cnt26;\n    my $cnt27;\n\
    \    my $cnt28;\n    my $cnt29;\n    my $cnt30;\n    my $cnt31;\n    my $cnt32;\n\
    \    my $cnt33;\n    my $cnt34;\n    my $cnt35;\n    my $cnt36;\n    my $cnt37;\n\
    \    my $cnt38;\n    my $cnt39;\n    my $cnt40;\n    my $cnt41;\n    my $cnt42;\n\
    \    my $cnt43;\n    my $cnt44;\n    my $cnt45;\n    my $cnt46;\n    my $cnt47;\n\
    \    my $cnt48;\n    my $cnt49;\n    my $cnt50;\n    my $cnt51;\n    my $cnt52;\n\
    \    my $cnt53;\n    my $cnt54;\n    my $cnt55;\n    my $cnt56;\n    my $cnt57;\n\
    \    my $cnt58;\n    my $cnt59;\n    my $cnt60;\n    my $cnt61;\n    my $cnt62;\n\
    \    my $cnt63;\n    my $cnt64;\n    my $cnt65;\n    my $cnt66;\n    my $cnt67;\n\
    \    my $cnt68;\n    my $cnt69;\n    my $cnt70;\n    my $cnt71;\n    my $cnt72;\n\
    \    my $cnt73;\n    my $cnt74;\n    my $cnt75;\n    my $cnt76;\n    my $cnt77;\n\
    \    my $cnt78;\n    my $cnt79;\n    my $cnt80;\n    my $cnt81;\n    my $cnt82;\n\
    \    my $cnt83;\n    my $cnt84;\n    \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8o8ve0hu.pl line 143,
    at end of line

    syntax error at /tmp/tmp8o8ve0hu.pl line 143, at EOF

    Execution of /tmp/tmp8o8ve0hu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 1;\n\
    \    my $n = @$arr;\n    my $max = -1;\n    my $min = 1;\n    my $tmp;\n    my\
    \ $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n\
    \    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp8\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp10h3bo9f.pl line 103, at end
    of line

    syntax error at /tmp/tmp10h3bo9f.pl line 103, near "$tmp8

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp10h3bo9f.pl line 142, at end
    of line

    syntax error at /tmp/tmp10h3bo9f.pl line 142, at EOF

    Execution of /tmp/tmp10h3bo9f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpz9jawo9u.pl line 101, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 101, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpz9jawo9u.pl line 140, at end
    of line

    syntax error at /tmp/tmpz9jawo9u.pl line 140, at EOF

    Execution of /tmp/tmpz9jawo9u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_len = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_len2 = 0;\n    my $max_i2 = 0;\n\
    \    my $max_j2 = 0;\n    my $max_len3 = 0;\n    my $max_i3 = 0;\n    my $max_j3\
    \ = 0;\n    my $max_len4 = 0;\n    my $max_i4 = 0;\n    my $max_j4 = 0;\n    my\
    \ $max_len5 = 0;\n    my $max_i5 = 0;\n    my $max_j5 = 0;\n    my $max_len6 =\
    \ 0;\n    my $max_i6 = 0;\n    my $max_j6 = 0;\n    my $max_len7 = 0;\n    my\
    \ $max_i7 = 0;\n    my $max_j7 = 0;\n    my $max_len8 = 0;\n    my $max_i8 = 0;\n\
    \    my $max_j8 = 0;\n    my $max_len9 = 0;\n    my $max_i9 = 0;\n    my $max_j9\
    \ = 0;\n    my $max_len10 = 0;\n    my $max_i10 = 0;\n    my $max_j10 = 0;\n \
    \   my $max_len11 = 0;\n    my $max_i11 = 0;\n    my $max_j11 = 0;\n    my $max_len12\
    \ = 0;\n    my $max_i12 = 0;\n    my $max_j12 = 0;\n    my $max_len13 = 0;\n \
    \   my $max_i13 = 0;\n    my $max_j13 = 0;\n    my $max_len14 = 0;\n    my $max_i14\
    \ = 0;\n    my $max_j14 = 0;\n    my $max_len15 = 0;\n    my $max_i15 = 0;\n \
    \   my $max_j15 = 0;\n    my $max_len16 = 0;\n    my $max_i16 = 0;\n    my $max_j16\
    \ = 0;\n    my $max_len17 = 0;\n    my $max_i17 = 0;\n    my $max_j17 = 0;\n \
    \   my $max_len18 = 0;\n    my $max_i18 = 0;\n    my $max_j18 = 0;\n    my $max_len19\
    \ = 0;\n    my $max_i19 = 0;\n    my $max_j19 = 0;\n    my $max_len20 = 0;\n \
    \   my $max_i20 = 0;\n    my $max_j20 = 0;\n    my $max_len21 = 0;\n    my $max_i21\
    \ = 0;\n    my $max_j21 = 0;\n    my $max_len22 = 0;\n    my $max_i22 = 0;\n \
    \   my $max_j22 = 0;\n    my $max_len23 = 0;\n    my $max_i23 = 0;\n    my $max_j23\
    \ = 0;\n    my $max_len24 = 0;\n    my $max_i24 = 0;\n    my $max_j24 = 0;\n \
    \   my $max_len25 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmploh5pw6x.pl line 129,
    at end of line

    syntax error at /tmp/tmploh5pw6x.pl line 129, at EOF

    Execution of /tmp/tmploh5pw6x.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my @ret;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n\
    \    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n \
    \   my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpml3ngms9.pl line 103, at end
    of line

    syntax error at /tmp/tmpml3ngms9.pl line 103, near "$tmp83

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpml3ngms9.pl line 142, at end
    of line

    syntax error at /tmp/tmpml3ngms9.pl line 142, at EOF

    Execution of /tmp/tmpml3ngms9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $size = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n \
    \   my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n  \
    \  my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpk1bjv79x.pl line 142,
    at end of line

    syntax error at /tmp/tmpk1bjv79x.pl line 142, at EOF

    Execution of /tmp/tmpk1bjv79x.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n \
    \   my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n \
    \   my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp81 = 0;\n    my $tmp82\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9i5vc8av.pl line 100, at end
    of line

    syntax error at /tmp/tmp9i5vc8av.pl line 100, near "$tmp82

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9i5vc8av.pl line 139, at end
    of line

    syntax error at /tmp/tmp9i5vc8av.pl line 139, at EOF

    Execution of /tmp/tmp9i5vc8av.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $temp);\n    my $len = @$arr;\n    my $max = 0;\n    foreach $i\
    \ (0 .. $len-1) {\n        $max = $max > $arr[$i] ? $max : $arr[$i];\n    }\n\
    \    foreach $i (0 .. $len-1) {\n        $j = $i;\n        $temp = $arr[$i];\n\
    \        foreach $j ($i+1 .. $len-1) {\n            $temp = $temp > $arr[$j] ?\
    \ $temp : $arr[$j];\n        }\n        push(@sorted, $temp);\n    }\n    return\
    \ @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $num_ones);\n    my $num_ones = 0;\n    foreach $i (@$arr) {\n\
    \        $num_ones = $num_ones * 2 + ($i & 1);\n    }\n    foreach $i (@$arr)\
    \ {\n        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones\
    \ * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones\
    \ = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n\
    \        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones\
    \ * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones\
    \ = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n\
    \        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones\
    \ * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones\
    \ = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n\
    \        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones\
    \ * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones\
    \ = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n\
    \        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones\
    \ * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones\
    \ = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n\
    \        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones\
    \ * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones\
    \ = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones * 2 + ($i & 1);\n\
    \        $num_ones = $num_ones * 2 + ($i & 1);\n        $num_ones = $num_ones\
    \ * 2 + ($i & 1);\n        $num_ones = \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7oed21ih.pl line 53, at end
    of line

    syntax error at /tmp/tmp7oed21ih.pl line 53, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7oed21ih.pl line 92, at end of
    line

    syntax error at /tmp/tmp7oed21ih.pl line 92, at EOF

    Execution of /tmp/tmp7oed21ih.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max = -1;\n   \
    \ my $min = 0;\n    my $temp;\n    my $cmp;\n    my $ones = 0;\n    my $dec =\
    \ 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmphd1q0k3v.pl line 62, at
    end of line

    syntax error at /tmp/tmphd1q0k3v.pl line 62, at EOF

    Execution of /tmp/tmphd1q0k3v.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max_ones\
    \ = 0;\n    my $max_dec = 0;\n    my $max_dec2 = 0;\n    my $max_dec3 = 0;\n \
    \   my $max_dec4 = 0;\n    my $max_dec5 = 0;\n    my $max_dec6 = 0;\n    my $max_dec7\
    \ = 0;\n    my $max_dec8 = 0;\n    my $max_dec9 = 0;\n    my $max_dec10 = 0;\n\
    \    my $max_dec11 = 0;\n    my $max_dec12 = 0;\n    my $max_dec13 = 0;\n    my\
    \ $max_dec14 = 0;\n    my $max_dec15 = 0;\n    my $max_dec16 = 0;\n    my $max_dec17\
    \ = 0;\n    my $max_dec18 = 0;\n    my $max_dec19 = 0;\n    my $max_dec20 = 0;\n\
    \    my $max_dec21 = 0;\n    my $max_dec22 = 0;\n    my $max_dec23 = 0;\n    my\
    \ $max_dec24 = 0;\n    my $max_dec25 = 0;\n    my $max_dec26 = 0;\n    my $max_dec27\
    \ = 0;\n    my $max_dec28 = 0;\n    my $max_dec29 = 0;\n    my $max_dec30 = 0;\n\
    \    my $max_dec31 = 0;\n    my $max_dec32 = 0;\n    my $max_dec33 = 0;\n    my\
    \ $max_dec34 = 0;\n    my $max_dec35 = 0;\n    my $max_dec36 = 0;\n    my $max_dec37\
    \ = 0;\n    my $max_dec38 = 0;\n    my $max_dec39 = 0;\n    my $max_dec40 = 0;\n\
    \    my $max_dec41 = 0;\n    my $max_dec42 = 0;\n    my $max_dec43 = 0;\n    my\
    \ $max_dec44 = 0;\n    my $max_dec45 = 0;\n    my $max_dec46 = 0;\n    my $max_dec47\
    \ = 0;\n    my $max_dec48 = 0;\n    my $max_dec49 = 0;\n    my $max_dec50 = 0;\n\
    \    my $max_dec51 = 0;\n    my $max_dec52 = 0;\n    my $max_dec53 = 0;\n    my\
    \ $max_dec54 = 0;\n    my $max_dec55 = 0;\n    my $max_dec56 = 0;\n    my $max_dec57\
    \ = 0;\n    my $max_dec58 = 0;\n    my $max_dec59 = 0;\n    my $max_dec60 = 0;\n\
    \    my $max_dec61 = 0;\n    my $max_dec62 = 0;\n    my $max_dec63 = 0;\n    my\
    \ $max_dec64 = 0;\n    my $max_dec65 = 0;\n    my $max_dec66 = 0;\n    my $max_dec67\
    \ = 0;\n    my $max_dec68 = 0;\n    my $max_dec69 = 0;\n\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpdlpx3e2h.pl line 128,
    at end of line

    syntax error at /tmp/tmpdlpx3e2h.pl line 128, at EOF

    Execution of /tmp/tmpdlpx3e2h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my\
    \ $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my\
    \ $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my\
    \ $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n  \
    \  my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n\
    \    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n\
    \    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n\
    \    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n\
    \    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n\
    \    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n\
    \    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n\
    \    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n\
    \    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n\
    \    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n\
    \    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n\
    \    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n\
    \    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n\
    \    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n\
    \    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n\
    \    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n\
    \    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n\
    \    my $tmp82 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpt2vcfj5_.pl line 100,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpt2vcfj5_.pl line 100, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpt2vcfj5_.pl line 139, at end of line\nsyntax\
    \ error at /tmp/tmpt2vcfj5_.pl line 139, at EOF\nExecution of /tmp/tmpt2vcfj5_.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $k, $n);\n    my($ones);\n    my($dec);\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpej116tgm.pl line 56, at
    end of line

    syntax error at /tmp/tmpej116tgm.pl line 56, at EOF

    Execution of /tmp/tmpej116tgm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $count =\
    \ 0;\n    my $tmp_count = 0;\n    my $tmp_count2 = 0;\n    my $tmp_count3 = 0;\n\
    \    my $tmp_count4 = 0;\n    my $tmp_count5 = 0;\n    my $tmp_count6 = 0;\n \
    \   my $tmp_count7 = 0;\n    my $tmp_count8 = 0;\n    my $tmp_count9 = 0;\n  \
    \  my $tmp_count10 = 0;\n    my $tmp_count11 = 0;\n    my $tmp_count12 = 0;\n\
    \    my $tmp_count13 = 0;\n    my $tmp_count14 = 0;\n    my $tmp_count15 = 0;\n\
    \    my $tmp_count16 = 0;\n    my $tmp_count17 = 0;\n    my $tmp_count18 = 0;\n\
    \    my $tmp_count19 = 0;\n    my $tmp_count20 = 0;\n    my $tmp_count21 = 0;\n\
    \    my $tmp_count22 = 0;\n    my $tmp_count23 = 0;\n    my $tmp_count24 = 0;\n\
    \    my $tmp_count25 = 0;\n    my $tmp_count26 = 0;\n    my $tmp_count27 = 0;\n\
    \    my $tmp_count28 = 0;\n    my $tmp_count29 = 0;\n    my $tmp_count30 = 0;\n\
    \    my $tmp_count31 = 0;\n    my $tmp_count32 = 0;\n    my $tmp_count33 = 0;\n\
    \    my $tmp_count34 = 0;\n    my $tmp_count35 = 0;\n    my $tmp_count36 = 0;\n\
    \    my $tmp_count37 = 0;\n    my $tmp_count38 = 0;\n    my $tmp_count39 = 0;\n\
    \    my $tmp_count40 = 0;\n    my $tmp_count41 = 0;\n    my $tmp_count42 = 0;\n\
    \    my $tmp_count43 = 0;\n    my $tmp_count44 = 0;\n    my $tmp_count45 = 0;\n\
    \    my $tmp_count46 = 0;\n    my $tmp_count47 = 0;\n    my $tmp_count48 = 0;\n\
    \    my $tmp_count49 = 0;\n    my $tmp_count50 = 0;\n    my $tmp_count51 = 0;\n\
    \    my $tmp_count52 = 0;\n    my $tmp_count53 = 0;\n    my $tmp_count54 = 0;\n\
    \    my $tmp_count55 = 0;\n    my $tmp_count56 = 0;\n    my $tmp_count57 = 0;\n\
    \    my $tmp_count58 = 0;\n    my $tmp_count59 = 0;\n    my $tmp_count60 = 0;\n\
    \    my $tmp_count61 = 0;\n    my $tmp_count62 = 0;\n    my $tmp_count63 = 0;\n\
    \    my $tmp_count64 = 0;\n    my $tmp_count65 = 0;\n    my $tmp_count66 = 0;\n\
    \    my $tmp_count67 = 0;\n    my $tmp_count68 = 0;\n    my $tmp_count69 = 0;\n\
    \    my $tmp_count70\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpk70ifldl.pl line 89, at end
    of line

    syntax error at /tmp/tmpk70ifldl.pl line 89, near "$tmp_count70

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpk70ifldl.pl line 128, at end
    of line

    syntax error at /tmp/tmpk70ifldl.pl line 128, at EOF

    Execution of /tmp/tmpk70ifldl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n\
    \    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n\
    \    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n\
    \    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n\
    \    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n\
    \    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n\
    \    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n\
    \    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n\
    \    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n\
    \    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n\
    \    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n\
    \    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n\
    \    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n\
    \    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n\
    \    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n\
    \    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n\
    \    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n\
    \    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n\
    \    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n\
    \    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n\
    \    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n\
    \    my $tmp83 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_sbv1nt1.pl line 140,
    at end of line

    syntax error at /tmp/tmp_sbv1nt1.pl line 140, at EOF

    Execution of /tmp/tmp_sbv1nt1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $max = 0;\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n\
    \    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n\
    \    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n\
    \    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n\
    \    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n\
    \    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n\
    \    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n\
    \    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n\
    \    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n\
    \    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n\
    \    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n\
    \    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n\
    \    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n\
    \    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n\
    \    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n\
    \    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n\
    \    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n\
    \    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n\
    \    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n\
    \    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n\
    \    my $tmp80 = 0;\n    my $tmp81\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4wpg_7p7.pl line 101, at end
    of line

    syntax error at /tmp/tmp4wpg_7p7.pl line 101, near "$tmp81

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4wpg_7p7.pl line 140, at end
    of line

    syntax error at /tmp/tmp4wpg_7p7.pl line 140, at EOF

    Execution of /tmp/tmp4wpg_7p7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my\
    \ $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp =\
    \ 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j =\
    \ 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my\
    \ $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count =\
    \ 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my\
    \ $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp =\
    \ 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j =\
    \ 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my\
    \ $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count =\
    \ 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my\
    \ $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp =\
    \ 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j =\
    \ 0;\n    my $max_temp = 0;\n    my $max_count = 0;\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmppjszsl_c.pl line 146,
    at end of line

    syntax error at /tmp/tmppjszsl_c.pl line 146, at EOF

    Execution of /tmp/tmppjszsl_c.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2jytshtl.pl line 140,
    at end of line

    syntax error at /tmp/tmp2jytshtl.pl line 140, at EOF

    Execution of /tmp/tmp2jytshtl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $max = 0;\n    my $min = 0;\n\
    \    my $tmp;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8635danb.pl line 140,
    at end of line

    syntax error at /tmp/tmp8635danb.pl line 140, at EOF

    Execution of /tmp/tmp8635danb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_bin = 0;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n\
    \    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n\
    \    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n\
    \    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n\
    \    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n\
    \    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n\
    \    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n\
    \    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n\
    \    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n\
    \    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n\
    \    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n\
    \    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n\
    \    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n\
    \    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n\
    \    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n\
    \    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n\
    \    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n\
    \    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n\
    \    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n\
    \    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n\
    \    my $tmp79 = 0;\n    my $tmp80 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8cqs9f26.pl line 139,
    at end of line

    syntax error at /tmp/tmp8cqs9f26.pl line 139, at EOF

    Execution of /tmp/tmp8cqs9f26.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my\
    \ $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my\
    \ $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my\
    \ $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n  \
    \  my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n\
    \    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n\
    \    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n\
    \    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n\
    \    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n\
    \    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n\
    \    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n\
    \    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n\
    \    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n\
    \    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n\
    \    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n\
    \    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n\
    \    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n\
    \    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n\
    \    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n\
    \    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n\
    \    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n\
    \    my $tmp82 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpt2vcfj5_.pl line 100,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpt2vcfj5_.pl line 100, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpt2vcfj5_.pl line 139, at end of line\nsyntax\
    \ error at /tmp/tmpt2vcfj5_.pl line 139, at EOF\nExecution of /tmp/tmpt2vcfj5_.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max\
    \ = -1;\n    my $min = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my\
    \ $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n\
    \    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpbiw5cexo.pl line 103,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpbiw5cexo.pl line 103, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpbiw5cexo.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmpbiw5cexo.pl line 142, at EOF\nExecution of /tmp/tmpbiw5cexo.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp;\n    my $cnt = 0;\n    my $tmp_cnt = 0;\n    my $cnt2 = 0;\n   \
    \ my $tmp_cnt2 = 0;\n    my $cnt3 = 0;\n    my $tmp_cnt3 = 0;\n    my $cnt4 =\
    \ 0;\n    my $tmp_cnt4 = 0;\n    my $cnt5 = 0;\n    my $tmp_cnt5 = 0;\n    my\
    \ $cnt6 = 0;\n    my $tmp_cnt6 = 0;\n    my $cnt7 = 0;\n    my $tmp_cnt7 = 0;\n\
    \    my $cnt8 = 0;\n    my $tmp_cnt8 = 0;\n    my $cnt9 = 0;\n    my $tmp_cnt9\
    \ = 0;\n    my $cnt10 = 0;\n    my $tmp_cnt10 = 0;\n    my $cnt11 = 0;\n    my\
    \ $tmp_cnt11 = 0;\n    my $cnt12 = 0;\n    my $tmp_cnt12 = 0;\n    my $cnt13 =\
    \ 0;\n    my $tmp_cnt13 = 0;\n    my $cnt14 = 0;\n    my $tmp_cnt14 = 0;\n   \
    \ my $cnt15 = 0;\n    my $tmp_cnt15 = 0;\n    my $cnt16 = 0;\n    my $tmp_cnt16\
    \ = 0;\n    my $cnt17 = 0;\n    my $tmp_cnt17 = 0;\n    my $cnt18 = 0;\n    my\
    \ $tmp_cnt18 = 0;\n    my $cnt19 = 0;\n    my $tmp_cnt19 = 0;\n    my $cnt20 =\
    \ 0;\n    my $tmp_cnt20 = 0;\n    my $cnt21 = 0;\n    my $tmp_cnt21 = 0;\n   \
    \ my $cnt22 = 0;\n    my $tmp_cnt22 = 0;\n    my $cnt23 = 0;\n    my $tmp_cnt23\
    \ = 0;\n    my $cnt24 = 0;\n    my $tmp_cnt24 = 0;\n    my $cnt25 = 0;\n    my\
    \ $tmp_cnt25 = 0;\n    my $cnt26 = 0;\n    my $tmp_cnt26 = 0;\n    my $cnt27 =\
    \ 0;\n    my $tmp_cnt27 = 0;\n    my $cnt28 = 0;\n    my $tmp_cnt28 = 0;\n   \
    \ my $cnt29 = 0;\n    my $tmp_cnt29 = 0;\n    my $cnt30 = 0;\n    my $tmp_cnt30\
    \ = 0;\n    my $cnt31 = 0;\n    my $tmp_cnt31 = 0;\n    my $cnt32 = 0;\n    my\
    \ $tmp_cnt32 = 0;\n    my $cnt33 = 0;\n    my $tmp_cnt33 = 0;\n    my $cnt34 =\
    \ 0;\n    my $tmp_cnt34 = 0;\n    my $cnt35 = 0;\n    my $tmp_cnt35 = 0;\n\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmplt_dda20.pl line 129,
    at end of line

    syntax error at /tmp/tmplt_dda20.pl line 129, at EOF

    Execution of /tmp/tmplt_dda20.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013458
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt = 0;\n    my $tmpcnt\
    \ = 0;\n    my $tmpcnt2 = 0;\n    my $tmpcnt3 = 0;\n    my $tmpcnt4 = 0;\n   \
    \ my $tmpcnt5 = 0;\n    my $tmpcnt6 = 0;\n    my $tmpcnt7 = 0;\n    my $tmpcnt8\
    \ = 0;\n    my $tmpcnt9 = 0;\n    my $tmpcnt10 = 0;\n    my $tmpcnt11 = 0;\n \
    \   my $tmpcnt12 = 0;\n    my $tmpcnt13 = 0;\n    my $tmpcnt14 = 0;\n    my $tmpcnt15\
    \ = 0;\n    my $tmpcnt16 = 0;\n    my $tmpcnt17 = 0;\n    my $tmpcnt18 = 0;\n\
    \    my $tmpcnt19 = 0;\n    my $tmpcnt20 = 0;\n    my $tmpcnt21 = 0;\n    my $tmpcnt22\
    \ = 0;\n    my $tmpcnt23 = 0;\n    my $tmpcnt24 = 0;\n    my $tmpcnt25 = 0;\n\
    \    my $tmpcnt26 = 0;\n    my $tmpcnt27 = 0;\n    my $tmpcnt28 = 0;\n    my $tmpcnt29\
    \ = 0;\n    my $tmpcnt30 = 0;\n    my $tmpcnt31 = 0;\n    my $tmpcnt32 = 0;\n\
    \    my $tmpcnt33 = 0;\n    my $tmpcnt34 = 0;\n    my $tmpcnt35 = 0;\n    my $tmpcnt36\
    \ = 0;\n    my $tmpcnt37 = 0;\n    my $tmpcnt38 = 0;\n    my $tmpcnt39 = 0;\n\
    \    my $tmpcnt40 = 0;\n    my $tmpcnt41 = 0;\n    my $tmpcnt42 = 0;\n    my $tmpcnt43\
    \ = 0;\n    my $tmpcnt44 = 0;\n    my $tmpcnt45 = 0;\n    my $tmpcnt46 = 0;\n\
    \    my $tmpcnt47 = 0;\n    my $tmpcnt48 = 0;\n    my $tmpcnt49 = 0;\n    my $tmpcnt50\
    \ = 0;\n    my $tmpcnt51 = 0;\n    my $tmpcnt52 = 0;\n    my $tmpcnt53 = 0;\n\
    \    my $tmpcnt54 = 0;\n    my $tmpcnt55 = 0;\n    my $tmpcnt56 = 0;\n    my $tmpcnt57\
    \ = 0;\n    my $tmpcnt58 = 0;\n    my $tmpcnt59 = 0;\n    my $tmpcnt60 = 0;\n\
    \    my $tmpcnt61 = 0;\n    my $tmpcnt62 = 0;\n    my $tmpcnt63 = 0;\n    my $tmpcnt64\
    \ = 0;\n    my $tmpcnt65 = 0;\n    my $tmpcnt66 = 0;\n    my $tmpcnt67 = 0;\n\
    \    my $tmpcnt68 = 0;\n    my $tmpcnt69 = 0;\n    my $tmpcnt70 = 0;\n    my $\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp4vixlbyu.pl line 89,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp4vixlbyu.pl line 89, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp4vixlbyu.pl line 128, at end of line\nsyntax\
    \ error at /tmp/tmp4vixlbyu.pl line 128, at EOF\nExecution of /tmp/tmp4vixlbyu.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpon5bojwp.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpon5bojwp.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpon5bojwp.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpon5bojwp.pl line 140, at EOF\nExecution of /tmp/tmpon5bojwp.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my\
    \ $min = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4\
    \ = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8\
    \ = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12\
    \ = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16\
    \ = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20\
    \ = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24\
    \ = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28\
    \ = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32\
    \ = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36\
    \ = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40\
    \ = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44\
    \ = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48\
    \ = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52\
    \ = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56\
    \ = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60\
    \ = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64\
    \ = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68\
    \ = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72\
    \ = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76\
    \ = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80\
    \ = 0;\n    my $tmp81 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpr5yu9fqn.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpr5yu9fqn.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpr5yu9fqn.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpr5yu9fqn.pl line 140, at EOF\nExecution of /tmp/tmpr5yu9fqn.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013457
