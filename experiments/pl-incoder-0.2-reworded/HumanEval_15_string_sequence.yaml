name: HumanEval_15_string_sequence
language: pl
prompt: "# Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n# >>> string_sequence(0)\n# \"0\"\n# >>> string_sequence(5)\n# \"\
  0 1 2 3 4 5\"\nsub string_sequence {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n\
  \        if(eq_deeply($candidate->(0),\"0\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\
  0 1 2 3 4 5 6 7 8 9 10\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n}\n\ntesthumaneval();"
completions: ["    my $s = '';\n    for(my $i = 0; $i <= $n; $i++) {\n        $s .=\
    \ $i;\n    }\n    return $s;\n}", "    my $s = \"\";\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        $s .= \" $i\";\n    }\n    return $s;\n}", "    my @seq;\n\
    \    my $i = 0;\n    while($i < $n) {\n        push(@seq, $i);\n        $i++;\n\
    \    }\n    return join(\" \", @seq);\n}", "    my $s = \"\";\n    for(my $i =\
    \ 0; $i <= $n; $i++) {\n        $s .= \" $i\";\n    }\n    return $s;\n}", " \
    \   my $s = \"\";\n    for(my $i = 0; $i <= $n; $i++) {\n        $s .= \" $i\"\
    ;\n    }\n    return $s;\n}", "    my @s = ();\n    my $i = 0;\n    while($i <\
    \ $n) {\n        push(@s, $i);\n        $i++;\n    }\n    return join(\" \", @s);\n\
    }", "    my @s = ();\n    my $i = 0;\n    while($i < $n) {\n        push(@s, $i++);\n\
    \    }\n    return join(\" \", @s);\n}", "    my @seq;\n    my $i = 0;\n    while($i\
    \ < $n) {\n        push(@seq, $i);\n        $i++;\n    }\n    return join(\" \"\
    , @seq);\n}", "    my $s = \"\";\n    my $i = 0;\n    while ($i < $n) {\n    \
    \    $s .= \" $i\";\n        $i++;\n    }\n    return $s;\n}", "    my @seq;\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        push(@seq, $i);\n    }\n    return\
    \ join(\" \", @seq);\n}", "    my @seq;\n    my $i = 0;\n    while($i < $n) {\n\
    \        push(@seq, $i);\n        $i++;\n    }\n    return join(\" \", @seq);\n\
    }", "    return join(\" \", map { sprintf(\"%03d\", $_) } 0 .. $n);\n}", "   \
    \ my @s = ();\n    for(my $i = 0; $i < $n; $i++) {\n        push(@s, $i);\n  \
    \  }\n    return join(\" \", @s);\n}", "    my $s = \"\";\n    for(my $i = 0;\
    \ $i <= $n; $i++) {\n        $s .= \" $i\";\n    }\n    return $s;\n}", "    my\
    \ @seq;\n    my $i = 0;\n    while($i < $n) {\n        push(@seq, $i);\n     \
    \   $i++;\n    }\n    return join(\" \", @seq);\n}", "    my @seq;\n    my $i\
    \ = 0;\n    while($i <= $n) {\n        push(@seq, $i);\n        $i++;\n    }\n\
    \    return join(\" \", @seq);\n}", "    my @s = ();\n    my $i = 0;\n    while($i\
    \ < $n) {\n        push(@s, $i);\n        $i++;\n    }\n    return join(\" \"\
    , @s);\n}", "    my $s = \"\";\n    my $i = 0;\n    while($i < $n) {\n       \
    \ $s .= \" $i\";\n        $i++;\n    }\n    return $s;\n}", "    my @seq;\n  \
    \  my $i = 0;\n    while($i < $n) {\n        push(@seq, $i);\n        $i++;\n\
    \    }\n    return join(\" \", @seq);\n}", "    my $s = \"\";\n    for(my $i =\
    \ 0; $i <= $n; $i++) {\n        $s .= \" $i\";\n    }\n    return $s;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
