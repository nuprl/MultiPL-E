name: HumanEval_152_compare
language: pl
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# >>> compare([1, 2,\
  \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare([0, 5,\
  \ 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\nsub compare {\n    my($game,\
  \ $guess) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0,\
  \ 0, 0, 0, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0,\
  \ 0, 0, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($score, $guesses) = @_;\n    my($i, $j, $diff, $diffs);\n  \
    \  \n    $diffs = 0;\n    for ($i = 0; $i < @$guesses; $i++) {\n        $diff\
    \ = 0;\n        for ($j = 0; $j < @$score; $j++) {\n            if ($guess[$i]\
    \ == $score[$j]) {\n                $diff++;\n            }\n        }\n     \
    \   $diffs += $diff;\n    }\n    \n    return $diffs;\n}", "    my($score, $correct)\
    \ = @_;\n    my($i, $j, $diff);\n    \n    my $correct = 0;\n    \n    for ($i\
    \ = 0; $i < @$game; $i++) {\n        for ($j = 0; $j < @$guess; $j++) {\n    \
    \        $diff = $$game[$i] - $$guess[$j];\n            if ($diff < 0) {\n   \
    \             $diff *= -1;\n            }\n            if ($diff == 0) {\n   \
    \             $correct++;\n            }\n        }\n    }\n    \n    my(@result)\
    \ = ();\n    \n    for ($i = 0; $i < @$guess; $i++) {\n        $result[$i] = abs($$guess[$i]\
    \ - $$score[$i]);\n    }\n    \n    return @result;\n}", "    my($score, $guesses)\
    \ = @_;\n    my($i, $j, $diff);\n    \n    # initialize return array\n    my @return\
    \ = ();\n    \n    # loop through each guess and score\n    for ($i = 0; $i <\
    \ @$guesses; $i++) {\n        for ($j = 0; $j < @$score; $j++) {\n           \
    \ # if the guess is correct, return 0\n            if ($guesses[$i] == $score[$j])\
    \ {\n                $return[$i] = 0;\n            }\n            # otherwise,\
    \ return the absolute difference between the guess and the score\n           \
    \ else {\n                $diff = $guesses[$i] - $score[$j];\n               \
    \ $return[$i] = abs($diff);\n            }\n        }\n    }\n    \n    return\
    \ @return;\n}", "    my($score, $guesses) = @_;\n    my($i, $j, $diff, $diffs);\n\
    \    my($max, $min, $diff, $diffs);\n    my($diffs);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max,$min);\n    my($maxes,$mins);\n    my($max,$min);\n    my($maxes,$mins);\n\
    \    my($max", "    my($score, $correct) = @_;\n    my($i, $j, $diff);\n    \n\
    \    my $scores = [];\n    \n    for ($i = 0; $i < @$score; $i++) {\n        $scores[$i]\
    \ = 0;\n    }\n    \n    for ($i = 0; $i < @$guess; $i++) {\n        $scores[$i]\
    \ = 0;\n    }\n    \n    for ($i = 0; $i < @$guess; $i++) {\n        for ($j =\
    \ 0; $j < @$score; $j++) {\n            if ($guess eq $score) {\n            \
    \    $scores[$j] = $scores[$i];\n            } else {\n                $diff =\
    \ $guess - $score;\n                $scores[$j] = $diff;\n            }\n    \
    \    }\n    }\n    \n    return $scores;\n}", "    my($score, $guess) = @_;\n\
    \    my(@result) = ();\n    foreach my $index (0..$#{$game}) {\n        my $diff\
    \ = $game[$index] - $guess[$index];\n        if ($diff < 0) {\n            $diff\
    \ *= -1;\n        }\n        push(@result, $diff);\n    }\n    return @result;\n\
    }", "    my($score, $guess) = @_;\n    my(@result) = ();\n    \n    foreach my\
    \ $index (0..$#$game) {\n        my $score = $game[$index];\n        my $guess\
    \ = $guess[$index];\n        \n        if ($guess == $score) {\n            push(@result,\
    \ 0);\n        }\n        else {\n            push(@result, abs($guess - $score));\n\
    \        }\n    }\n    \n    return @result;\n}", "    my($score, $guess) = @_;\n\
    \    my(@result);\n    \n    foreach my $i (0 .. $#score) {\n        my $diff\
    \ = $guess[$i] - $score[$i];\n        if ($diff < 0) {\n            $diff *= -1;\n\
    \        }\n        push(@result, $diff);\n    }\n    return @result;\n}", " \
    \   my($score, $correct) = @_;\n    my($i, $j, $diff, $diff2, $diff3, $diff4);\n\
    \    my($max) = @_;\n    \n    my $maxScore = $game->[0];\n    my $maxGuess =\
    \ $game->[0];\n    \n    for(my $i = 0; $i < @$score; $i++) {\n        $maxScore\
    \ = $game->[$i] if $game->[$i] > $maxScore;\n    }\n    for(my $i = 0; $i < @$guess;\
    \ $i++) {\n        $maxGuess = $game->[$i] if $game->[$i] > $maxGuess;\n    }\n\
    \    \n    for(my $i = 0; $i < @$score; $i++) {\n        $diff = $guess[$i] -\
    \ $score[$i];\n        $diff2 = $guess[$i] - $maxGuess;\n        $diff3 = $score[$i]\
    \ - $maxScore;\n        $diff4 = $guess[$i] - $maxGuess;\n        \n        if($diff\
    \ == 0) {\n            $correct[$i] = 0;\n        } elsif($diff2 == 0) {\n   \
    \         $correct[$i] = $diff;\n        } elsif($diff3 == 0) {\n            $correct[$i]\
    \ = $diff;\n        } elsif($diff4 == 0) {\n            $correct[$i] = $diff;\n\
    \        } else {\n            $correct[$i] = abs($diff);\n        }\n    }\n\
    \    \n    return $correct;\n}", "    my(@score) = @_;\n    my(@guess) = @_;\n\
    \    my(@results);\n    my($i, $j, $diff);\n    \n    # Initialize result array\n\
    \    for(my $i = 0; $i < @score; $i++) {\n        $results[$i] = 0;\n    }\n \
    \   \n    # Compare each guess to each score\n    for(my $i = 0; $i < @score;\
    \ $i++) {\n        for(my $j = 0; $j < @guess; $j++) {\n            $diff = $guess[$j]\
    \ - $score[$i];\n            if($diff < 0) {\n                $diff = -$diff;\n\
    \            }\n            if($diff == 0) {\n                $results[$i] +=\
    \ 0;\n            } elsif($diff > 0) {\n                $results[$i] += $diff;\n\
    \            }\n        }\n    }\n    \n    # Return results\n    return @results;\n\
    }", "    my(@score, $guess) = @_;\n    my @result;\n    my $score;\n    my $guess;\n\
    \    my $diff;\n    my $i;\n    my $j;\n    my $k;\n    my $diff;\n    my $diff2;\n\
    \    my $diff3;\n    my $diff4;\n    my $diff5;\n    my $diff6;\n    my $diff7;\n\
    \    my $diff8;\n    my $diff9;\n    my $diff10;\n    my $diff11;\n    my $diff12;\n\
    \    my $diff13;\n    my $diff14;\n    my $diff15;\n    my $diff16;\n    my $diff17;\n\
    \    my $diff18;\n    my $diff19;\n    my $diff20;\n    my $diff21;\n    my $diff22;\n\
    \    my $diff23;\n    my $diff24;\n    my $diff25;\n    my $diff26;\n    my $diff27;\n\
    \    my $diff28;\n    my $diff29;\n    my $diff30;\n    my $diff31;\n    my $diff32;\n\
    \    my $diff33;\n    my $diff34;\n    my $diff35;\n    my $diff36;\n    my $diff37;\n\
    \    my $diff38;\n    my $diff39;\n    my $diff40;\n    my $diff41;\n    my $diff42;\n\
    \    my $diff43;\n    my $diff44;\n    my $diff45;\n    my $diff46;\n    my $diff47;\n\
    \    my $diff48;\n    my $diff49;\n    my $diff50;\n    my $diff51;\n    my $diff52;\n\
    \    my $diff53;\n    my $diff54;\n    my $diff55;\n    my $diff56;\n    my $diff57;\n\
    \    my $diff58;\n    my $diff59;\n    my $diff60;\n    my $diff61;\n    my $diff62;\n\
    \    my $diff63;\n    my $diff64;\n    my $diff65;\n    my $diff66;\n    my $diff67;\n\
    \    my $diff68;\n    my $diff69;\n    my $diff70;\n    my $diff71;\n    my $diff72;\n\
    \    my $diff73;\n    my $diff74;\n    my $diff75;\n    my $diff76;\n    my $diff77;\n\
    \    my $diff78;\n    my $diff79;\n    my $diff80;\n    my $diff81;\n    my $diff",
  "    my(@score, $guess) = @_;\n    my @result;\n    my $score;\n    my $guess;\n\
    \    my $diff;\n    my $i;", "    my(@score, $score) = @_;\n    my(@diff, $diff)\
    \ = @_;\n    my $i = 0;\n    my $j = 0;\n    my $diff = 0;\n    foreach my $score\
    \ (@score) {\n        foreach my $guess (@$guess) {\n            $diff = $score\
    \ - $guess;\n            $diff = $diff > 0 ? $diff : 0;\n            $diff = $diff\
    \ < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n           \
    \ $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n\
    \            $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ?\
    \ -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n            $diff\
    \ = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n   \
    \         $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff\
    \ : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff\
    \ < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n           \
    \ $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n\
    \            $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ?\
    \ -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n            $diff\
    \ = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n   \
    \         $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff\
    \ : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff\
    \ < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n           \
    \ $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n\
    \            $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ?\
    \ -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n            $diff\
    \ = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n   \
    \         $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff\
    \ : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff\
    \ < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff : 0;\n           \
    \ $diff = $diff < 0 ? -$diff : 0;\n            $diff = $diff < 0 ? -$diff ", " \
    \   my($score, $guesses) = @_;\n    my($i, $j, $diff);\n    my(@result);\n   \
    \ \n    foreach $i (0 .. $#score) {\n        foreach $j (0 .. $#guesses) {\n \
    \           $diff = $guess[$j] - $score[$i];\n            if ($diff == 0) {\n\
    \                push(@result, 0);\n            } else {\n                push(@result,\
    \ abs($diff));\n            }\n        }\n    }\n    return @result;\n}", "  \
    \  my($score, $guesses) = @_;\n    my(@results);\n    \n    foreach my $index\
    \ (0..$#guesses) {\n        my $guess = $guesses[$index];\n        my $score =\
    \ $game->[$index];\n        \n        if ($guess == $score) {\n            push(@results,\
    \ 0);\n        }\n        else {\n            push(@results, abs($guess - $score));\n\
    \        }\n    }\n    \n    return @results;\n}", "    my($score, $guesses) =\
    \ @_;\n    my(@result);\n    \n    foreach my $index (0..$#guesses) {\n      \
    \  my $score = $game->[$index];\n        my $guess = $guesses[$index];\n     \
    \   \n        if ($guess == $score) {\n            push(@result, 0);\n       \
    \ } else {\n            push(@result, abs($guess - $score));\n        }\n    }\n\
    \    \n    return @result;\n}", "    my(@score) = @_;\n    my(@guess) = @_;\n\
    \    my(@diff) = @_;\n    \n    my $i = 0;\n    \n    foreach my $score (@score)\
    \ {\n        my $diff = 0;\n        \n        foreach my $guess (@guess) {\n \
    \           if ($guess == $score) {\n                $diff = 0;\n            }\
    \ else {\n                $diff = $guess - $score;\n            }\n          \
    \  \n            push(@diff, $diff);\n        }\n        \n        push(@diff,\
    \ $diff);\n    }\n    \n    return @diff;\n}", "    my(@score, $score) = @_;\n\
    \    my($i, $j, $diff, $diffs);\n    \n    foreach $i (0 .. $#score) {\n     \
    \   foreach $j (0 .. $#guess) {\n            $diff = $score[$i] - $guess[$j];\n\
    \            $diffs = $diffs + $diff if $diff != 0;\n        }\n    }\n    \n\
    \    return $diffs;\n}", "    my($score, $correct) = (0, 0);\n    foreach my $i\
    \ (0 .. $#{$game}) {\n        my $score = $game->[$i];\n        my $guess = $guess->[$i];\n\
    \        if ($guess == $score) {\n            $correct++;\n        }\n       \
    \ else {\n            $correct = $score - $guess;\n        }\n    }\n    return\
    \ $correct;\n}", "    my($score, $correct) = (0, 0);\n    foreach my $guess (@$guess)\
    \ {\n        my $diff = abs($guess - $game);\n        $correct++ if $diff == 0;\n\
    \        $score += $diff if $diff > 0;\n    }\n    return $score;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
