name: HumanEval_90_next_smallest
language: pl
prompt: "# You are given an array of integers.\n# Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n# Return undef if there is\
  \ no such element.\n# >>> next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest([5,\
  \ 1, 4, 3, 2])\n# 2\n# >>> next_smallest([])\n# undef\n# >>> next_smallest([1, 1])\n\
  # undef\nsub next_smallest {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4,\
  \ 3, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min = $lst->[0];\n    my $min_index = 0;\n    my $index;\n\
    \    my $found;", "    my $smallest = undef;\n    my $index = 0;\n    foreach\
    \ my $num (@$lst) {\n        if ($smallest eq undef || $num < $smallest) {\n \
    \           $smallest = $num;\n            $index = $index;\n        }\n     \
    \   $index++;\n    }\n    return $smallest if $index > 1;\n    return undef;\n\
    }", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my $i = 1;\n    my\
    \ $found;\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n       \
    \     $min = $num;\n            $min_index = $i;\n        }\n        $i++;\n \
    \   }\n    return undef unless $found;\n    return $min;\n}", "    my $min = $lst->[0];\n\
    \    my $min_index = 0;\n    my $i = 1;\n    my $found;\n    foreach my $item\
    \ (@$lst) {\n        if ($item < $min) {\n            $min = $item;\n        \
    \    $min_index = $i;\n        }\n        $i++;\n    }\n    return undef unless\
    \ $min_index;\n    return $min;\n}", "    my $min = $lst[0];\n    my $min_index\
    \ = 0;\n    my $index;\n    foreach $index (0 .. $#$lst) {\n        if ($min >\
    \ $lst[$index]) {\n            $min = $lst[$index];\n            $min_index =\
    \ $index;\n        }\n    }\n    return $min unless $min_index;\n    return $lst[$min_index\
    \ + 1];\n}", "    my $min = @$lst > 1 ? $lst->[1] : undef;\n    foreach my $i\
    \ (@$lst) {\n        if ($i < $min) {\n            $min = $i;\n        }\n   \
    \ }\n    return $min;\n}", "    my $min = $lst->[0];\n    my $min_index = 0;\n\
    \    my $index;\n    for (my $i = 1; $i < @$lst; $i++) {\n        if ($lst->[$i]\
    \ < $min) {\n            $min = $lst->[$i];\n            $min_index = $i;\n  \
    \      }\n    }\n    return undef unless $min_index;\n    return $min;\n}", " \
    \   my $min = $lst[0];\n    my $min_index = 0;\n    my $i;\n    for ($i = 1; $i\
    \ < @$lst; $i++) {\n        if ($lst[$i] < $min) {\n            $min = $lst[$i];\n\
    \            $min_index = $i;\n        }\n    }\n    return $lst[$min_index] if\
    \ $min_index;\n    return undef;\n}", "    my $min = $lst[0];\n    my $min_index\
    \ = 0;\n    my $min_value = $min;\n    my $i;\n    for ($i = 1; $i < @$lst; $i++)\
    \ {\n        if ($lst[$i] < $min_value) {\n            $min_value = $lst[$i];\n\
    \            $min_index = $i;\n        }\n    }\n    return undef if $min_index\
    \ == 0;\n    return $min_value;\n}", "    my $min = $lst[0];\n    my $min_index\
    \ = 0;\n    my $index = 0;\n    my $found;", "    my $min = $lst->[0];\n    my\
    \ $min_index = 0;\n    my $i;\n    for ($i = 1; $i < @$lst; $i++) {\n        if\
    \ ($lst->[$i] < $min) {\n            $min = $lst->[$i];\n            $min_index\
    \ = $i;\n        }\n    }\n    return $min if $min_index;\n    return undef;\n\
    }", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my $i;\n    my $found;\n\
    \    for ($i = 1; $i < @$lst; $i++) {\n        if ($lst->[$i] < $min) {\n    \
    \        $min = $lst->[$i];\n            $min_index = $i;\n        }\n    }\n\
    \    if ($min_index) {\n        $found = $min;\n    } else {\n        $found =\
    \ \"undef\";\n    }\n    return $found;\n}", "    my $min = $lst->[0];\n    my\
    \ $min_index = 0;\n    my $index;\n    foreach my $i (0 .. $#$lst) {\n       \
    \ my $val = $lst->[$i];\n        if ($val < $min) {\n            $min = $val;\n\
    \            $min_index = $i;\n        }\n    }\n    return undef unless $min_index;\n\
    \    $min_index++;\n    return $lst->[$min_index];\n}", "    my $min = $lst->[0];\n\
    \    my $min_index = 0;\n    my $i;\n    foreach $i (@$lst) {\n        if ($i\
    \ < $min) {\n            $min = $i;\n            $min_index = $i;\n        }\n\
    \    }\n    return $min unless $min_index;\n    my $min_index = $min_index - 1;\n\
    \    my $min = $lst->[$min_index];\n    return undef if $min == $lst->[0];\n \
    \   return $min;\n}", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my\
    \ $index;\n    my $found;\n    foreach my $i (@$lst) {\n        if ($i < $min)\
    \ {\n            $min = $i;\n            $min_index = $i;\n        }\n    }\n\
    \    if ($min == $lst->[0]) {\n        $min_index++;\n    }\n    foreach my $i\
    \ (@$lst) {\n        if ($i == $min) {\n            $found = 1;\n            $index\
    \ = $i;\n        }\n    }\n    return undef unless $found;\n    return $index;\n\
    }", "    my $min = $lst[0];\n    my $min_index = 0;\n    my $index;\n    my $found;\n\
    \    for (my $i = 1; $i < @$lst; $i++) {\n        if ($min > $lst[$i]) {\n   \
    \         $min = $lst[$i];\n            $min_index = $i;\n        }\n    }\n \
    \   if ($min == $lst[$min_index]) {\n        $found = 1;\n    } else {\n     \
    \   $found = 0;\n    }\n    return undef unless $found;\n    return $lst[$min_index];\n\
    }", "    my $smallest;\n    my $index;\n    for (my $i = 0; $i < @$lst; $i++)\
    \ {\n        if ($smallest) {\n            last if $smallest->[0] < $lst->[$i];\n\
    \        }\n        $smallest = $lst->[$i];\n        $index = $i;\n    }\n   \
    \ return undef unless $index;\n    return $smallest->[1];\n}", "    my $min =\
    \ $lst[0];\n    my $min_index = 0;\n    my $i;", "    my $min = $lst->[0];\n \
    \   my $min_index = 0;\n    my $min_value = $min;\n    my $i;\n    for ($i = 1;\
    \ $i < @$lst; $i++) {\n        if ($lst->[$i] < $min_value) {\n            $min_value\
    \ = $lst->[$i];\n            $min_index = $i;\n        }\n    }\n    return undef\
    \ if $min_index == 0;\n    return $lst->[$min_index];\n}", "    my $min = $lst->[0];\n\
    \    my $min_index = 0;\n    my $i = 1;\n    my $found;\n    foreach my $num (@$lst)\
    \ {\n        if ($num < $min) {\n            $min = $num;\n            $min_index\
    \ = $i;\n        }\n        $i++;\n    }\n    return undef unless $found;\n  \
    \  return $min;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
