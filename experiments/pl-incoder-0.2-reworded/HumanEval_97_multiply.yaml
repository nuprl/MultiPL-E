name: HumanEval_97_multiply
language: pl
prompt: "# Complete the function that takes two integers and returns \n# the product\
  \ of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>>\
  \ multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n\
  # 0\n# >>> multiply(14, -15)\n# 20\nsub multiply {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply;\n\
  \        if(eq_deeply($candidate->(148, 412),16)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 28),72)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2020,\
  \ 1851),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(14, -15),20)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->(76, 67),42)) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17,\
  \ 27),49)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(0, 1),0)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $product = 0;\n    \n    foreach my $digit (split(//, $a)) {\n\
    \        $product *= $digit + $b;\n    }\n    \n    return $product;\n}", "  \
    \  return $a if $b == 0;\n    return $a if $b < 0;\n    return $a * $b;\n}", " \
    \   my $result = $a % 10;\n    $result = $result * $b if $b > 0;\n    return $result;\n\
    }", "    my $product;\n    my $unit = $a % 10;\n    my $digit = $a / 10;\n   \
    \ my $remainder = $b / 10;\n    my $remainder_digit = $b / 10;\n    \n    if ($unit\
    \ != 0) {\n        $product = $unit * $digit;\n        $product *= $remainder;\n\
    \        $product *= $remainder_digit;\n    }\n    else {\n        $product =\
    \ $digit;\n        $product *= $remainder;\n        $product *= $remainder_digit;\n\
    \    }\n    return $product;\n}", "    my $result = $a % $b;\n    return $result\
    \ if $result != 0;\n    return $b;\n}", "    my $product = 0;\n    my $digits\
    \ = 0;\n    my $carry = 0;\n    \n    while ($a or $b) {\n        $product = $product\
    \ * 10 + $carry + $a % 10;\n        $carry = ($a >= 10) ? $a % 10 : 0;\n     \
    \   $a = $a / 10;\n        $b = $b / 10;\n        $digits++;\n    }\n    \n  \
    \  return $product if $digits == 0;\n    return $product if $carry > 0;\n    return\
    \ $product * -1;\n}", "    my $result = $a % $b;\n    $result *= $b // $a;\n \
    \   return $result;\n}", "    return 0 unless $a > $b;\n    return 0 unless $a\
    \ < $b;\n    my $product = 0;\n    my $remainder = $a % $b;\n    while ($remainder\
    \ != 0) {\n        $product += $remainder % 10;\n        $remainder = ($remainder\
    \ - $product * 10) % 10;\n    }\n    return $product;\n}", "    my $ret = 0;\n\
    \    my $i = 0;\n    while($i < length($a)) {\n        $ret *= $a % 10;\n    \
    \    $ret += $b / $a % 10;\n        $a /= 10;\n        $i++;\n    }\n    return\
    \ $ret;\n}", "    my $product = 0;\n    \n    # Loop through the digits of $a\
    \ and $b\n    for(my $i = 0; $i < length($a); $i++) {\n        $product = $product\
    \ * 10 + $a->[$i] - $b->[$i];\n    }\n    return $product;\n}", "    $a =~ s/^0+(?=\\\
    d)//;\n    $b =~ s/^0+(?=\\d)//;\n    return $a * $b;\n}", "    my $product =\
    \ 0;\n    \n    foreach my $digit (split(//, $a)) {\n        $product *= $digit\
    \ + $b;\n    }\n    return $product;\n}", "    $a > $b ? $a : $b;\n}", "    my\
    \ $product;\n    my $remainder;\n    my $remainder_digit;\n    my $quotient;\n\
    \    my $quotient_digit;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n\
    \    my $quotient_digit_sum;\n    my $remainder_digit_sum;\n    my $quotient_digit_sum;\n\
    \    my $remainder_digit_sum;\n    ", "    return $a if $a < 0;\n    return $b\
    \ if $b < 0;\n    return $a * $b % 10;\n}", "    my $c = $a % 10;\n    $c += $b\
    \ if $b > 0;\n    $c -= $b if $b < 0;\n    return $c;\n}", "    my $product =\
    \ 0;\n    \n    for(my $i = 0; $i < $a; $i++) {\n        $product += $b % 10;\n\
    \        $b /= 10;\n    }\n    return $product;\n}", "    my $ret = 0;\n    my\
    \ $digit;\n    my $carry = 0;\n    my $i;", "    return 0 unless $a && $b;\n \
    \   my $product = 0;\n    my $remainder = 0;\n    while ($a && $b){\n        $product\
    \ = $product * 10 + ($a % 10);\n        $remainder = $b % 10;\n        $b = $b\
    \ // 10;\n        $a = $a // 10;\n    }\n    return $product * $remainder;\n}",
  "    return 0 unless $a > $b;\n    my $product = 0;\n    my $remainder = $a % $b;\n\
    \    while ($remainder != 0) {\n        $product += $remainder;\n        $remainder\
    \ = $b - $remainder;\n    }\n    return $product;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
