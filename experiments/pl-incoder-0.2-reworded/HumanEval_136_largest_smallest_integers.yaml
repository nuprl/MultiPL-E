name: HumanEval_136_largest_smallest_integers
language: pl
prompt: "# Create a function that returns an array (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n\
  # If there is no negative or positive integers, return them as undef.\n# Examples:\n\
  # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n\
  # [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers\
  \ {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n\
  \        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 1, 3, 5, 7, 0]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([0]),[undef, undef])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6,\
  \ -4, -4, -3, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min = undef;\n    my $max = undef;\n    foreach my $x (@$lst)\
    \ {\n        if ($x < 0) {\n            $min = $x;\n        }\n        if ($x\
    \ > 0) {\n            $max = $x;\n        }\n    }\n    return ($min, $max);\n\
    }", "    my @result;\n    my $min = undef;\n    my $max = undef;\n    foreach\
    \ my $num (@$lst) {\n        if ($min == undef) {\n            $min = $num;\n\
    \        }\n        elsif ($num < $min) {\n            $min = $num;\n        }\n\
    \        if ($max == undef) {\n            $max = $num;\n        }\n        elsif\
    \ ($num > $max) {\n            $max = $num;\n        }\n    }\n    if ($min ==\
    \ undef) {\n        return ($max, undef);\n    }\n    elsif ($max == undef) {\n\
    \        return ($min, undef);\n    }\n    return ($min, $max);\n}", "    my $min;\n\
    \    my $max;\n    my $i;\n    my $j;\n    my $result;\n    my $found;\n    my\
    \ $first;\n    my $last;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n\
    \    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my\
    \ $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n\
    \    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my\
    \ $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n\
    \    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my\
    \ $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n\
    \    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my\
    \ $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n\
    \    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my\
    \ $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n\
    \    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my\
    \ $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n\
    \    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my\
    \ $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n\
    \    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my\
    \ $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n\
    \    my $max;\n    my $min;\n    my $max;", "    my @ret;\n    my $min = undef;\n\
    \    my $max = undef;\n    foreach my $num (@$lst) {\n        if ($min eq undef)\
    \ {\n            $min = $num;\n        }\n        if ($max eq undef) {\n     \
    \       $max = $num;\n        }\n        if ($num < $min) {\n            $min\
    \ = $num;\n        }\n        if ($num > $max) {\n            $max = $num;\n \
    \       }\n    }\n    if ($min eq undef) {\n        @ret = ();\n    }\n    else\
    \ {\n        @ret = ($min, $max);\n    }\n    return @ret;\n}", "    my $max =\
    \ undef;\n    my $min = undef;\n    foreach my $num (@$lst) {\n        if ($num\
    \ < 0) {\n            $max = $num;\n        } elsif ($num > 0) {\n           \
    \ $min = $num;\n        }\n    }\n    return ($max, $min);\n}", "    my $min =\
    \ undef;\n    my $max = undef;\n    foreach my $num (@$lst) {\n        if ($num\
    \ < $min) {\n            $min = $num;\n        } elsif ($num > $max) {\n     \
    \       $max = $num;\n        }\n    }\n    return ($min, $max);\n}", "    my\
    \ $max_int = undef;\n    my $min_int = undef;\n    foreach my $num (@$lst) {\n\
    \        if ($num < 0) {\n            $max_int = $num if $max_int == undef;\n\
    \            $min_int = $num if $min_int == undef;\n        } elsif ($num > 0)\
    \ {\n            $max_int = $num if $max_int == undef;\n            $min_int =\
    \ $num if $min_int == undef;\n        } else {\n            $max_int = $min_int;\n\
    \            $min_int = undef;\n        }\n    }\n    return ($max_int, $min_int);\n\
    }", "    my @result;\n    my $min = $lst[0];\n    my $max = $lst[0];\n    foreach\
    \ my $num (@$lst) {\n        if ($num < $min) {\n            $min = $num;\n  \
    \      } elsif ($num > $max) {\n            $max = $num;\n        } else {\n \
    \           push @result, $num;\n        }\n    }\n    return @result if $min\
    \ == $max;\n    return undef;\n}", "    my @result;\n    my $max;\n    my $min;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $maxi;\n    my $mini;\n    my $maxj;\n\
    \    my $minij;\n    my $maxk;\n    my $minik;\n    my $maxmax;\n    my $maxmin;\n\
    \    my $maxmaxj;\n    my $maxminj;\n    my $maxmaxk;\n    my $maxmink;\n    my\
    \ $maxmaxmax;\n    my $maxmaxmin;\n    my $maxmaxmaxj;\n    my $maxmaxminj;\n\
    \    my $maxmaxmaxk;\n    my $maxmaxmink;\n    my $maxmaxmaxmax;\n    my $maxmaxmaxmin;\n\
    \    my $maxmaxmaxmaxj;\n    my $maxmaxmaxminj;\n    my $maxmaxmaxmaxk;\n    my\
    \ $maxmaxmaxmink;\n    my $maxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmin;\n    my\
    \ $maxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxminj;\n    my $maxmaxmaxmaxmaxk;\n \
    \   my $maxmaxmaxmaxmink;\n    my $maxmaxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmaxmin;\n\
    \    my $maxmaxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxmaxminj;\n    my $maxmaxmaxmaxmaxmaxk;\n\
    \    my $maxmaxmaxmaxmaxmink;\n    my $maxmaxmaxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmaxmaxmin;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxmaxmaxminj;\n    my $maxmaxmaxmaxmaxmaxmaxk;\n\
    \    my $maxmaxmaxmaxmaxmaxmink;\n    my $maxmaxmaxmaxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmaxmaxmaxmin;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxmaxmaxmaxminj;\n    my\
    \ $maxmaxmaxmaxmaxmaxmaxmaxk;\n    my $maxmaxmaxmaxmaxmaxmaxmink;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmax;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxmin;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxj;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxminj;\n    my $maxmaxmaxmaxmax", "    my @result;\n\
    \    my $min;\n    my $max;\n    my $i;\n    my $j;\n    my $k;\n    my $maxi;\n\
    \    my $maxj;\n    my $maxk;\n    my $mini;\n    my $minj;\n    my $mink;\n \
    \   my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n\
    \    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my\
    \ $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n\
    \    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my\
    \ $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n\
    \    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my\
    \ $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n\
    \    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my\
    \ $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n\
    \    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my\
    \ $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n\
    \    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my\
    \ $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n\
    \    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my\
    \ $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my $min;\n\
    \    my $max;\n    my $min;\n    my $max;\n    my $min;\n    my $max;\n    my\
    \ $min;\n    my $max;\n    my $min", "    my @result;\n    my $max;\n    my $min;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $maxi;\n    my $mini;\n    my $maxj;\n\
    \    my $minij;\n    my $maxk;\n    my $minik;\n    my $maxmax;\n    my $maxmin;\n\
    \    my $minmax;\n    my $minmin;\n    my $maxmaxi;\n    my $maxmini;\n    my\
    \ $minmaxi;\n    my $minmini;\n    my $maxmaxj;\n    my $maxminij;\n    my $minmaxj;\n\
    \    my $minminij;\n    my $maxmaxk;\n    my $maxminik;\n    my $minmaxk;\n  \
    \  my $minminik;\n    my $maxmaxmax;\n    my $maxminmax;\n    my $minmaxmax;\n\
    \    my $minminmax;\n    my $maxmaxmin;\n    my $maxminmin;\n    my $minmaxmin;\n\
    \    my $minminmin;\n    my $maxmaxmaxi;\n    my $maxminimax;\n    my $minmaxmaxi;\n\
    \    my $minminimax;\n    my $maxmaxmini;\n    my $maxminimin;\n    my $minmaxmini;\n\
    \    my $minminimin;\n    my $maxmaxmaxj;\n    my $maxminimaxj;\n    my $minmaxmaxj;\n\
    \    my $minminimaxj;\n    my $maxmaxminj;\n    my $maxminiminj;\n    my $minmaxminj;\n\
    \    my $minminiminj;\n    my $maxmaxmaxk;\n    my $maxminimaxk;\n    my $minmaxmaxk;\n\
    \    my $minminimaxk;\n    my $maxmaxmink;\n    my $maxminimink;\n    my $minmaxmink;\n\
    \    my $minminimink;\n    my $maxmaxmax;\n    my $maxminmax;\n    my $minmaxmax;\n\
    \    my $minminmax;\n    my $maxmaxmin;\n    my $maxminmin;\n    my $minmaxmin;\n\
    \    my $minminmin;\n    my $maxmaxmaxi;\n    my $maxminimaxi;\n    my $minmaxmaxi;\n\
    \    my $minminimaxi;\n    my $maxmaxmini;\n    my $maxminimini;\n    my $minmaxmini;\n\
    \    my $minminimini;\n    my $maxmaxmaxj;\n    ", "    my @result;\n    my $min\
    \ = undef;\n    my $max = undef;\n    foreach my $num (@$lst) {\n        if ($num\
    \ < $min) {\n            $min = $num;\n        }\n        if ($num > $max) {\n\
    \            $max = $num;\n        }\n    }\n    if ($min != undef) {\n      \
    \  push @result, $min;\n    }\n    if ($max != undef) {\n        push @result,\
    \ $max;\n    }\n    return @result;\n}", "    my @result;\n    my $min;\n    my\
    \ $max;\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n         \
    \   $min = $num;\n        }\n        if ($num > $max) {\n            $max = $num;\n\
    \        }\n    }\n    if ($min == $max) {\n        return ($min, $min);\n   \
    \ }\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n            $min\
    \ = $num;\n        }\n        if ($num > $max) {\n            $max = $num;\n \
    \       }\n    }\n    return ($min, $max);\n}", "    my @ret;\n    my $max;\n\
    \    my $min;\n    my $i;\n    my $j;\n    my $k;\n    my $maxi = 0;\n    my $mini\
    \ = 0;\n    my $maxj = 0;\n    my $minij = 0;\n    my $maxk = 0;\n    my $minik\
    \ = 0;\n    foreach $i (@$lst) {\n        if ($i < 0) {\n            $max = $i;\n\
    \            $maxi = $i;\n        }\n        if ($i > 0) {\n            $min =\
    \ $i;\n            $mini = $i;\n        }\n    }\n    foreach $j (@$lst) {\n \
    \       if ($j < 0) {\n            $max = $j;\n            $maxj = $j;\n     \
    \   }\n        if ($j > 0) {\n            $min = $j;\n            $mini = $j;\n\
    \        }\n    }\n    foreach $k (@$lst) {\n        if ($k < 0) {\n         \
    \   $max = $k;\n            $maxk = $k;\n        }\n        if ($k > 0) {\n  \
    \          $min = $k;\n            $mini = $k;\n        }\n    }\n    if ($maxi\
    \ == $mini) {\n        if ($maxj == $mini) {\n            if ($maxk == $mini)\
    \ {\n                push(@ret, $max);\n                push(@ret, $min);\n  \
    \          }\n            else {\n                push(@ret, $max);\n        \
    \        push(@ret, $maxk);\n            }\n        }\n        else {\n      \
    \      push(@ret, $max);\n            push(@ret, $maxj);\n        }\n    }\n \
    \   else {\n        if ($maxk == $mini) {\n            push(@ret, $max);\n   \
    \         push(@ret, $maxi);\n        }\n        else {\n            push(@ret,\
    \ $max);\n            push(@ret, $maxk);\n        }\n    }\n    return @ret;\n\
    }", "    my @result;\n    my $largest = undef;\n    my $smallest = undef;\n  \
    \  foreach my $num (@$lst) {\n        if ($num < $smallest) {\n            $smallest\
    \ = $num;\n        } elsif ($num > $largest) {\n            $largest = $num;\n\
    \        }\n    }\n    if ($smallest != undef) {\n        push @result, $smallest;\n\
    \    }\n    if ($largest != undef) {\n        push @result, $largest;\n    }\n\
    \    return @result;\n}", "    my @result;\n    my $max;\n    my $min;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $maxpos;\n    my $minpos;\n    my $maxneg;\n\
    \    my $minneg;\n    my $maxposneg;\n    my $minposneg;\n    my $maxnegpos;\n\
    \    my $minnegpos;\n    my $maxposnegneg;\n    my $minposnegneg;\n    my $maxnegposneg;\n\
    \    my $minnegposneg;\n    my $maxposnegnegneg;\n    my $minposnegnegneg;\n \
    \   my $maxnegposnegneg;\n    my $minnegposnegneg;\n    my $maxposnegnegneg;\n\
    \    my $minnegposnegneg;\n    my $maxnegposnegneg;\n    my $minnegposnegneg;\n\
    \    my $maxposnegnegneg;\n    my $minnegposnegneg;\n    my $maxnegposnegneg;\n\
    \    my $minnegposnegneg;\n    my $maxnegposnegneg;\n    my $minnegposnegneg;\n\
    \    my $maxnegposnegneg;\n    my $minnegposnegneg;\n    my $maxnegposnegneg;\n\
    \    my $minnegposnegneg;\n    my $maxnegposnegneg;\n    my $minnegposnegneg;\n\
    \    my $maxnegposnegneg;\n    my $minnegposnegneg;\n    my $maxnegposnegneg;\n\
    \    my $minnegposnegneg;\n    my $maxnegposnegneg;\n    my $minnegposnegneg;\n\
    \    my $maxnegposnegneg;\n    my $minnegposnegneg;\n    my $maxnegposnegneg;\n\
    \    my $minnegposnegneg;\n    my $maxnegposnegneg;\n    my $minnegposnegneg;\n\
    \    my $maxnegposnegneg;\n    my $minnegposnegneg;\n    my $maxnegposnegneg;\n\
    \    my $minnegposnegneg;\n    my $maxnegposnegneg;\n    my $minnegposnegneg;\n\
    \    my $maxnegposnegneg;\n    my $minnegposnegneg;\n    my $maxnegposnegneg;\n\
    \    my $minnegposnegneg;\n    my $maxnegposnegneg;\n    my $minnegposnegneg;\n\
    \    my $maxnegpos", "    my $max_int = undef;\n    my $min_int = undef;\n   \
    \ foreach my $num (@$lst) {\n        if ($num < 0) {\n            $max_int = $num;\n\
    \        } elsif ($num > 0) {\n            $min_int = $num;\n        }\n    }\n\
    \    return ($max_int, $min_int);\n}", "    my $max = undef;\n    my $min = undef;\n\
    \    foreach my $num (@$lst) {\n        if ($num > $max) {\n            $max =\
    \ $num;\n        } elsif ($num < $min) {\n            $min = $num;\n        }\n\
    \    }\n    return ($max, $min);\n}", "    my @result;\n    my $min;\n    my $max;\n\
    \    my $i;", "    my @result;\n    my $largest = undef;\n    my $smallest = undef;\n\
    \    foreach my $num (@$lst) {\n        if ($num < 0) {\n            $largest\
    \ = $num;\n        } elsif ($num > 0) {\n            $smallest = $num;\n     \
    \   }\n    }\n    if ($largest && $smallest) {\n        push @result, $largest;\n\
    \        push @result, $smallest;\n    }\n    return @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
