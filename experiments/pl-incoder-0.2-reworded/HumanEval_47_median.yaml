name: HumanEval_47_median
language: pl
prompt: "# Return median of elements in the array l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4,\
  \ 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2) {\n        return\
    \ $l->[$m];\n    }\n    return $l->[$m-1] + $l->[$m];\n}", "    my $n = @$l;\n\
    \    my $m = $n / 2;\n    if ($n % 2) {\n        return $l->[$m];\n    }\n   \
    \ else {\n        return ($l->[$m] + $l->[$m - 1]) / 2;\n    }\n}", "    my $n\
    \ = @$l;\n    if ($n <= 1) {\n        return $l->[0];\n    }\n    my $mid = int(($n\
    \ - 1) / 2);\n    my $median;\n    if ($n % 2 == 0) {\n        $median = $l->[$mid];\n\
    \    } else {\n        $median = ($l->[$mid] + $l->[$mid + 1]) / 2;\n    }\n \
    \   return $median;\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n\
    \    if ($n % 2 == 0) {\n        $median = $l->[$m];\n    } else {\n        $median\
    \ = ($l->[$m] + $l->[$m-1]) / 2;\n    }\n    return $median;\n}", "    my $n =\
    \ @$l;\n    if ($n == 0) {\n        return 0;\n    }\n    my $median;\n    my\
    \ $median_index;\n    my $median_value;\n    my $median_index2;\n    my $median_value2;\n\
    \    my $median_index3;\n    my $median_value3;\n    my $median_index4;\n    my\
    \ $median_value4;\n    my $median_index5;\n    my $median_value5;\n    my $median_index6;\n\
    \    my $median_value6;\n    my $median_index7;\n    my $median_value7;\n    my\
    \ $median_index8;\n    my $median_value8;\n    my $median_index9;\n    my $median_value9;\n\
    \    my $median_index10;\n    my $median_value10;\n    my $median_index11;\n \
    \   my $median_value11;\n    my $median_index12;\n    my $median_value12;\n  \
    \  my $median_index13;\n    my $median_value13;\n    my $median_index14;\n   \
    \ my $median_value14;\n    my $median_index15;\n    my $median_value15;\n    my\
    \ $median_index16;\n    my $median_value16;\n    my $median_index17;\n    my $median_value17;\n\
    \    my $median_index18;\n    my $median_value18;\n    my $median_index19;\n \
    \   my $median_value19;\n    my $median_index20;\n    my $median_value20;\n  \
    \  my $median_index21;\n    my $median_value21;\n    my $median_index22;\n   \
    \ my $median_value22;\n    my $median_index23;\n    my $median_value23;\n    my\
    \ $median_index24;\n    my $median_value24;\n    my $median_index25;\n    my $median_value25;\n\
    \    my $median_index26;\n    my $median_value26;\n    my $median_index27;\n \
    \   my $median_value27;\n    my $median_index28;\n    my $median_value28;\n  \
    \  my $median_index29;\n    my $median_value29;\n    my $median_index30;\n   \
    \ my $median_value30;\n    my $median_index31;\n    my $median_value31;\n    my\
    \ $median_index32;\n    my $median_value32;\n    my $median_index33;\n    my $median_value33;\n\
    \    my $median_index34;\n    my $median_value34;\n    my $median_index35;\n \
    \   my $median_value35;\n    my $median_index36;\n    my $median_value36;\n  \
    \  my $median_index37;\n    my $median_value37;\n    my $median_index38;\n    ",
  "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2) {\n        return $l->[$m];\n\
    \    }\n    my $median;\n    my $i;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   my $j = $i + 1;\n        $median += $l->[$i] / $j;\n    }\n    return $median;\n\
    }", "    my $n = @$l;\n    if ($n == 0) {\n        return 0;\n    }\n    my $mid\
    \ = int(($n - 1) / 2);\n    my $median = $l->[$mid];\n    for my $i ($mid + 1,\
    \ $n) {\n        if ($l->[$i] < $median) {\n            $median = $l->[$i];\n\
    \        }\n    }\n    return $median;\n}", "    my $n = @$l;\n    my $m = $n\
    \ / 2;\n    if ($n % 2) {\n        return $l->[$m];\n    }\n    else {\n     \
    \   return $l->[$m-1] + $l->[$m];\n    }\n}", "    my $n = @$l;\n    my $m = $n\
    \ / 2;\n    if ($n % 2) {\n        return $l->[$m];\n    }\n    else {\n     \
    \   return $l->[$m-1] + $l->[$m];\n    }\n}", "    my $n = @$l;\n    if ($n <=\
    \ 1) {\n        return $l->[0];\n    }\n    my $mid = $n / 2;\n    my $median;\n\
    \    my $median_index;\n    my $median_value;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    for ($i = 0; $i < $n; $i++) {\n        $median_index = $i;\n      \
    \  $median_value = $l->[$median_index];\n        for ($j = $i + 1; $j < $n; $j++)\
    \ {\n            if ($l->[$j] < $median_value) {\n                $median_index\
    \ = $j;\n                $median_value = $l->[$median_index];\n            }\n\
    \        }\n        $median = $median_value;\n        for ($k = $i; $k <= $median_index;\
    \ $k++) {\n            $median = $median + $l->[$k];\n        }\n    }\n    return\
    \ $median;\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n    if\
    \ ($n % 2 == 0) {\n        $median = $l->[$m];\n    } else {\n        $median\
    \ = ($l->[$m] + $l->[$m-1]) / 2;\n    }\n    return $median;\n}", "    my $n =\
    \ @$l;\n    if ($n <= 1) {\n        return $l->[0];\n    }\n    my $mid = int(($n\
    \ - 1) / 2);\n    my $median = $l->[$mid];\n    for my $i ($mid + 1, $n) {\n \
    \       if ($l->[$i] < $median) {\n            $median = $l->[$i];\n        }\n\
    \    }\n    return $median;\n}", "    my $n = @$l;\n    if ($n == 0) {\n     \
    \   return 0;\n    }\n    my $median;\n    if ($n % 2 == 0) {\n        $median\
    \ = $l->[$n / 2 - 1];\n    }\n    else {\n        $median = $l->[$n / 2];\n  \
    \  }\n    return $median;\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    my\
    \ $median;\n    if ($n % 2) {\n        $median = $l->[$m];\n    } else {\n   \
    \     $median = ($l->[$m] + $l->[$m - 1]) / 2;\n    }\n    return $median;\n}",
  "    my $n = @$l;\n    if ($n == 0) {\n        return 0;\n    }\n    my $mid = int(($n\
    \ - 1) / 2);\n    my $median = $l->[$mid];\n    my $i = $mid;\n    while ($i <\
    \ $n) {\n        if ($l->[$i] >= $median) {\n            $median = $l->[$i];\n\
    \        }\n        $i++;\n    }\n    return $median;\n}", "    my $n = @$l;\n\
    \    if ($n <= 1) {\n        return $l->[0];\n    }\n    my $mid = int(($n - 1)\
    \ / 2);\n    my $median = $l->[$mid];\n    my $i = 1;\n    my $j = 0;\n    while\
    \ ($i < $n) {\n        my $tmp = $l->[$i];\n        if ($tmp > $median) {\n  \
    \          $median = $tmp;\n        }\n        $i++;\n    }\n    while ($j < $n)\
    \ {\n        my $tmp = $l->[$j];\n        if ($tmp < $median) {\n            $median\
    \ = $tmp;\n        }\n        $j++;\n    }\n    return $median;\n}", "    my $n\
    \ = @$l;\n    my $m = $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n     \
    \   $median = $l->[$m];\n    }\n    else {\n        $median = ($l->[$m] + $l->[$m-1])\
    \ / 2;\n    }\n    return $median;\n}", "    my $n = @$l;\n    if ($n <= 1) {\n\
    \        return $l->[0]\n    }\n    my $mid = $n / 2;\n    my $median = ($l->[$mid-1]\
    \ + $l->[$mid]) / 2;\n    return $median;\n}", "    my $n = @$l;\n    my $m =\
    \ $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n        $median = $l->[$m];\n\
    \    } else {\n        $median = ($l->[$m] + $l->[$m - 1]) / 2;\n    }\n    return\
    \ $median;\n}", "    my $n = @$l;\n    if ($n <= 1) {\n        return $l->[0];\n\
    \    }\n    my $mid = int(($n - 1) / 2);\n    my $median = $l->[$mid];\n    for\
    \ my $i ($mid + 1, $n) {\n        if ($l->[$i] < $median) {\n            $median\
    \ = $l->[$i];\n        }\n    }\n    return $median;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
