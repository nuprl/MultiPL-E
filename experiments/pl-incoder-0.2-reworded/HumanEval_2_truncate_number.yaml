name: HumanEval_2_truncate_number
language: pl
prompt: "# Given a positive floating point number, it can be decomposed into\n# and\
  \ integer part (largest integer smaller than given number) and decimals\n# (leftover\
  \ part always smaller than 1).\n# Return the decimal part of the number.\n# >>>\
  \ truncate_number(3.5)\n# 0.5\nsub truncate_number {\n    my($number) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
  \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($decimals) = 0;\n    my($integer) = 0;\n    my($remainder) =\
    \ 0;\n    my($decimal) = 0;\n    my($decimal_point) = 0;\n    my($integer) = 0;\n\
    \    my($remainder) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($decimal_point_count) = 0;\n    my($integer) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my($remainder_point)\
    \ = 0;\n    my($remainder_count) = 0;\n    my($decimal_point_count) = 0;\n   \
    \ my($remainder_count) = 0;\n    my($decimal_point) = 0;\n    my(", "    my($decimal)\
    \ = $number % 1;\n    $number -= $decimal;\n    $number /= 1;\n    return $number;\n\
    }", "    my $decimals = $number - int($number);\n    return $decimals;\n}", " \
    \   my($decimals) = 0;\n    my($integer) = 0;\n    my($remainder) = 0;", "   \
    \ my($integer_part);\n    my($decimal_part);\n    my($sign) = $number < 0 ? '-'\
    \ : '';\n    $number += 0;\n    if ($number < 1) {\n        $decimal_part = 1;\n\
    \        $integer_part = $number;\n    }\n    else {\n        $decimal_part =\
    \ int($number - int($number));\n        $integer_part = $number;\n    }\n    return\
    \ $sign . $integer_part . '.' . $decimal_part;\n}", "    my($decimals) = 0;\n\
    \    my($integer) = 0;", "    my($decimals) = 0;\n    my($integer) = $number <\
    \ 1 ? 0 : $number;\n    my($remainder) = $number < 1 ? 0 : ($number - $integer);\n\
    \    my($remainder_decimals) = $remainder < 1 ? 0 : ($remainder - $decimals);\n\
    \    my($remainder_integer) = $remainder < 1 ? 0 : $remainder;\n    my($remainder_remainder)\
    \ = $remainder < 1 ? 0 : ($remainder - $integer);\n    my($remainder_remainder_decimals)\
    \ = $remainder_remainder < 1 ? 0 : ($remainder_remainder - $decimals);\n    my($remainder_remainder_integer)\
    \ = $remainder_remainder < 1 ? 0 : $remainder_remainder;\n    my($remainder_remainder_remainder)\
    \ = $remainder_remainder < 1 ? 0 : ($remainder_remainder - $integer);\n    my($remainder_remainder_remainder_decimals)\
    \ = $remainder_remainder_remainder < 1 ? 0 : ($remainder_remainder_remainder -\
    \ $decimals);\n    my($remainder_remainder_remainder_integer) = $remainder_remainder_remainder\
    \ < 1 ? 0 : $remainder_remainder_remainder;\n    my($remainder_remainder_remainder_remainder)\
    \ = $remainder_remainder_remainder < 1 ? 0 : ($remainder_remainder_remainder -\
    \ $integer);\n    my($remainder_remainder_remainder_decimals) = $remainder_remainder_remainder\
    \ < 1 ? 0 : ($remainder_remainder_remainder - $decimals);\n    my($remainder_remainder_remainder_integer)\
    \ = $remainder_remainder_remainder < 1 ? 0 : $remainder_remainder_remainder;\n\
    \    my($remainder_remainder_remainder_remainder) = $remainder_remainder_remainder\
    \ < 1 ? 0 : ($remainder_remainder_remainder - $integer);\n    my($remainder_remainder_remainder_decimals)\
    \ = $remainder_remainder_remainder < 1 ? 0 : ($remainder_remainder_remainder -\
    \ $decimals);\n    my($remainder_remainder_remainder_integer) = $remainder_remainder_remainder\
    \ < 1 ? 0 : $remainder_remainder_remainder;\n    my($remainder_remainder_remainder_remainder)\
    \ = $remainder_remainder_remainder < 1 ? 0 : ($remainder_remainder_remainder -\
    \ $integer);\n    my($remainder_remainder_remainder_decimals) = $remainder_remainder_remainder\
    \ < 1 ? 0 : ($remainder_remainder_remainder - $decimal", "    my($integer) = $number\
    \ =~ /^(\\d+)$/;\n    my($decimal) = $number =~ /^(\\d+)(\\.\\d+)$/;\n    return\
    \ $decimal if $decimal > 1;\n    return $integer if $integer < $number;\n    return\
    \ $number;\n}", "    my $decimals = $number % 1;\n    $number -= $decimals;\n\
    \    $number /= 1;\n    return $number;\n}", "    my $decimals = $number % 1;\n\
    \    $number -= $decimals;\n    return $number if $decimals == 0;\n    return\
    \ $number / 1;\n}", "    my $decimals = $number % 1;\n    $number -= $decimals;\n\
    \    $number /= 1;\n    return $number;\n}", "    my($integer) = $number % 1;\n\
    \    my($decimal) = $number - $integer;\n    return $decimal if $decimal > 0;\n\
    \    return $integer;\n}", "    my($decimals) = 0;\n    my($integer) = $number\
    \ - int($number);\n    while ($integer != 0) {\n        $decimals++;\n       \
    \ $integer = int($integer - int($integer));\n    }\n    return $decimals;\n}",
  "    my $decimals = $number % 1;\n    $number -= $decimals;\n    $number /= 1;\n\
    \    return $number;\n}", "    my $decimals = $number % 1;\n    $number -= $decimals;\n\
    \    return $number if $decimals == 0;\n    return $number + 1;\n}", "    my($decimal)\
    \ = $number % 1;\n    $number -= $decimal;\n    return $number;\n}", "    my $decimals\
    \ = $number % 1;\n    my $integer = int($number);\n    return $decimal if $decimals\
    \ > 0;\n    return $integer;\n}", "    my $decimals = $number % 1;\n    $number\
    \ -= $decimals;\n    $number /= 1;\n    return $number;\n}", "    my($integer)\
    \ = $number % 1;\n    my($decimal) = $number - $integer;\n    return $decimal\
    \ if $decimal > 0;\n    return $integer;\n}", "    my $decimals = $number % 1;\n\
    \    $number -= $decimals;\n    $number /= 1;\n    return $number;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
