name: HumanEval_101_words_string
language: pl
prompt: "# You will be given a string of words separated by commas or spaces. Your\
  \ task is\n# to split the string into words and return an array of the words.\n\
  # For example:\n# >>> words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\",\
  \ \"name\", \"is\", \"John\"]\n# >>> words_string(\"One, two, three, four, five,\
  \ six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nsub words_string\
  \ {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_string;\n\
  \        if(eq_deeply($candidate->(\"Hi, my name is John\"),[\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->(\"One, two, three, four, five, six\"\
  ),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hi, my name\"),[\"Hi\", \"my\", \"name\"])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"One,, two, three,\
  \ four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ahmed     , gamal\"),[\"ahmed\", \"gamal\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @words = split /,/, $s;\n    return @words;\n}", "    my @words\
    \ = split /,/, $s;\n    return @words;\n}", "    my(@words) = ();\n    my($word);\n\
    \    my($i);\n    my($j);\n    my($k);\n    my($l);\n    my($m);", "    my(@words)\
    \ = ();\n    foreach my $word (split /,/, $s) {\n        push(@words, $word);\n\
    \    }\n    return @words;\n}", "    my(@words) = ();\n    foreach my $word (split(/,/,\
    \ $s)) {\n        push(@words, $word);\n    }\n    return @words;\n}", "    my(@words)\
    \ = ();\n    my($word);\n    while($s =~ /([^,]+)/) {\n        $word = $1;\n \
    \       push(@words, $word);\n    }\n    return @words;\n}", "    my(@words) =\
    \ ();\n    my($word);\n    foreach $word (split(/,/, $s)) {\n        push(@words,\
    \ $word);\n    }\n    return @words;\n}", "    my @words = split /[, ]+/, $s;\n\
    \    return @words;\n}", "    my(@words) = ();\n    my($word);\n    my($i);\n\
    \    foreach $word (split /,/, $s) {\n        push(@words, $word);\n    }\n  \
    \  return @words;\n}", "    my @words = ();\n    my @words = split /[,\\s]/, $s;\n\
    \    return @words;\n}", "    my @words = split /,/, $s;\n    return @words;\n\
    }", "    my(@words) = ();\n    my($word);\n    foreach $word (split /,/, $s) {\n\
    \        push(@words, $word);\n    }\n    return @words;\n}", "    my(@words)\
    \ = ();\n    my($word);\n    foreach $word (split /,/, $s) {\n        push(@words,\
    \ $word);\n    }\n    return @words;\n}", "    my(@words) = ();\n    my @tokens\
    \ = split /[, ]+/, $s;\n    foreach my $token (@tokens) {\n        push(@words,\
    \ $token);\n    }\n    return @words;\n}", "    my(@words) = ();\n    my($word);\n\
    \    foreach $word (split /,/, $s) {\n        push(@words, $word);\n    }\n  \
    \  return @words;\n}", "    my(@words) = ();\n    my($word);\n    my($i);\n  \
    \  my($j);\n    my($len);\n    my($word);\n    my($words);\n    my($word);\n \
    \   my($i);\n    my($j);\n    my($len);\n    my($word);\n    my($words);\n   \
    \ my($word);\n    my($i);\n    my($j);\n    my($len);\n    my($word);\n    my($words);\n\
    \    my($word);\n    my($i);\n    my($j);\n    my($len);\n    my($word);\n   \
    \ my($words);\n    my($word);\n    my($i);\n    my($j);\n    my($len);\n    my($word);\n\
    \    my($words);\n    my($word);\n    my($i);\n    my($j);\n    my($len);\n  \
    \  my($word);\n    my($words);\n    my($word);\n    my($i);\n    my($j);\n   \
    \ my($len);\n    my($word);\n    my($words);\n    my($word);\n    my($i);\n  \
    \  my($j);\n    my($len);\n    my($word);\n    my($words);\n    my($word);\n \
    \   my($i);\n    my($j);\n    my($len);\n    my($word);\n    my($words);\n   \
    \ my($word);\n    my($i);\n    my($j);\n    my($len);\n    my($word);\n    my($words);\n\
    \    my($word);\n    my($i);\n    my($j);\n    my($len);\n    my($word);\n   \
    \ my($words);\n    my($word);\n    my($i);\n    my($j);\n    my($len);\n    my($word);\n\
    \    my($words);\n    my($word);\n    my($i);\n    my($j);\n    my($len);\n  \
    \  my($word);\n    my($words);\n    my($word);\n    my($i);\n    my($j);\n   \
    \ my($len);\n    my($word);\n    my($words);\n    my($word);\n    my($i);\n  \
    \  my($j);\n    my($len);\n    my($word);\n    m", "    my @words = ();\n    my\
    \ @words = split /[, ]+/, $s;\n    return @words;\n}", "    my(@words) = ();\n\
    \    my($word);\n    foreach $word (split /,/, $s) {\n        push(@words, $word);\n\
    \    }\n    return @words;\n}", "    my @words = split /,/, $s;\n    return @words;\n\
    }", "    my(@words);\n    foreach my $word (split /,/, $s) {\n        push(@words,\
    \ $word);\n    }\n    return @words;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
