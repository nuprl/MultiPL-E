name: HumanEval_111_histogram
language: pl
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a hash\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
  # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b\
  \ c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\"\
  \ => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
  \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" =>\
  \ 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"\
  ),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\"\
  \ => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my %histogram;\n    my @letters = split(\" \", $test);\n    foreach\
    \ my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return \\\
    %histogram;\n}", "    my %histogram;\n    my @letters = split(\" \", $test);\n\
    \    my $letter;\n    my $count;\n    foreach $letter (@letters) {\n        $count\
    \ = $histogram{$letter}++;\n    }\n    return %histogram;\n}", "    my %histogram;\n\
    \    my @letters;\n    my @letters_count;\n    my @letters_count_hash;\n    my\
    \ $letter;\n    my $letter_count;\n    my $letters_count_hash_key;\n    my $letters_count_hash_value;\n\
    \    my $letters_count_hash_key_count;\n    my $letters_count_hash_value_count;\n\
    \    my $letters_count_hash_key_count_hash;\n    my $letters_count_hash_key_count_hash_value;\n\
    \    my $letters_count_hash_key_count_hash_key_count;\n    my $letters_count_hash_key_count_hash_value_count;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash;\n    my $letters_count_hash_key_count_hash_key_count_hash_value;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_key_count;\n    my $letters_count_hash_key_count_hash_key_count_hash_value_count;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_key_count_hash;\n  \
    \  my $letters_count_hash_key_count_hash_key_count_hash_key_count_hash_value;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_key_count_hash_key_count;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_key_count_hash_value_count;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_key_count_hash_key_count_hash;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_key_count_hash_value_count;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_key_count_hash_key_count_hash_value;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_key_count_hash_value_count;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_key_count_hash_value_count;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash_value_count;\n    my\
    \ $letters_count_hash_key_count_hash_value_count;\n    my $letters_count_hash_key_count_hash_value_count;\n\
    \    my $letters_count_hash_value_count;\n    my $letters_count_hash_value;\n\
    \    my $letters_count_hash;\n    my $letters_count_hash_key_count;\n    my $letters_count_hash_value_count;\n\
    \    my $letters_count_hash_key_count_hash;\n    my $letters_count_hash_key_count_hash_value;\n\
    \    my $letters_count_hash_key_count_hash_key_count;\n    my $letters_count_hash_key_count_hash_value_count;\n\
    \    my $letters_count_hash_key_count_hash_key_count_hash;\n    my $letters_count_hash_key_count_hash_key_count_",
  "    my %histogram;\n    my @letters = split //, $test;\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return \\%histogram;\n\
    }", "    my %histogram;\n    my @letters;\n    foreach my $letter (split //, $test)\
    \ {\n        my $count = $histogram{$letter};\n        $histogram{$letter} = $count\
    \ + 1;\n        push @letters, $letter;\n    }\n    foreach my $letter (@letters)\
    \ {\n        my $count = $histogram{$letter};\n        if ($count > $histogram{$letters}[0])\
    \ {\n            $histogram{$letters} = $count;\n        }\n    }\n    return\
    \ \\%histogram;\n}", "    my %histogram;\n    my @letters = split(\" \", $test);\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    foreach my $letter (sort keys %histogram) {\n        $histogram{$letter}\
    \ = $histogram{$letter} > 1 ? $histogram{$letter} : 1;\n    }\n    return \\%histogram;\n\
    }", "    my %histogram;\n    my @letters = split ' ', $test;\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return \\%histogram;\n\
    }", "    my %histogram;\n    my @letters = split /\\s+/, $test;\n    foreach my\
    \ $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return \\%histogram;\n\
    }", "    my %histogram;\n    my @letters;\n    my @counts;\n    my @letters_count;\n\
    \    foreach my $letter (split /\\s+/, $test) {\n        push @letters, $letter;\n\
    \        push @counts, 0;\n    }\n    foreach my $letter (@letters) {\n      \
    \  my $count = grep { $_ eq $letter } @counts;\n        push @letters_count, $letter,\
    \ $count;\n    }\n    foreach my $letter (@letters_count) {\n        my $count\
    \ = @{$letter[1]};\n        my $max_count = @{$letter[1]};\n        foreach my\
    \ $i (0 .. $count-1) {\n            if ($counts[$i] > $max_count) {\n        \
    \        $max_count = $counts[$i];\n            }\n        }\n        $histogram{$letter[0]}\
    \ = $max_count;\n    }\n    return \\%histogram;\n}", "    my %histogram;\n  \
    \  my @letters = split(\" \", $test);\n    foreach my $letter (@letters) {\n \
    \       $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "    my %histogram;\n\
    \    my @letters = split(\" \", $test);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "    my\
    \ %histogram;\n    my @letters = split(\" \", $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    foreach my $letter\
    \ (keys %histogram) {\n        $histogram{$letter} = $histogram{$letter} > 1 ?\
    \ $histogram{$letter} : 1;\n    }\n    return %histogram;\n}", "    my %histogram;\n\
    \    my @letters = split ' ', $test;\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "    my %histogram;\n\
    \    my @letters = split ' ', $test;\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "    my %histogram;\n\
    \    my @letters = split /\\s+/, $test;\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "    my\
    \ %histogram;\n    my @letters;\n    my @counts;\n    my @letters_count;\n   \
    \ my @letters_count_hash;\n    my $letter;\n    my $count;\n    my $letters_count_hash_key;\n\
    \    my $letters_count_hash_value;\n    my $letters_count_hash_value_key;\n  \
    \  my $letters_count_hash_value_value;\n    my $letters_count_hash_value_key2;\n\
    \    my $letters_count_hash_value_value2;\n    my $letters_count_hash_value_key3;\n\
    \    my $letters_count_hash_value_value3;\n    my $letters_count_hash_value_key4;\n\
    \    my $letters_count_hash_value_value4;\n    my $letters_count_hash_value_key5;\n\
    \    my $letters_count_hash_value_value5;\n    my $letters_count_hash_value_key6;\n\
    \    my $letters_count_hash_value_value6;\n    my $letters_count_hash_value_key7;\n\
    \    my $letters_count_hash_value_value7;\n    my $letters_count_hash_value_key8;\n\
    \    my $letters_count_hash_value_value8;\n    my $letters_count_hash_value_key9;\n\
    \    my $letters_count_hash_value_value9;\n    my $letters_count_hash_value_key10;\n\
    \    my $letters_count_hash_value_value10;\n    my $letters_count_hash_value_key11;\n\
    \    my $letters_count_hash_value_value11;\n    my $letters_count_hash_value_key12;\n\
    \    my $letters_count_hash_value_value12;\n    my $letters_count_hash_value_key13;\n\
    \    my $letters_count_hash_value_value13;\n    my $letters_count_hash_value_key14;\n\
    \    my $letters_count_hash_value_value14;\n    my $letters_count_hash_value_key15;\n\
    \    my $letters_count_hash_value_value15;\n    my $letters_count_hash_value_key16;\n\
    \    my $letters_count_hash_value_value16;\n    my $letters_count_hash_value_key17;\n\
    \    my $letters_count_hash_value_value17;\n    my $letters_count_hash_value_key18;\n\
    \    my $letters_count_hash_value_value18;\n    my $letters_count_hash_value_key19;\n\
    \    my $letters_count_hash_value_value19;\n    my $letters_count_hash_value_key20;\n\
    \    my $letters_count_hash_value_value20;\n    my $letters_count_hash_value_key21;\n\
    \    my $letters_count_hash_value_value21;\n    my $letters_count_hash_value_key22;\n\
    \    my $letters_count_hash_value_value22;\n    my $letters_count_", "    my %histogram;\n\
    \    my @letters = split(\" \", $test);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "    my\
    \ %histogram;\n    my @letters = split //, $test;\n    my $letter;\n    my $count;",
  "    my %histogram;\n    my @letters = split(\" \", $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return \\%histogram;\n\
    }", "    my %histogram;\n    my @letters;\n    my $letter;\n    my $count;"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
