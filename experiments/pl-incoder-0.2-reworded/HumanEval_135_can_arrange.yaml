name: HumanEval_135_can_arrange
language: pl
prompt: "# Create a function which returns the largest index of an element which\n\
  # is not greater than or equal to the element immediately preceding it. If\n# no\
  \ such element exists then return -1. The given array will not contain\n# duplicate\
  \ values.\n# Examples:\n# >>> can_arrange([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange([1,\
  \ 2, 3])\n# -1\nsub can_arrange {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&can_arrange;\n\
  \        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4,\
  \ 5]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 8, 5, 7, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([]),-1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $largest = -1;\n    my $index = 0;\n    foreach my $i (0 ..\
    \ $#$arr) {\n        my $val = $arr[$i];\n        if ($val > $largest) {\n   \
    \         $largest = $val;\n            $index = $i;\n        }\n    }\n    return\
    \ $index;\n}", "    my $max = -1;\n    my $maxIndex = 0;\n    my $i;\n    for\
    \ ($i = 0; $i < @$arr; $i++) {\n        if ($arr->[$i] <= $arr->[$i - 1]) {\n\
    \            $max = $arr->[$i];\n            $maxIndex = $i;\n        }\n    }\n\
    \    return $maxIndex;\n}", "    my $max = $arr->[-1];\n    my $index = 0;\n \
    \   foreach my $i (@$arr) {\n        last if $i > $max;\n        $index++;\n \
    \   }\n    return -1 if $index == 0;\n    return $index;\n}", "    my $largest\
    \ = -1;\n    my $index = 0;\n    foreach my $num (@$arr) {\n        if ($num >\
    \ $arr[$index]) {\n            $largest = $index;\n        }\n        $index++;\n\
    \    }\n    return $largest;\n}", "    my $max = $arr->[-1];\n    my $index =\
    \ 0;\n    foreach my $i (0 .. $#arr) {\n        if ($arr->[$i] <= $max) {\n  \
    \          $index = $i;\n            last;\n        }\n    }\n    return $index;\n\
    }", "    my $max = -1;\n    my $index = 0;\n    foreach my $i (@$arr) {\n    \
    \    if ($i ne $arr[$index]) {\n            $max = $index;\n        }\n      \
    \  $index++;\n    }\n    return $max;\n}", "    my $largest = -1;\n    my $index\
    \ = 0;\n    foreach my $i (0 .. $#{$arr}) {\n        my $val = $arr->[$i];\n \
    \       if ($val >= $arr->[$index]) {\n            $largest = $i;\n        }\n\
    \        $index++;\n    }\n    return $largest;\n}", "    my $largest = -1;\n\
    \    my $index = 0;\n    foreach my $i (@$arr) {\n        if ($i > $arr[$index])\
    \ {\n            $largest = $index;\n        }\n        $index++;\n    }\n   \
    \ return $largest;\n}", "    my $max = $arr->[-1];\n    my $index = $arr->[-1];\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;",
  "    my $max = -1;\n    my $maxIndex = 0;\n    my $index = 0;\n    foreach my $value\
    \ (@$arr) {\n        if ($value >= $arr[$index]) {\n            $index++;\n  \
    \      }\n        else {\n            $max = $value;\n            $maxIndex =\
    \ $index;\n        }\n    }\n    return $maxIndex;\n}", "    my $max = 0;\n  \
    \  my $index = 0;\n    foreach my $i (@$arr) {\n        if ($i > $arr[$max]) {\n\
    \            $max = $index;\n        }\n        $index++;\n    }\n    return $max;\n\
    }", "    my $max = 0;\n    my $maxidx = -1;\n    my $idx = 0;\n    foreach my\
    \ $i (@$arr) {\n        if ($i > $arr[$maxidx]) {\n            $max = $i;\n  \
    \          $maxidx = $idx;\n        }\n        $idx++;\n    }\n    return $maxidx;\n\
    }", "    my $max = 0;\n    my $maxidx = -1;\n    my $idx;\n    my $i;", "    my\
    \ $max = -1;\n    my $maxIndex = 0;\n    my $i;\n    for ($i = 0; $i < @$arr;\
    \ $i++) {\n        if ($arr->[$i] <= $arr->[$i - 1]) {\n            $max = $arr->[$i];\n\
    \            $maxIndex = $i;\n        }\n    }\n    return $maxIndex;\n}", " \
    \   my $max = $arr->[-1];\n    my $prev = $arr->[-2];\n    my $i;\n    for ($i\
    \ = 0; $i < $#arr; $i++) {\n        if ($arr->[$i] <= $prev) {\n            return\
    \ $i;\n        }\n        $prev = $arr->[$i];\n    }\n    return -1;\n}", "  \
    \  my $max = -1;\n    my $index = 0;\n    foreach my $val (@$arr) {\n        if\
    \ ($val > $arr[$index]) {\n            $max = $index;\n        }\n        $index++;\n\
    \    }\n    return $max;\n}", "    my $max = -1;\n    my $maxIndex = 0;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $maxVal;\n    my $maxCount;\n    my $maxCountIndex;\n\
    \    my $maxCountVal;\n    my $maxCountCount;\n    my $maxCountValIndex;\n   \
    \ my $maxCountValCount;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n\
    \    my $maxCountValCountIndex;\n    my $maxCountValCountIndex;\n    ", "    my\
    \ $largest = -1;\n    my $index = 0;\n    foreach my $i (0 .. $#{$arr}) {\n  \
    \      if ($arr->[$i] <= $arr->[$largest]) {\n            $largest = $i;\n   \
    \     }\n    }\n    return $largest if $largest != -1;\n    return -1;\n}", " \
    \   my $max = 0;\n    my $maxidx = -1;\n    my $i;\n    for ($i = 0; $i < @$arr;\
    \ $i++) {\n        if ($arr->[$i] <= $arr->[$i - 1]) {\n            $max = $arr->[$i];\n\
    \            $maxidx = $i;\n        }\n    }\n    return $maxidx if $maxidx >\
    \ -1;\n    return -1;\n}", "    my $max = 0;\n    my $maxidx = -1;\n    for (my\
    \ $i = 0; $i < @$arr; $i++) {\n        if ($arr->[$i] <= $arr->[$max]) {\n   \
    \         $max = $arr->[$i];\n            $maxidx = $i;\n        }\n    }\n  \
    \  return $maxidx;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
