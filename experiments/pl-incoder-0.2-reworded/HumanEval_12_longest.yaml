name: HumanEval_12_longest
language: pl
prompt: "# Out of array of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return undef in case the input\
  \ array is empty.\n# >>> longest([])\n# undef\n# >>> longest([\"a\", \"b\", \"c\"\
  ])\n# \"a\"\n# >>> longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\nsub longest {\n\
  \    my($strings) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n\
  \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"\
  z\"]),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
  abc\"]),\"zzzz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my $longest;\n    my $length = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $length) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest if defined\
    \ $longest;\n    return undef;\n}", "    my $longest = undef;\n    my $length\
    \ = 0;\n    foreach my $string (@$strings) {\n        my $len = length($string);\n\
    \        if ($len > $length) {\n            $longest = $string;\n            $length\
    \ = $len;\n        }\n    }\n    return $longest;\n}", "    my $longest = undef;\n\
    \    my $longestLength = 0;\n    foreach my $string (@$strings) {\n        my\
    \ $length = length($string);\n        if ($length > $longestLength) {\n      \
    \      $longest = $string;\n            $longestLength = $length;\n        }\n\
    \    }\n    return $longest;\n}", "    return undef unless @$strings;\n    my\
    \ $longest = undef;\n    my $length = 0;\n    foreach my $string (@$strings) {\n\
    \        my $length = length($string);\n        return undef unless $length >\
    \ $length;\n        $longest = $string if $length > length($longest);\n    }\n\
    \    return $longest;\n}", "    return undef unless @$strings;\n    my $longest\
    \ = undef;\n    my $longestLength = -1;\n    foreach my $string (@$strings) {\n\
    \        my $length = length($string);\n        if ($longestLength < $length)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest;\n}", "    my $longest;\n    my $longestLength;\n\
    \    my $longestIndex;\n    my $longestString;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $length;\n    my $stringLength;\n    my $stringIndex;\n    my $stringLengthCount;\n\
    \    my $stringIndex;\n    my $stringLengthCount;\n    my $stringLengthCountMax;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n\
    \    my $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my\
    \ $stringLengthCountMaxIndex;\n    my $stringLengthCountMaxIndex;\n    my $stringLength",
  "    my $longest = undef;\n    foreach my $string (@$strings) {\n        if (defined\
    \ $longest) {\n            last if (length($string) > length($longest));\n   \
    \     }\n        $longest = $string;\n    }\n    return $longest;\n}", "    my\
    \ $longest = undef;\n    my $length = 0;\n    foreach my $string (@$strings) {\n\
    \        $length += length($string);\n        if ($length > $longest) {\n    \
    \        $longest = $length;\n        }\n    }\n    return $longest ? $strings[$#{$strings}]\
    \ : \"undef\";\n}", "    my $longest;\n    my $longestLength;\n    foreach my\
    \ $string (@$strings) {\n        my $length = length($string);\n        if ($longestLength\
    \ < $length) {\n            $longest = $string;\n            $longestLength =\
    \ $length;\n        }\n    }\n    return $longest if defined $longest;\n    return\
    \ undef;\n}", "    my $longest = undef;\n    my $length = 0;\n    foreach my $string\
    \ (@$strings) {\n        $length += length($string);\n        if ($length > $longest)\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ?\
    \ $strings[$#{$strings}-1] : undef;\n}", "    my $longest = undef;\n    my $length\
    \ = 0;\n    foreach my $string (@$strings) {\n        my $len = length($string);\n\
    \        if ($len > $length) {\n            $longest = $string;\n            $length\
    \ = $len;\n        }\n    }\n    return $longest;\n}", "    my $longest = undef;\n\
    \    my $longestLength = 0;\n    foreach my $string (@$strings) {\n        my\
    \ $length = length($string);\n        if ($length > $longestLength) {\n      \
    \      $longest = $string;\n            $longestLength = $length;\n        }\n\
    \    }\n    return $longest;\n}", "    my $longest = undef;\n    my $longestLength\
    \ = 0;\n    foreach my $string (@$strings) {\n        my $length = length($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest;\n\
    }", "    my $longest = undef;\n    my $longestLength = 0;\n    foreach my $string\
    \ (@$strings) {\n        my $length = length($string);\n        if ($length >\
    \ $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest;\n}", "    my $longest;\n\
    \    my $first_longest;\n    my $i;\n    my $j;\n    my $k;\n    my $length;\n\
    \    my $max_length;\n    my $max_string_length;\n    my $max_string_length_counter;\n\
    \    my $max_string_length_counter_counter;\n    my $max_string_length_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter;\n    my $max_string_length_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter;\n\
    \    my $max_string_length_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_",
  "    my $longest = undef;\n    foreach my $string (@$strings) {\n        if (defined\
    \ $longest) {\n            last if length($string) > length($longest);\n     \
    \   }\n        $longest = $string;\n    }\n    return $longest;\n}", "    my $longest\
    \ = undef;\n    my $longestLength = 0;\n    foreach my $string (@$strings) {\n\
    \        my $length = length($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest;\n}", "    my $longest = undef;\n    my\
    \ $longestLength = 0;\n    foreach my $string (@$strings) {\n        my $length\
    \ = length($string);\n        if ($length > $longestLength) {\n            $longest\
    \ = $string;\n            $longestLength = $length;\n        }\n    }\n    return\
    \ $longest;\n}", "    my $longest = undef;\n    my $length = 0;\n    foreach my\
    \ $string (@$strings) {\n        my $length = length($string);\n        if ($length\
    \ > $length) {\n            $longest = $string;\n        }\n    }\n    return\
    \ $longest;\n}", "    my $longest;\n    my $length = 0;\n    foreach my $string\
    \ (@$strings) {\n        my $length = length($string);\n        if ($length >\
    \ $length) {\n            $longest = $string;\n        }\n    }\n    return $longest\
    \ if defined $longest;\n    return undef;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
