name: HumanEval_8_sum_product
language: pl
prompt: "# For a given array of integers, return an array consisting of a sum and\
  \ a product of all the integers in an array.\n# Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\n# >>> sum_product([])\n# [0, 1]\n# >>> sum_product([1,\
  \ 2, 3, 4])\n# [10, 24]\nsub sum_product {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n\
  \        if(eq_deeply($candidate->([]),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100,\
  \ 0]),[100, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->([3, 5, 7]),[15, 105])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10,\
  \ 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($sum, $product);\n    \n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n        $product *= $number;\n    }\n    \n    return\
    \ ($sum, $product);\n}", "    my($sum, $product);\n    foreach my $number (@$numbers)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ ($sum, $product);\n}", "    my $sum = 0;\n    my $product = 1;\n    foreach\
    \ my $number (@$numbers) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return ($sum, $product);\n}", "    my $sum = 0;\n    my $product =\
    \ 1;\n    foreach my $number (@$numbers) {\n        $sum += $number;\n       \
    \ $product *= $number;\n    }\n    return [$sum, $product];\n}", "    my @sum;\n\
    \    my @product;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    push(@sum, $sum);\n    push(@product, $product);\n    return ($sum, $product);\n\
    }", "    my @sum;\n    my @product;\n    my $sum = 0;\n    my $product = 1;\n\
    \    foreach my $number (@$numbers) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return ($sum, $product);\n}", "    my($sum, $product)\
    \ = (0, 1);\n    foreach my $number (@$numbers) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return ($sum, $product);\n}", '    my($sum,
    $product) = @_;', "    my $sum = 0;\n    my $product = 1;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return [$sum, $product];\n}", "    my $sum = 0;\n    my $product = 1;\n \
    \   foreach my $number (@$numbers) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return [$sum, $product];\n}", "    my $sum = 0;\n  \
    \  my $product = 1;\n    foreach my $number (@$numbers) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return [$sum, $product];\n}", "    my($sum,\
    \ $product) = (0, 1);\n    foreach my $number (@$numbers) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return ($sum, $product);\n}", "    my\
    \ $sum = 0;\n    my $product = 1;\n    foreach my $number (@$numbers) {\n    \
    \    $sum += $number;\n        $product *= $number;\n    }\n    return [$sum,\
    \ $product];\n}", "    my @sum;\n    my @product;\n    my $sum = 0;\n    my $product\
    \ = 1;\n    foreach my $number (@$numbers) {\n        $sum += $number;\n     \
    \   $product *= $number;\n    }\n    return ($sum, $product);\n}", "    my $sum\
    \ = 0;\n    my $product = 1;\n    foreach my $number (@$numbers) {\n        $sum\
    \ += $number;\n        $product *= $number;\n    }\n    return ($sum, $product);\n\
    }", "    my $sum = 0;\n    my $product = 1;\n    foreach my $number (@$numbers)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ [$sum, $product];\n}", "    my $sum = 0;\n    my $product = 1;\n    foreach\
    \ my $number (@$numbers) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return [$sum, $product];\n}", "    my($sum, $product);\n    \n   \
    \ foreach my $number (@$numbers) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    \n    return ($sum, $product);\n}", "    my @sum;\n\
    \    my @product;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return ($sum, $product);\n}", "    my @sum;\n    my @product;\n    my $sum\
    \ = 0;\n    my $product = 1;\n    foreach my $number (@$numbers) {\n        $sum\
    \ += $number;\n        $product *= $number;\n    }\n    return ($sum, $product);\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
