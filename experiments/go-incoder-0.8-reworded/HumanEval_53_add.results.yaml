language: go_test.go
name: HumanEval_53_add
results:
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\nWhen I run go test -v add_test.go,\n\
    <code>\n--- FAIL: TestAdd (0.00s)\n    calculator.go:17: expected 7, got 2\n</code>\n\
    <|/ a tags=go |>\n<| a tags=go |>\nI find that if you have multiple files that\
    \ need to be tested, then it's more convenient to put them all in the same package\
    \ and go test -v ./path/to/package. \nIn your case, if you have a main package\
    \ and two files, calculator and add_test, you can simply go test -v calculator,\
    \ and go test -v add_test.\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nIf you have 2\
    \ files with tests, each should start with package name declaration, like package\
    \ add_test.\n<|/ a tags=go |>\n<| a dscore=2 |>\nAs a complete example that illustrates\
    \ the importance of package names:\nIf your project is \nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0, 1),\
    \ expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual:\
    \ candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12\
    \ },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyiiooogh_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n`\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0, 1), expected:\
    \ 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2,\
    \ 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     {\
    \ actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9j6bzauc_test.go:16:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\nThen:\n<code>\n$ go test add_test.go\n\
    </code>\n(go test prints the full output to the terminal rather than just failing\
    \ if the test fails.)\n<|/ a tags=go dscore=1 |>\n<| a tags=go |>\nI created an\
    \ example project that uses go generate to create tests. I put it on github.\n\
    <|/ a dscore=1 |>\n<| a tags=go |>\nYou can do it in 2 steps:\n\nUse the -test\
    \ flag to run the test package as if it was a source package\nUse the -run flag\
    \ to run the test package without recompiling\n<code>\ngo test -run add_test.go\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=go |>\nJust a heads up since I just ran\
    \ into this issue myself and I thought I would give the answer.\nI noticed that\
    \ when testing a package that has dependencies to external packages such as json\
    \ or glide it took longer than usual to run the tests.\nFor example when I ran\
    \ go test I got something like this in my terminal:\n<code>\n# cd myProject/\n\
    # go test\npackage main\n    /myProject\n        /json\n        /myProject\n \
    \           /test\n                test.go:16: unexpected EOF\n</code>\nSo I added\
    \ -v to see what was happening and I saw that the test was compiling json and\
    \ glide and running go test on the actual package instead of the dependencies.\
    \ I realized that because I ran go test on the actual package instead of the dependencies\
    \ that it was taking longer than usual to run go test on my package. I added some\
    \ dependencies in to the go test command and all of a sudden it took seconds for\
    \ go test to run and I was able to run my test like normal. Hope this helps someone\
    \ else in the future.\n<|/ a dscore=0 |>\n<| c |>\nHi, the problem is that \"\
    go test -v\" does not show any output on the console and also not fails the test\
    \ in case of a failure.\n<|/ c |>\n<| a |>\nI agree with other answers here that\
    \ you should not run go tests from the package directory itself, because that\
    \ would mean that every test would always recompile all the packages mentioned\
    \ in the source code.\nI agree with other answers here that you should not run\
    \ go test from the package directory itself, because that would mean that every\
    \ test would always recompile all the packages mentioned in the source code.\n\
    If you really want to run go test from the package directory, you can do so by\
    \ specifying the package to test.\nIf your \nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq3gj8726_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0\
    \ |>\nI think using interface is better. Like this, you can have a variable of\
    \ type int, and have the value returned by the function implement the interface\
    \ without having different functions for different return types. \n<code>\npackage\
    \ main\n\nimport \"fmt\"\n\ntype IntInterface interface {\n    Add() (int, error)\n\
    }\n\ntype Int \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0, 1), expected: 1 },\n     { actual: candidate(1,\
    \ 0), expected: 1 },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual:\
    \ candidate(5, 7), expected: 12 },\n     { actual: candidate(7, 5), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqfuh1c4o_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\n<|/ q dscore=2 tags=go |>\n\
    <| a |>\nGo 1.8 removed the go tool and a number of other command-line tools.\
    \ One of the things it removed was the build command. \nIn Go 1.8, the go command\
    \ is no longer available, and instead you need to use go build, which builds your\
    \ packages. \nIf you're using the go command, your first step should be upgrading\
    \ to the latest stable version of Go. \nIf you're using a different tool (like\
    \ golint, for example) then you need to use that tool instead to build your packages.\
    \ \nIf you're trying to build your packages and can't find a command you can use,\
    \ then you're on your own. \nIf you're trying to use the go tool, your first step\
    \ should be upgrading to the latest stable version of Go. \nIf you're using a\
    \ different tool (like golint, for example) then you need to use that tool instead\
    \ to build your packages. \nIf you're trying to build your packages and can't\
    \ find a command you can use, then you're on your own. \nIf you're trying to use\
    \ the go tool, your first step should be upgrading to the latest stable version\
    \ of Go. \nIf you're using a different tool (like golint, for example) then you\
    \ need to use that tool instead to build your packages. \nIf you're trying to\
    \ build your packages and can't find a command you can use, then you're on your\
    \ own. \nIf you're trying to use the go tool, your first step should be upgrading\
    \ to the latest stable version of Go. \nIf you're using a different tool (like\
    \ golint, for example) then you need to use that tool instead to build your packages.\
    \ \nIf you're trying to build your packages and can't find a command you can use,\
    \ then you're on your own. \nIf you're trying to use the go tool, your first step\
    \ should be upgrading to the latest stable version of Go. \nIf you're using a\
    \ different tool (like golint, for example) then you need to use that tool instead\
    \ to build your packages. \nIf you're trying to build your packages and can't\
    \ find a command you can use, then you're on your own. \nIf you're trying to use\
    \ the go tool, your first step should be upgrading to the latest stable version\
    \ of Go. \nIf you're using a different tool (like golint, for example) then you\
    \ need to use that tool instead to build your packages. \nIf you're trying to\
    \ build your packages and can't find a command you can use, then you're on your\
    \ own. \nIf you're trying to use the go tool, your first step should be upgrading\
    \ to the latest stable version of Go. \nIf you're using a different tool (like\
    \ golint, for example) then you need to use that tool instead to build your packages.\
    \ \nIf you're trying to build your packages and can't find a command you can use,\
    \ then you're on your own. \nIf you're trying to use the go tool\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0,\
    \ 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual:\
    \ candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12\
    \ },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp82496b52_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\nI believe that if there are\
    \ more cases, you can easily expand these tests by adding more test cases. You\
    \ can even use unit test to ensure that the function's arguments are valid. For\
    \ example, if you want to make sure the sum is positive, you could test the case\
    \ where x == 0 and y == 0.\n<|/ a tags=unit-testing,c,python,c++ |>\n<| c |>\n\
    It isn't obvious to me that this code actually does anything that would add anything\
    \ to the function.  It just does nothing.  It is not testing a real function like\
    \ you might in unit testing.  It isn't even really a test (as in, it won't be\
    \ run when the function is changed to just add two numbers).  I like how you added\
    \ some examples of tests to show how it would be used, but I am not sure how it\
    \ adds anything to the problem.  Can you expand on this?\n<|/ c |>\n<| c |>\n\
    The idea of unit testing is that you test each function in the program by testing\
    \ it separately from other functions. So for instance, you can test `add` by testing\
    \ it by adding two numbers separately (with `add(1, 2)`). In this case, the test\
    \ will ensure that the function does what it is supposed to do, and you do not\
    \ need to test all the cases of `add` in the same unit test. Of course, this is\
    \ a very simple example. There are cases where unit testing is required, for example,\
    \ when writing a large program, where you can write many small functions that\
    \ do small things, and then you can test each one of them separately by testing\
    \ each one of them with its own unit test.\n<|/ c |>\n<| c |>\nAh!  I guess you\
    \ didn't see my point.  If you write `add(1, 2)`, then test it separately by doing\
    \ `add(1, 2)` and then `add(2, 3)`, then you can see that the first test will\
    \ pass, but the second test will fail.  If you write `add(5, 7)` then test it\
    \ separately by doing `add(5, 7)` and then `add(7, 9)`, then you see that the\
    \ first test will pass, but the second test will also pass.  So you can see that\
    \ it is *not* a unit test, because you aren't testing `add()` itself, only `add(1,\
    \ 2)` and `add(2, 3)`.  So how does adding tests help you?\n<|/ c |>\n<| c |>\n\
    Yes, I didn't see your point. I thought it might help a little since I usually\
    \ do not test the function itself but instead I test its arguments and the outcome\
    \ of the function when called with the same arguments. I did not want to overcomplicate\
    \ things with this example code. Hope it makes more sense now.\n<|/ c |>\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphu7xm6ma_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\nTest:\n<code>\npackage add_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n\n    add \"github.com/shuanghaidong/go-add/add\"\
    \n)\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0),\
    \ expected: 1 },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual:\
    \ candidate(5, 7), expected: 12 },\n     { actual: candidate(7, 5), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpueuj4bm__test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\nThe above code has two test\
    \ cases, one for adding numbers and another for multiplying numbers. This is how\
    \ I go about writing unit tests. Note that I have not implemented the multiplication\
    \ function since it was trivial to write.\nNext I created a folder called \"test\"\
    \ and I then added 2 files to this folder. One is the main file which has 3 lines\
    \ of code and the other is the file which has just the tester for the add() function.\
    \ Notice that in the main file I have imported the file which has just the tester\
    \ for the add() function and in the other file I import the main file which has\
    \ all the lines of code for the add() function. Notice that I did not import the\
    \ file which has just the tester for the add() function since that file is already\
    \ included in main.\nI then ran: go test \n<code>\ngo test add_test.go \n</code>\n\
    and I got the following output:\n<code>\nPASS\nTest results for PASS:\n  main.main.func0:\
    \ ok=1\n  main.main.func1: ok=1\nPASS\nTest results for PASS:\nPASS\n</code>\n\
    As you can see, both of the testers were passed which were exactly what I expected.\n\
    <|/ a tags=go |>\n<| c |>\nI appreciate your answer, but I also want to know is\
    \ there any way to create and call a \nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnzxt9ajv_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\nAnd this is the error:\n<code>\n\
    package main\n\nimport (\n    \"testing\"\n)\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0, 1), expected:\
    \ 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2,\
    \ 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     {\
    \ actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyink_1e8_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    Wow. I had no idea about this. Looks like a good tool for testing javascript code\
    \ I guess. But it also looks like this won't work for python code. Good stuff\
    \ though.\n<|/ c |>\n<| c |>\nIt does work but you might have to put parentheses\
    \ around a variable name since it is case sensitive.\n<|/ c |>\n<| c |>\nI used\
    \ this with a little change in the last section of the code. Instead of adding\
    \ +0 I added a dummy value that isn't in the variables and it works.\n<|/ c |>\n\
    <| c |>\nGreat tool, though it is too simple to understand how to use it for complex\
    \ code with multiple variables. I suggest https://github.com/davyj012/ast-to-bash\
    \ which handles more complex code better, IMO\n<|/ c |>\n<| c |>\nthis one is\
    \ amazing\n<|/ c |>\n<| a dscore=4 |>\nIf you need an environment for testing\
    \ your javascript, consider using NodeJS\n<|/ a tags=javascript |>\n<| c |>\n\
    It's a great alternative solution if you want to test JS code locally (not in\
    \ a browser). But it won't allow you to run any JS code (outside NodeJS shell)\
    \ on Windows (it says \"The system cannot find the file specified\").\n<|/ c |>\n\
    <| a dscore=4 |>\nUse this online tool to run Javascript codes: https://javascript.info/runner\n\
    <|/ a tags=javascript |>\n<| c |>\nThis is great. Unfortunately it's not a real\
    \ answer to the question, but it's the answer I needed. +1\n<|/ c |>\n<| c |>\n\
    This doesn't seem to work anymore. The website is unreachable and I get a 503\
    \ error.\n<|/ c |>\n<| a tags=javascript |>\nJust another option for local testing\
    \ (using nodejs) which works fine for me in most cases is this javascript runner:\n\
    http://js2node.com\nI use this all the time with Python and JavaScript (plus more)\
    \ on Ubuntu, Windows and MacOS without issues. \nThis tool has lots of options\
    \ to control how it runs, how to add command line arguments, and most importantly\
    \ it has a built-in REPL (read-evaluate-print-loop), so you don't need to install\
    \ anything else for it.\n<|/ a dscore=4 |>\n<| c |>\nVery interesting. I didn't\
    \ know this. I've used it in combination with other tools, for example \nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57pyqlc5_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=testing,go\
    \ |>\nAs I see from the Go Standard library docs:\n<code>\npackage add_test\n\n\
    import \"testing\"\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0, 1), expected: 1 },\n     { actual: candidate(1,\
    \ 0), expected: 1 },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual:\
    \ candidate(5, 7), expected: 12 },\n     { actual: candidate(7, 5), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprdyrzq91_test.go:16:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
