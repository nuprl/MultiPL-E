language: go_test.go
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // write your code here\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp56yp8zg7_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp56yp8zg7_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp56yp8zg7_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp56yp8zg7_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp56yp8zg7_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var sum int = 0\n    for _, v :=\
    \ range nums {\n        sum += v\n    }\n    var tmp []int\n    var tmp2 []int\n\
    \    for i := range nums {\n        tmp2 := tmp\n        if sum < 0 {\n      \
    \      tmp2 = append(tmp2, nums[i])\n        } else {\n            tmp2 = append(tmp2,\
    \ nums[len(nums)-i-1])\n        }\n        if sum == 0 {\n            tmp = tmp2\n\
    \            continue\n        }\n        if sum < 0 {\n            tmp = tmp2\n\
    \        } else {\n            tmp = tmp2\n        }\n    }\n    return tmp\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3jbe16g6_test.go:23:9: tmp2 declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sums := map[int]int{}\n    for _,\
    \ num := range nums {\n        sums[num] = sums[num]+1\n    }\n    sortedNums\
    \ := make([]int, len(sums))\n    for i, sum := range sums {\n        sortedNums[i]\
    \ = nums[sum]\n    }\n    return sortedNums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [11] with length 5 [recovered]\n\tpanic: runtime error: index out of\
    \ range [11] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513980,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513980, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmpytcylgnt_test.go:24\n\
    command-line-arguments_test.TestOrder_By_Points(0xc0000d4680?)\n\t/tmp/tmpytcylgnt_test.go:36\
    \ +0x11ba\ntesting.tRunner(0xc0000d4680, 0x5292a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    sum := 0\n    for _, v := range nums {\n        if v != 0 {\n           \
    \ sum += v\n        }\n    }\n    result := make([]int, 0, len(nums))\n    index\
    \ := 0\n    for _, v := range nums {\n        if v != 0 {\n            sum +=\
    \ v\n            if sum > 0 {\n                index++\n            }\n      \
    \  }\n        if sum == 0 {\n            break\n        }\n    }\n    for index,\
    \ v := range nums {\n        result[index] = v\n    }\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponctku51_test.go:25:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // sort the list according to the\
    \ sum of their digits\n    sums := make([]int, len(nums))\n    for i := range\
    \ sums {\n        sums[i] = addDigits(nums[i])\n    }\n    sort.Ints(sums)\n\n\
    \    // now re-order the list according to the original index\n    var result\
    \ []int\n    for i, sum := range sums {\n        j := i\n        for ; j < len(sums);\
    \ j++ {\n            if sums[j] > sum {\n                break\n            }\n\
    \        }\n        result = append(result, nums[j])\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp04mgjmcb_test.go:21:19: undefined: addDigits

    /tmp/tmp04mgjmcb_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sums := make([]int, len(nums))\n\
    \    for i, s := range nums {\n        sums[i] = s\n    }\n    sort.Ints(sums)\n\
    \    sort.Ints(nums)\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9zbzzmt2_test.go:22:5: undefined: sort

    /tmp/tmp9zbzzmt2_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    points := make([]int, len(nums))\n\
    \    sum := 0\n    for _, n := range nums {\n        sum += n\n        points[len(points)-1]\
    \ = n\n    }\n\n    sorted_points := make([]int, len(points))\n    sorted_points\
    \ := points[:len(points)-1]\n\n    for i := range points {\n        sorted_points[i]\
    \ = sorted_points[len(points)-1] + points[i]\n    }\n    return sorted_points\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplc2koum5_test.go:26:19: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    count := map[int]int{}\n    for\
    \ _, i := range nums {\n        n := int(i)\n        if count[n] == 0 {\n    \
    \        count[n] = 1\n        } else {\n            count[n]++\n        }\n \
    \   }\n    result := make([]int, 0, len(nums))\n    for i := 0; i < len(nums);\
    \ i++ {\n        if count[i] > 0 {\n            result = append(result, i)\n \
    \           count[i]--\n        }\n    }\n    return append(result, nums...)\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpolw1mo7v_test.go:55: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=1) %!s(int=11)\
    \ %!s(int=-1) %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpolw1mo7v_test.go:55: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=1234) %!s(int=423)\
    \ %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423) %!s(int=53) %!s(int=6)\
    \ %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0) %!s(int=46)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpolw1mo7v_test.go:55:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpolw1mo7v_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpolw1mo7v_test.go:55: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=4) %!s(int=6) %!s(int=0) %!s(int=6) %!s(int=6) %!s(int=-76) %!s(int=-21)\
    \ %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Your code here\n    s := make([]int,\
    \ len(nums))\n    for i, num := range nums {\n        s[i] = int(num / 10)\n \
    \       num = num % 10\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(s)))\n\
    \    return s\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpptjkzv1y_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    var sum_digits\
    \ map[int]int\n    sum_digits = make(map[int]int)\n    for _, v := range nums\
    \ {\n        sum_digits[v]++\n    }\n    for _, v := range sum_digits {\n    \
    \    result = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqy1foy9_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Code goes here\n    list := make([]int,\
    \ len(nums))\n    result := make([]int, len(nums))\n\n    for i, n := range nums\
    \ {\n        fmt.Println(n)\n        list[i] = n\n    }\n    sort.Ints(list)\n\
    \    for i, n := range list {\n        result[i] = n\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoknatnhe_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    k := 0\n    sum := 0\n    for _,\
    \ n := range nums {\n        sum += n\n        nums[k] = n\n        k++\n    }\n\
    \    switch {\n    case sum >= 0:\n        for k, v := range nums {\n        \
    \    if sum == 0 {\n                return nums[:k]\n            }\n         \
    \   d := sum / 10\n            sum -= d * 10\n            if d == 0 {\n      \
    \          return nums[:k]\n            }\n            if v < 0 {\n          \
    \      return nums[:k]\n            }\n            if v > 0 {\n              \
    \  return nums[:k+1]\n            }\n        }\n        return nums\n\n    case\
    \ sum < 0:\n        for k, v := range nums {\n            if sum == 0 {\n    \
    \            return nums[:k]\n            }\n            d := sum / 10\n     \
    \       sum -= d * 10\n            if d == 0 {\n                return nums[:k]\n\
    \            }\n            if v > 0 {\n                return nums[:k+1]\n  \
    \          }\n        }\n        return nums\n    }\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2q0y6bdj_test.go:61:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sum_of_digits := make([]int, len(nums))\n\
    \    for i, d := range nums {\n        sum_of_digits[i] = int(math.Ceil(math.Log10(float64(d))))\n\
    \    }\n    return sort_by_digits(sum_of_digits, nums)\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpawe92aup_test.go:20:32: undefined: math

    /tmp/tmpawe92aup_test.go:22:12: undefined: sort_by_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // TODO: Write your solution here\n\
    \    sort.Ints(nums)\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoo6m86db_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Sort(BySum(nums))\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6tg055fm_test.go:18:5: undefined: sort

    /tmp/tmp6tg055fm_test.go:18:15: undefined: BySum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074408
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    s := 0\n    sort.Ints(nums)\n  \
    \  for _, v := range nums {\n        s += v\n    }\n    return nums[s:]\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3stec311_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) < 1 {\n        return\
    \ nums\n    }\n    // Create map\n    m := make(map[int]bool)\n    for _, v :=\
    \ range nums {\n        m[v] = true\n    }\n    numbers := make([]int, 0, len(m))\n\
    \    for k := range m {\n        numbers = append(numbers, k)\n    }\n    // Sort\
    \ numbers\n    sort.Ints(numbers)\n    // Iterate and add numbers\n    i := 0\n\
    \    for _, v := range numbers {\n        // If previous sum is not same with\
    \ current one, add it\n        // to result list\n        if i < len(nums)-1 &&\
    \ !m[nums[i]]+m[nums[i+1]] {\n            numbers = append(numbers, v)\n     \
    \       i += 2\n            continue\n        }\n        // If current sum is\
    \ same with previous one, sort them by\n        // their index\n        if v ==\
    \ nums[i] {\n            numbers = append(numbers, v)\n        } else {\n    \
    \        numbers = append(numbers, i+1)\n            numbers = append(numbers,\
    \ v)\n        }\n    }\n    return numbers\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytv1td99_test.go:31:5: undefined: sort

    /tmp/tmpytv1td99_test.go:37:31: invalid operation: operator + not defined on !m[nums[i]]
    (value of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Code goes here\n    res := make([]int,\
    \ 0)\n    for i, x := range nums {\n        sum := 0\n        for _, v := range\
    \ strconv.Itoa(int(nums[i])) {\n            sum += int(v)\n        }\n       \
    \ if sum > 0 {\n            sort.Ints(nums[i:])\n            res = append(res,\
    \ nums[i])\n        }\n    }\n    return res\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjp4067hf_test.go:20:12: x declared but not used

    /tmp/tmpjp4067hf_test.go:22:27: undefined: strconv

    /tmp/tmpjp4067hf_test.go:26:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    result :=\
    \ make([]int, 0, len(nums))\n    result := append(result, nums...)\n    for i\
    \ := 0; i < len(nums); i++ {\n        index := 0\n        for j < (len(nums) -\
    \ i); j++ {\n            if nums[j]+nums[j+1] <= 0 {\n                break\n\
    \            }\n            index++\n        }\n        if index != 0 {\n    \
    \        result := append(result, nums[i:i+index])\n        }\n    }\n    for\
    \ i := 0; i < len(result); i++ {\n        for j := 0; j < len(result[i]); j++\
    \ {\n            result[i][j]-=10\n        }\n    }\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9iay20_t_test.go:23:34: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var res []int\n    var temp int\n\
    \    for _, v := range nums {\n        if temp > v {\n            res = []int{temp,\
    \ v}\n        } else {\n            res = append(res, v)\n        }\n        temp\
    \ += v\n    }\n    return res\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpfucebx1i_test.go:49: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=0) %!s(int=-12)]'\n   \
    \ --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n        tmpfucebx1i_test.go:49:\
    \ expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423)\
    \ %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46)\
    \ %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=6725) %!s(int=46)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpfucebx1i_test.go:49:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=55) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpfucebx1i_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=55)\
    \ %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n     \
    \   tmpfucebx1i_test.go:49: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4)\
    \ %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=12) %!s(int=-76) %!s(int=-21)\
    \ %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \n    sum := 0\n    for i, num := range nums {\n        sum += num\n        result[i]\
    \ = num\n    }\n\n    sort.Ints(result)\n\n    for i := 0; i < len(result); i++\
    \ {\n        result[i] = nums[sum-result[i]]\n    }\n\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hzqhkq9_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    for _, num\
    \ := range nums {\n        // Add first number with sum = 0\n        result :=\
    \ append(result,num)\n        // If last number is smaller than first one, skip\
    \ this one\n        if num < 0 {\n            continue\n        }\n        sum,\
    \ i := sum_digits(num)\n        // If sum is not equal to zero, add number with\
    \ sum into result list\n        if sum != 0 {\n            result = append(result,num)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq3v157pl_test.go:26:19: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    arr := make([]int, len(nums))\n\
    \    for _, v := range nums {\n        arr[v] = true\n    }\n    sum := 0\n  \
    \  for i := 0; i < len(arr); i++ {\n        if arr[i] {\n            sum += i\n\
    \        }\n    }\n    sorted := make([]int, 0, sum)\n    for _, v := range arr\
    \ {\n        if v {\n            sorted = append(sorted, v)\n        }\n    }\n\
    \    return sorted\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ivyz33b_test.go:20:18: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmp0ivyz33b_test.go:24:12: non-boolean condition in if statement

    /tmp/tmp0ivyz33b_test.go:30:12: non-boolean condition in if statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here\n    if\
    \ nums == nil {\n        nums = []int{}\n    }\n    if len(nums) == 0 {\n    \
    \    return nums\n    }\n    m := map[int]int{}\n    for _, n := range nums {\n\
    \        digits, _ := strconv.Atoi(string(n))\n        if _, ok := m[digits];\
    \ !ok {\n            m[digits] = n\n        } else {\n            for k := range\
    \ m {\n                if k > digits {\n                    m[k] = m[digits]\n\
    \                } else {\n                    m[k] = k\n                }\n \
    \           }\n        }\n    }\n    result := make([]int, 0, len(nums))\n   \
    \ for _, n := range m {\n        result = append(result, n)\n    }\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyflxjtd8_test.go:27:22: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var res []int\n    var i int\n \
    \   for _, num := range nums {\n        for i = 0; i < len(res); i++ {\n     \
    \       if num+res[i] > num {\n                temp = res[i]\n               \
    \ res[i] = num\n                num = temp\n            }\n        }\n       \
    \ if num != 0 {\n            res = append(res, num)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6z8plt_9_test.go:23:17: undefined: temp

    /tmp/tmp6z8plt_9_test.go:25:23: undefined: temp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    nums = nums[:]\n    var result []int\n\
    \    var index = 0\n    var sum, cur int\n\n    // Use a for loop because we cannot\
    \ use sort.\n    // And it's more intuitive.\n    for _, n := range nums {\n \
    \       cur = n\n        sum += cur\n        if sum > 0 {\n            // The\
    \ sum of cur's digits are greater than 0.\n            // So we push cur to result\
    \ list.\n            result = append(result, cur)\n        } else {\n        \
    \    // The sum of cur's digits are less than 0.\n            // So we insert\
    \ cur in result list at index.\n            result = append(result, result[index])\n\
    \            index++\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmpurolbzvg_test.go:35\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmpurolbzvg_test.go:54\
    \ +0x10e9\ntesting.tRunner(0xc000199040, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074644
- exit_code: null
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    n := len(nums)\n    ans := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        s := nums[i]\n        if s == 0 ||\
    \ s == 1 {\n            ans[i] = s\n            continue\n        }\n\n      \
    \  n := 0\n        dum := s\n        for {\n            n += 1\n            dum\
    \ /= 10\n            if (dum*10) == s {\n                ans[i] = s\n        \
    \        break\n            }\n        }\n    }\n    k := 0\n    for i := 0; i\
    \ < n; i++ {\n        s := ans[i]\n        for j := k; j >= 0; j-- {\n       \
    \     if (s == ans[j]) {\n                ans[j], ans[k] = ans[k], s\n       \
    \     }\n        }\n        k++\n    }\n    return ans\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074656
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Initialize min and max sum to\
    \ 0.\n    var minSum, maxSum int = 0, 0\n\n    // Initialize a map to record the\
    \ index of each element in\n    // nums.\n    var indexes map[int] = map[int]int{}\n\
    \n    // Iterate over the elements in nums, accumulating the sum\n    // of their\
    \ digits.\n    for i, v := range nums {\n        sum += v\n        if sum < 0\
    \ {\n            sum = -sum\n        }\n\n        // If the current sum is smaller\
    \ than the min sum so far,\n        // update min sum and index for this element.\n\
    \        if sum < minSum {\n            minSum = sum\n            indexes.[i]\
    \ = i\n        }\n\n        // If the current sum is larger than the max sum so\
    \ far,\n        // update max sum and index for this element.\n        if sum\
    \ > maxSum {\n            maxSum = sum\n            indexes.[i] = i\n        }\n\
    \    }\n\n    // Now return the indices of the sorted nums.\n    var result []int\
    \ = []int{}\n    for _, v := range indexes {\n        result = append(result,\
    \ v)\n    }\n\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp537stac2_test.go:23:26: expected type, found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    numsSorted := make([]int, len(nums))\n\
    \    // First sort all numbers by their sum\n    for idx, n := range nums {\n\
    \        // Initialize sum\n        sum := 0\n        // Iterate each number in\
    \ nums\n        for i := 0; i < len(n); i++ {\n            // Add current number\
    \ i to the sum\n            sum += int(n[i]) // PATCH numsSorted += append(numsSorted,\
    \ int(n[i])) // PATCH numsSorted = append(numsSorted, int(n[i]))\n        }\n\
    \        // If there are more than one number with sum equals zero\n        //\
    \ then choose the number with smallest index in the original list\n        //\
    \ ex. nums = [1, -1, 0, -1, -1]\n        // numsSorted = [-1, -1, 0, -1, 1]\n\
    \        // idx = 0 -> idx = 0 -> numsSorted = 0 -> numsSorted = []int{}\n   \
    \     // idx = 1 -> idx = 1 -> numsSorted = [1] -> numsSorted = []int{1}\n   \
    \     if sum == 0 {\n            numsSorted[idx] = -1\n        } else {\n    \
    \        numsSorted[idx] = n\n        }\n    }\n    // Then sort by original list\
    \ index\n    for idx := 0; idx < len(nums); idx++ {\n        numsSorted[idx] =\
    \ nums[idx]\n    }\n    // Return numsSorted\n    return numsSorted\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsnnnt_61_test.go:24:29: invalid argument: n (variable of type int) for
    len

    /tmp/tmpsnnnt_61_test.go:26:25: invalid operation: cannot index n (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here\n    pointsOfDigit\
    \ := make(map[int]int)\n    for _, num := range nums {\n        if pointsOfDigit[num]\
    \ == 0 {\n            pointsOfDigit[num] = len(num)\n        }\n    }\n    sort.Ints(nums)\n\
    \    result := make([]int, 0, len(nums))\n    for i, num := range nums {\n   \
    \     point := pointsOfDigit[num]\n        for {\n            point, num = point,\
    \ num%point\n            if num == 0 {\n                break\n            }\n\
    \        }\n        result = append(result, num)\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnpjx8on_test.go:22:38: invalid argument: num (variable of type int) for
    len

    /tmp/tmpxnpjx8on_test.go:25:5: undefined: sort

    /tmp/tmpxnpjx8on_test.go:27:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    sums := make(map[int]int, len(nums))\n    for idx, n := range\
    \ nums {\n        sums[n] += idx\n    }\n    sort.Ints(nums)\n    result := make([]int,\
    \ 0, len(nums))\n    for _, idx := range nums {\n        result = append(result,\
    \ idx)\n    }\n    for _, sum := range sums {\n        result = append(result,\
    \ sum)\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmsyu5kh3_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    points := make(map[int]int)\n  \
    \  for _, num := range nums {\n        n, ok := points[num / 10]\n        if !ok\
    \ {\n            n = 0\n        }\n        points = map[int]int{\n           \
    \ num / 10 + n + 1: num,\n        }\n    }\n    result := make([]int, 0, len(points))\n\
    \    for _, num := range nums {\n        n := points[num]\n        result = append(result,\
    \ num)\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6odi932g_test.go:30:9: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n\n    sums := map[int]int{}\n    for _, num := range nums {\n \
    \       sum += num\n        if sums[sum] == 0 {\n            sums[sum] = 1\n \
    \       } else {\n            sums[sum]++\n        }\n    }\n    for key, _ :=\
    \ range sums {\n        nums = append(nums, key)\n    }\n    return nums\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ajnc3ed_test.go:24:9: undefined: sum

    /tmp/tmp5ajnc3ed_test.go:25:17: undefined: sum

    /tmp/tmp5ajnc3ed_test.go:26:18: undefined: sum

    /tmp/tmp5ajnc3ed_test.go:28:18: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    m := map[int]int{}\n    for _, i\
    \ := range nums {\n        n, ok := m[i]\n        if !ok {\n            m[i] =\
    \ n\n        } else {\n            if n > i {\n                return nums[:i+1]\n\
    \            }\n        }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp1rbi2003_test.go:50: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp1rbi2003_test.go:50: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp1rbi2003_test.go:50: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp1rbi2003_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp1rbi2003_test.go:50: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := []int{}\n    digits :=\
    \ make([]int, len(nums))\n    for i := 0; i < len(nums); i++ {\n        digits[i]\
    \ = nums[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(digits)))\n    for\
    \ i := 0; i < len(digits); i++ {\n        result = append(result, digits[i])\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4b0tdnzq_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sum := 0\n    // Go through each\
    \ digit and add the digit to our sum.\n    for _, i := range nums {\n        sum\
    \ += i\n    }\n    // Now go through each digit and keep a running total\n   \
    \ // of the sum of the digits that we've seen so far\n    // and compare the running\
    \ total of the digits with the sum.\n    // If the running total exceeds the sum,\
    \ swap the number\n    // with the \"largest\" digit in the list.\n    var tempNums\
    \ []int\n    var maxIndex int\n    for i := 0; i < len(nums); i++ {\n        runningTotal\
    \ := sum - sum % 10\n        if runningTotal > sum {\n            tempNums = nums[maxIndex:]\n\
    \            nums[maxIndex] = nums[i]\n            nums[i] = tempNums[maxIndex]\n\
    \            sum -= tempNums[maxIndex]\n            maxIndex--\n        } else\
    \ {\n            sum += nums[i]\n            maxIndex++\n        }\n    }\n  \
    \  return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-1:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points({0xc000024390?, 0xc0000b2de8?,\
    \ 0x4b3193?})\n\t/tmp/tmpl3qi822s_test.go:33 +0x110\ncommand-line-arguments_test.TestOrder_By_Points(0x0?)\n\
    \t/tmp/tmpl3qi822s_test.go:53 +0x7f\ntesting.tRunner(0xc0000da340, 0x529168)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074645
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here\n    result\
    \ := make([]int, len(nums))\n    i := 0\n    j := 0\n    k := 0\n    sum := 0\n\
    \    for j < len(nums) {\n        sum += nums[j]\n        if sum > 0 {\n     \
    \       result[k] = nums[j]\n            i++\n        }\n        sum = 0\n   \
    \     j++\n    }\n    for j < len(nums) {\n        sum += nums[j]\n        if\
    \ sum < 0 {\n            result[k] = nums[j]\n            k++\n        }\n   \
    \     sum = 0\n        j++\n    }\n    for j < len(nums) {\n        sum += nums[j]\n\
    \        if sum < 0 {\n            result[k] = nums[j]\n            k++\n    \
    \    }\n        sum = 0\n        j++\n    }\n    \n    for ; i < len(nums); i++\
    \ {\n        sum += nums[i]\n        if sum > 0 {\n            result[k] = nums[i]\n\
    \            k++\n        }\n        sum = 0\n    }\n    \n    for k > 0; k--\
    \ {\n        result[k] = nums[k]\n    }\n    \n    for i := 0; i < len(nums);\
    \ i++ {\n        nums[i] = result[i]\n    }\n    \n    return result\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy8nh_550_test.go:61:16: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // sort in ascending order\n   \
    \ // find sum of digits\n    sum_of_digits := 0\n    for _, v := range nums {\n\
    \        sum_of_digits += v\n    }\n    sort.Ints(nums)\n\n    // remove those\
    \ items with same sum_of_digits\n    // and sort them by the original index\n\
    \    out := make([]int, 0)\n    i := 0\n    for _, v := range nums {\n       \
    \ if v != nums[i] && sum_of_digits > 0 {\n            sum_of_digits -= v\n   \
    \         sort.Ints(nums[i:])\n            out += nums[i:]\n            i = 0\n\
    \        } else {\n            i += v\n        }\n    }\n\n    return out\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4ps7jfn_test.go:24:5: undefined: sort

    /tmp/tmpq4ps7jfn_test.go:33:13: undefined: sort

    /tmp/tmpq4ps7jfn_test.go:34:13: invalid operation: operator + not defined on out
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Your code goes here\n    sort.Sort(func(i,\
    \ j int) bool {\n        sum, ok := sumDigits(nums[i])\n        sum2, ok := sumDigits(nums[j])\n\
    \        if sum != sum2 {\n            return sum > sum2\n        } else {\n \
    \           return nums[i] < nums[j]\n        }\n    })\n    return nums\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcn8pwe58_test.go:19:5: undefined: sort

    /tmp/tmpcn8pwe58_test.go:20:20: undefined: sumDigits

    /tmp/tmpcn8pwe58_test.go:21:21: undefined: sumDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var m map[int]int\n    for _, num\
    \ := range nums {\n        m[num] = m[num] + 1\n    }\n    var sorted []int\n\
    \    for k := range m {\n        sorted = append(sorted, k)\n    }\n    sort.Ints(sorted)\n\
    \    return sorted\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_8r_649_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var tmp int\n    k := 0\n    for\
    \ i := 0; i < len(nums); i++ {\n        tmp := nums[i]\n        if tmp > 0 {\n\
    \            k += tmp\n        } else {\n            k = -tmp\n        }\n   \
    \     if k > 0 {\n            nums[k-1], nums[k] = nums[k], nums[k-1]\n      \
    \  }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xcfrzgn_test.go:18:9: tmp declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n\n    // Write\
    \ your code here.\n    for i := 0; i < len(nums); i++ {\n        total := 0\n\
    \        for j := 0; j < len(nums); j++ {\n            if i != j {\n         \
    \       total += int(nums[j])\n            }\n        }\n        result = append(result,\
    \ total)\n    }\n    \n    return append(result, nums[len(nums)-1])\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmpvmo8p4la_test.go:31\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmpvmo8p4la_test.go:43\
    \ +0x2a8\ntesting.tRunner(0xc0000cc4e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    // sort based\
    \ on sum of their digits\n    for i := 0; i < len(nums); i++ {\n        sum :=\
    \ 0\n        for j := 0; j < len(nums); j++ {\n            sum += int(nums[j]%10)\n\
    \        }\n        if sum > 0 {\n            result := append(result, nums[i])\n\
    \        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return\
    \ result[i] > result[j]\n    })\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2jfsa6o_test.go:26:13: result declared but not used

    /tmp/tmpd2jfsa6o_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ []int{}\n    }\n\n    result := make([]int, 0, len(nums))\n\n    var index int\n\
    \n    // Iterate over the list of numbers and sum their digits.\n    // For each\
    \ digit, keep a running total for the sum.\n    // For each number that doesn't\
    \ have a matching digit,\n    // add the number to the end of the result slice.\n\
    \    for i := 0; i < len(nums); i++ {\n        if nums[i] == -1 {\n          \
    \  index = i\n            break\n        }\n\n        var sum int\n        //\
    \ Loop over the list of digits for the current number.\n        // For each digit,\
    \ subtract it from its running total.\n        // If the running total becomes\
    \ negative, replace it with the\n        // current digit in the list of digits.\n\
    \        for j := 0; j < len(nums[i]); j++ {\n            sum += nums[i][j]\n\
    \            sum -= nums[digitSum(sum)]\n            if sum < 0 {\n          \
    \      index = i\n                break\n            }\n        }\n        if\
    \ sum == 0 {\n            result = append(result, nums[i])\n        } else {\n\
    \            result = append(result, index)\n        }\n    }\n\n    return append(result,\
    \ -1)\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bepgctc_test.go:41:29: invalid argument: nums[i] (variable of type int)
    for len

    /tmp/tmp_bepgctc_test.go:42:27: invalid operation: cannot index nums[i] (variable
    of type int)

    /tmp/tmp_bepgctc_test.go:43:25: undefined: digitSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var list []int\n    sums := make(map[int]int)\n\
    \    for _, num := range nums {\n        sums[num] = sums[num] + 1\n    }\n  \
    \  for k, v := range sums {\n        list = append(list, k)\n    }\n    fmt.Printf(\"\
    ORDERED LIST: %d\\n\", list)\n\n    // PATCH list\n    sort.Sort(sort.Reverse(sort.IntSlice(list)))\n\
    \    return list\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4k502tz3_test.go:23:12: v declared but not used

    /tmp/tmp4k502tz3_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // O(N * logN) solution, linear\
    \ time for sorting and binary search to find item's index.\n    // O(N) solution,\
    \ linear time for sum and binary search to find item's index.\n    // O(N) solution,\
    \ linear time for finding sum of digits.\n    \n    // O(N * logN) solution\n\
    \    sort.Ints(nums)\n    var res []int\n    \n    for _, num := range nums {\n\
    \        // O(logN) solution\n        i := sort.Search(len(nums), func(i int)\
    \ bool {\n            // O(1) solution\n            total := 10*num + int(nums[i])\n\
    \            \n            // O(1) solution\n            // return total >= 10*num\
    \ + int(nums[i])\n            return total >= num\n        })\n        \n    \
    \    // O(1) solution\n        res = []int{nums[i], nums[i+1], nums[i+2], nums[i+3],\
    \ nums[i+4], nums[i+5], nums[i+6], nums[i+7], nums[i+8], nums[i+9], nums[i+10],\
    \ nums[i+11]}\n    }\n    \n    return res\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqr6c7qp_test.go:23:5: undefined: sort

    /tmp/tmpwqr6c7qp_test.go:28:14: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var sorted []int\n    var sum int\n\
    \    // PATCH list\n    for _, v := range nums {\n        sum += v\n    }\n  \
    \  for _, v := range nums {\n        sorted := append(sorted, v)\n    }\n    sorted\
    \ = append(sorted, sum)\n    sorted = append(sorted, sum)\n    sorted = append(sorted,\
    \ sum)\n    sorted = append(sorted, sum)\n    // PATCH list\n    sorted = append(sorted,\
    \ sum)\n    // PATCH list\n    sorted = append(sorted, sum)\n    sorted = append(sorted,\
    \ sum)\n    sorted = append(sorted, sum)\n    return sorted\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpxyvr94_test.go:25:9: sorted declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    size := len(nums)\n    result :=\
    \ make([]int, size)\n    sum_ := 0\n    for i, v := range nums {\n        sum_\
    \ += v\n        result[i] = v\n    }\n\n    switch {\n    case size == 0:\n  \
    \      return nil\n    case size == 1 && (sum_ < 0 || sum_ > 9):\n        return\
    \ nums\n    case sum_ == 0:\n        return result\n    case sum_ == 9:\n    \
    \    return append([]int{nums[size-1]}, result...)\n    case sum_ > 9:\n     \
    \   i, j := 0, size-1\n        result[i] = result[j]\n        while sum_ > 9 {\n\
    \            i += 1;\n            j -= 1;\n            sum_ -= 10;\n         \
    \   result[i] = result[j]\n        }\n        result[j] = nums[i]\n        return\
    \ result\n    }\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwu57poft_test.go:38:15: expected '';'', found sum_

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    n := len(nums)\n    if n < 2 {\n\
    \        return nums\n    }\n    arr := make([]int, n)\n    s := 0\n    max :=\
    \ 0\n    for i := 0; i < n; i++ {\n        if nums[i] < 0 {\n            arr[i]\
    \ = -nums[i]\n        } else {\n            arr[i] = nums[i]\n            s =\
    \ nums[i]\n            max = max(s, max)\n        }\n    }\n    if max > 0 {\n\
    \        arr[n-1] += max\n    } else {\n        arr[n-1] = max\n    }\n    k :=\
    \ 0\n    max := 0\n    for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1]+s\
    \ {\n            arr[i] = arr[i-1] + s\n            k = i\n            max = max(k,\
    \ max)\n        }\n    }\n    if max > 0 {\n        arr[0] = arr[0] + max\n  \
    \  } else {\n        arr[0] = max\n    }\n    return arr\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ymwym6r_test.go:31:19: invalid operation: cannot call non-function max
    (variable of type int)

    /tmp/tmp1ymwym6r_test.go:39:5: k declared but not used

    /tmp/tmp1ymwym6r_test.go:40:9: no new variables on left side of :=

    /tmp/tmp1ymwym6r_test.go:45:19: invalid operation: cannot call non-function max
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var res []int\n    sum_of_digits\
    \ := 0\n    for _, v := range nums {\n        if v < 0 {\n            fmt.Println(\"\
    sum:\", sum_of_digits)\n            if sum_of_digits > 0 {\n                fmt.Println(\"\
    list:\", nums)\n                fmt.Println(\"res:\", res)\n                fmt.Println(\"\
    return list\", res)\n                panic(\"cannot have negative number\")\n\
    \            }\n            fmt.Println(\"list:\", nums)\n            fmt.Println(\"\
    return list\", res)\n            fmt.Println(\"return list\", nums)\n        \
    \    fmt.Println(\"return list\", v)\n            fmt.Println(\"return list\"\
    , sum_of_digits)\n            fmt.Println(\"return list\", v)\n            fmt.Println()\n\
    \            return v\n        }\n        sum_of_digits += int(v)\n    }\n   \
    \ res[0] = nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum_of_digits\
    \ += int(nums[i])\n        res[i] = nums[i]\n    }\n    sum_of_digits += int(nums[len(nums)-1])\n\
    \    res[len(res)-1] = nums[len(nums)-1]\n    if sum_of_digits > 0 {\n       \
    \ i := 0\n        for _, v := range res {\n            if v < 0 {\n          \
    \      i = i + 1\n            }\n        }\n        fmt.Println(\"list\", nums)\n\
    \        fmt.Println(\"res\", res)\n        fmt.Println(\"return list\", res)\n\
    \        fmt.Println(\"index\", i)\n        fmt.Println(\"return list\", res[:i])\n\
    \        fmt.Println(\"return list\", res[:i+1])\n        fmt.Println(\"return\
    \ list\", res[:i+2])\n        fmt.Println(\"return list\", res[:i+3])\n      \
    \  fmt.Println(\"return list\", res[:i+4])\n        fmt.Println(\"return list\"\
    , res[:i+5])\n        fmt.Println(\"return list\", res[:i+6])\n        fmt.Println(\"\
    return list\", res[:i+7])\n        fmt.Println(\"return list\", res[:i+8])\n \
    \       fmt.Println(\"return list\", res[:i+9])\n        fmt.Println(\"return\
    \ list\", res[:i+10])\n        fmt.Println(\"return list\", res[:i+11])\n    \
    \    fmt.Println(\"return list\", res[:i+12])\n        fmt.Println()\n       \
    \ return res\n    }\n    fmt.Println(\"list\", nums)\n    fmt.Println(\"res\"\
    , res)\n    fmt.Println(\"return list\", res)\n    return res\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7y6mlsw_test.go:36:20: cannot use v (variable of type int) as type []int
    in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // write your code here\n    sort.Slice(nums,\
    \ func(i, j int) bool {\n        // if sum of two numbers is equal, then order\
    \ based on their indexes\n        if nums[i] + nums[j] == nums[j] {\n        \
    \    return nums[i] > nums[j]\n        }\n        return nums[i] + nums[j] > nums[j]\
    \ + nums[i]\n    })\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4ye1x4a_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    length := len(nums)\n    s := map[int]int{}\n\
    \n    for _, i := range nums {\n        if _, ok := s[i]; !ok {\n            s[i]\
    \ = 0\n        }\n        s[i] = s[i] + int(i)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(s)))\n\
    \n    result := make([]int, length)\n    for i := 0; i < length; i++ {\n     \
    \   result[i] = nums[s[i]-1]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvm_inbz4_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    nums = append(nums, 0) // Add an\
    \ initial 0 value\n\n    var retval []int\n    i := 0\n    for {\n        // Find\
    \ a candidate\n        candidate, ok := getCandidate(i+1, nums)\n        if !ok\
    \ {\n            break\n        }\n\n        // Find the sum of digits in candidate\n\
    \        digits, ok := getDigits(candidate)\n        if !ok {\n            continue\n\
    \        }\n\n        // Find a candidate with same sum of digits, if any\n  \
    \      for j := i + 1; j < len(nums); j++ {\n            if digits, ok = getDigits(nums[j]);\
    \ !ok {\n                break\n            }\n            if digits == digits\
    \ {\n                candidate = nums[j]\n                candidateNum := i\n\
    \                break\n            }\n        }\n\n        // If the candidate\
    \ has the same sum of digits,\n        // move it to retval.\n        if candidateNum\
    \ != i {\n            retval = append(retval, candidateNum)\n        }\n\n   \
    \     i = j + 1\n    }\n\n    return retval\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykgolhbu_test.go:24:26: undefined: getCandidate

    /tmp/tmpykgolhbu_test.go:30:23: undefined: getDigits

    /tmp/tmpykgolhbu_test.go:37:29: undefined: getDigits

    /tmp/tmpykgolhbu_test.go:42:17: candidateNum declared but not used

    /tmp/tmpykgolhbu_test.go:49:12: undefined: candidateNum

    /tmp/tmpykgolhbu_test.go:50:37: undefined: candidateNum

    /tmp/tmpykgolhbu_test.go:53:13: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sum := 0\n    sorted_nums := make([]int,\
    \ len(nums))\n    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n \
    \       sorted_nums[i] = nums[i]\n    }\n    for i := 0; i < len(nums); i++ {\n\
    \        if sorted_nums[i] == -1 {\n            sorted_nums[i] = -sum\n      \
    \  }\n    }\n    return sorted_nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwiz9v0h2_test.go:50: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=12)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpwiz9v0h2_test.go:50: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpwiz9v0h2_test.go:50: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpwiz9v0h2_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwiz9v0h2_test.go:50: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    result := nums\n    for idx, val := range result {\n       \
    \ sumDigits := 0\n        for _, v := range val {\n            sumDigits += int(v)\n\
    \        }\n        if sumDigits < 0 {\n            sumDigits = 0\n        }\n\
    \        result[idx] = sumDigits\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaamaw6og_test.go:18:5: undefined: sort

    /tmp/tmpaamaw6og_test.go:20:12: no new variables on left side of :=

    /tmp/tmpaamaw6og_test.go:23:27: cannot range over val (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Initialize a map from sums of\
    \ digits to index\n    // of sorted item\n    sum := map[int]int{}\n    for i,\
    \ v := range nums {\n        sum := sum + v\n        if _, ok := sum[v]; ok {\n\
    \            // There are several items with same sum of digits.\n           \
    \ // We need to sort them based on their original index.\n            sort.Ints(nums)\n\
    \        }\n    }\n    \n    // Sort the items based on their sum\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    \n    // Return the sorted list\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcs6wp4h4_test.go:21:9: i declared but not used

    /tmp/tmpcs6wp4h4_test.go:22:16: invalid operation: sum + v (mismatched types map[int]int
    and int)

    /tmp/tmpcs6wp4h4_test.go:26:13: undefined: sort

    /tmp/tmpcs6wp4h4_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here\n    //\
    \ code starts here\n\n    // write your code here\n    var res []int\n    map1\
    \ := make(map[int]int)\n    map2 := make(map[int]int)\n    for i := 0; i < len(nums);\
    \ i++ {\n        num := nums[i]\n        if map1[num] > 0 {\n            // if\
    \ num is greater than the smallest number, we assign it as new smallest number\n\
    \            if map2[map1[num]] == -1 {\n                map2[map1[num]] = i\n\
    \            }\n        } else {\n            // if num is smaller than smallest\
    \ number, we assign it as new smallest number\n            map1[num] = i\n   \
    \         map2[map1[num]] = i\n        }\n    }\n    for key := range map1 {\n\
    \        res = append(res, key)\n    }\n    for key := range map2 {\n        res\
    \ = append(res, key)\n    }\n    // code ends here\n    return res\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp7x7torpg_test.go:66: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=11) %!s(int=-1) %!s(int=-11)\
    \ %!s(int=-12) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n        tmp7x7torpg_test.go:66:\
    \ expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423)\
    \ %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46)\
    \ %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=3457) %!s(int=56) %!s(int=0)\
    \ %!s(int=46) %!s(int=423) %!s(int=463) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=1234)\
    \ %!s(int=145) %!s(int=53) %!s(int=37) %!s(int=2) %!s(int=7) %!s(int=8) %!s(int=10)\
    \ %!s(int=13) %!s(int=14) %!s(int=0) %!s(int=1) %!s(int=9) %!s(int=11) %!s(int=12)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n\
    \        tmp7x7torpg_test.go:66: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98)\
    \ %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=-3)\
    \ %!s(int=1) %!s(int=-11) %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n      \
    \  tmp7x7torpg_test.go:66: expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]',\
    \ got '[%!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=1) %!s(int=3) %!s(int=4)\
    \ %!s(int=6) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=8) %!s(int=9) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=10) %!s(int=4)\
    \ %!s(int=7)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n      \
    \  tmp7x7torpg_test.go:66: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4)\
    \ %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=4) %!s(int=0) %!s(int=6)\
    \ %!s(int=-76) %!s(int=-21) %!s(int=23) "
  timestamp: 1660074647
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    // make sum\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += int(v)\n    }\n  \
    \  // sort numbers by sum\n    nums2 := nums[:0]\n    j := 0\n    for _, v :=\
    \ range nums {\n        sum := int(v)\n        i := sort.Search(len(nums2), func(i\
    \ int) bool {\n            return nums2[i-j]-sum < 0\n        })\n        if i\
    \ < len(nums2) {\n            j += 1\n            nums2[i] = nums[i]\n       \
    \ } else {\n            nums2 = append(nums2, v)\n        }\n    }\n    return\
    \ nums2\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwc7x3uyv_test.go:18:5: undefined: sort

    /tmp/tmpwc7x3uyv_test.go:29:14: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your function here\n  \
    \  result := make([]int, 0, len(nums))\n    for _, num := range nums {\n     \
    \   sum := num % 10\n        for i, j := 0, 0; j < len(sum); j++ {\n         \
    \   if sum[j] > sum[j+1] {\n                break\n            }\n           \
    \ i += j\n        }\n        if i == 0 {\n            result = append(result,\
    \ num)\n            continue\n        }\n        i -= 1\n        tmp = nums[i]\n\
    \        nums[i] = num\n        num = tmp\n        tmp = result[i]\n        result[i]\
    \ = result[i-1]\n        result[i-1] = tmp\n    }\n    return result\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6o63bczs_test.go:22:35: invalid argument: sum (variable of type int) for
    len

    /tmp/tmp6o63bczs_test.go:23:19: invalid operation: cannot index sum (variable
    of type int)

    /tmp/tmp6o63bczs_test.go:28:12: undefined: i

    /tmp/tmp6o63bczs_test.go:32:9: undefined: i

    /tmp/tmp6o63bczs_test.go:33:9: undefined: tmp

    /tmp/tmp6o63bczs_test.go:33:20: undefined: i

    /tmp/tmp6o63bczs_test.go:34:14: undefined: i

    /tmp/tmp6o63bczs_test.go:35:15: undefined: tmp

    /tmp/tmp6o63bczs_test.go:36:9: undefined: tmp

    /tmp/tmp6o63bczs_test.go:36:22: undefined: i

    /tmp/tmp6o63bczs_test.go:36:9: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // TODO:\n    // 1. write code here\n\
    \    // 2. test your code here\n\n    // return nums\n    return nums\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpum2rue3e_test.go:44: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpum2rue3e_test.go:44: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpum2rue3e_test.go:44: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpum2rue3e_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpum2rue3e_test.go:44: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sumOfDigits := make(map[int]int, len(nums))\n    for i := range nums {\n\
    \        sumOfDigits[i] = 0\n        for j := 0; j < len(nums[i]); j++ {\n   \
    \         sumOfDigits[i] += int(nums[i][j])\n        }\n        result[i] = -1\n\
    \    }\n    sort.Ints(result)\n    for i, j := 0, len(nums)-1; i < j; i, j = i+1,\
    \ j-1 {\n        if sumOfDigits[result[i]] > sumOfDigits[result[j]] {\n      \
    \      result[i], result[j] = result[j], result[i]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxow77v5e_test.go:22:29: invalid argument: nums[i] (variable of type int)
    for len

    /tmp/tmpxow77v5e_test.go:23:42: invalid operation: cannot index nums[i] (variable
    of type int)

    /tmp/tmpxow77v5e_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    counts := make([]int, len(nums))\n\
    \    for i := range nums {\n        counts[nums[i]] = counts[nums[i]] + 1\n  \
    \  }\n    // Sort by counts in descending order\n    return sort_descending(counts)\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7avk761q_test.go:23:12: undefined: sort_descending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here.\n\n   \
    \ count := 0\n    max := 0\n    for _, v := range nums {\n        if count > max\
    \ {\n            max = count\n        }\n        count += int(v)\n    }\n    max\
    \ += count\n\n    // Get max index, if max is 0, means list is empty, return empty\
    \ list.\n    if max == 0 {\n        return []int{}\n    }\n\n    result := make([]int,\
    \ 0, max)\n    for _, v := range nums {\n        if count == max {\n         \
    \   count -= 1\n        }\n        result += [int)(v)]\n        count += int(v)\n\
    \    }\n\n    return result\n\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnkqj1knp_test.go:40:23: expected '']'', found '')''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sums := make([]int, len(nums))\n\
    \    for i := range sums {\n        sums[i] = 0\n        for _, d := range nums[i]\
    \ {\n            sums[i] += d\n        }\n    }\n    sorted_nums := make([]int,\
    \ len(sums))\n    i := 0\n    for _, s := range sums {\n        if i == 0 {\n\
    \            sorted_nums[i] = s\n        } else {\n            if s < sorted_nums[len(sorted_nums)-1]\
    \ {\n                sorted_nums[i] = s\n            } else {\n              \
    \  sorted_nums[len(sorted_nums)-1] = s\n            }\n        }\n        i +=\
    \ 1\n    }\n    return sorted_nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe5ms7x2g_test.go:21:27: cannot range over nums[i] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here\n    fmt.Println(\"\
    Patch list\")\n    result := []int{}\n    \n    sort.Ints(nums)\n    \n    var\
    \ maxSum int = 0\n    \n    for _, num := range nums {\n        sum += num\n \
    \       if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    \n\
    \    for i, num := range nums {\n        if num > maxSum {\n            max =\
    \ num\n            index = i\n        }\n    }\n    \n    \n    for _, num :=\
    \ range nums {\n        result += []int{num, index}\n    }\n    \n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbrh2err2_test.go:22:5: undefined: sort

    /tmp/tmpbrh2err2_test.go:27:9: undefined: sum

    /tmp/tmpbrh2err2_test.go:28:12: undefined: sum

    /tmp/tmpbrh2err2_test.go:29:22: undefined: sum

    /tmp/tmpbrh2err2_test.go:35:13: undefined: max

    /tmp/tmpbrh2err2_test.go:36:13: undefined: index

    /tmp/tmpbrh2err2_test.go:42:9: invalid operation: operator + not defined on result
    (variable of type []int)

    /tmp/tmpbrh2err2_test.go:42:30: undefined: index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    nums = nums[:0]\n    var sum int\n\
    \    for _, v := range nums {\n        sum += v\n        nums = append(nums, v)\n\
    \    }\n    fmt.Println(nums)\n    nums = nums[:len(nums)-1]\n    fmt.Println(nums)\n\
    \    nums = append(nums, sum)\n    return nums\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=go dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    sort\"\n    \"strconv\"\n)\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp66x69041_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // First we sort the list by their\
    \ sum.\n    nums := sort.IntSliceA(nums)\n    fmt.Println(nums)\n    i := 0\n\
    \    j := 0\n    for i < len(nums)-1 {\n        if nums[i]%10 != nums[i+1]%10\
    \ {\n            nums[j] = nums[i+1]\n            i++\n            j++\n     \
    \       continue\n        }\n        nums[j] = nums[i]\n        i++\n        j++\n\
    \    }\n    nums = nums[:j]\n    // Then we sort the list by their index in original\
    \ list.\n    nums = sort.IntSliceA(nums)\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd1sy8zpy_test.go:19:10: no new variables on left side of :=

    /tmp/tmpd1sy8zpy_test.go:19:13: undefined: sort

    /tmp/tmpd1sy8zpy_test.go:36:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var newList []int\n    var sum int\n\
    \    var i int\n\n    for _, v := range nums {\n        sum += v\n    }\n\n  \
    \  for _, v := range nums {\n        if sum > 0 {\n            i = sum - v\n \
    \       } else {\n            i = v\n        }\n\n        newList = append(newList,\
    \ v)\n        sum -= v\n    }\n\n    return newList\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkdmzkxqb_test.go:20:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Sort(func(i, j int) bool {\n\
    \        sum1, sum2 := 0, 0\n        for _, k := range nums {\n            sum1\
    \ += int(k%10)\n            sum2 += int(k/10)\n        }\n        return sum1\
    \ <= sum2\n    })\n\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_iwh880a_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Initialize sum and digits as\
    \ 0\n    var sum int\n    var digits []int\n\n    // For each number in nums\n\
    \    for _, num := range nums {\n        // If this number has zero digits\n \
    \       if len(num) == 0 {\n            // Sum up the sum\n            sum +=\
    \ num\n            // Append this sum to digits and reset sum and digits\n   \
    \         digits = append(digits, num)\n            sum = 0\n            continue\n\
    \        }\n\n        // For each digit in this number\n        for _, digit :=\
    \ range num {\n            // Add this digit to the sum\n            sum += digit\n\
    \            // If the sum of digits for this number is greater than the sum so\
    \ far\n            if sum > sum {\n                // If this number is in the\
    \ list of numbers whose sum equals the sum\n                if digit == nums[len(nums)-1][len(nums[len(nums)-1])-1]\
    \ {\n                    // If this number is in the list of numbers whose sum\
    \ is less than the sum so far\n                    // Remove the number with the\
    \ highest sum\n                    nums[len(nums)-1] = append(nums[len(nums)-1][:len(nums[len(nums)-1])-1])\n\
    \                } else {\n                    // If this number is in the list\
    \ of numbers whose sum is less than the sum so far\n                    // Add\
    \ the number to the end of the list\n                    nums = append(nums, num)\n\
    \                }\n                break\n            }\n        }\n    }\n \
    \   // Return the sorted numbers\n    return nums\n}\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmeehs5jj_test.go:25:16: invalid argument: num (variable of type int) for
    len

    /tmp/tmpmeehs5jj_test.go:35:31: cannot range over num (variable of type int)

    /tmp/tmpmeehs5jj_test.go:41:46: invalid operation: cannot index nums[len(nums)
    - 1] (variable of type int)

    /tmp/tmpmeehs5jj_test.go:44:48: invalid operation: cannot slice nums[len(nums)
    - 1] (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Your code here\n    sort.Ints(nums)\n\
    \    var sum = 0\n    for _, num := range nums {\n        sum += num\n    }\n\
    \    nums = nums[len(nums)-len(nums)/2:]\n    sort.Ints(nums)\n    var i1, i2\
    \ int\n    switch {\n    case sum == 0:\n        return nums\n    case sum < 0:\n\
    \        return append(nums, nums[0])\n    case sum > 0:\n        i2 = 1\n   \
    \     for _, num := range nums {\n            i1 += 1\n            if sum == 0\
    \ {\n                return append(nums[:i1], nums[i2:])\n            }\n    \
    \        sum += num\n        }\n    }\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsnegkxk8_test.go:19:5: undefined: sort

    /tmp/tmpsnegkxk8_test.go:25:5: undefined: sort

    /tmp/tmpsnegkxk8_test.go:37:46: cannot use nums[i2:] (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    length := len(nums)\n    points\
    \ := make([]int, length)\n    for i := 0; i < length; i++ {\n        sum := nums[i]\n\
    \        cnt := 1\n        for j := 1; j < length; j++ {\n            if nums[j]\
    \ < 0 {\n                continue\n            }\n            if sum < 0 {\n \
    \               sum += nums[j]\n            } else {\n                sum += nums[j]*10\
    \ + digits[nums[j]]\n                cnt++\n            }\n        }\n       \
    \ if cnt == 1 {\n            points[i] = nums[i]\n        } else {\n         \
    \   points[i] = sum / 10\n        }\n    }\n    return points\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprufgglhl_test.go:30:37: undefined: digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    var current\
    \ int = 0\n    var temp int = 0\n\n    for _, n := range nums {\n        // Sum\
    \ up digits in current number, find its index in the original list\n        //\
    \ If there is no such index in the original list, add it\n        temp = current\
    \ % 10\n        current /= 10\n        if temp != 0 {\n            temp += n\n\
    \            current = temp\n        } else {\n            current = n\n     \
    \   }\n\n        // Add current number to result\n        result = append(result,\
    \ current)\n    }\n\n    // If result is empty or has only one item, it means\
    \ no elements were passed\n    if len(result) == 0 || len(result) == 1 {\n   \
    \     return result\n    }\n\n    // Sort result according to sum of digits in\
    \ each item\n    return sort_by_sum(result)\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp74ye4o_b_test.go:44:12: undefined: sort_by_sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    type Item \nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp37sae149_test.go:18:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // write your code here\n    \n\
    \    // Write your code here\n    sum_map := make(map[int]int) \n    for _, num\
    \ := range nums {\n        if _, ok := sum_map[num]; !ok {\n            sum_map[num]\
    \ = 0\n        }\n        sum_map[num] += 1\n    }\n    var sorted_nums []int\n\
    \    for key, val := range sum_map {\n        sorted_nums = append(sorted_nums,\
    \ key)\n    }\n    // Write your code here\n    for index, num := range nums {\n\
    \        nums[index] = sorted_nums[num]\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl25j4jrw_test.go:29:14: val declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := []int{}\n    sum := 0\n\
    \    for _, num := range nums {\n        sum += num\n        result = append(result,\
    \ num)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_xz0v54b_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var sorted_nums []int\n    for _,\
    \ num := range nums {\n        sorted_nums = append(sorted_nums, num)\n    }\n\
    \    sorted_nums = append(sorted_nums, 0)\n    sort.Ints(sorted_nums)\n    return\
    \ sorted_nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0aqskgt1_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sum := 0\n    prev := 0\n    for\
    \ i, v := range nums {\n        if i != 0 {\n            sum += int(v%10)\n  \
    \          v = v / 10\n        }\n        sum += v\n        prev = sum\n    }\n\
    \    var res []int\n    i, j := 0, 0\n    for j := len(nums) - 1; j >= 0; j--\
    \ {\n        sum = int(nums[j]%10)\n        i += sum\n        if sum == prev {\n\
    \            res = append(res, nums[j])\n            nums[j], nums[i] = nums[i],\
    \ nums[j]\n        }\n        prev = sum\n    }\n    return res\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu6xupy75_test.go:29:8: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var sorted []int\n    sum := 0\n\
    \    for _, v := range nums {\n        sum += v\n    }\n    for _, v := range\
    \ nums {\n        if sum == 0 {\n            sorted = append(sorted, v)\n    \
    \    } else {\n            idx := sorted.Search(v)\n            if idx == -1 {\n\
    \                sorted = append(sorted, v)\n            } else {\n          \
    \      sorted[idx] = v\n            }\n        }\n    }\n    return sorted\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps382_lu8_test.go:27:27: sorted.Search undefined (type []int has no field
    or method Search)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := []int{}\n    // Write\
    \ your sorting code here.\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpit0he6ct_test.go:41: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpit0he6ct_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpit0he6ct_test.go:41:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpit0he6ct_test.go:41: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpit0he6ct_test.go:41: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var sums []int\n    for i, v :=\
    \ range nums {\n        sums = append(sums, v)\n    }\n    sort.Ints(sums)\n \
    \   j := 0\n    sums := make([]int, len(sums))\n    for _, sum := range sums {\n\
    \        sums[j] = sum\n        j++\n    }\n    j := 0\n    for _, sum := range\
    \ sums {\n        nums[j] = nums[sum-sum]\n        j++\n    }\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcx6xmbog_test.go:19:9: i declared but not used

    /tmp/tmpcx6xmbog_test.go:22:5: undefined: sort

    /tmp/tmpcx6xmbog_test.go:24:10: no new variables on left side of :=

    /tmp/tmpcx6xmbog_test.go:29:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // TODO: write code here\n    //\
    \ Return the sorted list\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyo39p4ud_test.go:20:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += int(v)\n        result\
    \ = append(result, v)\n    }\n    for i := len(nums) - 1; i >= 0; i-- {\n    \
    \    diff := nums[i] - sum\n        if diff < 0 {\n            result = append(result,\
    \ nums[i]+1)\n        }\n        if diff > 0 {\n            result = append(result,\
    \ nums[i]+0)\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp9bcx056u_test.go:54: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12) %!s(int=-11) %!s(int=-1) %!s(int=11) %!s(int=1)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n        tmp9bcx056u_test.go:54:\
    \ expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423)\
    \ %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46)\
    \ %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234) %!s(int=423) %!s(int=463)\
    \ %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423) %!s(int=53) %!s(int=6) %!s(int=37)\
    \ %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0) %!s(int=46) %!s(int=47) %!s(int=1)\
    \ %!s(int=57) %!s(int=4) %!s(int=3458) %!s(int=38) %!s(int=7) %!s(int=54) %!s(int=424)\
    \ %!s(int=424) %!s(int=3) %!s(int=146) %!s(int=464) %!s(int=424) %!s(int=1235)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp9bcx056u_test.go:54:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11) %!s(int=-32) %!s(int=43)\
    \ %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3) %!s(int=-3) %!s(int=2) %!s(int=-97)\
    \ %!s(int=54) %!s(int=43) %!s(int=-32) %!s(int=-11) %!s(int=1)]'\n    --- FAIL:\
    \ TestOrder_By_Points/test_num__4 (0.00s)\n        tmp9bcx056u_test.go:54: expected\
    \ '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)\
    \ %!s(int=11) %!s(int=12) %!s(int=11) %!s(int=10) %!s(int=9) %!s(int=8) %!s(int=7)\
    \ %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmp9bcx056u_test.go:54: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s("
  timestamp: 1660074649
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var ret []int\n    for i := 0; i\
    \ < len(nums); i++ {\n        num := nums[i]\n        digit := len(strconv.Itoa(num))\n\
    \        sum := 0\n        for j := 0; j < digit; j++ {\n            sum += int(strconv.Itoa(num\
    \ % 10)[j])\n            num /= 10\n        }\n        if sum > 0 {\n        \
    \    ret = append(ret, i)\n        }\n    }\n    for _, i := range ret {\n   \
    \     nums[i], nums[ret] = nums[ret], nums[i]\n    }\n    return nums\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp99ka8tzf_test.go:21:22: undefined: strconv

    /tmp/tmp99ka8tzf_test.go:24:24: undefined: strconv

    /tmp/tmp99ka8tzf_test.go:32:35: invalid argument: index ret (variable of type
    []int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074648
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    // For each\
    \ item, find its digit and sum it\n    for i := 0; i < len(nums); i++ {\n    \
    \    d := nums[i] % 10\n        // If digit doesn't exist in result, append it\n\
    \        if result == nil {\n            result = append(result, d)\n        \
    \    continue\n        }\n        sumDigit := 0\n        for k := 0; k < len(result);\
    \ k++ {\n            sumDigit += result[k]\n        }\n        if sumDigit ==\
    \ d {\n            result = append(result, d)\n            continue\n        }\n\
    \        // If digit exists in result, sort it by the position\n        k := 0\n\
    \        for j := 0; j < len(result); j++ {\n            if result[j] == d {\n\
    \                result[k] = result[j]\n                k++\n            }\n \
    \       }\n        result = append(result, d)\n    }\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpb3sd3bey_test.go:66: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-1) %!s(int=1) %!s(int=-1)\
    \ %!s(int=-1) %!s(int=-2)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpb3sd3bey_test.go:66: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=6)\
    \ %!s(int=6) %!s(int=6) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=0) %!s(int=6)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpb3sd3bey_test.go:66:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-1) %!s(int=-2) %!s(int=3)\
    \ %!s(int=4) %!s(int=-8) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpb3sd3bey_test.go:66: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpb3sd3bey_test.go:66: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=6) %!s(int=-6) %!s(int=-1) %!s(int=3) %!s(int=4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n\n    var res []int\n    for idx := range nums {\n        // if\
    \ nums[idx] is -1, no point to sum its digits\n        if nums[idx] == -1 {\n\
    \            continue\n        }\n\n        sum := 0\n        cnt := 0\n     \
    \   for i := 0; i < len(nums[idx]); i++ {\n            digit, ok := nums[idx][i]\n\
    \            if !ok {\n                break\n            }\n            sum +=\
    \ digit\n            cnt++\n        }\n        if cnt > 1 {\n            sort.Ints(nums[idx])\n\
    \        }\n        res = append(res, nums[idx])\n    }\n    return res\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6rmydi5d_test.go:31:29: invalid argument: nums[idx] (variable of type
    int) for len

    /tmp/tmp6rmydi5d_test.go:32:35: invalid operation: cannot index nums[idx] (variable
    of type int)

    /tmp/tmp6rmydi5d_test.go:40:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcrm1vbgu_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sum := 0\n    ret := make([]int,\
    \ len(nums))\n    for i, v := range nums {\n        sum += int(v)\n        ret[i]\
    \ = sum\n    }\n    return ret\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqihibxze_test.go:45: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=12) %!s(int=11)\
    \ %!s(int=0) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpqihibxze_test.go:45: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=1657) %!s(int=2120) %!s(int=2265) %!s(int=2267) %!s(int=2690) %!s(int=3113)\
    \ %!s(int=3166) %!s(int=3172) %!s(int=3209) %!s(int=6666) %!s(int=6669) %!s(int=6725)\
    \ %!s(int=6725) %!s(int=6771)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpqihibxze_test.go:45: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=1) %!s(int=-10) %!s(int=-42) %!s(int=1) %!s(int=55) %!s(int=-43) %!s(int=-41)\
    \ %!s(int=-44)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n    \
    \    tmpqihibxze_test.go:45: expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=6) %!s(int=10) %!s(int=15) %!s(int=21) %!s(int=28)\
    \ %!s(int=36) %!s(int=45) %!s(int=55) %!s(int=66)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpqihibxze_test.go:45: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=12) %!s(int=-64) %!s(int=-85) %!s(int=-62) %!s(int=-58)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    for _, n :=\
    \ range nums {\n        n := int(n)\n        digits, _ := strconv.Atoi(string(n))\n\
    \        sort.Ints(nums)\n        sort.Ints(nums)\n        diff := abs(digits-nums[len(nums)-1])\n\
    \        if diff > 1 {\n            sort.Ints(nums)\n            sort.Ints(nums)\n\
    \        }\n        diff := abs(digits-nums[0])\n        if diff > 1 {\n     \
    \       sort.Ints(nums)\n        }\n        if diff > 1 {\n            fmt.Println(nums)\n\
    \        }\n    }\n    return result\n}\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdj68411y_test.go:21:22: undefined: strconv

    /tmp/tmpdj68411y_test.go:22:9: undefined: sort

    /tmp/tmpdj68411y_test.go:23:9: undefined: sort

    /tmp/tmpdj68411y_test.go:24:17: undefined: abs

    /tmp/tmpdj68411y_test.go:26:13: undefined: sort

    /tmp/tmpdj68411y_test.go:27:13: undefined: sort

    /tmp/tmpdj68411y_test.go:29:14: no new variables on left side of :=

    /tmp/tmpdj68411y_test.go:29:17: undefined: abs

    /tmp/tmpdj68411y_test.go:31:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    out := []int{}\n    var maxsum int\n\
    \    var i int\n    for _, num := range nums {\n        sum += num\n        if\
    \ maxsum < sum {\n            maxsum = sum\n        }\n        if maxsum == sum\
    \ {\n            i = i\n            out += nums\n        }\n    }\n    if maxsum\
    \ != sum {\n        fmt.Printf(\"%v\", out)\n        out := append(out, i)\n \
    \       fmt.Printf(\"%v\", out)\n    }\n    return out\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_d7n84p3_test.go:22:9: undefined: sum

    /tmp/tmp_d7n84p3_test.go:23:21: undefined: sum

    /tmp/tmp_d7n84p3_test.go:24:22: undefined: sum

    /tmp/tmp_d7n84p3_test.go:26:22: undefined: sum

    /tmp/tmp_d7n84p3_test.go:28:13: invalid operation: operator + not defined on out
    (variable of type []int)

    /tmp/tmp_d7n84p3_test.go:31:18: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    if len(nums)\
    \ > 0 {\n        // Sort in descending order and select the first item from result\n\
    \        // which sum of digits equals to zero\n        result = nums[len(nums)/2:]\n\
    \        for i := len(nums)/2; i > 0; i-- {\n            tmp := nums[i]\n    \
    \        j := 0\n            for i < len(nums) && j < len(result) {\n        \
    \        if tmp+result[j] > 0 {\n                    tmp += result[j] - nums[i]\n\
    \                } else {\n                    tmp += nums[i] - result[j]\n  \
    \              }\n                j++\n            }\n            // If tmp still\
    \ equals to zero then push the item to result\n            // and decrement j\n\
    \            if tmp == 0 {\n                j := len(result) - 1\n           \
    \     result[j+1] = nums[i]\n                i -= 1\n            }\n        }\n\
    \        // Append items which sum of digits equals to zero to result\n      \
    \  for i := 0; i < len(nums)-1; i++ {\n            tmp := nums[i]\n          \
    \  j := 0\n            for i < len(nums) && j < len(result) {\n              \
    \  if tmp+result[j] > 0 {\n                    tmp += result[j] - nums[i]\n  \
    \              } else {\n                    tmp += nums[i] - result[j]\n    \
    \            }\n                j++\n            }\n            if tmp == 0 {\n\
    \                j := len(result) - 1\n                result[j+1] = nums[i]\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpb8iebi4w_test.go:81: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-1) %!s(int=-11) %!s(int=-12)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n        tmpb8iebi4w_test.go:81:\
    \ expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423)\
    \ %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46)\
    \ %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=53) %!s(int=6) %!s(int=37)\
    \ %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0) %!s(int=46)]'\n    --- FAIL:\
    \ TestOrder_By_Points/test_num__3 (0.00s)\n        tmpb8iebi4w_test.go:81: expected\
    \ '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43)\
    \ %!s(int=54)]', got '[%!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n   \
    \ --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpb8iebi4w_test.go:81:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpb8iebi4w_test.go:81: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=-76)\
    \ %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var res []int\n    sum := 0\n  \
    \  for _, v := range nums {\n        sum += int(v)\n    }\n    for _, v := range\
    \ nums {\n        i := sum - int(v)\n        if i < 0 {\n            i = len(nums)-1\n\
    \        }\n        if i != len(res) {\n            res = append(res, v)\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmphjly7kes_test.go:53: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmphjly7kes_test.go:53: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmphjly7kes_test.go:53: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2)]'\n    --- FAIL:\
    \ TestOrder_By_Points/test_num__4 (0.00s)\n        tmphjly7kes_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)\
    \ %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n     \
    \   tmphjly7kes_test.go:53: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4)\
    \ %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6) %!s(int=6)\
    \ %!s(int=-76) %!s(int=-21) %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var res []int\n    if len(nums)\
    \ <= 0 {\n        return res\n    }\n    var cur int\n    var sum int\n    i =\
    \ j = 1\n    for k := len(nums) - 1; k >= 0; k-- {\n        cur = nums[k]\n  \
    \      sum += cur\n        if i == 0 || sum < 0 {\n            sum = 0\n     \
    \   }\n        if j == 0 || sum > 0 {\n            sum = 0\n        }\n      \
    \  if i != 0 && sum < 0 {\n            sum = 0\n        }\n        if j != 0 &&\
    \ sum > 0 {\n            sum = 0\n        }\n        if i != 0 && j != 0 && sum\
    \ < 0 {\n            sum = 0\n        }\n        if j != 0 && j != 0 && sum >\
    \ 0 {\n            sum = 0\n        }\n        if i == 0 || j == 0 {\n       \
    \     sum = 0\n        }\n        if k == 0 {\n            sum /= 10\n       \
    \     i = -1\n            j = 1\n            continue\n        }\n        if sum\
    \ > 0 {\n            res = append(res, cur)\n        } else {\n            res\
    \ = append(res, nums[k-1])\n        }\n        i = j\n        j = 1\n    }\n \
    \   return res\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbu11me92_test.go:24:11: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    var i int\n\
    \    for _, v := range nums {\n        sum += v\n        if sum < 0 {\n      \
    \      i = len(result)\n            sum = 0\n        } else {\n            for\
    \ ; i-1 >= 0 && sum >= 10; i-- {\n                sum = sum%10\n            }\n\
    \            result = append(result, nums[i])\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf2zp43l8_test.go:21:9: undefined: sum

    /tmp/tmpf2zp43l8_test.go:22:12: undefined: sum

    /tmp/tmpf2zp43l8_test.go:24:13: undefined: sum

    /tmp/tmpf2zp43l8_test.go:26:31: undefined: sum

    /tmp/tmpf2zp43l8_test.go:27:23: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Sort(func(i, j int) bool {\n\
    \        // sum digits of two numbers, return true if they are equal\n       \
    \ digit1 := nums[i] / 10 % 10\n        digit2 := nums[j] / 10 % 10\n        sum\
    \ := digit1 + digit2\n        if sum > 0 {\n            return sum > digit1\n\
    \        }\n        return sum < digit1\n    })\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9x0zndur_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp4dan9iqd_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp4dan9iqd_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp4dan9iqd_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp4dan9iqd_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp4dan9iqd_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp4dan9iqd_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp4dan9iqd_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp4dan9iqd_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp4dan9iqd_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp4dan9iqd_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var ret []int\n    var maxDiff int\n\
    \    for _, v := range nums {\n        if v == 0 {\n            continue\n   \
    \     }\n        diff := int(\"1\"+string(v), 10)\n        if maxDiff < diff {\n\
    \            maxDiff = diff\n        }\n    }\n    for _, v := range nums {\n\
    \        if v == 0 {\n            continue\n        }\n        diff := int(\"\
    1\"+string(v), 10)\n        if maxDiff != diff {\n            ret = []int{v, nums[len(nums)-1]}\n\
    \            break\n        }\n    }\n    return ret\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmsl2dzbn_test.go:24:36: too many arguments in conversion to int

    /tmp/tmpmsl2dzbn_test.go:33:36: too many arguments in conversion to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    total := 0\n    sort.Ints(nums)\n\
    \    for _, num := range nums {\n        total += num\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplfbv9324_test.go:19:5: undefined: sort

    /tmp/tmplfbv9324_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    // initialize\
    \ result to empty list\n    result = make([]int, 0)\n    // for each number in\
    \ the given list\n    for _, num := range nums {\n        // initialize sum to\
    \ zero\n        var sum int\n        // for each digit in the given number\n \
    \       for d := uint(0); d < 10; d++ {\n            // if the digit is zero\n\
    \            if num%10 == 0 {\n                // add zero\n                sum\
    \ += d\n                // break the loop\n                break\n           \
    \ }\n            // if digit is not zero\n            if num%10 != 0 {\n     \
    \           // add remainder of last digit * 10\n                sum += num%10\
    \ * 10\n                // remove last digit\n                num /= 10\n    \
    \        }\n        }\n        // if the sum of digits equals zero\n        if\
    \ sum == 0 {\n            // append the number\n            result = append(result,\
    \ num)\n        }\n        // if the sum of digits is not zero\n        else {\n\
    \            // append the number as sum of digits\n            result = append(result,\
    \ sum)\n            // append the number\n            result = append(result,\
    \ num)\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq8qx7xvj_test.go:48:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Sort(IntIntSort(nums))\n  \
    \  return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2f1nk9p_test.go:18:5: undefined: sort

    /tmp/tmpk2f1nk9p_test.go:18:15: undefined: IntIntSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    digits := make(map[int]int)\n    for _, num := range nums {\n\
    \        digits[num] = digits[num] + 1\n    }\n    sort.Ints(nums)\n    result\
    \ := make([]int, 0, len(nums))\n    for _, num := range nums {\n        if digits[num]\
    \ > 0 {\n            digits[num] -= 1\n            result = append(result, num)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9396cael_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    n := len(nums)\n    result := make([]int,\
    \ n)\n    sum_digits := make([]int, n)\n    \n    // TODO: write your code in\
    \ here\n    // Write your code in here\n    for idx, val := range nums {\n   \
    \     sum_digits[idx] = digits(val)\n    }\n    for i, val := range sum_digits\
    \ {\n        result[i] = val\n    }\n    \n    // Sort according to sum_digits\n\
    \    // Sort according to original list index\n    sort.Slice(result, func(i,\
    \ j int) bool {\n        sumA, sumB := sum_digits[i], sum_digits[j]\n        //\
    \ if the sums are same, sort according to original list index\n        if sumA\
    \ == sumB {\n            return result[i] < result[j]\n        }\n        return\
    \ sumA < sumB\n    })\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl8a07_2f_test.go:25:27: undefined: digits

    /tmp/tmpl8a07_2f_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    sort.Ints(nums)\n    var sums []int\n    var minNum int\n \
    \   var minIndex int\n    for i := 0; i < len(nums); i++ {\n        sums = append(sums,\
    \ nums[i])\n        for j := i + 1; j < len(nums); j++ {\n            sums[j]\
    \ -= nums[j]\n            if sums[j] < 0 {\n                sums[j] = 0\n    \
    \            break\n            }\n        }\n        if i == 0 {\n          \
    \  minIndex = i\n            minNum = sums[i]\n            continue\n        }\n\
    \        if sums[i] < minNum {\n            minNum = sums[i]\n            minIndex\
    \ = i\n        }\n    }\n    result := make([]int, len(nums))\n    for i := 0;\
    \ i < len(nums); i++ {\n        if i != minIndex {\n            result[i] = nums[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63miq48o_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    list := make([]int, len(nums))\n\
    \    index := 0\n    for _, n := range nums {\n        num, _ := strconv.Atoi(n)\n\
    \        for num > 0 {\n            list[index], list[num-1] = list[num-1], list[num]\n\
    \            index++\n            num--\n        }\n    }\n    return list\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpizwr9fxi_test.go:21:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ []int{}\n    }\n    count := map[int]int{}\n    index := 0\n    for _, n :=\
    \ range nums {\n        count[n]++\n        if count[n] > 1 {\n            count[n]--\n\
    \        } else {\n            index = n\n        }\n    }\n\n    result := make([]int,\
    \ 0, len(nums))\n    for n, c := range count {\n        if c == 0 {\n        \
    \    continue\n        }\n        result := append(result, n)\n    }\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return sumInt(nums[result[i]]) < sumInt(nums[result[j]])\n\
    \    })\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3kxdjf8p_test.go:22:5: index declared but not used

    /tmp/tmp3kxdjf8p_test.go:37:9: result declared but not used

    /tmp/tmp3kxdjf8p_test.go:39:5: undefined: sort

    /tmp/tmp3kxdjf8p_test.go:40:16: undefined: sumInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := []int{}\n    sum := 0\n\
    \    for _, num := range nums {\n        sum += num\n        result = append(result,\
    \ num)\n    }\n\n    for i := 0; i < len(result); i++ {\n        if result[i]-sum\
    \ > 0 {\n            j := i\n            for ; j < len(result); j++ {\n      \
    \          if result[j]-sum > 0 {\n                    if result[j] < result[j-1]\
    \ {\n                        result = append(result[:j], result[j], result[j+1:]...)\n\
    \                    } else {\n                        result = append(result[:j],\
    \ result[j+1:]...)\n                        break\n                    }\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx3v0k525_test.go:31:70:\
    \ too many arguments in call to append\n\thave ([]int, int, []int)\n\twant ([]int,\
    \ ...int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    res := make([]int, len(nums))\n\
    \    for i := 0; i < len(nums); i++ {\n        sum_digits := sum_digits(nums[i])\n\
    \        j := i\n        for ; j < len(nums); j++ {\n            if sum_digits\
    \ > sum_digits(nums[j]) {\n                res[i] = nums[j]\n                break\n\
    \            }\n        }\n        if j == len(nums) {\n            res[i] = nums[j]\n\
    \        }\n    }\n    return res\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0cx5izk_test.go:20:23: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var res []int\n\n    // Sum of digits\
    \ of numbers\n    var totals []int\n    for _, num := range nums {\n        //\
    \ Use append only once to avoid multiple reallocations\n        if len(totals)\
    \ == 0 {\n            totals = append(totals, num)\n            continue\n   \
    \     }\n\n        totals[len(totals)-1] += num\n    }\n\n    // Sort numbers\n\
    \    for _, total := range totals {\n        // Remember original index\n    \
    \    idx := -1\n        for i := range totals {\n            if totals[i] > total\
    \ {\n                idx = i\n                break\n            }\n        }\n\
    \n        if idx == -1 {\n            res = append(res, total)\n            continue\n\
    \        }\n\n        // Replace original element with sorted one\n        res[idx]\
    \ = total\n    }\n\n    return res\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp33uks0n6_test.go:73: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp33uks0n6_test.go:73: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[%!s(int=6771)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n\
    \        tmp33uks0n6_test.go:73: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98)\
    \ %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=-44)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp33uks0n6_test.go:73:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=66)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmp33uks0n6_test.go:73:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    digit_sums := make([]int, len(nums))\n    sums := make([]int,\
    \ len(nums))\n    for i, d := range nums {\n        digit_sums[i] = d\n      \
    \  sums[i] = d\n    }\n    sort.Sort(digit_sums)\n    for i := range sums {\n\
    \        sums[i] -= digit_sums[i]\n    }\n    for i := range sums {\n        if\
    \ sums[i] == 0 {\n            return nums\n        }\n    }\n    sorted_nums :=\
    \ make([]int, len(nums))\n    for i, d := range nums {\n        sorted_nums[i]\
    \ = d\n    }\n    return sorted_nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkcz5b04p_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) < 2 {\n        return\
    \ nums\n    }\n    m := make(map[int]bool, len(nums))\n    for _, v := range nums\
    \ {\n        m[v] = true\n    }\n    result := make([]int, 0, len(nums))\n   \
    \ for i, v := range nums {\n        if _, ok := m[v]; !ok {\n            result\
    \ = append(result, v)\n        }\n    }\n    sort.Sort(IntSlice{result})\n   \
    \ return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8l6z4fv_test.go:26:9: i declared but not used

    /tmp/tmpj8l6z4fv_test.go:31:5: undefined: sort

    /tmp/tmpj8l6z4fv_test.go:31:15: undefined: IntSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sums := make(map[int]int, len(nums))\n\
    \    for _, v := range nums {\n        sums[v] = sums[v] + 1\n    }\n\n    sorted_nums\
    \ := make([]int, 0, len(sums))\n    for v := range sums {\n        sorted_nums\
    \ = append(sorted_nums, v)\n    }\n    sort.Ints(sorted_nums)\n    for _, v :=\
    \ range sorted_nums {\n        sums[v] -= 1\n    }\n    for _, v := range sums\
    \ {\n        sorted_nums = append(sorted_nums, v)\n    }\n    return sorted_nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmple84onpz_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    m := make(map[int]int)\n    for\
    \ i := range nums {\n        m[nums[i]] = i\n    }\n    m := sorted(m)\n\n   \
    \ out := make([]int, 0, len(nums))\n    for _, v := range m {\n        out = append(out,\
    \ v)\n    }\n    return out\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n \
    \ candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp593jrfq8_test.go:22:7: no new variables on left side of :=

    /tmp/tmp593jrfq8_test.go:22:10: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ []int{}\n    }\n\n    n := 0\n    totalNums := make([]int, len(nums))\n\n  \
    \  for _, num := range nums {\n        if n >= len(totalNums) {\n            totalNums\
    \ = make([]int, len(nums))\n        }\n\n        totalNums[n] += num\n\n     \
    \   n++\n    }\n\n    for i := 0; i < n; i++ {\n        for _, j := range totalNums[i:]\
    \ {\n            totalNums[i] = totalNums[j]+i\n        }\n    }\n\n    return\
    \ totalNums[:n]\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [11] with length 5 [recovered]\n\tpanic: runtime error: index out of\
    \ range [11] with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmp2d9lsqam_test.go:37\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmp2d9lsqam_test.go:51\
    \ +0xde5\ntesting.tRunner(0xc000103380, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    out := nums[:0]\n    var max_sum\
    \ int\n    for _, v := range nums {\n        // Calculate the sum of digits in\
    \ v\n        sum_digits := 0\n        for _, d := range strconv.Itoa(v) {\n  \
    \          sum_digits += int(d)\n        }\n        // If this sum is bigger than\
    \ the max sum, append v to the end of the output list\n        if sum_digits >\
    \ max_sum {\n            out = append(out, v)\n            max_sum = sum_digits\n\
    \        } else {\n            // Otherwise, keep looking at the other items in\
    \ the list\n            if sum_digits != max_sum {\n                // If they\
    \ have the same sum, order them by their index in nums\n                sort.Ints(out)\n\
    \                idx_1 := out.Index(v)\n                idx_2 := out.Index(max_sum)\n\
    \                idx_2 += idx_1\n                out.Insert(idx_2, v)\n      \
    \      }\n        }\n    }\n    return out\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvglqc0em_test.go:23:27: undefined: strconv

    /tmp/tmpvglqc0em_test.go:34:17: undefined: sort

    /tmp/tmpvglqc0em_test.go:35:30: out.Index undefined (type []int has no field or
    method Index)

    /tmp/tmpvglqc0em_test.go:36:30: out.Index undefined (type []int has no field or
    method Index)

    /tmp/tmpvglqc0em_test.go:38:21: out.Insert undefined (type []int has no field
    or method Insert)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    for i := range\
    \ nums {\n        nums[i] = nums[i] - nums[i]%10\n    }\n    sort.Ints(nums)\n\
    \    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnootmae_test.go:18:5: undefined: sort

    /tmp/tmpxnootmae_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    length := len(nums)\n    min :=\
    \ nums[0]\n    for _, v := range nums {\n        if v < min {\n            min\
    \ = v\n        }\n    }\n    max := nums[length-1]\n    for _, v := range nums\
    \ {\n        if v > max {\n            max = v\n        }\n    }\n    min += 9\n\
    \    max += 9\n    sum := 0\n    sort.Ints(nums)\n    pos := 0\n    for _, v :=\
    \ range nums {\n        if v < min || v > max {\n            continue\n      \
    \  }\n        for _, c := range strconv.Itoa(v) {\n            sum += int(c) -\
    \ int(sum)\n        }\n        if pos < length-1 && sum > 0 {\n            sum\
    \ += nums[pos+1]\n        }\n        if v == sum {\n            pos = pos+1\n\
    \        } else {\n            nums[pos] = v\n            pos = pos+1\n      \
    \      sum = 0\n        }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuf5duagf_test.go:34:5: undefined: sort

    /tmp/tmpuf5duagf_test.go:40:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, 0)\n    totals\
    \ := map[int]int{}\n\n    for _, v := range nums {\n        v, ok := totals[v]\n\
    \n        if !ok {\n            totals[v] = len(result)\n            result =\
    \ append(result, v)\n        } else {\n            result[totals[v]-1] = v\n \
    \       }\n    }\n\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513980, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513980,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmpa9h6atfs_test.go:28\n\
    command-line-arguments_test.TestOrder_By_Points(0xc0000da1a0?)\n\t/tmp/tmpa9h6atfs_test.go:43\
    \ +0x10f4\ntesting.tRunner(0xc0000da1a0, 0x5292a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sum := 0\n    // Write the logic\
    \ here\n    for _, v := range nums {\n        sum += v\n    }\n    sort.Ints(nums)\n\
    \    for i := range nums {\n        if nums[i] != sum {\n            return nums[i:]\n\
    \        }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5upots1t_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var newNums []int\n\n    for _,\
    \ n := range nums {\n        newNums = append(newNums, n)\n    }\n\n    sort.Slice(newNums,\
    \ func(i, j int) bool {\n        var sum1, sum2 int\n        sum1 = newNums[i]\n\
    \        sum2 = newNums[j]\n\n        if sum1 < sum2 {\n            return true\n\
    \        }\n\n        return false\n    })\n\n    return newNums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0_cz53s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Return the list if there are\
    \ no elements\n    if len(nums) == 0 {\n        return nums\n    }\n    \n   \
    \ // Initialize an empty result list that we will use to keep track of the result\
    \ list.\n    var result []int\n    \n    // Initialize a variable to keep track\
    \ of the sum of each integer's digits.\n    // The variable will be used to compare\
    \ the sums of each consecutive integers' digits.\n    var total_sum int\n    \n\
    \    // Initialize a variable to keep track of the index of the first consecutive\
    \ integer.\n    var first_index int\n    \n    // Iterate through all integers\
    \ in the list\n    for index, num := range nums {\n        // Add each integer\
    \ digit's digit to the sum\n        // of the digits of the integer and update\
    \ the result list accordingly.\n        total_sum += num % 10\n        \n    \
    \    // If the current integer has same sum of its digits as one of the previous\
    \ integers,\n        // then compare them based on the index of the current integer.\n\
    \        if total_sum == nums[index] {\n            // If the current integer\
    \ has the same digit as the first integer in the original list,\n            //\
    \ then compare them based on the index of the current integer.\n            if\
    \ first_index == index {\n                first_index = index\n            } else\
    \ {\n                // If the current integer has different digit as the first\
    \ integer in the original list,\n                // then append the original list\
    \ with the current integer in the result list.\n                result = append(result,\
    \ num)\n            }\n        } else {\n            // If the current integer\
    \ has a different sum of its digits from the previous integers,\n            //\
    \ append the original list with the current integer in the result list.\n    \
    \        result = append(result, num)\n        }\n    }\n    \n    // If there\
    \ are no consecutive integers with the same sum of their digits, append the original\
    \ list.\n    if first_index == -1 {\n        result = append(result, nums[len(nums)-1])\n\
    \    }\n    \n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpmpxko922_test.go:84: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=11) %!s(int=-1) %!s(int=-11)\
    \ %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n    \
    \    tmpmpxko922_test.go:84: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpmpxko922_test.go:84: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=-11) %!s(int=-32)\
    \ %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n    --- FAIL:\
    \ TestOrder_By_Points/test_num__4 (0.00s)\n        tmpmpxko922_test.go:84: expected\
    \ '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpmpxko922_test.go:84:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=6) %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    total := 0\n\n    for i, _ := range nums {\n        total += nums[i]\n  \
    \  }\n    sort.SliceStable(nums, func(i, j int) bool {\n        // return true\
    \ if sum greater than 0\n        if total > 0 {\n            return nums[i]>nums[j]\n\
    \        }\n        return nums[i]<nums[j]\n    })\n    for i, _ := range nums\
    \ {\n        total -= nums[i]\n        tmp = nums[i]\n        if total > 0 {\n\
    \            tmp = -tmp\n        }\n        result = append(result, tmp)\n   \
    \ }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxoxsoo04_test.go:24:5: undefined: sort

    /tmp/tmpxoxsoo04_test.go:33:9: undefined: tmp

    /tmp/tmpxoxsoo04_test.go:35:20: undefined: tmp

    /tmp/tmpxoxsoo04_test.go:37:33: undefined: tmp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    nums = append(nums, 0)\n    for\
    \ _, x := range nums {\n        if x == 0 {\n            continue\n        }\n\
    \        num := x\n        for {\n            sum += num % 10\n            num\
    \ /= 10\n            if num == 0 {\n                break\n            }\n   \
    \     }\n        if sum < 0 {\n            swap := nums[0]\n            switch\
    \ {\n            case sum < 0:\n                nums[0] = nums[1]\n          \
    \      nums[1] = swap\n            case sum == 0:\n                nums[0] = swap\n\
    \            default:\n                nums[1] = nums[0]\n                nums[0]\
    \ = swap\n            }\n        } else {\n            swap := nums[0]\n     \
    \       switch {\n            case sum > 0:\n                nums[0] = nums[1]\n\
    \                nums[1] = swap\n            case sum == 0:\n                nums[0]\
    \ = swap\n            default:\n                nums[1] = nums[0]\n          \
    \      nums[0] = swap\n            }\n        }\n    }\n    return nums[:len(nums)-1]\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_kbz5w_5_test.go:25:13: undefined: sum

    /tmp/tmp_kbz5w_5_test.go:31:12: undefined: sum

    /tmp/tmp_kbz5w_5_test.go:34:18: undefined: sum

    /tmp/tmp_kbz5w_5_test.go:37:18: undefined: sum

    /tmp/tmp_kbz5w_5_test.go:46:18: undefined: sum

    /tmp/tmp_kbz5w_5_test.go:49:18: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var sorted = make([]int, len(nums))\n\
    \    max := 0\n    for i, v := range nums {\n        n := v\n        if n < 0\
    \ {\n            n = -n\n        }\n        digits := 0\n        for {\n     \
    \       digits = digits + 1\n            n /= 10\n            if n == 0 {\n  \
    \              break\n            }\n        }\n        sum += digits\n      \
    \  if max < sum {\n            max = sum\n        }\n        sorted[i] = v\n \
    \   }\n    return sorted\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7pj7cp9u_test.go:33:9: undefined: sum

    /tmp/tmp7pj7cp9u_test.go:34:18: undefined: sum

    /tmp/tmp7pj7cp9u_test.go:35:19: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    for _, num\
    \ := range nums {\n        // Find a number which has sum of its digits as its\
    \ value.\n        index := 0\n        for idx := 0; idx < len(nums); idx++ {\n\
    \            idx += idx\n        }\n        if nums[index] < 0 {\n           \
    \ index = len(nums)\n        }\n        if nums[index] >= 10 {\n            continue\n\
    \        }\n        // The number is found to have an exact sum\n        if nums[index]+nums[index+1]\
    \ != num {\n            continue\n        }\n        // The number is found to\
    \ have a partial sum\n        if nums[index] + nums[index+1] >= num {\n      \
    \      index = len(nums)\n        }\n        // The number is found to have a\
    \ large sum of its digits\n        if nums[index] + nums[index+1] > num {\n  \
    \          index = len(nums)\n        }\n        // The number is found to have\
    \ a small sum of its digits\n        if nums[index] + nums[index+1] < num {\n\
    \            index = 0\n        }\n        result = append(result, num)\n    }\n\
    \    return append(result, nums[len(nums)-1])\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points({0xc000125c70?, 0x564b5b?,\
    \ 0x564b5b?})\n\t/tmp/tmp88tot_sq_test.go:49 +0xd8\ncommand-line-arguments_test.TestOrder_By_Points(0x0?)\n\
    \t/tmp/tmp88tot_sq_test.go:61 +0x1f3\ntesting.tRunner(0xc000103520, 0x529168)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your solution here\n  \
    \  return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpowpcgaan_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpowpcgaan_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpowpcgaan_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpowpcgaan_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpowpcgaan_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ []int{}\n    }\n    digit_sums := map[int]int{}\n    for i, num := range nums\
    \ {\n        digit_sums[num] += i\n    }\n    var sorted_nums []int\n    for _,\
    \ sum := range digit_sums {\n        sorted_nums = append(sorted_nums, sum)\n\
    \    }\n    sorted_nums = append(sorted_nums, nums...)\n    return sorted_nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpmdv6hbke_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=11) %!s(int=-1) %!s(int=-11) %!s(int=-12)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n        tmpmdv6hbke_test.go:51:\
    \ expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423)\
    \ %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46)\
    \ %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0) %!s(int=12) %!s(int=2)\
    \ %!s(int=8) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=3) %!s(int=4) %!s(int=7)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=1234) %!s(int=423) %!s(int=463) %!s(int=145)\
    \ %!s(int=2) %!s(int=423) %!s(int=423) %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457)\
    \ %!s(int=3) %!s(int=56) %!s(int=0) %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpmdv6hbke_test.go:51: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=1) %!s(int=-11) %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98)\
    \ %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpmdv6hbke_test.go:51: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=8) %!s(int=9) %!s(int=10)\
    \ %!s(int=0) %!s(int=1) %!s(int=7) %!s(int=2) %!s(int=6) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpmdv6hbke_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=3)\
    \ %!s(int=3) %!s(int=4) "
  timestamp: 1660074653
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    p := make([]int, len(nums))\n  \
    \  for i, v := range nums {\n        // If there is only one element in nums,\n\
    \        // use p as result\n        if i == len(nums) {\n            p = append(p,\
    \ v)\n            continue\n        }\n        // Sum the digits of the current\
    \ element\n        // and compare with the first element\n        // of the new\
    \ sorted list\n        if v := sumDigits(v); v < p[0] {\n            p = append(p,\
    \ v)\n            continue\n        }\n        // If the sum of the digits of\
    \ current element is equal\n        // with the first element of new sorted list,\n\
    \        // sort the new sorted list by index\n        if i == 0 {\n         \
    \   sort.Ints(p)\n            sort.Ints(nums)\n            continue\n        }\n\
    \        // If the sum of the digits of current element is greater\n        //\
    \ than the first element of new sorted list,\n        // swap first element and\
    \ current element\n        if v > p[0] {\n            p[0] = v\n            p[i]\
    \ = nums[0]\n        }\n    }\n    return p\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgj356pfn_test.go:29:17: undefined: sumDigits

    /tmp/tmpgj356pfn_test.go:37:13: undefined: sort

    /tmp/tmpgj356pfn_test.go:38:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your solution here\n  \
    \  return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpowpcgaan_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpowpcgaan_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpowpcgaan_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpowpcgaan_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpowpcgaan_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sorted_nums := nums[:0]\n    var\
    \ i int\n    // Get sum of digits\n    for _, v := range nums {\n        d :=\
    \ 0\n        for _, d < 9, v%10 {\n            d += int(v%10)\n            v =\
    \ int(v / 10)\n        }\n        sorted_nums = append(sorted_nums, d)\n    }\n\
    \    // Sort nums\n    sorted_nums = append(sorted_nums, i) // Patch list\n  \
    \  for i, v := range sorted_nums {\n        if sorted_nums[i] > i {\n        \
    \    sorted_nums[i], sorted_nums[i] = i, sorted_nums[i]\n        }\n    }\n  \
    \  return sorted_nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8km_r9a7_test.go:23:13: expected 1 expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // your code here\n    result :=\
    \ make([]int, len(nums))\n    result := append(result, nums...)\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        sum1 := 0\n        sum2 := 0\n        for _,\
    \ number := range result[i:] {\n            sum1 += int(number%10)\n         \
    \   sum2 += int(number/10)\n        }\n        return sum1 > sum2\n    })\n  \
    \  return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_9ruzuk_test.go:20:12: no new variables on left side of :=

    /tmp/tmpw_9ruzuk_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_y4epasi_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074400
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var res []int\n    var tmp int\n\
    \    var i int\n    var digit int\n    for i = range nums {\n        digit = nums[i]\
    \ % 10\n        if (i == 0 || digit < nums[i-1]) {\n            tmp = tmp + digit\n\
    \        } else {\n            tmp = tmp - digit\n        }\n        res = append(res,\
    \ tmp)\n    }\n    return res\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpl3ovgfs6_test.go:52: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=0) %!s(int=-1)\
    \ %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpl3ovgfs6_test.go:52: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=4)\
    \ %!s(int=7) %!s(int=10) %!s(int=15) %!s(int=17) %!s(int=14) %!s(int=17) %!s(int=20)\
    \ %!s(int=26) %!s(int=19) %!s(int=26) %!s(int=29) %!s(int=23) %!s(int=23) %!s(int=17)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpl3ovgfs6_test.go:52:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=-1)\
    \ %!s(int=3) %!s(int=-5) %!s(int=-7) %!s(int=-10)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpl3ovgfs6_test.go:52: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=-1) %!s(int=-4) %!s(int=-8) %!s(int=-13)\
    \ %!s(int=-19) %!s(int=-26) %!s(int=-34) %!s(int=-43) %!s(int=-43) %!s(int=-42)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpl3ovgfs6_test.go:52:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=0) %!s(int=-6) %!s(int=-12) %!s(int=-18) %!s(int=-17)\
    \ %!s(int=-20) %!s(int=-16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    \n    summ := 0\n    index := 0\n\
    \    for i, num:= range nums {\n        summ+= num\n        index = i\n    }\n\
    \    \n    var tmp []int\n    \n    for i := 0; i < len(nums); i++ {\n       \
    \ if summ == 0 {\n            tmp = append(tmp, nums[i])\n        } else {\n \
    \           if nums[i] > summ {\n                tmp = append(tmp, nums[i])\n\
    \            }\n        }\n        \n        summ-= nums[i]\n    }\n    \n   \
    \ return tmp\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9nx64un_test.go:20:5: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) <= 0 {\n        return\
    \ nums\n    }\n\n    // Create a map from each digits to its index\n    var digits\
    \ map[int]int\n    digits := make(map[int]int, len(nums))\n    for idx, digit\
    \ := range nums {\n        digits[digit] = idx\n    }\n\n    // Sort the digits\
    \ in ascending order\n    var sortedDigits []int\n    sortedDigits = make([]int,\
    \ len(digits))\n    for _, key := range digits {\n        sortedDigits[key.(int)]\
    \ = key.(int)\n    }\n\n    // Now sort the original list based on the sorted\
    \ digits map\n    var sortedNums []int\n    sortedNums = make([]int, len(nums))\n\
    \    for idx := range nums {\n        sortedNums[idx] = sortedDigits[nums[idx]]\n\
    \    }\n\n    return sortedNums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6krjsv2w_test.go:24:12: no new variables on left side of :=

    /tmp/tmp6krjsv2w_test.go:33:35: invalid operation: key (variable of type int)
    is not an interface

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    var found\
    \ bool\n\n    for _, num := range nums {\n        digits, _ := convert_int(num)\n\
    \        found := false\n        for _, sum := range result {\n            if\
    \ sum == digits {\n                found = true\n                break\n     \
    \       }\n        }\n        if !found {\n            result = append(result,\
    \ num)\n        }\n    }\n\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1l1d8r0l_test.go:19:9: found declared but not used

    /tmp/tmp1l1d8r0l_test.go:22:22: undefined: convert_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Sort(bySum(nums))\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppi4exh41_test.go:18:5: undefined: sort

    /tmp/tmppi4exh41_test.go:18:15: undefined: bySum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    nums2 := make([]int, len(nums))\n\
    \    for i := 0; i < len(nums); i++ {\n        nums2[i] = 0\n    }\n    for _,\
    \ num := range nums {\n        nums2[num] = num\n    }\n    sort.Ints(nums2)\n\
    \    return nums2\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0l_se3q8_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sorted_nums := []int{}\n    for\
    \ _, num := range nums {\n        nums := sumDigits(num)\n        if nums == nil\
    \ {\n            sorted_nums = append(sorted_nums, num)\n            continue\n\
    \        }\n        for i, _ := range sorted_nums {\n            if nums == sorted_nums[i]\
    \ {\n                sorted_nums[i] = num\n                break\n           \
    \ }\n        }\n    }\n    return sorted_nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpremnhn_t_test.go:20:17: undefined: sumDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n\n    sums := make([]int, len(nums))\n    for i := range nums {\n\
    \        sums[i] = nums[i]\n    }\n\n    for i := 0; i < len(sums)-1; i++ {\n\
    \        v := sums[i]\n        for j := i + 1; j < len(sums); j++ {\n        \
    \    if sums[j] > v {\n                // Found a pair of elements whose sum is\
    \ larger than the current v\n                // Swap the elements\n          \
    \      t := sums[j]\n                sums[j] = v\n                v = t\n    \
    \        }\n        }\n    }\n\n    result := make([]int, 0)\n    for _, v :=\
    \ range sums {\n        result = append(result, v)\n    }\n\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpla6m54pj_test.go:66: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=1) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpla6m54pj_test.go:66: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=423) %!s(int=145) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpla6m54pj_test.go:66:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11) %!s(int=-32) %!s(int=-32)\
    \ %!s(int=-32) %!s(int=-98) %!s(int=-98) %!s(int=-98)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpla6m54pj_test.go:66: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpla6m54pj_test.go:66: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=-76) %!s(int=-76) %!s(int=-76) %!s(int=-76)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        result [i] = nums[i]\n    }\n    sort.Sort(intsBySum(result))\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2m1bcato_test.go:22:5: undefined: sort

    /tmp/tmp2m1bcato_test.go:22:15: undefined: intsBySum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) < 2 {\n        return\
    \ nums\n    }\n    \n    count := 0\n    result := make([]int, len(nums))\n  \
    \  for i := 0; i < len(nums); i++ {\n        sumOfDigits := 0\n        for j :=\
    \ 0; j < len(nums)-i; j++ {\n            sumOfDigits += int(nums[j])%10\n    \
    \    }\n        if sumOfDigits > count {\n            count = sumOfDigits\n  \
    \          result = make([]int, i+1)\n            copy(result, nums[i:])\n   \
    \     }\n        result[i] = nums[i]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points({0xc000024390?, 0x5, 0x5})\n\
    \t/tmp/tmpne1sw816_test.go:34 +0x1b8\ncommand-line-arguments_test.TestOrder_By_Points(0x0?)\n\
    \t/tmp/tmpne1sw816_test.go:46 +0x7f\ntesting.tRunner(0xc0000cc4e0, 0x529168)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    var sorted\
    \ = nums\n    var sum int\n    for i := range nums {\n        sum += int(nums[i])\n\
    \        sorted = append(sorted, i)\n    }\n    if sum < 0 {\n        sorted =\
    \ append(sorted, -1)\n    }\n    return sorted\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4u78e99a_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    for i := 0;\
    \ i < len(nums); i++ {\n        digit := nums[i]\n        for j > 0 && (j + 1)\
    \ * digit > nums[i] {\n            j--\n        }\n        nums[i], nums[j] =\
    \ nums[j], nums[i]\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0mogfp_5_test.go:18:5: undefined: sort

    /tmp/tmp0mogfp_5_test.go:21:13: undefined: j

    /tmp/tmp0mogfp_5_test.go:22:13: undefined: j

    /tmp/tmp0mogfp_5_test.go:24:33: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var index int\n    var sum  int\n\
    \    \n    for index, sum = 0, 0; index < len(nums); index++ {\n        sum +=\
    \ nums[index]\n        if sum > 9 {\n            sum -= 10\n            nums[index]\
    \ = sum - 10\n        }\n    }\n\n    for index, value := range nums {\n     \
    \   nums[index] = value\n    }\n\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp8gacv0lq_test.go:54: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=-8) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp8gacv0lq_test.go:54: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1214)\
    \ %!s(int=1627) %!s(int=2080) %!s(int=2215) %!s(int=2207) %!s(int=2620) %!s(int=3033)\
    \ %!s(int=3076) %!s(int=3072) %!s(int=3099) %!s(int=6546) %!s(int=6539) %!s(int=6585)\
    \ %!s(int=6575) %!s(int=6611)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmp8gacv0lq_test.go:54: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=1) %!s(int=-11) %!s(int=-32) %!s(int=43) %!s(int=35) %!s(int=-98)\
    \ %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmp8gacv0lq_test.go:54: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-10) %!s(int=5)\
    \ %!s(int=-9) %!s(int=7) %!s(int=-4) %!s(int=-5) %!s(int=-5) %!s(int=-4)]'\n \
    \   --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmp8gacv0lq_test.go:54:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=0) %!s(int=6) %!s(int=-8) %!s(int=-76) %!s(int=-21)\
    \ %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // base case\n    if len(nums) <\
    \ 1 {\n        return []int{}\n    }\n\n    // sort by sum of digits\n    sum\
    \ := 0\n    for _, v := range nums {\n        sum += v\n    }\n    sort.Ints(nums)\n\
    \    sort.Sort(func(i, j int) bool {\n        return sum-nums[i] > sum-nums[j]\n\
    \    })\n\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzkj22znx_test.go:28:5: undefined: sort

    /tmp/tmpzkj22znx_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Slice(nums, func(i, j int)\
    \ bool {\n        sum := nums[i] + nums[j]\n        return sum < 0\n    })\n \
    \   return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn12ko33m_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n\n    // The original\
    \ list should be modified in-place.\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprxpd5n7p_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here.\n    var\
    \ sorted = []int{}\n    // Sort nums in ascending order\n    for _, num := range\
    \ nums {\n        sorted = append(sorted, num)\n    }\n    sort.Ints(sorted)\n\
    \    // Find sum of every num in nums\n    var sumOfDigits []int = []int{}\n \
    \   for _, num := range sorted {\n        sumOfDigits = append(sumOfDigits, num%10)\n\
    \    }\n    // Sort sumOfDigits in descending order\n    for _, num := range sumOfDigits\
    \ {\n        sorted = append(sorted, num*-1+10)\n    }\n    // Return sorted list\n\
    \    return sorted\n}\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa96kmkpm_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here.\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpg1980umg_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpg1980umg_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpg1980umg_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpg1980umg_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpg1980umg_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    index := make([]int, len(nums))\n\
    \    i := 0\n    for _, ni := range nums {\n        if ni == -1 {\n          \
    \  index[i] = i\n            i += 1\n            continue\n        }\n       \
    \ sum += ni\n        index[i] = i\n        i += sort_by_digit_naive(ni)\n    }\n\
    \    for i < len(index) {\n        index[i] = i\n        i += 1\n    }\n    return\
    \ index\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpduzn68rq_test.go:26:9: undefined: sum

    /tmp/tmpduzn68rq_test.go:28:14: undefined: sort_by_digit_naive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    m := make(map[int]int, len(nums))\n\
    \    for i, v := range nums {\n        m[v] = i\n    }\n    var result []int\n\
    \    for key, _ := range m {\n        result = append(result, key)\n    }\n  \
    \  sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65sh5ksu_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    for idx, num := range nums {\n        // Use map to calculate the sum of\
    \ the digits of the number\n        // and return the corresponding numbers in\
    \ result list\n        // or add number to the result list if its sum doesn't\
    \ exist yet\n        // The key of this map is sum of digit of the number\n  \
    \      // The value of this map is index of the number in original list\n    \
    \    sumMap := make(map[int]int, len(nums)+1)\n        for _, c := range num {\n\
    \            sumMap[c] += 1\n        }\n        sum := sumMap[0]\n        for\
    \ _, sum := range sumMap {\n            if sum > 0 {\n                sum *= 10\n\
    \                sum += sum\n            }\n            if sum == 0 {\n      \
    \          result[idx] = idx\n                break\n            } else {\n  \
    \              sum -= 10\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwhzvl6ih_test.go:26:27: cannot range over num (variable of type int)

    /tmp/tmpwhzvl6ih_test.go:29:9: sum declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // initialize result list\n    var\
    \ result []int\n    // initialize a counter\n    var index int\n\n    // if there\
    \ are no integers, return an empty list\n    if len(nums) == 0 {\n        return\
    \ result\n    }\n\n    // for all the integers in nums\n    for _, n := range\
    \ nums {\n        // add n to result\n        result = append(result, n)\n   \
    \     // increment index\n        index++\n    }\n\n    // initialize a map with\
    \ keys equal to result\n    var mIndexToInt map[int]int\n    mIndexToInt = make(map[int]int)\n\
    \n    // iterate through result and find sum of its digits\n    for _, i := range\
    \ result {\n        digits, ok := sumOfDigits(i)\n        // if sumOfDigits returns\
    \ an error\n        if ok {\n            // get the index of i in mIndexToInt\n\
    \            // if index is not existed, add it\n            if _, ok := mIndexToInt[digits];\
    \ !ok {\n                mIndexToInt[digits] = index\n                // increment\
    \ index\n                index++\n            }\n        }\n    }\n\n    // iterate\
    \ through mIndexToInt and get the ordered values\n    result := make([]int, 0)\n\
    \    for _, i := range mIndexToInt {\n        result = append(result, i)\n   \
    \ }\n\n    // return the ordered list\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9nhdtwvf_test.go:42:23: undefined: sumOfDigits

    /tmp/tmp9nhdtwvf_test.go:56:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var output []int\n    for i, num\
    \ := range nums {\n        output := 0\n        for _, digit := range strconv.Itoa(num)\
    \ {\n            output += int(digit)\n        }\n        output += i\n      \
    \  output = output % len(nums)\n        if len(nums) > 0 && nums[output] == num\
    \ {\n            output++\n        }\n        nums[output] = num\n    }\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfirykev4_test.go:18:9: output declared but not used

    /tmp/tmpfirykev4_test.go:21:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    s := new(int)\n    min := int64(math.MaxInt64)\n    for _,\
    \ v := range nums {\n        s += v\n        if s < min {\n            min = s\n\
    \        }\n    }\n    p := make([]int, len(nums))\n    for i, v := range nums\
    \ {\n        t := v - min\n        if t < 0 {\n            t *= -1\n        }\n\
    \        if t > 0 {\n            p[i] = t + min\n        } else {\n          \
    \  p[i] = v\n        }\n    }\n    return p\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqamn_pm1_test.go:22:18: undefined: math

    /tmp/tmpqamn_pm1_test.go:24:9: invalid operation: s += v (mismatched types *int
    and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var tmp int\n    var res []int\n\
    \n    for _, num := range nums {\n        // num is positive, append it\n    \
    \    if num > 0 {\n            res = append(res, num)\n            continue\n\
    \        }\n        // num is negative, find the first occurrence of -1\n    \
    \    // from the left side of nums\n        for i := 0; i < len(nums); i++ {\n\
    \            if nums[i] == -1 {\n                // nums[i] is -1, so num is first\
    \ occurrence\n                // of -1 from left side of nums\n              \
    \  tmp = i\n                break\n            }\n        }\n        // num is\
    \ positive\n        // nums[i] is positive, so num is in the middle\n        //\
    \ of the nums from left side of nums\n        res = append(res, nums[tmp])\n \
    \       // nums[i] is -1, so num is in the middle\n        // of the nums from\
    \ left side of nums\n        nums[tmp] = nums[i]\n    }\n\n    return res\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdijjbklo_test.go:43:26: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    count := make(map[int]int)\n   \
    \ for _, num := range nums {\n        n := 10 * num + count[num]\n        count[n]++\n\
    \    }\n\n    result := []int{}\n    for _, c := range count {\n        result\
    \ = append(result, c)\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp9p1x8u_b_test.go:49: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp9p1x8u_b_test.go:49: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmp9p1x8u_b_test.go:49: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n      \
    \  tmp9p1x8u_b_test.go:49: expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmp9p1x8u_b_test.go:49: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var result []int\n    \n    var\
    \ tempSum = nums[0]\n    for _, v := range nums {\n        result += v\n     \
    \   tempSum += v\n    }\n    \n    result = order_by_indexes(tempSum, result)\n\
    \    \n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi597hres_test.go:22:9: invalid operation: result += v (mismatched types
    []int and int)

    /tmp/tmpi597hres_test.go:26:14: undefined: order_by_indexes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    numsMap := make(map[int]int)\n \
    \   var maxLen int\n    for _, num := range nums {\n        numsMap[num]++\n \
    \       if numsMap[num]>maxLen {\n            maxLen = numsMap[num]\n        }\n\
    \    }\n\n    sort.Ints(nums)\n    for k, v := range numsMap {\n        for i\
    \ := 0; i < v; i++ {\n            sort.Ints(nums[:k])\n        }\n    }\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcy0logom_test.go:27:5: undefined: sort

    /tmp/tmpcy0logom_test.go:30:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ []int{}\n    }\n\n    // Store sums of digits in map\n    // map[int]int\n \
    \   sums := map[int]int{}\n\n    // Iterate over original list\n    for _, v :=\
    \ range nums {\n        // Check if already in map and add digit to existing key\n\
    \        if v, ok := sums[v]; ok {\n            sums[v] += v\n        } else {\n\
    \            sums[v] = v\n        }\n    }\n\n    result := []int{}\n\n    //\
    \ Sort keys in map by value and then index\n    // This ensures that negative\
    \ numbers are sorted before positive ones.\n    for _, v := range sums {\n   \
    \     result = append(result, v)\n    }\n    for i := range result {\n       \
    \ result[i] = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpee4s8ajs_test.go:67: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpee4s8ajs_test.go:67: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[%!s(int=1234)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n\
    \        tmpee4s8ajs_test.go:67: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98)\
    \ %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpee4s8ajs_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpee4s8ajs_test.go:67:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    var currentSum, lastSum int\n    for _, v := range nums {\n        currentSum\
    \ += v\n        if currentSum > lastSum {\n            lastSum = currentSum\n\
    \            result = append(result, v)\n        } else if currentSum < lastSum\
    \ {\n            currentSum = 0\n            result = append(result, nil)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ansjk79_test.go:27:37: cannot use nil as int value in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var list []int\n\n    // for each\
    \ digit\n    for i, v := range nums {\n        // for each list element\n    \
    \    for _, e := range list {\n            // if the sum of the current element\
    \ and the current digit\n            // are equal, add the index of the current\
    \ element to the\n            // current element in the list\n            if sum,\
    \ ok := sum_of_digits(v, e); ok {\n                list[e] = i\n             \
    \   break\n            }\n        }\n    }\n\n    return list\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpybj202j6_test.go:27:27: undefined: sum_of_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Initialize result with empty\
    \ list\n    result := make([]int, 0, len(nums))\n\n    // Initialize helper variables\n\
    \    carry1 := 0\n    carry2 := 0\n\n    // Iterate over input list, adding digits\
    \ until result is empty\n    for i, num := range nums {\n        // Get current\
    \ digit from input list by index\n        digit1 := num % 10\n\n        // Get\
    \ next digit from input list by index\n        digit2 := num // 10\n\n       \
    \ // Add next digit to carry the 1\n        carry1 = digit1\n\n        // Update\
    \ result if carry2 is needed\n        if carry2 > 0 {\n            // If result\
    \ has enough space, add carry to it\n            result = append(result, carry2)\n\
    \            // Reset carry for next iteration\n            carry2 = 0\n     \
    \   } else {\n            // If result has no space, add next digit to it\n  \
    \          result = append(result, digit2)\n        }\n\n        // Add next digit\
    \ to carry the 2\n        carry2 += digit2\n    }\n\n    // Append remaining carry\
    \ to result\n    if carry2 > 0 {\n        result = append(result, carry2)\n  \
    \  }\n\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvjtm_b53_test.go:22:5: carry1 declared but not used

    /tmp/tmpvjtm_b53_test.go:26:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    var output\
    \ []int\n    result := 0\n    sum := 0\n    for _, v := range nums {\n       \
    \ sum = sum + int(v)\n    }\n    for _, v := range nums {\n        if sum%10 ==\
    \ v {\n            sort.Ints(nums)\n            output = append(output, nums[result])\n\
    \            result += 1\n        }\n    }\n    return output\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphc8yhajt_test.go:18:5: undefined: sort

    /tmp/tmphc8yhajt_test.go:27:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    m := map[int]int{}\n    for _, v\
    \ := range nums {\n        m[v] = m[v] + 1\n    }\n    sort.Sort(sortIntsByDigit(m))\n\
    \    nums := make([]int, 0, len(nums))\n    for _, v := range m {\n        nums\
    \ = append(nums, v)\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4cp7ikx_test.go:22:5: undefined: sort

    /tmp/tmpj4cp7ikx_test.go:22:15: undefined: sortIntsByDigit

    /tmp/tmpj4cp7ikx_test.go:23:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Sort the list\n    sort.Ints(nums)\n\
    \    // Keep the index of items\n    var index []int = []int{}\n    for _, i :=\
    \ range nums {\n        if i != 0 {\n            // Get a sum of each digit\n\
    \            sum, _ := nums.Sum()\n            // Get the index of item in original\
    \ list\n            index = append(index, int(sum/10))\n        }\n    }\n   \
    \ // Sort the index\n    sort.Ints(index)\n    // Return the sorted list\n   \
    \ return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp220kyaxk_test.go:19:5: undefined: sort

    /tmp/tmp220kyaxk_test.go:25:28: nums.Sum undefined (type []int has no field or
    method Sum)

    /tmp/tmp220kyaxk_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    \n    var output\
    \ []int\n    var cur int\n    var prev int\n    \n    for idx, num := range nums\
    \ {\n        // For the first element in the list start sorting by its value\n\
    \        if idx == 0 {\n            output = append(output, num)\n           \
    \ continue\n        }\n        \n        // If prev and cur share the same digit,\n\
    \        // sort by their position index in the original list.\n        if num\
    \ == prev && num == cur {\n            sort.Ints(output)\n            sort.Ints(nums)\n\
    \            sort.Sort(sort.Reverse(sort.IntSlice(output)))\n            \n  \
    \          output = []int{nums[sort.Search(len(nums), func(i int) bool { return\
    \ nums[i] > nums[sort.Search(len(nums), func(i int) bool { return nums[i] == num\
    \ })] })]}\n            output = append(output, num)\n            continue\n \
    \       }\n        \n        // The first element of list has different digit\
    \ than the previous one.\n        // Sort the list based on the previous digit\
    \ and current digit.\n        if prev != 0 {\n            output = append(output,\
    \ num)\n            continue\n        }\n        \n        // The first element\
    \ of list is different from the previous one and it\n        // has the same digit\
    \ as the previous one.\n        // Sort the list based on the current digit.\n\
    \        output = append(output, num)\n        cur = num\n        prev = 0\n \
    \   }\n    \n    return output\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_l_w6oc_test.go:18:5: undefined: sort

    /tmp/tmpe_l_w6oc_test.go:34:13: undefined: sort

    /tmp/tmpe_l_w6oc_test.go:35:13: undefined: sort

    /tmp/tmpe_l_w6oc_test.go:36:13: undefined: sort

    /tmp/tmpe_l_w6oc_test.go:38:33: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) <= 0 {\n        return\
    \ []int{}\n    }\n\n    // Get sum for each item\n    sums := make([]int, len(nums))\n\
    \    for i := range sums {\n        sums[i] = nums[i]\n    }\n\n    // Sort the\
    \ items by sum\n    sort.Sort(sort.Reverse(sort.IntSlice(sums)))\n\n    // Return\
    \ the sorted items\n    return sums[:len(sums)]\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuffk8ft6_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // PATCH list\n    sort.Slice(nums,\
    \ func(i, j int) bool {\n        // PATCH list\n        if nums[i] < 0 {\n   \
    \         return false\n        }\n\n        // PATCH list\n        if nums[i]\
    \ > nums[j] {\n            return true\n        }\n\n        // PATCH list\n \
    \       return nums[i] - nums[j] < 0\n    })\n\n    // PATCH list\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpji26hn14_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here\n    nums\
    \ = nums[:0]\n\n    var biggest_sum int = -1\n\n    for _, v := range nums {\n\
    \        sum += v\n        if sum > biggest_sum {\n            biggest_sum = sum\n\
    \        }\n    }\n\n    biggest_sum_index := 0\n    for index, v := range nums\
    \ {\n        sum += v\n        if sum == biggest_sum {\n            biggest_sum_index\
    \ = index\n        }\n    }\n\n    var output []int\n    for _, v := range nums\
    \ {\n        sum += v\n        if sum == biggest_sum {\n            output = append(output,\
    \ biggest_sum_index)\n        } else {\n            output = append(output, v)\n\
    \        }\n    }\n\n    return output\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqkzelyz_test.go:24:9: undefined: sum

    /tmp/tmpzqkzelyz_test.go:25:12: undefined: sum

    /tmp/tmpzqkzelyz_test.go:26:27: undefined: sum

    /tmp/tmpzqkzelyz_test.go:32:9: undefined: sum

    /tmp/tmpzqkzelyz_test.go:33:12: undefined: sum

    /tmp/tmpzqkzelyz_test.go:40:9: undefined: sum

    /tmp/tmpzqkzelyz_test.go:41:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    for i := range\
    \ nums {\n        for _, j := range nums[i:] {\n            if j > 0 {\n     \
    \           nums[i], nums[j] = nums[j], nums[i]\n                break\n     \
    \       }\n        }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppei28z5r_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    s := make([]int, 0)\n    d := make(map[int]int)\n\
    \    for _, n := range nums {\n        if _, ok := d[n]; !ok {\n            d[n]\
    \ = len(s)\n            s = append(s, n)\n        } else {\n            s := append(s[:d[n]],\
    \ n)\n            s[d[n]-1]++\n        }\n    }\n    return s\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpp9gwczm2_test.go:50: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpp9gwczm2_test.go:50: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1236)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=53) %!s(int=6) %!s(int=37)\
    \ %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0) %!s(int=46)]'\n    --- FAIL:\
    \ TestOrder_By_Points/test_num__3 (0.00s)\n        tmpp9gwczm2_test.go:50: expected\
    \ '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43)\
    \ %!s(int=54)]', got '[%!s(int=1) %!s(int=-11) %!s(int=-32) %!s(int=43) %!s(int=54)\
    \ %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpp9gwczm2_test.go:50: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpp9gwczm2_test.go:50: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // write code here\n    m := map[int]int{}\n\
    \    for _, i := range nums {\n        m[sum(i)] = i\n    }\n    nums = make([]int,\
    \ len(nums))\n    for i, j := range m {\n        nums[i] = j\n    }\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ph291c5_test.go:21:11: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here.\n    s\
    \ := 0\n    n := len(nums)\n    result := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        s += nums[i]\n        result[i] = s\n    }\n    sort.Ints(result)\n\
    \    for i := 0; i < n; i++ {\n        result[i] = nums[result[i]]\n    }\n  \
    \  return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcnm0y_4_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var sortedNums []int\n    var sorted\
    \ = False\n    for _, v := range nums {\n        // add all digits to sortedNums\n\
    \        sorted = true\n        for d := 0; d < 9; d++ {\n            sortedNums\
    \ = append(sortedNums, v%10 + int(v%100/10))\n            v /= 10\n        }\n\
    \n        if !sorted {\n            sortedNums = append(sortedNums, v)\n     \
    \   }\n    }\n\n    return sortedNums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_6bk2a29_test.go:19:18: undefined: False

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var res []int\n    seen := make(map[int]int)\n\
    \    for _, v := range nums {\n        if seen[v] != 0 {\n            seen[v]++\n\
    \        }\n        else {\n            seen[v] = 1\n            res = append(res,\
    \ v)\n        }\n    }\n    for _, v := range seen[:len(seen)] {\n        res\
    \ = append(res, v)\n    }\n    for _, v := range seen[len(seen)-1:] {\n      \
    \  v += 1\n        if seen[v] == 1 {\n            seen[v] = 2\n        }\n   \
    \ }\n    for _, v := range seen {\n        if v > 1 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxo2an9sw_test.go:24:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // write your code here\n    sums\
    \ := make([]int, len(nums))\n    for i, v := range nums {\n        sums[i] = 0\n\
    \        for _, c := range strconv.Itoa(v) {\n            sums[i] += int(c)\n\
    \        }\n    }\n\n    sort.Ints(sums)\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzuwy_r5_test.go:22:27: undefined: strconv

    /tmp/tmpyzuwy_r5_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Write your code here\n    var\
    \ sum int\n    var index int\n    sort.Ints(nums)\n    for index, ele := range\
    \ nums {\n        sum += ele\n        if sum < 0 {\n            sum *= -1\n  \
    \      }\n    }\n    result := make([]int, 0)\n    for _, ele := range nums {\n\
    \        if sum > 0 {\n            if sum == ele*ele {\n                continue\
    \ // skip if sum is the same\n            }\n        } else {\n            if\
    \ sum == ele*ele {\n                result = append(result, ele)\n           \
    \ }\n        }\n        if sum < 0 {\n            sum *= -1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqguta3o_test.go:20:9: index declared but not used

    /tmp/tmpfqguta3o_test.go:21:5: undefined: sort

    /tmp/tmpfqguta3o_test.go:22:9: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \n    for i := 0; i < len(nums); i++ {\n        // Calculate the sum of its digits.\n\
    \        sum := 0\n        for j := len(nums) - i - 1; j >= 0; j-- {\n       \
    \     sum += int(nums[j])\n        }\n\n        // If the sum has already been\
    \ seen before,\n        // add the next item to the result list.\n        if _,\
    \ ok := result[sum]; ok {\n            for j := len(nums) - i - 1; j >= 0; j--\
    \ {\n                result += []int{nums[j]}\n            }\n            continue\n\
    \        }\n\n        // If the sum hasn't been seen before,\n        // add the\
    \ current item to the result list,\n        // and add the next item to the result\
    \ list.\n        result = append(result, nums[i])\n        result = append(result,\
    \ nums[i+1:]...)\n    }\n\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg8d7qpan_test.go:29:21: assignment mismatch: 2 variables but 1 value

    /tmp/tmpg8d7qpan_test.go:31:17: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // Your code here\n    // END PATCH\n\
    \    var sorted = make([]int, len(nums))\n    j := 0\n    for i := 0; i < len(nums);\
    \ i++ {\n        j := sorting(nums[i])\n        sorted[j] = nums[i]\n    }\n \
    \   return sorted\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpusuzo50__test.go:21:5: j declared but not used

    /tmp/tmpusuzo50__test.go:23:14: undefined: sorting

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    \n    if len(nums) == 0 {\n    \
    \    return nums\n    }\n    // Find first value that has same sum\n    i := 0\n\
    \    sum := 0\n    for _, v := range nums {\n        if v > 0 {\n            sum\
    \ += int(v)\n        }\n        if sum == 0 {\n            return nums\n     \
    \   }\n    }\n    \n    // Sort after i after i to make sure nums doesn't get\
    \ modified \n    nums = append(nums[:i], nums[i:]...)\n    nums = append(nums,\
    \ nums[0])\n    nums = append(nums, nums[len(nums)-1])\n    return nums\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpixxud1au_test.go:59: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpixxud1au_test.go:59: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[%!s(int=1234) %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423)\
    \ %!s(int=423) %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56)\
    \ %!s(int=0) %!s(int=46) %!s(int=1234) %!s(int=1234)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpixxud1au_test.go:59: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=1) %!s(int=-11) %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98)\
    \ %!s(int=2) %!s(int=-3) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpixxud1au_test.go:59: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpixxud1au_test.go:59:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=0) %!s(int=6) %!s(int=6) %!s(int=-76) %!s(int=-21)\
    \ %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    n := len(nums)\n    // sort the\
    \ list using their sum digit\n    sort.Slice(nums, func(i, j int) bool {\n   \
    \     sum1 := nums[i]\n        sum2 := nums[j]\n        switch {\n        case\
    \ sum1 < 0:\n            return true\n        case sum1 >= 10:\n            return\
    \ false\n        case sum1 < sum2:\n            return true\n        case sum1\
    \ > sum2:\n            return false\n        default:\n            return i <\
    \ j\n        }\n    })\n\n    // sort them by their original index\n    var nums2\
    \ []int\n    for i := 0; i < n; i++ {\n        nums2 = append(nums2, nums[i])\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(nums2)))\n\n    return nums2\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxv5_0x__test.go:20:5: undefined: sort

    /tmp/tmpfxv5_0x__test.go:42:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    m := map[int]int{}\n    for i, num\
    \ := range nums {\n        digits, ok := m[num/10]\n        if !ok {\n       \
    \     m[num/10] = map[int]int{num: 1}\n        } else {\n            digits[num]\
    \ = digits[num] + 1\n        }\n    }\n\n    nums := []int{}\n    for num, _ :=\
    \ range m {\n        nums = append(nums, num)\n    }\n\n    nums = append(nums,\
    \ nums[0])\n    for i := 1; i < len(nums)-1; i++ {\n        nums[i-1] = nums[i]\
    \ - nums[i-1]*10 + nums[i]\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjg3g93az_test.go:19:9:\
    \ i declared but not used\n/tmp/tmpjg3g93az_test.go:22:25: cannot use map[int]int{\u2026\
    } (value of type map[int]int) as type int in assignment\n/tmp/tmpjg3g93az_test.go:24:33:\
    \ invalid operation: cannot index digits (variable of type int)\n/tmp/tmpjg3g93az_test.go:28:10:\
    \ no new variables on left side of :=\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // Sort nums\n    sort.Ints(nums)\n\n    // Initialize sum\
    \ and index\n    sum := 0\n    idx := 0\n\n    // For each item in nums, add their\
    \ digits\n    // to sum, add this sum to idx, and add the index to nums\n    //\
    \ if it is larger than or equal to sum.\n    for _, v := range nums {\n      \
    \  sum += int(v)\n        if sum >= 0 {\n            nums[idx] = v\n         \
    \   idx += 1\n            sum -= int(v)\n        }\n    }\n\n    // Add remaining\
    \ items in nums to nums\n    for _, v := range nums[idx:] {\n        sum += int(v)\n\
    \        nums = append(nums, v)\n    }\n\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ycqmmc0_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    // write your code here\n    var\
    \ result = []int{}\n    for _, i := range nums {\n        result := append(result,\
    \ i)\n    }\n\n    sort.Slice(result, func(i, j int) bool {\n        return sumOfDigits(result[i])\
    \ < sumOfDigits(result[j])\n    })\n\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_m51u82z_test.go:21:9: result declared but not used

    /tmp/tmp_m51u82z_test.go:24:5: undefined: sort

    /tmp/tmp_m51u82z_test.go:25:16: undefined: sumOfDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    nums = nums[:0]\n    for _, v :=\
    \ range nums {\n        for i := 0; i < len(v); i++ {\n            if v[i] ==\
    \ 0 {\n                continue // do not count the leading zeros.\n         \
    \   }\n            v := v[:i] // trim down the v to include only the digits.\n\
    \            s := 0\n            for j := 0; j < len(v); j++ {\n             \
    \   s += int(v[j]) // sum up the digits in the slice.\n            }\n       \
    \     if s < 0 {\n                nums = append(nums, 0)\n                continue\n\
    \            }\n            nums = append(nums, v)\n        }\n    }\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjkozk1z7_test.go:20:29: invalid argument: v (variable of type int) for
    len

    /tmp/tmpjkozk1z7_test.go:21:17: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmpjkozk1z7_test.go:24:18: invalid operation: cannot slice v (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var sorted = make([]int, 0)\n  \
    \  for _, n := range nums {\n        sum, i := sum_digits(n)\n        if sum ==\
    \ 0 {\n            sorted = append(sorted, n)\n        } else {\n            var\
    \ index = 1\n            j := i - 1\n            sum := sum - j\n            for\
    \ {\n                sum /= 10\n                index += 1\n                j\
    \ -= index\n                if sum == 0 {\n                    break\n       \
    \         }\n            }\n            sorted = append(sorted, n)\n         \
    \   sorted = append(sorted, sorted[index])\n        }\n    }\n    return sorted\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsf7760u_test.go:20:19: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sums := make([]int, len(nums))\n\
    \    for i := 0; i < len(sums); i++ {\n        sums[i] = 0\n    }\n    for _,\
    \ v := range nums {\n        sums[v%10] += 1\n    }\n    orderedNums := make([]int,\
    \ len(nums))\n    for i := 0; i < len(nums); i++ {\n        if sums[i] < len(nums)\
    \ {\n            orderedNums[i] = nums[sums[i]]\n            sums[i] = 0\n   \
    \     }\n    }\n    return orderedNums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points({0xc00007e4d8, 0x5, 0x564b5b?})\n\
    \t/tmp/tmpfk01xk86_test.go:23 +0x10d\ncommand-line-arguments_test.TestOrder_By_Points(0x0?)\n\
    \t/tmp/tmpfk01xk86_test.go:42 +0xa8\ntesting.tRunner(0xc0000da340, 0x529168)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074658
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    out := make([]int, 0, len(nums))\n\
    \    for _, v := range nums {\n        total := 0\n        // Go through each\
    \ digit, and keep adding the digits together\n        for i := 0; i < len(strconv.Itoa(v))\
    \ && v != 0; i++ {\n            total += int(v%10) * (len(strconv.Itoa(v)) - i)\n\
    \            v /= 10\n        }\n\n        // If current digit is the same as\
    \ previous one, then sort\n        // it based on position in original list\n\
    \        if v == 0 {\n            index = len(nums) - 1\n        }\n\n       \
    \ // Otherwise, keep adding them together, sort and put back\n        else {\n\
    \            index = 0\n            total = 1\n        }\n        total += index\n\
    \        index += 1\n        out = append(out, total)\n    }\n    return sort_by_sum(out)\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzsnt3okf_test.go:34:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var sums []int\n    for _, num :=\
    \ range nums {\n        sum := num\n        for i := len(sums) - 1; i > 0; i--\
    \ {\n            if sums[i] == sum {\n                sums[i] = sums[i - 1]\n\
    \            } else {\n                break\n            }\n        }\n     \
    \   sums = append(sums, sum)\n    }\n    var result []int\n    for _, sum := range\
    \ sums {\n        result = append(result, num)\n    }\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv1a8rn56_test.go:31:12: sum declared but not used

    /tmp/tmpv1a8rn56_test.go:32:33: undefined: num

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    numsSorted := nums\n    var sum\
    \ int\n    var index int\n    for i, num := range numsSorted {\n        sum +=\
    \ int(num)\n        index = i\n    }\n    numsSorted, numsSortedSlice = numsSorted[0:index],\
    \ numsSorted[index:index]\n    return numsSorted\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cs3sve5_test.go:25:17: undefined: numsSortedSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    var orderedNums []int\n    var sum\
    \ int\n    var index int\n\n    for _, num := range nums {\n        sum = sum\
    \ + num\n        if sum < 0 {\n            sum = sum + 10\n            index++\n\
    \        }\n\n        orderedNums = append(orderedNums, num)\n    }\n\n    for\
    \ _, num := range orderedNums {\n        orderedNums[index] = num\n        index++\n\
    \    }\n\n    return orderedNums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of\
    \ range [5] with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmpuuo9yoli_test.go:33\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmpuuo9yoli_test.go:47\
    \ +0xfe5\ntesting.tRunner(0xc000103380, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074659
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    output := make([]int, len(nums))\n\
    \    index := 0\n    output := make([]int, len(nums))\n    for _, item := range\
    \ nums {\n        // sort item\n        index := 0\n        for i, v := range\
    \ output {\n            sum += int(v / 10)\n            if sum == item {\n   \
    \             output[i] = v\n                index = i\n                break\n\
    \            }\n        }\n\n        if index >= len(output) {\n            index\
    \ = len(output)\n            output[index] = item\n        } else {\n        \
    \    output[index] = item\n        }\n    }\n\n    for i := 0; i < len(output);\
    \ i++ {\n        output[i] = output[i] * 10\n    }\n\n    return output\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2vt6qei_test.go:19:5: index declared but not used

    /tmp/tmpw2vt6qei_test.go:20:12: no new variables on left side of :=

    /tmp/tmpw2vt6qei_test.go:25:13: undefined: sum

    /tmp/tmpw2vt6qei_test.go:26:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_y4epasi_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074400
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) < 1 {\n        return\
    \ nums\n    }\n\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \    }\n    sort.Ints(nums)\n    for i, v := range nums {\n        nums[i] = v\n\
    \        nums[i+len(nums)-1] = v\n    }\n\n    result := nums[:]\n    for i :=\
    \ range nums {\n        result[i] = int(result[i]) - sum + int(nums[i])\n    }\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpalfpv_gu_test.go:23:9: i declared but not used

    /tmp/tmpalfpv_gu_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    n := 0\n    max := 0\n    result\
    \ := make([]int, len(nums))\n    for i := range result {\n        if nums[i] >=\
    \ 0 {\n            if nums[i] > max {\n                max = nums[i]\n       \
    \     }\n            n += nums[i]\n        }\n        result[i] = n\n        n\
    \ = nums[i]\n    }\n    for i := range nums {\n        if nums[i] < 0 {\n    \
    \        result[i]++\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp6lc6oior_test.go:57: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=12) %!s(int=12)\
    \ %!s(int=0) %!s(int=-10)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp6lc6oior_test.go:57: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=1657) %!s(int=886) %!s(int=608) %!s(int=147) %!s(int=425) %!s(int=846)\
    \ %!s(int=476) %!s(int=59) %!s(int=43) %!s(int=3494) %!s(int=3460) %!s(int=59)\
    \ %!s(int=56) %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n\
    \        tmp6lc6oior_test.go:57: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98)\
    \ %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=-10) %!s(int=11) %!s(int=97) %!s(int=55) %!s(int=-96) %!s(int=3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp6lc6oior_test.go:57:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)\
    \ %!s(int=19) %!s(int=21)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp6lc6oior_test.go:57: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=12) %!s(int=7) %!s(int=-75) %!s(int=2) %!s(int=27)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    numsBySum := make(map[int]int)\n\
    \    for _, n := range nums {\n        numsBySum[sum(n)] = n\n    }\n    sortedNums\
    \ := make([]int, 0, len(nums))\n    for _, n := range nums {\n        sortedNums\
    \ = append(sortedNums, numsBySum[sum(n)])\n    }\n    return sortedNums\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp589cqtiv_test.go:20:19: undefined: sum

    /tmp/tmp589cqtiv_test.go:24:51: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    var prevSum, currSum int\n    var indices []int\n    for _,\
    \ num := range nums {\n        currSum = prevSum + num\n        if currSum < prevSum\
    \ { // case where num is not unique in nums\n            indices = append(indices,\
    \ currSum)\n        } else {\n            prevSum = currSum\n        }\n    }\n\
    \    sort.Ints(indices)\n    return append(nums[:len(nums)-1], nums[len(nums)-1],\
    \ indices...)\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz6hc0p1t_test.go:31:5:\
    \ undefined: sort\n/tmp/tmpz6hc0p1t_test.go:32:58: too many arguments in call\
    \ to append\n\thave ([]int, int, []int)\n\twant ([]int, ...int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// PATCH list\n\
    func order_by_points(nums []int) []int {\n    fmt.Printf(\"PATCH list\\n\")\n\
    \    var result []int\n    if len(nums) > 0 {\n        // 1. sort the list according\
    \ to the sum of the digits of its elements.\n        sort.Ints(nums)\n       \
    \ // 2. add 0's in front to make the sum of the digits equals to the size of the\
    \ list.\n        // For example, in case of []int{-1, 1, -12, 11},\n        //\
    \ the sum of its digits is 9 and its size is 3, adding 0 to the front will make\n\
    \        // the sum of the digits equals to 3.\n        //\n        // For example,\
    \ if the length of the list is 3 and the sum of the digits are 9, then the list\
    \ becomes\n        // {-1, 0, -12, 1}\n        //\n        // Note: If there are\
    \ several items with sum of the digits equals to the size of the list,\n     \
    \   // the original order of the list should be kept.\n        // For example:\n\
    \        // >>> order_by_points([]int{-1, 1, -12, 11})\n        // []int{-1, -1,\
    \ 1, -11}\n        result := make([]int, len(nums))\n        size := 0\n     \
    \   for _, v := range nums {\n            size += v\n            result[size]\
    \ = v\n        }\n        // 3. append the final element to the end of the list.\n\
    \        sort.Ints(result)\n        result = append(result, nums[len(nums)-1])\n\
    \        // fmt.Printf(\"%v\\n\", result)\n    }\n    return result\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi6ihffq5_test.go:22:9: undefined: sort

    /tmp/tmpi6ihffq5_test.go:43:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
