name: HumanEval_55_fib
language: go_test.go
prompt: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
  // 21\nfunc fib(n int) int {\n"
tests: "func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
  \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
  \  { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
  \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
  \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor\
  \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if n <= 0 {\n        return 0\n    }\n\n    a, b := 1, 1\n    for\
    \ i := 1; i <= n; i++ {\n        a, b = b, a+b\n    }\n\n    return a\n}\n", " \
    \   if n <= 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n < 2 {\n        return n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n",
  "    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2)\n    }\n}\n", "    if n < 0 {\n        fmt.Println(\"Fibonacci number not\
    \ defined.\")\n        return 0\n    }\n\n    if n<1 {\n        return 1\n   \
    \ }\n\n    if n<2 {\n        return n\n    }\n\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n <= 0 {\n        return 0\n    }\n\n    if n == 1:\n        return\
    \ 1\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if n == 0 {\n   \
    \     return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n", "    if n <= 0 {\n        return 0\n    }\n    if n\
    \ == 1 || n == 2 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n\
    }\n", "    if n < 0 {\n        fmt.Println(\"Fibonacci sequence is not defined\
    \ for negative numbers.\")\n        fmt.Println(\"Try to use Fibonacci sequence\
    \ for positive numbers.\")\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n", "    var f1 := 0\n    var f2 := 1\n    for i := 0;\
    \ i < n; i++ {\n        switch {\n        case f1 == f2:\n            return f1\n\
    \        case f1 > f2:\n            f1, f2 = f2, f1+f2\n        case f1 == f2:\n\
    \            return f1\n        }\n    }\n}\n", "    a, b, c := 0, 1, 1\n    for\
    \ n > 0 {\n        a, b = b, a+b\n        n--\n    }\n    return a\n}\n", "  \
    \  if n <= 0 {\n        return 1\n    }\n    if n%2 == 0 {\n        return fib(n\
    \ - 1) + fib(n - 2)\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    switch\
    \ {\n    case n <= 1:\n        return 1\n    case n <= 2:\n        return 1\n\
    \    default:\n        return fib(n-2) + fib(n-1)\n    }\n}\n", "    if (n < 2)\
    \ {\n        return n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n", "  \
    \  if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n", "    if n < 0 {\n        n = -n\n    }\n\n    switch {\n    case\
    \ n < 2:\n        return 1\n    case n == 2:\n        return 1\n    default:\n\
    \        return fib(n-2) + fib(n-1)\n    }\n}\n", "    if n == 0 || n == 1 {\n\
    \        return 1\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n", "    switch\
    \ n {\n        case 1:\n            return 1\n        case 2:\n            return\
    \ 1\n        case 3:\n            return 2\n        case 4:\n            return\
    \ 3\n        case 5:\n            return 5\n        case 6:\n            return\
    \ 8\n        case 7:\n            return 13\n        case 8:\n            return\
    \ 21\n        case 9:\n            return 34\n        case 10:\n            return\
    \ 55\n        default:\n            fmt.Println(\"Fibonacci number not defined\
    \ for value \", n)\n    }\n    return 0\n}\n", "    if n < 2 {\n        return\
    \ n\n    }\n\n    if n == 2 {\n        return 1\n    }\n\n    f := fib(n-2) +\
    \ fib(n-1)\n\n    return f\n}\n", "    if n < 2 {\n        return 1\n    }\n\n\
    \    return fib(n - 1) + fib(n - 2)\n}\n", "    if n <= 0 {\n        return 0\n\
    \    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if n<2 {\n        return\
    \ n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    a, b := 0, 1\n    for\
    \ i := 0; i < n; i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n", "  \
    \  if n < 0 || n >= 5 {\n        return 0\n    }\n    n -= 2\n    if n < 2 {\n\
    \        return n\n    }\n    return fib(n) + fib(n-1)\n}\n", "    if n < 2 {\n\
    \        return n\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <=\
    \ 2 {\n        return 1\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n", " \
    \   if n <= 1 {\n        return 1\n    } else {\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n - 1)\
    \ + fib(n - 2)\n}\n", "    if n <= 0 {\n        return n\n    }\n    \n    if\
    \ n <= 2 {\n        return n\n    }\n    \n    return fib(n - 1) + fib(n - 2)\n\
    }\n", "    if (n < 0 || n > 10) {\n        fmt.Println(\"Invalid input.\")\n \
    \       return -1\n    }\n    if n == 0 {\n        return 1\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n</cell>\n<text>\n\
    Fibonacci Number - Solution\n\n</text>\n<cell>\n%%go\n\npackage fib_test\n\nimport\
    \ (\n    \"testing\"\n    \"fmt\"\n)\n", "    switch {\n    case n == 0:\n   \
    \     return 0\n    case n == 1:\n        return 1\n    default:\n        return\
    \ fib(n-1) + fib(n-2)\n    }\n}\n", "    if n < 2 {\n        return n\n    }\n\
    \    return fib(n-2) + fib(n-1)\n}\n", "    if n < 2 {\n        return 1\n   \
    \ }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n < 2 {\n        return 1\n\
    \    }\n\n    return fib(n-2) + fib(n-1)\n}\n", "    if n <= 2 {\n        return\
    \ n\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n", "    if (n < 0 || n > 2) {\n\
    \        fmt.Println(\"Fibonacci number out of range\")\n    }\n    return fibonacci(n)\n\
    }\n", "    switch {\n    case n < 2:\n        return 1\n    case n == 2:\n   \
    \     return 1\n    case n == 3:\n        return 1\n    case n % 2 == 0:\n   \
    \     return fib(n-2)+fib(n-1)\n    case n % 2 == 1:\n        return fib(n-3)+fib(n-2)\n\
    \    }\n}\n", "    if n<2 { //0 1\n        return 1\n    }\n    if n<3 { //0 1\
    \ 2\n        return fib(n-2)+fib(n-1)\n    }\n    if n%2 { //odd number\n    \
    \    return fib(n-2)+fib(n-1)\n    }\n    return fib(n-3)+fib(n-2)\n}\n", "  \
    \  if n<2 {\n        return n\n    }\n    return fib(n-2)+fib(n-1)\n}\n", "  \
    \  if n < 0 {\n        n = 0\n    }\n\n    if n == 0 {\n        return 0\n   \
    \ }\n\n    if n == 1 {\n        return 1\n    }\n\n    a, b := fib(n-1), fib(n-2)\n\
    \    return a + b\n}\n", "    if n <= 1 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n<2 { \n        return n\n    } \n    return\
    \ fib(n-2) + fib(n-1)\n}\n", "    if n <= 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n",
  "    switch {\n    case n <= 1:\n        return 1\n    case n == 2:\n        return\
    \ 2\n    case n > 2:\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n", " \
    \   if (n == 0) {\n        return 0\n    } else if (n == 1) {\n        return\
    \ 1\n    } else {\n        return fib(n-2) + fib(n-1)\n    }\n}\n", "    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    return fib(n - 1) + fib(n - 2)\n}\n", "    if n < 2 {\n        return n\n\
    \    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if (n<0) {\n        return\
    \ 0\n    }\n    if (n==0) {\n        return 0\n    }\n    if (n==1) {\n      \
    \  return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n < 0 {\n  \
    \      n = 0\n    }\n    if n > 100 {\n        n += 100\n    }\n    return int(math.Fibonacci(n))\n\
    }\n", "    switch {\n    case n < 2:\n        return 1\n    case n == 0:\n   \
    \     return 0\n    case n == 1:\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n == 0 || n == 1 {\n        return 1\n    }\n\n  \
    \  return fib(n - 1) + fib(n - 2)\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n <= 2 {\n        return n\n    }\n\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n<2 {\n        return 1\n    }\n    return fib(n-2) + fib(n-1)\n\
    }\n", "    if n <= 2 {\n        return n\n    }\n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n", "    if n < 0 {\n        n = 0\n    }\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n", "    if n < 0 {\n        n = 0\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n", "    switch {\n    case n < 2:\n     \
    \   return 1\n    case n == 2:\n        return 1\n    case n%2 == 1:\n       \
    \ return fib(n - 1) + fib(n - 2)\n    default:\n        return fib(n - 1) + fib(n\
    \ - 2)\n    }\n}\n", "    if n < 2 {\n        return n\n    }\n    a, b := 0,\
    \ 1\n    for i := 2; i < n; i++ {\n        a, b = b, a+b\n    }\n    return b\n\
    }\n", "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n\n    if n%2 == 0 {\n        return fib(n - 1) + fib(n - 2)\n    }\
    \ else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n", "    if n <= 1\
    \ {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if\
    \ n < 2 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n",
  "    switch {\n    case n < 2:\n        return 1\n    case n == 2:\n        return\
    \ 1\n    case n == 3:\n        return 2\n    case n % 2 == 1:\n        return\
    \ fib(n - 1) + fib(n - 2)\n    default:\n        return fib(n - 1) + fib(n - 2)\
    \ + fib(n - 3)\n    }\n}\n", "    if n < 1 {\n        return 1\n    }\n    if\
    \ n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n - 1) + fib(n -\
    \ 2)\n}\n", "    switch {\n    case n <= 2:\n        return n\n    case n % 2\
    \ == 0:\n        return fib(n-1) + fib(n-2)\n    default:\n        return fib(n-1)\
    \ + fib(n-2)\n    }\n}\n", "    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 2:\n        return 1\n    default:\n        return fib(n-2) + fib(n-1)\n\
    \    }\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n < 2 {\n\
    \        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    switch\
    \ {\n    case n <= 1:\n        return n\n    case n == 2:\n        return 1\n\
    \    case n == 3:\n        return 2\n    default:\n        return fib(n - 1) +\
    \ fib(n - 2)\n    }\n}\n", "    if n == 1 {\n        return 1\n    }\n\n    if\
    \ n == 2 {\n        return 2\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n", " \
    \   if n < 2 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    a, b := 0, 1\n    if n > 0 {\n        for i := 0; i < n; i++ {\n          \
    \  a, b = b, a+b\n        }\n    }\n    return a\n}\n", "    if n < 0 {\n    \
    \    fmt.Println(n)\n    }\n    if n == 0 || n == 1 {\n        return 1\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n", "    switch {\n    case n == 0: return\
    \ 0\n    case n == 1: return 1\n    case n < 2: return 0\n    }\n    a, b := 1,\
    \ 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return a\n\
    }\n", "    a, b := 0, 1\n    if n <= 0 {\n        return 0\n    }\n    for i :=\
    \ 0; i < n; i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n", "    if n<2\
    \ { return 1 }\n    return fib(n-1)+fib(n-2)\n}\n", "    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n - 2) + fib(n - 1)\n}\n", "    if n < 2 {\n      \
    \  return n\n    }\n    switch {\n    case n == 0:\n        return 1\n    case\
    \ n == 1:\n        return 1\n    default:\n        return fib(n - 1) + fib(n -\
    \ 2)\n    }\n}\n", "    if n < 2 {\n        return n\n    } else {\n        return\
    \ fib(n-1) + fib(n-2)\n    }\n}\n", "    a, b := 0, 1\n    for i := 0; i < n;\
    \ i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n", "    if n == 0 || n\
    \ == 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "   \
    \ if n < 2 {\n        return n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n",
  "    switch {\n    case n < 2:\n        return 1\n    case n == 2:\n        return\
    \ 1\n    default:\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n", "    if\
    \ n < 2 {\n        return n\n    } else {\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n", "    if n < 2 {\n        return n\n    }\n    f := fib(n-1)\n  \
    \  if n % 2 == 1 {\n        return f + f\n    }\n    return f\n}\n", "    if n\
    \ <= 1 {\n        return 1\n    }\n\n    return fib(n-2) + fib(n-1)\n}\n", " \
    \   switch {\n    case n < 2:\n        return 1\n    case n == 2:\n        return\
    \ 1\n    case n == 3:\n        return 1\n    default:\n        result := fib(n\
    \ - 1)\n        return result + fib(n - 2)\n    }\n}\n", "    return fib2[n-1]\n\
    }\n", "    if n<2 { return n}\n    return fib(n-1)+fib(n-2)\n}\n", "    if n <\
    \ 2 {\n        return n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 3\n    }\n    fibs := make([]int, n)\n    fibs[0] = fib(n - 1)\n    fibs[1]\
    \ = fibs(0) - fibs(1)\n    return fibs(2)\n}\n", "    switch {\n    case n ==\
    \ 0:\n        return 0\n    case n == 1:\n        return 1\n    case n == 2:\n\
    \        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n    }\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    switch {\n    case n < 1:\n     \
    \   fmt.Println(\"Invalid input\")\n        return -1\n    case n == 1:\n    \
    \    return 1\n    default:\n        return fib(n-1) + fib(n-2)\n    }\n}\n</code>\n\
    <|/ a dscore=1 tags=algorithm,go,recursion |>\n<| c |>\nI did the same. I tried\
    \ a lot before I asked the question. Finally I came to this solution. Thank you.\
    \ Just to share it here, in order to help others.\n<|/ c |>\n<| c |>\nI'm glad\
    \ I could help. I'm sure you learnt something from my answer.\n<|/ c |>\n<| c\
    \ |>\nFor fibonacci numbers, use memoization. No need to store all results in\
    \ memory.\n<|/ c |>\n<| c |>\nYou're right (I think). That's why I didn't add\
    \ it in the answer, I wanted to keep it as simple as possible.\n<|/ c |>\n<| c\
    \ |>\nYou can avoid memoization by passing a slice to fib function and storing\
    \ calculated Fibonacci numbers in that slice. Also you can make Fibonacci numbers\
    \ stored in Fibonacci function\n<|/ c |>\n<| a dscore=0 |>\nAnother solution,\
    \ very similar to the accepted answer, but with more flexibility. Just pass any\
    \ number of params to the Fibonacci function:\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n)\n", "    switch {\n    case n < 2:\n        return n\n   \
    \ case n == 2:\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    if n<2 {\n        return n\n    }\n    return fib(n-2) + fib(n-1)\n}\n", " \
    \   if n <= 0 {\n        return 0\n    }\n    return fib(n - 2) + fib(n - 1)\n\
    }\n", "    switch {\n    case n < 0:\n        return -1\n    case n == 0:\n  \
    \      return 0\n    case n == 1:\n        return 1\n    default:\n        return\
    \ fib(n-2) + fib(n-1)\n    }\n}\n", "    if n < 2 {\n        return n\n    }\n\
    \    return fib(n - 2) + fib(n - 1)\n}\n", "    switch {\n    case n < 0:\n  \
    \      return -1\n    case n == 0 or n == 1 or n == 1:\n        return 1\n   \
    \ default:\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n", "    if n <=\
    \ 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "  \
    \  if n < 2 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n",
  "    // Return Fibonacci number n\n    // Fibonacci numbers: 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55...\n    if n <= 2 {\n        return n\n    }\n\n    a, b := 1, 2\n\
    \    for i := 3; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n",
  "    if n <= 0 {\n        return 0\n    }\n    if n == 1:\n        return 1\n  \
    \  }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    switch n {\n    case 0:\n\
    \        return 0\n    case 1:\n        return 1\n    }\n\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    a, b := 0, 1\n    for i := 0; i < n; i++ {\n        a,\
    \ b = b, a+b\n    }\n    return a\n}\n", "    if n < 0 {\n        return -1\n\
    \    }\n\n    if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n      \
    \  return 1\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n", "    if (n == 0 ||\
    \ n == 1) {\n        return 1\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n",
  "    if n < 2 {\n        return n\n    }\n    return fib(n-2) + fib(n-1)\n}\n",
  "    if n < 2 {\n        return n\n    }\n\n    a, b := 0, 1\n    for i := 0; i\
    \ < n-1; i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n", "    switch\
    \ {\n    case n <= 1:\n        return 1\n    case n == 2:\n        return 1\n\
    \    default:\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if\
    \ n == 2 {\n        return 2\n    }\n    x := fib(n-1)\n    y := fib(n-2)\n  \
    \  return x + y\n}\n", "    if n < 2 {\n        return n\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n", "    // Use two temporary variables.\n    a,\
    \ b := 1, 1\n    for i := 0; i < n; i++ {\n        // Update the temporary variables.\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n", "    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-2) + fib(n-1)\n}\n", "    if n<0 {\n        return\
    \ -1\n    }\n    if n==1 {\n        return 1\n    }\n\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    if n < 2 {\n        return n\n    }\n    return fib(n-2) + fib(n-1)\n\
    }\n", "    if n < 2 {\n        return n\n    }\n\n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    f := 0\n   \
    \ f += fib(n-1)\n    f += fib(n-1)\n    return f\n}\n", "    if n < 2 {\n    \
    \    return n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if n <=\
    \ 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "  \
    \  switch {\n    case n <= 1:\n        return 1\n    case n == 2:\n        return\
    \ 1\n    default:\n        return fib(n - 2) + fib(n - 1)\n    }\n}\n", "    switch\
    \ {\n    case n <= 0:\n        return 0\n    case n == 1:\n        return 1\n\
    \    case n == 2:\n        return 2\n    default:\n        return fib(n - 2) +\
    \ fib(n - 1)\n    }\n}\n", "    if n == 0 || n == 1 {\n        return 1\n    }\n\
    \    return fib(n - 1) + fib(n - 2)\n}\n", "    switch {\n    case n < 0:\n  \
    \      fmt.Println(\"fib(0) failed!\")\n        return -1\n    case n == 0:\n\
    \        fmt.Println(\"fib(1) failed!\")\n        return 1\n    case n == 1:\n\
    \        fmt.Println(\"fib(2) failed!\")\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n", "    if n < 2 {\n        return 1\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n", "    var a, b int\n\n    if n < 0 {\n        return\
    \ -1\n    }\n\n    a, b = 0, 1\n\n    for i := 0; i < n; i++ {\n        a, b =\
    \ b, a+b\n    }\n\n    return a\n}\n", "    switch {\n    case n < 2:\n      \
    \  return n\n    case n == 2:\n        return 1\n    case n % 2 == 0: // even\n\
    \        return fib(n / 2)\n    default: // odd\n        return fib(n - 1) + fib(n\
    \ - 2)\n    }\n}\n", "    switch {\n    case n <= 2:\n        return 1\n    case\
    \ n == 0:\n        return 0\n    case n == 1:\n        return 1\n    default:\n\
    \        return fib(n - 1) + fib(n - 2)\n    }\n}\n", "    if n <= 0 {\n     \
    \   return 0\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    n += 1\n\n   \
    \ if n < 3 {\n        return n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n\
    }\n", "    if n < 2 {\n        return n\n    }\n\n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n - 1)\
    \ + fib(n - 2)\n}\n", "    if n < 2 {\n        return n\n    }\n\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n", "    if n < 0 {\n        fmt.Println(\"fib invalid\
    \ negative value:\", n)\n        return -1\n    }\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-2) + fib(n-1)\n}\n", "    if n <= 0 {\n        return\
    \ 0\n    }\n\n    a, b := 0, 1\n\n    for i := 0; i < n; i++ {\n        a, b =\
    \ b, a+b\n    }\n\n    return a\n}\n", "    if n < 2 {\n        return 1\n   \
    \ } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n", "    if n <=\
    \ 1 {\n        return n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "  \
    \  if n <= 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n\
    }\n", "    if n < 0 {\n        n *= -1\n    }\n    if n == 0 || n == 1 {\n   \
    \     return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n", "    if n <= 1 {\n        return n\n \
    \   }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if n <= 1 {\n        return\
    \ 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    var a, b int\n    if\
    \ n == 0 || n == 1 {\n        return 1\n    }\n    for i := 2; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return b\n}\n", "    if n <= 1 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if n < 2 {\n    \
    \    return n\n    }\n    return fib(n - 2) + fib(n - 1)\n}\n", "    var a int\n\
    \    var b int\n\n    if n <= 1 {\n        return n\n    }\n    a = b = 1\n  \
    \  for i := 2; i < n; i++ {\n        c = a + b\n        b = a\n        a = c\n\
    \    }\n    return b\n}\n", "    if n == 0 {\n        return 0\n    }\n\n    if\
    \ n == 1 {\n        return 1\n    }\n\n    return fib(n-2) + fib(n-1)\n}\n", " \
    \   if n < 2 {\n        return n\n    }\n    return fib(n - 2) + fib(n - 1)\n\
    }\n", "    if n < 1 {\n        return 0\n    }\n    return fib(n-2) + fib(n-1)\n\
    }\n", "    switch {\n    case n <= 1:\n        return 1\n    case n == 2:\n  \
    \      return 1\n    default:\n        return fib(n - 1) + fib(n - 2)\n    }\n\
    }\n", "    if n <= 0 {\n        return 0\n    }\n    return fib(n-1)+fib(n-2)\n\
    }\n", "    if n <= 1 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n", "    var prev, curr int\n\n    for i := 1; i <= n; i++ {\n        prev,\
    \ curr = curr, prev+curr\n    }\n\n    return curr\n}\n", "    if n < 2 {\n  \
    \      return n\n    }\n    return fib(n - 2) + fib(n - 1)\n}\n", "    switch\
    \ n <= 0 {\n        case 0:\n            return 0\n        case 1:\n         \
    \   return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 0 {\n\
    \        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 1 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n", "    if n <= 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n", "    if n <= 0 {\n        return 0\n    }\n    if n <= 1 {\n   \
    \     return 1\n    }\n    return fib(n-2) + fib(n-1)\n}\n", "    if n <= 1 {\n\
    \        return 1\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if\
    \ n <= 0 {\n        return -1\n    }\n    const (\n        a, b = 1,\n       \
    \ c, d = 1,\n        e, f = 1,\n        g, h = 1,\n        i, j = 1,\n       \
    \ k, l = 1,\n        m, n = 1,\n        o = 1,\n        p = 1,\n        q, r =\
    \ 1,\n        s = 1,\n        t, u = 1,\n        v = 1,\n        w, x = 1,\n \
    \       y, z = 1,\n        A = 1,\n        B = 1,\n    )\n    if n < 2 {\n   \
    \     return n\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 1\n    }\n\n    for {\n        switch {\n        case n&1\
    \ == 1:\n            return a\n        case n&2 == 2:\n            return c\n\
    \        case n&4 == 4:\n            return e\n        case n&8 == 8:\n      \
    \      return g\n        case n&16 == 16:\n            return h\n        case\
    \ n&32 == 32:\n            return i\n        case n&64 == 64:\n            return\
    \ j\n        case n&128 == 128:\n            return k\n        case n&256 == 256:\n\
    \            return l\n        case n&512 == 512:\n            return m\n    \
    \    case n&1024 == 1024:\n            return n\n        case n&2048 == 2048:\n\
    \            return o\n        case n&4096 == 4096:\n            return p\n  \
    \      case n&8192 == 8192:\n            return q\n        case n&16384 == 16384:\n\
    \            return r\n        case n&32768 == 32768:\n            return s\n\
    \        case n&65536 == 65536:\n            return t\n        case n&131072 ==\
    \ 131072:\n            return u\n        case n&262144 == 262144:\n          \
    \  return v\n        case n&524288 == 524288:\n            return w\n        case\
    \ n&1048576 == 1048576:\n            return x\n        case n&2097152 == 2097152:\n\
    \            return y\n        case n&4194304 == 4194304:\n            return\
    \ z\n        case n&8388608 == 8388608:\n            return A\n        case n&16777216\
    \ == 16777216:\n            return B\n        default:\n            n -= 2\n \
    \           a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v,\
    \ w, x, y, z, A, B, C = n%2, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q,\
    \ r, s, t, u, v, w, x, y, z, A, B, C = n&3, a, b, c, d, e, f, g, h, i, j, k, l,\
    \ m, n, o, p, q, r, s, t, u, v, w, x, y, ", "    if n <= 2 {\n        return n\n\
    \    }\n    return fib(n-1) + fib(n-2)\n}\n", "    switch {\n    case n == 0:\n\
    \        return 0\n    case n == 1:\n        return 1\n    default:\n        return\
    \ fib(n - 1) + fib(n - 2)\n    }\n}\n", "    var fib_result = 1\n    switch {\n\
    \    case n < 2:\n        return fib_result\n    case n == 2:\n        return\
    \ 1\n    }\n    for i := 3; i <= n; i++ {\n        fib_result += fib(i - 2)\n\
    \    }\n    return fib_result\n}\n", "    if n <= 1 {\n        return 1\n    }\
    \ else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n", "    if n < 2 {\n \
    \       return n\n    }\n    return fib(n-2) + fib(n-1)\n}\n", "    switch {\n\
    \    case n <= 1:\n        return 1\n    case n >= 2:\n        return fib(n-2)\
    \ + fib(n-1)\n    default:\n        return int(fib(n-1)) + int(fib(n-2))\n   \
    \ }\n}\n", "    if n == 0 || n == 1 {\n        return 1\n    }\n\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n", "    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 2:\n        return 1\n    case n % 2 == 1:\n        return fib(n\
    \ - 1) + fib(n - 2)\n    default:\n        return fib(n - 1) + fib(n - 2) + (n\
    \ - 1)\n    }\n}\n", "    if n < 2 {\n        return n\n    }\n    return fib(n-2)\
    \ + fib(n-1)\n}\n", "    if n<2 {\n        return n\n    }\n\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n", "    if n < 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    switch {\n    case n == 0: return 0\n    case\
    \ n == 1: return 1\n    case n < 0: panic(\"negative input\")\n    }\n    i :=\
    \ 1\n    f := fib(i) + 1\n    for i >= 2 {\n        i += 2\n        f = fib(i\
    \ - 1) + fib(i - 2)\n    }\n    return f\n}\n", "    if n < 1 {\n        return\
    \ -1\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n-2) + fib(n-1)\n\
    }\n", "    if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    switch {\n    case n == 0: return 0\n    case n == 1:\
    \ return 1\n    case n % 2 == 0: return fib(n-1) + fib(n-2)\n    default: return\
    \ fib(n-1) + fib(n-2)\n    }\n}\n", "    if n < 1 {\n        return n\n    }\n\
    \    if n < 2 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", "    switch {\n    case\
    \ n <= 2:\n        return 1\n    case n == 3:\n        return 3\n    case n <=\
    \ 10:\n        return fib(n-2) + fib(n-1)\n    default:\n        panic(\"too big\"\
    )\n    }\n}\n", "    if n <= 1 {\n        return 1\n    }\n\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n < 2 {\n        return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n", "    if n < 1 {\n        return n\n    }\n    return fib(n\
    \ - 2) + fib(n - 1)\n}\n", "    switch n {\n    case 0:\n        return 0\n  \
    \  case 1:\n        return 1\n    case 2:\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n", "    if n <= 1 {\n        return n\n    }\n\n\
    \    return fib(n - 1) + fib(n - 2)\n}\n", "    a, b := 0, 1\n    for i := 0;\
    \ i < n; i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n", "    if n <\
    \ 2 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n\
    \    }\n}\n", "    if n == 0 || n == 1 {\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n", "    switch {\n    case n <= 1:\n        return\
    \ 1\n    case n == 2:\n        return 1\n    case n > 2:\n        return fib(n\
    \ - 1) + fib(n - 2)\n    }\n}\n", "    f := -1\n    if n <= 0 {\n        return\
    \ -1\n    }\n    if n <= 1 {\n        f = 1\n        return f\n    }\n    if n\
    \ == 2 {\n        f = 2\n        return f\n    }\n\n    // find fib(n - 2) \n\
    \    f := fib(n-2) + fib(n-1)\n    return f\n}\n", "    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-2) + fib(n-1)\n}\n", "    if n<2 {\n        return\
    \ n\n    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n", "    if (n == 0 || n ==\
    \ 1) {\n        return n\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n", " \
    \   if n < 1 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n \
    \   }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n", "    if n == 0 || n == 1 {\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n", "    switch {\n    case n == 0: return 0\n  \
    \  case n == 1: return 1\n    default:\n        return fib(n - 1) + fib(n - 2)\n\
    \    }\n}\n", "    if n == 0 || n == 1 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n", "    if n < 0 {\n        fmt.Println(n)\n       \
    \ fmt.Println(n+1)\n        fmt.Println(n+2)\n        return -1\n    }\n    if\
    \ n < 2 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n",
  "    if n<2 {\n        return 1\n    }\n    return fib(n-1)+fib(n-2)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
