language: go_test.go
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest, largest := numbers[0], numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    new_numbers := []float64{}\n    new_numbers = append(new_numbers,\
    \ smallest)\n    new_numbers = append(new_numbers, 0)\n    new_numbers = append(new_numbers,\
    \ largest)\n    new_numbers = append(new_numbers, 1)\n    return new_numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpmkdk7j2z_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=0) %!s(float64=49.9) %!s(float64=1)]'\n   \
    \ --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpmkdk7j2z_test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=49.9) %!s(float64=0)\
    \ %!s(float64=100) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpmkdk7j2z_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=0)\
    \ %!s(float64=5) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpmkdk7j2z_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=0)\
    \ %!s(float64=5) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpmkdk7j2z_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=11) %!s(float64=0)\
    \ %!s(float64=15) %!s(float64=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    for _, v := range numbers {\n      \
    \  if v < min {\n            min = v\n        }\n    }\n    var rescaledNumbers\
    \ []float64\n    for _, v := range numbers {\n        rescaledNumbers = append(rescaledNumbers,\
    \ min+(v-min)/(max-min))\n    }\n    return rescaledNumbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc64es4q9_test.go:21:64: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    smallest += smallest / len(numbers)\n\
    \    smallest += smallest / len(numbers)\n\n    largest := numbers[len(numbers)-1]\n\
    \    largest += largest / len(numbers)\n    largest += largest / len(numbers)\n\
    \n    var rescaled_numbers []float64\n    for _, number := range numbers {\n \
    \       rescaled_numbers = append(rescaled_numbers, number*(largest - smallest)\
    \ + smallest)\n    }\n    return rescaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4knnu1i6_test.go:14:17: invalid operation: smallest / len(numbers) (mismatched
    types float64 and int)

    /tmp/tmp4knnu1i6_test.go:15:17: invalid operation: smallest / len(numbers) (mismatched
    types float64 and int)

    /tmp/tmp4knnu1i6_test.go:18:16: invalid operation: largest / len(numbers) (mismatched
    types float64 and int)

    /tmp/tmp4knnu1i6_test.go:19:16: invalid operation: largest / len(numbers) (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n\n    var rescaled = []float64{}\n    for _, number := range numbers {\n\
    \        rescaled = append(rescaled, number/max-min+0.5)\n    }\n    return rescaled\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpwgh7ec8q_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-1.4599198396793587) %!s(float64=-0.5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpwgh7ec8q_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=-48.4) %!s(float64=-48.900999999999996)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpwgh7ec8q_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-0.30000000000000004)\
    \ %!s(float64=-0.09999999999999998) %!s(float64=0.09999999999999998) %!s(float64=0.30000000000000004)\
    \ %!s(float64=0.5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n\
    \        tmpwgh7ec8q_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-0.09999999999999998)\
    \ %!s(float64=-0.30000000000000004) %!s(float64=0.5) %!s(float64=0.09999999999999998)\
    \ %!s(float64=0.30000000000000004)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpwgh7ec8q_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-9.7)\
    \ %!s(float64=-9.766666666666667) %!s(float64=-9.5) %!s(float64=-9.633333333333333)\
    \ %!s(float64=-9.566666666666666)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := math.SmallestNonzeroFloat64()\n    max := math.SmallestNonzeroFloat64()\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    // Now the min and max are in the range [0,1]\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     rescaled[i] = number*(max-min)/float64(len(numbers))+min\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9m8s31yg_test.go:13:12: undefined: math

    /tmp/tmp9m8s31yg_test.go:14:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var rv []float64\n\n    if len(numbers) < 2 {\n        fmt.Println(\"\
    There must be at least 2 numbers\")\n        return rv\n    }\n\n    rv = append(rv,\
    \ numbers[0] / numbers[1])\n    for i := 1; i < len(numbers); i++ {\n        rv\
    \ = append(rv, numbers[i] * rv[i-1])\n    }\n    rv = append(rv, 1.0)\n\n    return\
    \ rv\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpeq5twkmg_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1.9999999999999998) %!s(float64=1)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpeq5twkmg_test.go:46:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=2.0040080160320644)\
    \ %!s(float64=100.00000000000001) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpeq5twkmg_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.5)\
    \ %!s(float64=1) %!s(float64=3) %!s(float64=12) %!s(float64=60) %!s(float64=1)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpeq5twkmg_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=2) %!s(float64=10) %!s(float64=30)\
    \ %!s(float64=120) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpeq5twkmg_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1.0909090909090908)\
    \ %!s(float64=12) %!s(float64=180) %!s(float64=2340) %!s(float64=32760) %!s(float64=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest, err := math.MaxFloat64(),\
    \ nil\n    if err != nil {\n        panic(err)\n    }\n    for _, n := range numbers\
    \ {\n        if n < smallest {\n            smallest = n\n        }\n        if\
    \ n > largest {\n            largest = n\n        }\n    }\n    numbers = numbers\n\
    \    numbers = make([]float64, len(numbers))\n    for i := range numbers {\n \
    \       if numbers[i] == smallest {\n            numbers[i] = 0\n        } else\
    \ if numbers[i] == largest {\n            numbers[i] = 1\n        } else {\n \
    \           numbers[i] = float64(numbers[i])/(largest - smallest)\n        }\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvp9fg4wr_test.go:14:21: undefined: math

    /tmp/tmpvp9fg4wr_test.go:14:40: use of untyped nil in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest, err := math.Max(numbers)\n\
    \    if err != nil {\n        return numbers\n    }\n\n    diff := largest - smallest\n\
    \    for _, number := range numbers {\n        number /= diff\n    }\n\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ar24al0_test.go:14:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var smallest_number float64\n    var largest_number float64\n\
    \    for _, number := range numbers {\n        if smallest_number == 0 {\n   \
    \         smallest_number = number\n            largest_number = number\n    \
    \    } else {\n            smallest_number = min(smallest_number, number)\n  \
    \          largest_number = max(largest_number, number)\n        }\n    }\n  \
    \  for _, number := range numbers {\n        numbers[len(numbers)-1] -= smallest_number\n\
    \        numbers[len(numbers)-1] /= largest_number\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppm1x32ex_test.go:20:31: undefined: min

    /tmp/tmppm1x32ex_test.go:21:30: undefined: max

    /tmp/tmppm1x32ex_test.go:24:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n\n    var rescaled_numbers\
    \ []float64\n    for _, number := range numbers {\n        if number < min {\n\
    \            rescaled_numbers = append(rescaled_numbers, 0)\n        } else {\n\
    \            rescaled_numbers = append(rescaled_numbers, number/(max - min))\n\
    \        }\n    }\n    return rescaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp0acz0____test.go:55: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04175365344467641) %!s(float64=1.0417536534446765)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmp0acz0____test.go:55:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=1.996007984031936)\
    \ %!s(float64=0.996007984031936)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp0acz0____test.go:55: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1) %!s(float64=1.25)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp0acz0____test.go:55:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.5) %!s(float64=0.25) %!s(float64=1.25)\
    \ %!s(float64=0.75) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp0acz0____test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=2.75)\
    \ %!s(float64=3.75) %!s(float64=3.25) %!s(float64=3.5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) <= 1 {\n        return numbers\n    }\n\n \
    \   min := numbers[0]\n    max := numbers[len(numbers)-1]\n\n    if min < 0 {\n\
    \        diff := min * -1\n        min = diff + 1\n    }\n\n    if max < 0 {\n\
    \        diff := max * -1\n        max = diff + 1\n    }\n\n    if min == max\
    \ {\n        return make([]float64, 0)\n    }\n\n    diff := max - min\n\n   \
    \ if diff > 1 {\n        diff /= 2\n    }\n\n    numbers := make([]float64, 0)\n\
    \    for _, n := range numbers {\n        numbers = append(numbers, n*diff + min)\n\
    \    }\n\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgzllv2il_test.go:40:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // This implementation uses loop to find max and min\n    //\
    \ It can take O(n) time but only a constant number of loops is needed\n    //\
    \ to find max/min (since it is sorted)\n\n    var max float64 = 0\n    var min\
    \ float64 = 1\n    var result []float64\n\n    for _, number := range numbers\
    \ {\n        number -= min\n        number /= (max - min)\n        max = number\n\
    \        min = number\n        result = append(result, number)\n    }\n\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpmgbo8jxa_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-1) %!s(float64=+Inf)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpmgbo8jxa_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=-99) %!s(float64=+Inf)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpmgbo8jxa_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-0) %!s(float64=+Inf)\
    \ %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpmgbo8jxa_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-1) %!s(float64=+Inf)\
    \ %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpmgbo8jxa_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-11)\
    \ %!s(float64=+Inf) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    x\
    \ := numbers[0]\n    var output []float64\n    for _, v := range numbers {\n \
    \       output += v / x\n        x = v\n    }\n    return output\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbo1z2jkc_test.go:19:9: invalid operation: output += v / x (mismatched
    types []float64 and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, n := range numbers {\n        if n < smallest {\n            smallest = n\n\
    \        }\n        if n > largest {\n            largest = n\n        }\n   \
    \ }\n    rescaled := make([]float64, 0, len(numbers))\n    for _, n := range numbers\
    \ {\n        rescaled = append(rescaled, ((n - smallest) / (largest - smallest))*100)\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpkb3nrdpo_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpkb3nrdpo_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpkb3nrdpo_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=25)\
    \ %!s(float64=50) %!s(float64=75) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpkb3nrdpo_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=25) %!s(float64=0)\
    \ %!s(float64=100) %!s(float64=50) %!s(float64=75)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpkb3nrdpo_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=25) %!s(float64=0)\
    \ %!s(float64=100) %!s(float64=50) %!s(float64=75)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        fmt.Println(\"numbers is too\
    \ small\")\n    }\n\n    // the new minimum number should be zero\n    // and\
    \ the new maximum number should be 1\n    var min_number float64 = math.MaxFloat64\n\
    \    var max_number float64 = math.SmallestNonzeroFloat64\n    for _, number :=\
    \ range numbers {\n        if number > max_number {\n            max_number =\
    \ number\n        }\n        if number < min_number {\n            min_number\
    \ = number\n        }\n    }\n\n    // new_numbers is an array of length len(numbers)+1\n\
    \    // the first value is the minimum, the last is the maximum\n    var new_numbers\
    \ []float64 = []float64{min_number, max_number}\n\n    // for each number in numbers,\
    \ apply the transformation formula\n    for _, number := range numbers {\n   \
    \     new_numbers = append(new_numbers, min_number + (number-min_number) * (max_number-min_number)/float64(len(numbers)))\n\
    \    }\n\n    return new_numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy7ctqg31_test.go:19:30: undefined: math

    /tmp/tmpy7ctqg31_test.go:20:30: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) <= 1 {\n        return numbers\n    }\n\n \
    \   var smallest, largest float64\n    for _, value := range numbers {\n     \
    \   if smallest == 0 {\n            smallest = value\n        }\n\n        if\
    \ largest == 0 {\n            largest = value\n        }\n\n        if value >\
    \ largest {\n            largest = value\n        }\n\n        if value < smallest\
    \ {\n            smallest = value\n        }\n    }\n\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n\n    for _, value := range numbers {\n   \
    \     if smallest == 0 {\n            numbers[0] = largest + 1\n        } else\
    \ {\n            numbers[0] = smallest\n        }\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jq6s33a_test.go:36:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp1jq6s33a_test.go:37:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp1jq6s33a_test.go:39:12: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\n    for _,\
    \ number := range numbers {\n        if number < smallestNumber {\n          \
    \  smallestNumber = number\n        } else if number > largestNumber {\n     \
    \       largestNumber = number\n        }\n    }\n\n    largestNumber -= 1\n \
    \   smallestNumber += 1\n\n    newNumbers := make([]float64, 0, len(numbers))\n\
    \    for _, number := range numbers {\n        newNumbers = append(newNumbers,\
    \ smallestNumber+((number-smallestNumber)/(largestNumber-smallestNumber)*(largestNumber-number)))\n\
    \    }\n\n    return newNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpfwmrfcpk_test.go:56: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=1.9782135076252723) %!s(float64=1.9782135076252723)]'\n  \
    \  --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpfwmrfcpk_test.go:56:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=49.879209979209975)\
    \ %!s(float64=49.879209979209975)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpfwmrfcpk_test.go:56: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.5)\
    \ %!s(float64=2) %!s(float64=2.5) %!s(float64=2) %!s(float64=0.5)]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpfwmrfcpk_test.go:56: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[%!s(float64=2) %!s(float64=0.5) %!s(float64=0.5) %!s(float64=2.5) %!s(float64=2)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpfwmrfcpk_test.go:56:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=10.5) %!s(float64=10.5)\
    \ %!s(float64=12.5) %!s(float64=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minInt, maxInt float64\n    for _, n := range numbers {\n\
    \        if n < minInt {\n            minInt = n\n        }\n        if n > maxInt\
    \ {\n            maxInt = n\n        }\n    }\n\n    rescaledNumbers := make([]float64,\
    \ len(numbers))\n    for i, n := range numbers {\n        rescaledNumbers[i] =\
    \ n*(maxInt-minInt)/float64(len(numbers))+minInt\n    }\n\n    return rescaledNumbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpzkcpcu83_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=49.9) %!s(float64=1245.0049999999999)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpzkcpcu83_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=5000) %!s(float64=2495)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpzkcpcu83_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpzkcpcu83_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpzkcpcu83_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=36) %!s(float64=33)\
    \ %!s(float64=45) %!s(float64=39) %!s(float64=42)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    i := 0\n    for\
    \ _, number := range numbers {\n        if min > number {\n            min = number\n\
    \        } else if max < number {\n            max = number\n        }\n     \
    \   i++\n    }\n\n    result := make([]float64, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        result[i] = numbers[i] - min\n    }\n    scale\
    \ = 1 / (max - min)\n\n    for i := 0; i < len(numbers); i++ {\n        result[i]\
    \ *= scale\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2m_ip28_test.go:29:5: undefined: scale

    /tmp/tmpv2m_ip28_test.go:32:22: undefined: scale

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    return rescale_to_unit(numbers, 0)\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqtbp0r11_test.go:13:37:\
    \ too many arguments in call to rescale_to_unit\n\thave ([]float64, number)\n\t\
    want ([]float64)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, x := range\
    \ numbers {\n        if x < min {\n            min = x\n        }\n        if\
    \ x > max {\n            max = x\n        }\n    }\n\n    var scaled []float64\n\
    \n    for _, x := range numbers {\n        scaled = []float64{\n            (x-min)/(max-min),\n\
    \            (x-min)/(max-min),\n            (x-min)/(max-min),\n            (x-min)/(max-min),\n\
    \            (x-min)/(max-min),\n        }\n    }\n\n    return scaled\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmphsl0oarx_test.go:56: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=1) %!s(float64=1) %!s(float64=1) %!s(float64=1) %!s(float64=1)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmphsl0oarx_test.go:56:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0) %!s(float64=0)\
    \ %!s(float64=0) %!s(float64=0) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmphsl0oarx_test.go:56: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=1)\
    \ %!s(float64=1) %!s(float64=1) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmphsl0oarx_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.75)\
    \ %!s(float64=0.75) %!s(float64=0.75) %!s(float64=0.75) %!s(float64=0.75)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmphsl0oarx_test.go:56:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.75) %!s(float64=0.75) %!s(float64=0.75)\
    \ %!s(float64=0.75) %!s(float64=0.75)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    result := []float64{}\n    if len(numbers) == 0 {\n       \
    \ return result\n    }\n    // Find the min/max values\n    max := numbers[0]\n\
    \    min := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        if number < min {\n  \
    \          min = number\n        }\n    }\n    // Scale the numbers by (max -\
    \ min) to the range [0, 1]\n    for _, number := range numbers {\n        result\
    \ := []float64{}\n        for _, element := range result {\n            element\
    \ += ((number-min)/(min+max))*(element - max)\n        }\n        if number >\
    \ max {\n            max = number\n        }\n        if number < min {\n    \
    \        min = number\n        }\n    }\n    // Now adjust the result to account\
    \ for the range [0,1]\n    for _, element := range result {\n        element +=\
    \ 0.5\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpi66jv_c0_test.go:65: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[]'\n    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpi66jv_c0_test.go:65:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpi66jv_c0_test.go:65: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpi66jv_c0_test.go:65: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[]'\n    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpi66jv_c0_test.go:65:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // Find the minimum number\n    min := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n    }\n    // Find the max number\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n    }\n\n    // Rescale the numbers to meet the requirements\n   \
    \ // >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n    // []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0}\n    for _, number := range numbers {\n        numbers[len(numbers)-1]\
    \ = (number - min) / (max - min) * (len(numbers)-1) + numbers[len(numbers)-1]\n\
    \    }\n\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8u6docp3_test.go:32:35: invalid operation: (number - min) / (max - min)
    * (len(numbers) - 1) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, num :=\
    \ range numbers {\n        if min > num {\n            min = num\n        }\n\
    \        if max < num {\n            max = num\n        }\n    }\n    numbers\
    \ := make([]float64, 0, len(numbers))\n    for _, num := range numbers {\n   \
    \     if num != 0 {\n            numbers = append(numbers, num/(max-min))\n  \
    \      }\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2zvx7esi_test.go:23:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var new_numbers []float64\n    var new_min float64\n    var\
    \ new_max float64\n\n    min := numbers[0]\n    max := numbers[0]\n    for _,\
    \ value := range numbers {\n        if value < min {\n            min = value\n\
    \        }\n\n        if value > max {\n            max = value\n        }\n \
    \   }\n\n    new_max = 1.0\n    for _, value := range numbers {\n        if value\
    \ == 0.0 {\n            new_min = new_max\n            new_max = 1.0\n       \
    \     break\n        }\n        new_max = new_max * (1.0 + value / max)\n    }\n\
    \n    new_min = new_max / new_max\n    new_numbers = make([]float64, 0, len(numbers))\n\
    \    for _, value := range numbers {\n        new_numbers = append(new_numbers,\
    \ new_min + (value - min) * (new_max - new_min) / (max - min))\n    }\n    return\
    \ new_numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpttss6riq_test.go:64: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=1) %!s(float64=2.0801603206412826)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpttss6riq_test.go:64: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=2.998) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpttss6riq_test.go:64: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=3.1692)\
    \ %!s(float64=5.3384) %!s(float64=7.5076) %!s(float64=9.6768)]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpttss6riq_test.go:64: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[%!s(float64=3.1692) %!s(float64=1) %!s(float64=9.6768) %!s(float64=5.3384)\
    \ %!s(float64=7.5076)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n\
    \        tmpttss6riq_test.go:64: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=6.3798666666666675)\
    \ %!s(float64=1) %!s(float64=22.51946666666667) %!s(float64=11.759733333333335)\
    \ %!s(float64=17.1396)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    var\
    \ min = numbers[0]\n    var max = numbers[0]\n    for _, num := range numbers\
    \ {\n        if min > num {\n            min = num\n        }\n        if max\
    \ < num {\n            max = num\n        }\n    }\n    var newNumbers = []float64{}\n\
    \    for _, num := range numbers {\n        if num <= 0 {\n            continue\n\
    \        }\n        percent = (num - min) / (max - min)\n        newNumbers =\
    \ append(newNumbers, percent)\n    }\n    return newNumbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8vkd3r_0_test.go:31:9: undefined: percent

    /tmp/tmp8vkd3r_0_test.go:32:41: undefined: percent

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result []float64\n    for _, number := range numbers {\n\
    \        result = append(result, number/(numbers[0]))\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpnowgs6t9_test.go:37: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=1) %!s(float64=24.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpnowgs6t9_test.go:37: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpnowgs6t9_test.go:37: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpnowgs6t9_test.go:37: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=2.5) %!s(float64=1.5) %!s(float64=2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpnowgs6t9_test.go:37: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=0.9166666666666666)\
    \ %!s(float64=1.25) %!s(float64=1.0833333333333333) %!s(float64=1.1666666666666667)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    // If smallest == 0, then the largest == 1, in which case\
    \ the rescaling makes no sense.\n    // This is not an error, we just want the\
    \ smallest number to be 0 and largest to be 1.\n    if smallest == 0 {\n     \
    \   largest = 1\n    }\n    remain := largest - smallest + 1\n    rescaled :=\
    \ make([]float64, remain)\n    for index, number := range numbers {\n        rescaled[index]\
    \ = number * ((largest - smallest + 1) / (number - smallest))\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt2hgfuno_test.go:29:33: invalid argument: index remain (variable of type
    float64) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // Calculate the min/max values of each number in the list\n\
    \    minimums := make([]float64, len(numbers))\n    maximums := make([]float64,\
    \ len(numbers))\n\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ < minimums[i] {\n            minimums[i] = numbers[i]\n        }\n        if\
    \ numbers[i] > maximums[i] {\n            maximums[i] = numbers[i]\n        }\n\
    \    }\n\n    // Now calculate the range in which the numbers lie\n    range :=\
    \ maximums - minimums\n\n    // Calculate new ranges for each of the values in\
    \ the list\n    newRange := make([]float64, len(numbers))\n\n    for i := 0; i\
    \ < len(numbers); i++ {\n        newRange[i] = numbers[i] - minimums[i]\n    \
    \    if newRange[i] < 0 {\n            newRange[i] += range[i]\n        }\n  \
    \  }\n\n    // Now rescale all the values between 0.0 and 1.0\n    for i := 0;\
    \ i < len(numbers); i++ {\n        numbers[i] = (numbers[i] - minimums[i]) / newRange[i]\n\
    \    }\n\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph6ckoa5e_test.go:27:5: expected statement, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64\n    var max float64\n    var scaled []float64\n\
    \n    for _, number := range numbers {\n        min = math.Min(min, number)\n\
    \        max = math.Max(max, number)\n\n        // Skip the 0th number\n     \
    \   if number == 0 {\n            continue\n        }\n\n        // Scale by the\
    \ difference\n        scaleds = append(scaled, number-min)\n\n        // If the\
    \ difference is greater than 1, then we need to scale it down\n        if number\
    \ < 1 {\n            scaleds = append(scaled, 1/number)\n        }\n\n       \
    \ // If the difference is less than -1, then we need to scale it up\n        if\
    \ number > -1 {\n            scaleds = append(scaled, -1/number)\n        }\n\
    \    }\n\n    return scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfw4g4cte_test.go:18:15: undefined: math

    /tmp/tmpfw4g4cte_test.go:19:15: undefined: math

    /tmp/tmpfw4g4cte_test.go:27:9: undefined: scaleds

    /tmp/tmpfw4g4cte_test.go:31:13: undefined: scaleds

    /tmp/tmpfw4g4cte_test.go:36:13: undefined: scaleds

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minNum float64 = numbers[0]\n    var maxNum float64 = numbers[0]\n\
    \    for _, n := range numbers {\n        if n < minNum {\n            minNum\
    \ = n\n        }\n        if n > maxNum {\n            maxNum = n\n        }\n\
    \    }\n    var newNums []float64\n    for _, n := range numbers {\n        newNums\
    \ = append(newNums, minNum + (maxNum-minNum)*float64(n)/float64(maxNum-minNum))\n\
    \    }\n    return newNums\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpknfjwiyx_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=4) %!s(float64=51.900000000000006)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpknfjwiyx_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=149.9) %!s(float64=99.79999999999998)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpknfjwiyx_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=2) %!s(float64=3)\
    \ %!s(float64=4) %!s(float64=5) %!s(float64=6)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpknfjwiyx_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=2)\
    \ %!s(float64=6) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpknfjwiyx_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=23) %!s(float64=22)\
    \ %!s(float64=26) %!s(float64=24) %!s(float64=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) <= 1 {\n        return numbers\n    }\n   \
    \ smallest := math.MaxFloat64\n    largest = math.SmallestNonzeroFloat64\n   \
    \ for _, number := range numbers {\n        if smallest > number {\n         \
    \   smallest = number\n        }\n        if largest < number {\n            largest\
    \ = number\n        }\n    }\n    new_numbers := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        new_numbers[i] = float64(numbers[i]-smallest)\
    \ / (largest-smallest)\n    }\n    return new_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bg1mun0_test.go:16:17: undefined: math

    /tmp/tmp5bg1mun0_test.go:17:5: undefined: largest

    /tmp/tmp5bg1mun0_test.go:17:15: undefined: math

    /tmp/tmp5bg1mun0_test.go:22:12: undefined: largest

    /tmp/tmp5bg1mun0_test.go:23:13: undefined: largest

    /tmp/tmp5bg1mun0_test.go:28:58: undefined: largest

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    sort.Float64s(numbers)\n    max := numbers[len(numbers)-1]\n\
    \    min := numbers[0]\n    diff := max - min\n    // if diff == 0, return numbers;\n\
    \    if diff == 0 {\n        return numbers\n    }\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] /= diff\n    }\n\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxry1b9p_test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil {\n        return nil\n    }\n\n    min :=\
    \ math.MaxFloat64\n    max := math.MinFloat64\n    for _, number := range numbers\
    \ {\n        if min > number {\n            min = number\n        }\n\n      \
    \  if max < number {\n            max = number\n        }\n    }\n\n    return\
    \ rescale_range(numbers, min, max)\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu0r5zask_test.go:17:12: undefined: math

    /tmp/tmpu0r5zask_test.go:18:12: undefined: math

    /tmp/tmpu0r5zask_test.go:29:12: undefined: rescale_range

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []float64{largest - smallest, smallest, largest, smallest}\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpy5j6jr_z_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=47.9) %!s(float64=2) %!s(float64=49.9) %!s(float64=2)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpy5j6jr_z_test.go:46:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=50.1) %!s(float64=49.9)\
    \ %!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpy5j6jr_z_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=4) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpy5j6jr_z_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=4) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpy5j6jr_z_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=4) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  var smallest, largest float64\n    for i, num := range numbers {\n        if\
    \ i == 0 {\n            smallest = num\n            largest = num\n        } else\
    \ if smallest > num {\n            smallest = num\n        } else if largest <\
    \ num {\n            largest = num\n        }\n    }\n\n    var rescaled []float64\n\
    \    for i, num := range numbers {\n        if i == 0 {\n            rescaled\
    \ = append(rescaled, 0)\n        } else {\n            rescaled = append(rescaled,\
    \ num/largest)\n        }\n    }\n\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpmz_9j558_test.go:58: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpmz_9j558_test.go:58: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=0.4)\
    \ %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpmz_9j558_test.go:58: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=0.2)\
    \ %!s(float64=1) %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpmz_9j558_test.go:58: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=0.7333333333333333)\
    \ %!s(float64=1) %!s(float64=0.8666666666666667) %!s(float64=0.9333333333333333)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    r := max - min\n    for i, number := range numbers {\n        if i ==\
    \ 0 {\n            numbers[i] = min + r*(numbers[i] - min)/(r-1)\n        } else\
    \ {\n            numbers[i] = min + r*(numbers[i] - min)/(r-numbers[i-1])\n  \
    \      }\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ua57gwz_test.go:24:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minVal float64\n    var maxVal float64\n    for _, num\
    \ := range numbers {\n        if num < minVal {\n            minVal = num\n  \
    \      } else if num > maxVal {\n            maxVal = num\n        }\n    }\n\
    \    numbers = numbers[0 : len(numbers)-1]\n    scales := make([]float64, len(numbers)-1)\n\
    \    min := numbers[0]\n    for i := range numbers {\n        scales[i] = (numbers[i]\
    \ - min) / float64(maxVal - minVal)\n    }\n    for i := range numbers {\n   \
    \     numbers[i] = scales[i] * maxVal + minVal\n    }\n    return numbers\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rescale_to_unit({0xc00001e200, 0x0?, 0x2})\n\
    \t/tmp/tmp1az9ft_f_test.go:26 +0x137\ncommand-line-arguments_test.TestRescale_To_Unit(0x0?)\n\
    \t/tmp/tmp1az9ft_f_test.go:41 +0x71\ntesting.tRunner(0xc0001924e0, 0x529028)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // If there's only one number, return that number\n    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n    // If there's only 1 number, return\
    \ that number\n    if numbers[0] == numbers[1] {\n        return numbers\n   \
    \ }\n\n    smallestNum := numbers[0]\n    largestNum := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > largestNum {\n            largestNum\
    \ = number\n        }\n        if number < smallestNum {\n            smallestNum\
    \ = number\n        }\n    }\n\n    numbers := make([]float64, len(numbers))\n\
    \    copy(numbers, numbers)\n    for _, number := range numbers {\n        numbers[len(numbers)-1]\
    \ = (number - smallestNum) / (largestNum - smallestNum)\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqu3kwa9n_test.go:33:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minNumber = numbers[0]\n    var maxNumber = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < minNumber {\n     \
    \       minNumber = number\n        } else {\n            maxNumber = number\n\
    \        }\n    }\n    scaledNumbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        scaledNumbers[i] = (numbers[i] - minNumber) /\
    \ (maxNumber - minNumber)\n    }\n    return scaledNumbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmphodr93sq_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3333333333333333)\
    \ %!s(float64=0) %!s(float64=1.3333333333333333) %!s(float64=0.6666666666666666)\
    \ %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n  \
    \      tmphodr93sq_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3333333333333333)\
    \ %!s(float64=0) %!s(float64=1.3333333333333333) %!s(float64=0.6666666666666666)\
    \ %!s(float64=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    smallest /= 2.0 // make smallest == 0\n    largest /=\
    \ 2.0 // make largest == 1\n\n    result := []float64{}\n\n    for _, number :=\
    \ range numbers {\n        result.append(number*((largest - smallest)/(largest\
    \ - number)))\n    }\n\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2o4qrh0_test.go:31:16: result.append undefined (type []float64 has no
    field or method append)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    largest := numbers[0]\n    smallest := numbers[0]\n\n    for\
    \ _, num := range numbers {\n        if num > largest {\n            largest =\
    \ num\n        }\n        if num < smallest {\n            smallest = num\n  \
    \      }\n    }\n\n    if smallest != 0 {\n        numbers[0] = smallest / numbers[0]\n\
    \    }\n    if largest != 1 {\n        numbers[len(numbers)-1] = largest / numbers[len(numbers)-1]\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpp1wonhhm_test.go:51: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=1) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpp1wonhhm_test.go:51: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0.499) %!s(float64=2.0040080160320644)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpp1wonhhm_test.go:51: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpp1wonhhm_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.5)\
    \ %!s(float64=1) %!s(float64=5) %!s(float64=3) %!s(float64=1.25)]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpp1wonhhm_test.go:51: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[%!s(float64=0.9166666666666666) %!s(float64=11) %!s(float64=15) %!s(float64=13)\
    \ %!s(float64=1.0714285714285714)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    scaling := (max-min) / (len(numbers)-1)\n    numbers := make([]float64,\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        numbers[i]\
    \ = number*scaling+min\n        i++\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsdrjoyto_test.go:23:16: invalid operation: (max - min) / (len(numbers)
    - 1) (mismatched types float64 and int)

    /tmp/tmpsdrjoyto_test.go:24:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var smallest float64\n    var largest = numbers[0]\n    var\
    \ output []float64\n    for _, number := range numbers {\n        if smallest\
    \ > number {\n            smallest = number\n        }\n        if largest < number\
    \ {\n            largest = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        output = append(output, number/(largest - smallest))\n  \
    \  }\n    return output\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpusffxi3h_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpusffxi3h_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpusffxi3h_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpusffxi3h_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpusffxi3h_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var mini float64\n    var maxi float64\n    for _, v := range\
    \ numbers {\n        if v < mini {\n            mini = v\n        } else if v\
    \ > maxi {\n            maxi = v\n        }\n    }\n    for _, v := range numbers\
    \ {\n        numbers[v] = (v-mini) / (maxi-mini)\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprwkmyvtp_test.go:23:17: invalid argument: index v (variable of type float64)
    must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    i := 0\n    // Find the index of the smallest and largest number\n\
    \    // Note that both numbers might be zero - we still want to get at least 1\
    \ number out of the range\n    var smallestIndex, biggestIndex int\n    for i\
    \ = 0; i < len(numbers); i++ {\n        if numbers[i] < numbers[smallestIndex]\
    \ {\n            smallestIndex = i\n        }\n        if numbers[i] > numbers[biggestIndex]\
    \ {\n            biggestIndex = i\n        }\n    }\n    smallest := numbers[smallestIndex]\n\
    \    largest := numbers[biggestIndex]\n\n    // Calculate what all the numbers\
    \ should change to based on current scale factor\n    change := smallest / largest\n\
    \    scale := change / float64(len(numbers))\n\n    // Rescale each element of\
    \ the list by the scale factor\n    for i = 0; i < len(numbers); i++ {\n     \
    \   numbers[i] = numbers[i] * scale\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmph0yw88s4_test.go:56: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=0.9999999999999999)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmph0yw88s4_test.go:56:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=24.95) %!s(float64=12.45005)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__2 (0.00s)\n        tmph0yw88s4_test.go:56:\
    \ expected '[%!s(float64=0) %!s(float64=0.25) %!s(float64=0.5) %!s(float64=0.75)\
    \ %!s(float64=1)]', got '[%!s(float64=0.04) %!s(float64=0.08) %!s(float64=0.12)\
    \ %!s(float64=0.16) %!s(float64=0.2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmph0yw88s4_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.08)\
    \ %!s(float64=0.04) %!s(float64=0.2) %!s(float64=0.12) %!s(float64=0.16)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmph0yw88s4_test.go:56:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=1.76) %!s(float64=1.6133333333333333)\
    \ %!s(float64=2.2) %!s(float64=1.9066666666666667) %!s(float64=2.0533333333333332)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var scaledNumbers []float64\n    var minNumber float64\n  \
    \  var maxNumber float64\n\n    for _, n := range numbers {\n        if n > maxNumber\
    \ {\n            maxNumber = n\n        } else if n < minNumber {\n          \
    \  minNumber = n\n        }\n    }\n\n    for _, n := range numbers {\n      \
    \  scaledNumbers = append(scaledNumbers, ((n - minNumber) / (maxNumber - minNumber))\
    \ * 100)\n    }\n\n    return scaledNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp9ahrmyt__test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=4.008016032064128) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp9ahrmyt__test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp9ahrmyt__test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=20) %!s(float64=40)\
    \ %!s(float64=60) %!s(float64=80) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp9ahrmyt__test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=40) %!s(float64=20)\
    \ %!s(float64=100) %!s(float64=60) %!s(float64=80)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp9ahrmyt__test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=80) %!s(float64=73.33333333333333)\
    \ %!s(float64=100) %!s(float64=86.66666666666667) %!s(float64=93.33333333333333)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var res = []float64{}\n    for _, n := range numbers {\n  \
    \      // Linear rescale between 0 and 1 so that n becomes the smallest number\
    \ and the largest number\n        // becomes 1.0\n        res += (n - min) / max(n\
    \ - min, 1.0) * n\n    }\n    return res\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph6brvtaw_test.go:17:21: undefined: min

    /tmp/tmph6brvtaw_test.go:17:28: undefined: max

    /tmp/tmph6brvtaw_test.go:17:36: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers[1:] {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    if smallest == 0.0 {\n        fmt.Printf(\"\
    smallest is 0.0; setting to 1.\")\n        smallest = 1\n    }\n    if largest\
    \ == 0.0 {\n        fmt.Printf(\"largest is 0.0; setting to 1.\")\n        largest\
    \ = 1\n    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] /= (largest\
    \ - smallest)\n        numbers[i] *= (largest - smallest + 1.0)\n        numbers[i]\
    \ /= 2.0\n        numbers[i] -= 1.0\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp3kjmbt5l_test.go:57: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.02087682672233826) %!s(float64=24.47087682672234)]'\n  \
    \  --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmp3kjmbt5l_test.go:57:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=49.99800399201597)\
    \ %!s(float64=24.448003992015966)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp3kjmbt5l_test.go:57: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-0.375)\
    \ %!s(float64=0.25) %!s(float64=0.875) %!s(float64=1.5) %!s(float64=2.125)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp3kjmbt5l_test.go:57:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.25) %!s(float64=-0.375) %!s(float64=2.125)\
    \ %!s(float64=0.875) %!s(float64=1.5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp3kjmbt5l_test.go:57: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=6.5)\
    \ %!s(float64=5.875) %!s(float64=8.375) %!s(float64=7.125) %!s(float64=7.75)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // TODO: Check that the input has at least two elements\n\n\
    \    // Calculate new minimum and maximum values\n    min_value := numbers[0]\n\
    \    max_value := numbers[0]\n\n    for _, number := range numbers {\n       \
    \ if number < min_value {\n            min_value = number\n        }\n       \
    \ if number > max_value {\n            max_value = number\n        }\n    }\n\n\
    \    // Calculate new scale\n    scale := (max_value - min_value) / (len(numbers)\
    \ - 1)\n\n    // Apply scale to all numbers\n    rescaled_numbers := make([]float64,\
    \ len(numbers))\n\n    for idx, number := range numbers {\n        rescaled_numbers[idx]\
    \ = number*scale+min_value\n    }\n\n    return rescaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn51zoua__test.go:29:14: invalid operation: (max_value - min_value) / (len(numbers)
    - 1) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil {\n        return []float64{}\n    }\n  \
    \  n := len(numbers)\n    r := float64(n)\n    if r > 1.0 {\n        r = 1.0\n\
    \    }\n    t := 1.0 / r\n    res := make([]float64, n)\n    for i := 0; i < n;\
    \ i++ {\n        res[i] = numbers[i] * t\n    }\n    return res\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpzzvz1owc_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpzzvz1owc_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpzzvz1owc_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpzzvz1owc_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpzzvz1owc_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        fmt.Println(\"Insufficient input\
    \ numbers!\")\n        return numbers\n    }\n    smallest_number := numbers[0]\n\
    \    largest_number := numbers[len(numbers)-1]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        smallest_number = min(smallest_number, numbers[i])\n        largest_number\
    \ = max(largest_number, numbers[i])\n    }\n    largest_number = 1.0 - largest_number\n\
    \    smallest_number = 0 - smallest_number\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = ((numbers[i] - smallest_number) / (largest_number\
    \ - smallest_number))\n    }\n    return numbers\n}\n</code>\nThe function returns\
    \ the input array unchanged if the length of the input array is less than two.\
    \ Otherwise, it returns a new array where the smallest number is 0, the largest\
    \ number is 1, and each number in the input array is scaled to between 0 and 1\
    \ by dividing the number by (largest_number - smallest_number).\nHere is an example\
    \ of running the test code above on my machine:\n<code>\n$ go test rescale_to_unit.go\n\
    ok      command-line-arguments  0.09s\nok      command-line-arguments  0.50s\n\
    ok      command-line-arguments  1.12s\nok      command-line-arguments  1.39s\n\
    ok      command-line-arguments  1.76s\nok      command-line-arguments  2.12s\n\
    ok      command-line-arguments  2.36s\nok      command-line-arguments  2.76s\n\
    ok      command-line-arguments  3.12s\nok      command-line-arguments  3.36s\n\
    ok      command-line-arguments  3.75s\nok      command-line-arguments  4.12s\n\
    ok      command-line-arguments  4.36s\nok      command-line-arguments  4.75s\n\
    ok      command-line-arguments  5.12s\nok      command-line-arguments  5.36s\n\
    ok      command-line-arguments  5.75s\nok      command-line-arguments  6.12s\n\
    ok      command-line-arguments  6.36s\nok      command-line-arguments  6.75s\n\
    ok      command-line-arguments  7.12s\nok      command-line-arguments  7.36s\n\
    ok      command-line-arguments  7.75s\nok      command-line-arguments  8.12s\n\
    ok      command-line-arguments  8.36s\nok      command-line-arguments  8.75s\n\
    ok      command-line-arguments  9.12s\nok      command-line-arguments\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjoxgl02w_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    \n    if numbers == nil || len(numbers) <= 1 {\n        return\
    \ []float64{}\n    }\n\n    smallest_number := numbers[0]\n    biggest_number\
    \ := numbers[len(numbers)-1]\n    smallest_number_index := 0\n    biggest_number_index\
    \ := len(numbers)-1\n\n    biggest_number_found := false\n\n    // Find the smallest\
    \ number that needs to be rescaled\n    for i := 0; i < len(numbers); i++ {\n\
    \        if numbers[i] < smallest_number {\n            smallest_number_index\
    \ = i\n            smallest_number = numbers[i]\n        }\n    }\n\n    // Find\
    \ the biggest number that needs to be rescaled\n    for j := 0; j < len(numbers);\
    \ j++ {\n        if numbers[j] > biggest_number {\n            biggest_number_index\
    \ = j\n            biggest_number = numbers[j]\n            biggest_number_found\
    \ = true\n        }\n    }\n\n    // If one or both numbers were found, rescale\
    \ those numbers as well\n    if biggest_number_found {\n        biggest_number\
    \ = biggest_number / biggest_number_index\n    } else {\n        biggest_number\
    \ = biggest_number / biggest_number_index\n    }\n\n    // Find the smallest and\
    \ biggest values which are both between 0 and 1\n    min_rescaled_number := smallest_number\n\
    \    min_rescaled_number_index := smallest_number_index\n\n    max_rescaled_number\
    \ := biggest_number\n    max_rescaled_number_index := biggest_number_index\n\n\
    \    // Find the smallest and biggest values which are both between 0 and 1\n\
    \    for k := 0; k < len(numbers); k++ {\n        if numbers[k] >= min_rescaled_number\
    \ {\n            if numbers[k] <= max_rescaled_number {\n                continue\n\
    \            }\n            max_rescaled_number = numbers[k]\n            max_rescaled_number_index\
    \ = k\n        }\n        if numbers[k] <= min_rescaled_number {\n           \
    \ if numbers[k] >= max_rescaled_number {\n                continue\n         \
    \   }\n            min_rescaled_number = numbers[k]\n            min_rescaled_number_index\
    \ = k\n        }\n    }\n\n    // Calculate what proportion of the biggest number\
    \ needs to be rescaled\n    smallest_number_to_be_rescaled := biggest_number_index\
    \ - min_rescaled_number_index\n    biggest_number_to_be_rescaled := max_rescaled_number_index\
    \ - biggest_number_index\n    rescale_factor := smallest_number_to_be_rescaled\
    \ / biggest_number_to_be_rescaled\n\n    // Calculate the new rescaled numbers,\
    \ rescaling them by their current proportion to\n    // compensate for the fact\
    \ that the smallest and biggest numbers were not rescaled\n    for k := 0; k <\
    \ len(numbers); k++ {\n        rescaled_number := numbers[k\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqkj9s6h__test.go:82:37: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := math.MaxFloat64\n    max := math.SmallestNonzeroFloat64\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n\n    rescaled := make([]float64, len(numbers))\n    for i,\
    \ number := range numbers {\n        rescaled[i] = (number - min) / (max - min)\n\
    \    }\n\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptcb3ztjy_test.go:13:12: undefined: math

    /tmp/tmptcb3ztjy_test.go:14:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"rescale_to_unit expects\
    \ at least 2 numbers\")\n    }\n\n    // sort so that 0 is the smallest number\n\
    \    sort.Float64s(numbers)\n\n    // compute the range (max minus the min)\n\
    \    var max_number = numbers[len(numbers)-1]\n    var min_number = numbers[0]\n\
    \n    for _, number := range numbers {\n        if number > max_number {\n   \
    \         max_number = number\n        }\n        if number < min_number {\n \
    \           min_number = number\n        }\n    }\n\n    // apply the transform\n\
    \    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, min_number+(number-min_number)*((max_number-min_number)/(max_number-min_number)))\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptbsp8_oo_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minVal float64 = numbers[0]\n    var maxVal float64 = numbers[0]\n\
    \    for _, val := range numbers {\n        if val < minVal {\n            minVal\
    \ = val\n        } else if val > maxVal {\n            maxVal = val\n        }\n\
    \    }\n    numbers -= minVal\n    for _, val := range numbers {\n        numbers[len(numbers)-1]\
    \ += (val-minVal) / (maxVal-minVal)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptodh1cdk_test.go:22:5: invalid operation: numbers -= minVal (mismatched
    types []float64 and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result []float64\n    var min_value float64\n    var max_value\
    \ float64\n    for _, value := range numbers {\n        min_value = math.SmallestNonzeroFloat64\n\
    \        max_value = math.SmallestNonzeroFloat64\n        if min_value > value\
    \ {\n            min_value = value\n        }\n        if max_value < value {\n\
    \            max_value = value\n        }\n    }\n    for _, value := range numbers\
    \ {\n        val := value * (max_value - min_value) / float64(len(numbers))\n\
    \        result = append(result, min_value + val)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdn4k2mq_test.go:17:21: undefined: math

    /tmp/tmpxdn4k2mq_test.go:18:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  biggest := numbers[len(numbers)-1]\n    smallest := numbers[0]\n    scale :=\
    \ biggest - smallest\n\n    rescaled := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        rescaled[i] = (number-smallest) * 1.0\
    \ / scale + smallest\n    }\n\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpwunlg5b0_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=3)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpwunlg5b0_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=101)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpwunlg5b0_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=1.25)\
    \ %!s(float64=1.5) %!s(float64=1.75) %!s(float64=2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpwunlg5b0_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1.5)\
    \ %!s(float64=3.5) %!s(float64=2.5) %!s(float64=3)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpwunlg5b0_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11.5)\
    \ %!s(float64=13.5) %!s(float64=12.5) %!s(float64=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    minimum\
    \ := numbers[0]\n    maximum := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < minimum {\n            minimum = number\n        }\n\
    \        if number > maximum {\n            maximum = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = minimum\
    \ + number/(maximum-minimum)*(maximum-minimum)\n    }\n    return numbers\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpaim26n8n_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=6)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpaim26n8n_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=199.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpaim26n8n_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=6)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpaim26n8n_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpaim26n8n_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=35)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    var\
    \ result []float64\n    var min_val float64\n    var max_val float64\n    for\
    \ _, v := range numbers {\n        if v < min_val {\n            min_val = v\n\
    \        }\n        if v > max_val {\n            max_val = v\n        }\n   \
    \ }\n    for _, v := range numbers {\n        result = append(result, v-(min_val+max_val)/2)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp42asjj4s_test.go:50: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-22.95) %!s(float64=24.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp42asjj4s_test.go:50: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=50) %!s(float64=-0.10000000000000142)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp42asjj4s_test.go:50: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-1.5)\
    \ %!s(float64=-0.5) %!s(float64=0.5) %!s(float64=1.5) %!s(float64=2.5)]'\n   \
    \ --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp42asjj4s_test.go:50:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=-0.5) %!s(float64=-1.5) %!s(float64=2.5)\
    \ %!s(float64=0.5) %!s(float64=1.5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp42asjj4s_test.go:50: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=4.5)\
    \ %!s(float64=3.5) %!s(float64=7.5) %!s(float64=5.5) %!s(float64=6.5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil {\n        return nil\n    }\n    smallest_number\
    \ := numbers[0]\n    largest_number := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest_number {\n            smallest_number\
    \ = number\n        }\n        if number > largest_number {\n            largest_number\
    \ = number\n        }\n    }\n    smallest_number = smallest_number - (smallest_number\
    \ - largest_number) / 2\n    largest_number = largest_number + (largest_number\
    \ - smallest_number) / 2\n    for _, number := range numbers {\n        if number\
    \ < smallest_number {\n            number = 0\n        } else {\n            number\
    \ = 1\n        }\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp_nk4_wym_test.go:55: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp_nk4_wym_test.go:55: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp_nk4_wym_test.go:55: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp_nk4_wym_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp_nk4_wym_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    scaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        scaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return scaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // find the smallest element in the list\n    smallest_val\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest_val\
    \ {\n            smallest_val = number\n        }\n    }\n    // find the largest\
    \ element in the list\n    largest_val := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > largest_val {\n            largest_val = number\n\
    \        }\n    }\n    // scale the smallest element\n    smallest_val /= largest_val\n\
    \    // scale the largest element\n    largest_val *= smallest_val\n    // apply\
    \ the scaling for each element\n    for _, number := range numbers {\n       \
    \ number *= largest_val\n        number /= smallest_val\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpdn5d6lrc_test.go:56: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpdn5d6lrc_test.go:56: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpdn5d6lrc_test.go:56: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpdn5d6lrc_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpdn5d6lrc_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) == 0 {\n        return numbers\n    }\n   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n    for _, v := range numbers\
    \ {\n        if v < smallest {\n            smallest = v\n        }\n        if\
    \ v > largest {\n            largest = v\n        }\n    }\n    fmt.Printf(\"\
    smallest %f largest %f \\n\", smallest, largest)\n    diff := largest - smallest\n\
    \    for _, v := range numbers {\n        v /= diff\n        if v < 0 {\n    \
    \        v += 1\n        }\n    }\n    fmt.Printf(\"%v\\n\", numbers)\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "smallest 2.000000 largest 49.900000 \n[2 49.9]\nsmallest 49.900000 largest\
    \ 100.000000 \n[100 49.9]\nsmallest 1.000000 largest 5.000000 \n[1 2 3 4 5]\n\
    smallest 1.000000 largest 5.000000 \n[2 1 5 3 4]\nsmallest 11.000000 largest 15.000000\
    \ \n[12 11 15 13 14]\n--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpg7j3c0a3_test.go:55: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpg7j3c0a3_test.go:55: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpg7j3c0a3_test.go:55: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpg7j3c0a3_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpg7j3c0a3_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var smallestInd int = len(numbers)\n    var largestInd int\
    \ = len(numbers)\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i]\
    \ < numbers[smallestInd] {\n            smallestInd = i\n        }\n        if\
    \ numbers[i] > numbers[largestInd] {\n            largestInd = i\n        }\n\
    \    }\n    smallestInd++\n    largestInd--\n    var smallest float64\n    var\
    \ largest float64\n    for i := 0; i < len(numbers); i++ {\n        var numerator\
    \ float64 = numbers[i]\n        var denominator float64\n        if i < smallestInd\
    \ {\n            denominator = numbers[smallestInd]\n        } else {\n      \
    \      denominator = numbers[largestInd]\n        }\n        smallest += numerator\
    \ / denominator\n        largest += numerator / denominator\n    }\n    fmt.Println(\"\
    smallest:\", smallest)\n    fmt.Println(\"largest:\", largest)\n    rescaledNumbers\
    \ := make([]float64, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n\
    \        rescaledNumbers[i] = numbers[i] * smallest / largest + 1\n    }\n   \
    \ return rescaledNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rescale_to_unit({0xc0000c45e8?, 0x0?, 0x4b31e0?})\n\
    \t/tmp/tmpdf9jalz5_test.go:16 +0x245\ncommand-line-arguments_test.TestRescale_To_Unit(0x0?)\n\
    \t/tmp/tmpdf9jalz5_test.go:54 +0x7c\ntesting.tRunner(0xc0001a0340, 0x529038)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    m := min(numbers)\n    max := max(numbers)\n    r := max -\
    \ m\n    return numbers[:]\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g19bl5u_test.go:13:10: undefined: min

    /tmp/tmp6g19bl5u_test.go:14:12: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64\n    var max float64\n    var result []float64\n\
    \    for _, num := range numbers {\n        if min > num {\n            min =\
    \ num\n        }\n        if max < num {\n            max = num\n        }\n \
    \   }\n    if min == max {\n        result = numbers\n    } else {\n        result\
    \ = make([]float64, len(numbers))\n        multiplier := (max - min) / float64(len(result))\n\
    \        for i, val := range numbers {\n            result[i] = val*multiplier+min\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpc1nvm6ej_test.go:53: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=49.9) %!s(float64=1245.0049999999999)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpc1nvm6ej_test.go:53: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=5000) %!s(float64=2495)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpc1nvm6ej_test.go:53: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpc1nvm6ej_test.go:53: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpc1nvm6ej_test.go:53: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=36) %!s(float64=33)\
    \ %!s(float64=45) %!s(float64=39) %!s(float64=42)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    return\
    \ normalize([min(numbers), max(numbers)])\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8rijp4x_test.go:16:35: unexpected comma; expecting ]

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result = make([]float64, len(numbers))\n    var min float64\n\
    \    var max float64\n\n    if len(numbers) == 0 {\n        return result\n  \
    \  }\n\n    minFloat64 := numbers[0]\n    maxFloat64 := numbers[len(numbers)-1]\n\
    \n    for i := 0; i < len(numbers); i++ {\n        numbers[i] -= minFloat64\n\
    \        numbers[i] *= (maxFloat64 - minFloat64) / (numbers[i+1] - numbers[i])\n\
    \        numbers[i] += minFloat64\n    }\n\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcipjy6k_test.go:14:9: min declared but not used

    /tmp/tmpqcipjy6k_test.go:15:9: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil {\n        return nil\n    }\n\n    // The\
    \ smallest number will become 0\n    var minNum float64\n    for _, num := range\
    \ numbers {\n        if num < minNum {\n            minNum = num\n        }\n\
    \    }\n\n    // The largest number will become 1\n    var maxNum float64\n  \
    \  for _, num := range numbers {\n        if num > maxNum {\n            maxNum\
    \ = num\n        }\n    }\n\n    // The transformation is minNum / (maxNum - minNum)\n\
    \    transformedNumbers := make([]float64, len(numbers))\n    for i := range transformedNumbers\
    \ {\n        transformedNumbers[i] = minNum + (maxNum-minNum)*float64(i)\n   \
    \ }\n\n    return transformedNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpj7r49dp7_test.go:59: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpj7r49dp7_test.go:59: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpj7r49dp7_test.go:59: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=5)\
    \ %!s(float64=10) %!s(float64=15) %!s(float64=20)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpj7r49dp7_test.go:59: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=5)\
    \ %!s(float64=10) %!s(float64=15) %!s(float64=20)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpj7r49dp7_test.go:59: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=15)\
    \ %!s(float64=30) %!s(float64=45) %!s(float64=60)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // Get the smallest and largest numbers to rescale\n    smallestNum,\
    \ largestNum := math.Min(numbers[0], numbers[len(numbers)-1]), math.Max(numbers[0],\
    \ numbers[len(numbers)-1])\n\n    // Normalize each number to have 0 mean and\
    \ unit standard deviation\n    var scaledNumbers []float64\n    for _, num :=\
    \ range numbers {\n        scaledNumbers = append(scaledNumbers, ((num - smallestNum)\
    \ / (largestNum - smallestNum)) * 100.0)\n    }\n\n    // Rescale the numbers\
    \ to 0 mean and unit standard deviation\n    return scaledNumbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx7_kbqei_test.go:14:32: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  min := numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        min = numbers[i]\n\
    \        if min < 0 {\n            min = min + 1.0\n        }\n    }\n\n    max\
    \ := numbers[len(numbers)-1]\n    for i := 1; i < len(numbers); i++ {\n      \
    \  max = numbers[i]\n        if max > 1.0 {\n            max = max + 1.0\n   \
    \     }\n    }\n\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        rescaled[i] = ((numbers[i] - min)/(max-min))\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp1vk604c0_test.go:57: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-47.9) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp1vk604c0_test.go:57: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=50.1) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp1vk604c0_test.go:57: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-4) %!s(float64=-3)\
    \ %!s(float64=-2) %!s(float64=-1) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp1vk604c0_test.go:57: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-2) %!s(float64=-3)\
    \ %!s(float64=1) %!s(float64=-1) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp1vk604c0_test.go:57: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-2) %!s(float64=-3)\
    \ %!s(float64=1) %!s(float64=-1) %!s(float64=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    return numbers[:]\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpc0hqtnl4_test.go:33: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpc0hqtnl4_test.go:33: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpc0hqtnl4_test.go:33: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpc0hqtnl4_test.go:33: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpc0hqtnl4_test.go:33: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    largest, smallest := numbers[0], numbers[0]\n    for _, n :=\
    \ range numbers {\n        if n > largest {\n            largest = n\n       \
    \ }\n        if n < smallest {\n            smallest = n\n        }\n    }\n \
    \   result := make([]float64, len(numbers))\n    for i, n := range numbers {\n\
    \        result[i] = ((n - smallest) / (largest - smallest)) * 100.0 - 1.0\n \
    \   }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp4du3db4c_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-1) %!s(float64=99)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp4du3db4c_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=99) %!s(float64=-1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp4du3db4c_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-1) %!s(float64=24)\
    \ %!s(float64=49) %!s(float64=74) %!s(float64=99)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp4du3db4c_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=24) %!s(float64=-1)\
    \ %!s(float64=99) %!s(float64=49) %!s(float64=74)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp4du3db4c_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=24) %!s(float64=-1)\
    \ %!s(float64=99) %!s(float64=49) %!s(float64=74)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result []float64\n    if len(numbers) <= 1 {\n        return\
    \ numbers\n    }\n    result[0] = numbers[0]\n    result[1] = numbers[1]\n   \
    \ for i := 2; i < len(numbers); i++ {\n        result[i] = (result[i-1] + numbers[i])\
    \ / 2\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5124c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rescale_to_unit(...)\n\t/tmp/tmp4esf0z_0_test.go:17\n\
    command-line-arguments_test.TestRescale_To_Unit(0x0?)\n\t/tmp/tmp4esf0z_0_test.go:32\
    \ +0x48\ntesting.tRunner(0xc0001a0340, 0x527dc0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        fmt.Println(\"rescale_to_unit\
    \ received list of size 0, aborting\")\n        return nil\n    }\n    min :=\
    \ numbers[0]\n    max := numbers[len(numbers)-1]\n    for _, v := range numbers\
    \ {\n        v = v - min\n        if v > max {\n            max = v\n        }\n\
    \        if v < min {\n            min = v\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, v := range numbers {\n        result[i] = (v - min)\
    \ / (max - min)\n    }\n    return result\n}\n</code>\n<|/ a |>\n<| c |>\nFor\
    \ me this just gives me the range of the numbers and not the rescaled values.\
    \  I need the actual rescaled numbers.  I am getting very close with your answer,\
    \ but I'm stuck with the 'min' and 'max' variables.  If I just set them to the\
    \ first and last numbers in my array, then I get some weird results.  I need the\
    \ min and max variables because I do not know how many numbers are in my array.\
    \  Sorry for not being clearer in the first place.  Thanks\n<|/ c |>\n<| a tags=arrays,go,rescale\
    \ dscore=1 |>\nThanks everyone.  I ended up solving it this way (which works perfectly):\n\
    <code>\npackage rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkd21qshx_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallerLargest := largest - smallest\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = numbers[i]/smallerLargest\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpjtq7ftnu_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04175365344467641) %!s(float64=1.0417536534446765)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpjtq7ftnu_test.go:48:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=1.996007984031936)\
    \ %!s(float64=0.996007984031936)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpjtq7ftnu_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1) %!s(float64=1.25)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpjtq7ftnu_test.go:48:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.5) %!s(float64=0.25) %!s(float64=1.25)\
    \ %!s(float64=0.75) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpjtq7ftnu_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=2.75)\
    \ %!s(float64=3.75) %!s(float64=3.25) %!s(float64=3.5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min_val float64\n    var max_val float64\n    for _, number\
    \ := range numbers {\n        if number > max_val {\n            max_val = number\n\
    \        }\n        if number < min_val {\n            min_val = number\n    \
    \    }\n    }\n    output := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        output[i] = (number - min_val) / (max_val - min_val)\n\
    \    }\n    return output\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp29ccmlzb_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp29ccmlzb_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp29ccmlzb_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp29ccmlzb_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp29ccmlzb_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minValue = numbers[0]\n    var maxValue = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < minValue {\n      \
    \      minValue = number\n        } else if number > maxValue {\n            maxValue\
    \ = number\n        }\n    }\n    for _, number := range numbers {\n        number\
    \ *= (maxValue - minValue) / (len(numbers) + 1)\n        numbers[len(numbers)-1]\
    \ = number\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1k8syuhf_test.go:23:19: invalid operation: (maxValue - minValue) / (len(numbers)
    + 1) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil {\n        return []float64{}\n    }\n  \
    \  var result []float64 = make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = (numbers[i] - min(numbers)) / (max(numbers) - min(numbers))\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprb8xfjpj_test.go:18:35: undefined: min

    /tmp/tmprb8xfjpj_test.go:18:52: undefined: max

    /tmp/tmprb8xfjpj_test.go:18:67: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n\n    for\
    \ _, number := range numbers[1:] {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n\n    scaled := make([]float64, len(numbers))\n\
    \    scaled[0] = smallest\n    scaled[len(scaled)-1] = largest\n\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        scaled[i] = scaled[i-1] + numbers[i] - scaled[i-1]\n\
    \    }\n\n    return scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpzjcvjs66_test.go:54: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpzjcvjs66_test.go:54: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=49.9) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpzjcvjs66_test.go:54: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpzjcvjs66_test.go:54: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpzjcvjs66_test.go:54: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=11) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ val := range numbers[1:] {\n        if val < min {\n            min = val\n\
    \        }\n        if val > max {\n            max = val\n        }\n    }\n\n\
    \    var scaled = make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        scaled[i] = (numbers[i] - min) / (max - min)\n    }\n\n    return\
    \ scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var rescaledNumbers = make([]float64, len(numbers))\n\n   \
    \ var smallest float64\n    var largest = 0.0\n\n    // Initialize smallest and\
    \ largest values\n    for i := 0; i < len(numbers); i++ {\n        if smallest\
    \ > numbers[i] { smallest = numbers[i] }\n        if largest < numbers[i] { largest\
    \ = numbers[i] }\n    }\n\n    // Loop through the list and update smallest and\
    \ largest values\n    for i := 0; i < len(numbers); i++ {\n        rescaledNumbers[i]\
    \ = numbers[i] - (largest - smallest) * i/len(numbers)\n    }\n\n    return rescaledNumbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdx8a7wf0_test.go:26:43: invalid operation: (largest - smallest) * i (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) <= 1 {\n        return numbers\n    }\n\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n\n        if number > largest {\n            largest = number\n  \
    \      }\n    }\n\n    scaled := make([]float64, 0, len(numbers))\n    for _,\
    \ number := range numbers {\n        scaled = append(scaled, number/(largest -\
    \ smallest))\n    }\n\n    return scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpxj79fugh_test.go:54: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04175365344467641) %!s(float64=1.0417536534446765)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpxj79fugh_test.go:54:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=1.996007984031936)\
    \ %!s(float64=0.996007984031936)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpxj79fugh_test.go:54: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1) %!s(float64=1.25)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpxj79fugh_test.go:54:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.5) %!s(float64=0.25) %!s(float64=1.25)\
    \ %!s(float64=0.75) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpxj79fugh_test.go:54: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=2.75)\
    \ %!s(float64=3.75) %!s(float64=3.25) %!s(float64=3.5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, n := range numbers {\n        if n < smallest {\n            smallest = n\n\
    \        }\n        if n > largest {\n            largest = n\n        }\n   \
    \ }\n    smallest /= 1.0\n    largest /= 1.0\n    for _, n := range numbers {\n\
    \        n *= (largest-smallest)/(largest+smallest)\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk46w1e9w_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk46w1e9w_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk46w1e9w_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk46w1e9w_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk46w1e9w_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest, largest := numbers[0], numbers[0]\n    for _, n :=\
    \ range numbers {\n        if n < smallest {\n            smallest, _ = n, n\n\
    \        }\n        if n > largest {\n            largest, _ = n, n\n        }\n\
    \    }\n    var scaling float64\n    if smallest < 0 {\n        smallest = 0\n\
    \        scaling = 0\n    }\n    if largest > 1 {\n        largest = 1\n     \
    \   scaling = 1\n    }\n    scaled := make([]float64, len(numbers))\n    for i,\
    \ v := range numbers {\n        scaled[i] = v*(scaling - smallest) / (largest\
    \ - smallest)\n    }\n    return scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp1ut4v4z7_test.go:55: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp1ut4v4z7_test.go:55: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.89999999999999)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp1ut4v4z7_test.go:55: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=NaN)\
    \ %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp1ut4v4z7_test.go:55:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)\
    \ %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp1ut4v4z7_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    //\
    \ The smallest number is 0.\n    smallest_number := numbers[0]\n    // The largest\
    \ number is 1.\n    largest_number := numbers[0]\n    // The smallest and largest\
    \ numbers we'll be using\n    smallest_number_found := false\n    largest_number_found\
    \ := false\n    // Look at each number and see if it needs to be rescaled.\n \
    \   for _, number := range numbers {\n        // If we're already at smallest\
    \ number, we're done.\n        if smallest_number_found && number < smallest_number\
    \ {\n            break\n        }\n        // If we're already at largest number,\
    \ we're done.\n        if largest_number_found && number > largest_number {\n\
    \            break\n        }\n        // If the current number is smaller than\
    \ smallest number, we've found a new smallest number.\n        if number < smallest_number\
    \ {\n            smallest_number_found = true\n            smallest_number = number\n\
    \            // If the current number is larger than largest number, we've found\
    \ a new largest number.\n        } else if number > largest_number {\n       \
    \     largest_number_found = true\n            largest_number = number\n     \
    \   }\n    }\n    // Now we have two numbers - the smallest and the largest.\n\
    \    // If we were given a list of size 1, we return that list.\n    if len(numbers)\
    \ == 1 {\n        return numbers\n    }\n    // Now that we've found both smallest\
    \ and largest numbers, we rescale them\n    // by the largest-smallest difference:\n\
    \    //\n    // (largest - smallest) => (largest - smallest - largest)\n    //\
    \ smallest              => 0\n    // largest              => 1\n    // largest\
    \ - smallest => 0\n    rescaled_numbers := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        rescaled_numbers[i] = numbers[i] - smallest_number\
    \ - largest_number\n    }\n    return rescaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmppd2y7i7e_test.go:79: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-49.9) %!s(float64=-2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmppd2y7i7e_test.go:79: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=-49.9) %!s(float64=-100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmppd2y7i7e_test.go:79: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-2) %!s(float64=-1)\
    \ %!s(float64=0) %!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmppd2y7i7e_test.go:79: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-4) %!s(float64=-5)\
    \ %!s(float64=-1) %!s(float64=-3) %!s(float64=-2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmppd2y7i7e_test.go:79: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-14)\
    \ %!s(float64=-15) %!s(float64=-11) %!s(float64=-13) %!s(float64=-12)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    i := 0\n    smallest := numbers[i]\n    largest := numbers[i]\n\
    \    for i < len(numbers) {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        i++\n    }\n    rescale := (largest - smallest)\
    \ / (len(numbers) - 2)\n    i := 0\n    for i < len(numbers) {\n        numbers[i]\
    \ = numbers[i] * rescale\n        i++\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzc1s5kfe_test.go:25:16: invalid operation: (largest - smallest) / (len(numbers)
    - 2) (mismatched types float64 and int)

    /tmp/tmpzc1s5kfe_test.go:26:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpj1_pjuy7_test.go:33: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpj1_pjuy7_test.go:33: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpj1_pjuy7_test.go:33: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpj1_pjuy7_test.go:33: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpj1_pjuy7_test.go:33: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    scale := 1.0 / (largest - smallest)\n    scaled := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        scaled[i] = number * scale\n  \
    \  }\n    return scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpnmzgkw1e_test.go:51: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04175365344467641) %!s(float64=1.0417536534446763)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpnmzgkw1e_test.go:51:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=1.996007984031936)\
    \ %!s(float64=0.9960079840319361)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpnmzgkw1e_test.go:51: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1) %!s(float64=1.25)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpnmzgkw1e_test.go:51:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.5) %!s(float64=0.25) %!s(float64=1.25)\
    \ %!s(float64=0.75) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpnmzgkw1e_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=2.75)\
    \ %!s(float64=3.75) %!s(float64=3.25) %!s(float64=3.5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    m := min(numbers)\n    m /= min(numbers)\n    for _, number\
    \ := range numbers {\n        number *= m\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2423q6h2_test.go:13:10: undefined: min

    /tmp/tmp2423q6h2_test.go:14:10: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number > max {\n            max = number\n\
    \        }\n        if number < min {\n            min = number\n        }\n \
    \   }\n\n    for _, number := range numbers {\n        numbers[len(numbers)-1]\
    \ += (number-min)/(max-min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpcp_or5eq_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=50.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpcp_or5eq_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=50.919960079840315)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpcp_or5eq_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=7.875)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpcp_or5eq_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=6.9375)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpcp_or5eq_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=16.9375)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    return []float64{min, ((max - min) * 0.5) + min}\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp9yscv63o_test.go:43: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=25.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp9yscv63o_test.go:43: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=49.9) %!s(float64=74.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp9yscv63o_test.go:43: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=3)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp9yscv63o_test.go:43:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=3)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp9yscv63o_test.go:43: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=11) %!s(float64=13)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    smallest += smallest / 100000.0\n\
    \    smallest -= smallest / 100000.0\n    for _, number := range numbers[1:] {\n\
    \        smallest *= 100000.0\n        smallest += number / 100000.0\n       \
    \ smallest -= number / 100000.0\n    }\n    smallest /= 100000.0\n    smallest\
    \ -= smallest / 100000.0\n    smallest += smallest / 100000.0\n    return []float64{smallest,\
    \ 1.0, 1.0}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpbipmj38l_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=1.9999999996000002) %!s(float64=1) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpbipmj38l_test.go:44:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=99.99999997999998)\
    \ %!s(float64=1) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpbipmj38l_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=9.999999998000002e+14)\
    \ %!s(float64=1) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpbipmj38l_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1.9999999996000005e+15)\
    \ %!s(float64=1) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpbipmj38l_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1.19999999976e+16)\
    \ %!s(float64=1) %!s(float64=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var smallest_number = numbers[0]\n    var largest_number =\
    \ numbers[0]\n    for i := range numbers {\n        if numbers[i] < smallest_number\
    \ {\n            smallest_number = numbers[i]\n        } else if numbers[i] >\
    \ largest_number {\n            largest_number = numbers[i]\n        }\n    }\n\
    \n    var rescaled_numbers = []float64{}\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        rescaled_numbers = append(rescaled_numbers, math.Pow(numbers[i]-smallest_number,\
    \ 1.0/len(numbers)-1.0))\n    }\n\n    return rescaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_dczz654_test.go:26:53: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    res := make([]float64,\
    \ 0, len(numbers)+1)\n    for _, number := range numbers {\n        if number\
    \ == min {\n            res = append(res, 0)\n        } else {\n            res\
    \ = append(res, number/(max-min))\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmppwf9wbb2_test.go:54: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0) %!s(float64=1.0417536534446765)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmppwf9wbb2_test.go:54: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1.996007984031936) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmppwf9wbb2_test.go:54: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=0.5)\
    \ %!s(float64=0.75) %!s(float64=1) %!s(float64=1.25)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmppwf9wbb2_test.go:54: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.5)\
    \ %!s(float64=0) %!s(float64=1.25) %!s(float64=0.75) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmppwf9wbb2_test.go:54:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=0) %!s(float64=3.75) %!s(float64=3.25)\
    \ %!s(float64=3.5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    minimum := numbers[0]\n    maximum := numbers[len(numbers)-1]\n\
    \n    for i := range numbers {\n        numbers[i] /= (maximum - minimum)\n  \
    \  }\n\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp4vf56844_test.go:40: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04175365344467641) %!s(float64=1.0417536534446765)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmp4vf56844_test.go:40:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=-1.996007984031936)\
    \ %!s(float64=-0.996007984031936)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp4vf56844_test.go:40: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1) %!s(float64=1.25)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp4vf56844_test.go:40:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=0.5) %!s(float64=2.5)\
    \ %!s(float64=1.5) %!s(float64=2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp4vf56844_test.go:40: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=6) %!s(float64=5.5)\
    \ %!s(float64=7.5) %!s(float64=6.5) %!s(float64=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, num := range numbers {\n        if smallest > num {\n            smallest\
    \ = num\n        }\n        if largest < num {\n            largest = num\n  \
    \      }\n    }\n    transformed := make([]float64, len(numbers))\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        transformed[i] = (numbers[i] - smallest)\
    \ / (largest - smallest)\n    }\n    return transformed\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074815
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest_number := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number\n\
    \        }\n    }\n\n    largest_number := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > largest_number {\n            largest_number\
    \ = number\n        }\n    }\n\n    result := make([]float64, len(numbers))\n\
    \    i := 0\n    for _, number := range numbers {\n        result[i] = (number\
    \ - smallest_number) / (largest_number - smallest_number)\n        i++\n    }\n\
    \n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  min_value := numbers[0]\n    max_value := numbers[0]\n\n    for _, number :=\
    \ range numbers[1:] {\n        min_value = minOf(min_value, number)\n        max_value\
    \ = maxOf(max_value, number)\n    }\n\n    return []float64{min_value, max_value}\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyvhzr43z_test.go:21:21: undefined: minOf

    /tmp/tmpyvhzr43z_test.go:22:21: undefined: maxOf

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest, largest := numbers[0], numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        } else if number > largest {\n            largest = number\n        }\n\
    \    }\n    rescale := (largest - smallest) / (numbers[1] - numbers[0])\n    return\
    \ []float64{smallest, rescale*numbers[0], rescale*numbers[1], rescale*numbers[2],\
    \ largest}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5124c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rescale_to_unit(...)\n\t/tmp/tmpcdeyh3m5_test.go:22\n\
    command-line-arguments_test.TestRescale_To_Unit(0x0?)\n\t/tmp/tmpcdeyh3m5_test.go:32\
    \ +0xe8\ntesting.tRunner(0xc000103520, 0x527dc0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil {\n        return nil\n    }\n    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        smallest =\
    \ number < smallest ? number : smallest\n        largest = number > largest ?\
    \ number : largest\n    }\n    return []float64{smallest/float64(len(numbers)),\
    \ largest/float64(len(numbers))}\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgr62z0p_test.go:22:38: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var smallest, largest, prev float64 = numbers[0], numbers[0],\
    \ numbers[0]\n    for _, v := range numbers {\n        if v < smallest {\n   \
    \         smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n        if v > prev {\n            prev = v\n        }\n   \
    \ }\n\n    var result []float64\n    for _, v := range numbers {\n        results\
    \ = append(results, ((v-smallest)/(largest-smallest))*100)\n    }\n    return\
    \ result\n}\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnd68tllb_test.go:28:26: undefined: results

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    sorted_numbers, _ := sort.Float64s(numbers)\n    if len(sorted_numbers)\
    \ < 2 {\n        return numbers\n    }\n    min := sorted_numbers[0]\n    max\
    \ := sorted_numbers[len(sorted_numbers)-1]\n    linear_range := (max - min) /\
    \ (float64(len(numbers)-1))\n    rescaled := make([]float64, len(numbers))\n \
    \   for i := range numbers {\n        rescaled[i] = min + (numbers[i] - min) *\
    \ linear_range\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkvooh9rx_test.go:13:26: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest, max := numbers[0], numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < smallest {\n            smallest, n, _ = n, smallest,\
    \ 0\n        }\n        if n > max {\n            max, n, = n, max, 1\n      \
    \  }\n    }\n    for i := range numbers {\n        numbers[i] /= max-smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfuwqg65e_test.go:19:21: expected operand, found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp22_vkjws_test.go:43: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp22_vkjws_test.go:43: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp22_vkjws_test.go:43: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp22_vkjws_test.go:43: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp22_vkjws_test.go:43: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minInd int\n    var maxInd int\n    for i := range numbers\
    \ {\n        if numbers[i] < numbers[minInd] {\n            minInd = i\n     \
    \   } else if numbers[i] > numbers[maxInd] {\n            maxInd = i\n       \
    \ }\n    }\n\n    numbersRescaled := make([]float64, len(numbers))\n\n    // Get\
    \ new scaling factor\n    var scalingFactor float64\n    if maxInd == minInd {\n\
    \        scalingFactor = 1\n    } else {\n        scalingFactor = (numbers[maxInd]\
    \ - numbers[minInd])/(maxInd - minInd)\n    }\n\n    // Apply rescale\n    for\
    \ i := range numbers {\n        numbersRescaled[i] = numbers[i] * scalingFactor\n\
    \    }\n\n    return numbersRescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9rw6vlv1_test.go:30:25: invalid operation: (numbers[maxInd] - numbers[minInd])
    / (maxInd - minInd) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074816
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // Sort numbers\n    sort.Float64s(numbers)\n\n    // Make\
    \ sure numbers are non-zero and non-negative\n    for _, number := range numbers\
    \ {\n        if number < 0.0 {\n            fmt.Println(\"number < 0.0\", number)\n\
    \        }\n    }\n\n    // Create new list\n    new_numbers := make([]float64,\
    \ len(numbers))\n\n    // Scan through old list and create new list based on old\
    \ list\n    index := 0\n    for _, number := range numbers {\n        new_numbers[index]\
    \ = number / min_value(numbers)\n\n        index++\n    }\n\n    // Return new\
    \ list\n    return new_numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqa4xcs0h_test.go:14:5: undefined: sort

    /tmp/tmpqa4xcs0h_test.go:29:39: undefined: min_value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074816
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // If we have less than two numbers, just return the input\
    \ list\n    if len(numbers) <= 1 {\n        return numbers\n    }\n\n    // Use\
    \ this as a starting point: for each number, if it's less than the smallest\n\
    \    // so far, make the smallest number 0 and the largest number 1\n    var smallest\
    \ float64\n    for _, number := range numbers {\n        if smallest == nil {\n\
    \            smallest = number\n        } else {\n            if number < smallest\
    \ {\n                smallest = number\n            }\n        }\n    }\n\n  \
    \  // Now we can iterate through numbers again, making sure that each is less\n\
    \    // than the smallest number so far\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            numbers[len(numbers)-1] = number\
    \ / smallest - 1\n        } else {\n            numbers[len(numbers)-1] = number\n\
    \        }\n    }\n\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7ty2rd__test.go:22:24: invalid operation: smallest == nil (mismatched
    types float64 and untyped nil)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074816
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    for _, number := range numbers {\n        smallest, _ := math.Min(number,\
    \ numbers[0])\n        if smallest == number {\n            continue\n       \
    \ }\n        largest, _ := math.Max(number, numbers[0])\n        if largest ==\
    \ number {\n            continue\n        }\n        diff := largest - smallest\n\
    \        if diff == 0 {\n            continue\n        }\n        rescaled :=\
    \ number/diff\n        numbers[0] = rescaled\n    }\n    return numbers\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuldsy0aw_test.go:14:24: undefined: math

    /tmp/tmpuldsy0aw_test.go:18:23: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    smallest += smallest / 2\n    smallest\
    \ -= smallest / 2\n    smallest += smallest / 2\n    smallest += smallest / 2\n\
    \    smallest += smallest / 2\n    smallest -= smallest / 2\n\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        largest -= number\
    \ / 2\n        largest += number / 2\n    }\n\n    return []float64{smallest,\
    \ largest}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpgns5xujz_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2.53125) %!s(float64=2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpgns5xujz_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=126.5625) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpgns5xujz_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1.265625)\
    \ %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n  \
    \      tmpgns5xujz_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2.53125) %!s(float64=2)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpgns5xujz_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=15.1875) %!s(float64=12)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    largest, smallest := numbers[0], numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > smallest {\n            largest = number\n\
    \        } else {\n            smallest = number\n        }\n    }\n    var scaled\
    \ []float64\n    for _, number := range numbers {\n        scaled = append(scaled,\
    \ number*(largest-smallest)/(number-smallest))\n    }\n    return scaled\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmph077kk2x_test.go:45: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=+Inf) %!s(float64=49.900000000000006)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmph077kk2x_test.go:45: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=+Inf)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmph077kk2x_test.go:45: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=+Inf)\
    \ %!s(float64=8) %!s(float64=6) %!s(float64=5.333333333333333) %!s(float64=5)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmph077kk2x_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=6) %!s(float64=+Inf) %!s(float64=3.75)\
    \ %!s(float64=4.5) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmph077kk2x_test.go:45: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=36) %!s(float64=+Inf)\
    \ %!s(float64=11.25) %!s(float64=19.5) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var smallest, largest float64\n    var scaled []float64\n \
    \   for _, value := range numbers {\n        smallest, largest = math.Min(smallest,\
    \ value), math.Max(largest, value)\n    }\n    smallest -= smallest % 1.0\n  \
    \  largest -= largest % 1.0\n    scaled = make([]float64, 0, len(numbers))\n \
    \   for _, number := range numbers {\n        scaled += float32(number) / (largest\
    \ - smallest + 1.0)\n        smallest, largest = math.SmallestFloat64(), math.SmallestFloat64()\n\
    \        scaled[len(scaled)-1] = scaled[len(scaled)-1] * (largest - smallest +\
    \ 1.0)\n    }\n    return scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvcgo5l4r_test.go:16:29: undefined: math

    /tmp/tmpvcgo5l4r_test.go:18:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpvcgo5l4r_test.go:19:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpvcgo5l4r_test.go:22:19: invalid operation: float32(number) / (largest
    - smallest + 1.0) (mismatched types float32 and float64)

    /tmp/tmpvcgo5l4r_test.go:23:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil || len(numbers) <= 1 {\n        return numbers\n\
    \    }\n    // Scale all numbers to [0, 1]\n    scaled := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        scaled[i] = numbers[i] / numbers[0]\n\
    \    }\n    // Rescale smallest to 0 and the largest to 1\n    smallest := scaled[0]\n\
    \    smallest -= smallest * smallest\n    largest := scaled[len(scaled)-1]\n \
    \   largest -= largest * largest\n    for i := 1; i < len(scaled); i++ {\n   \
    \     if scaled[i] < smallest {\n            smallest = scaled[i]\n        }\n\
    \        if scaled[i] > largest {\n            largest = scaled[i]\n        }\n\
    \    }\n    // Apply linear transformation to scaled numbers\n    result := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        result[i] =\
    \ numbers[i] * (largest - smallest) + smallest + 0.01\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpz7qs3i_g_test.go:59: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=49.91) %!s(float64=1245.0149999999999)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpz7qs3i_g_test.go:59: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=49.91) %!s(float64=24.9101)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpz7qs3i_g_test.go:59: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=5.01)\
    \ %!s(float64=10.01) %!s(float64=15.01) %!s(float64=20.01) %!s(float64=25.01)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpz7qs3i_g_test.go:59:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=5.01) %!s(float64=2.51) %!s(float64=12.51)\
    \ %!s(float64=7.51) %!s(float64=10.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpz7qs3i_g_test.go:59: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=15.01)\
    \ %!s(float64=13.76) %!s(float64=18.76) %!s(float64=16.26) %!s(float64=17.51)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var new_numbers []float64\n    for _, number := range numbers\
    \ {\n        new_numbers = append(new_numbers, float64(number)/float64(len(numbers)))\n\
    \    }\n    return new_numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpi3smhv5z_test.go:37: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=1) %!s(float64=24.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpi3smhv5z_test.go:37: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=50) %!s(float64=24.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpi3smhv5z_test.go:37: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpi3smhv5z_test.go:37:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpi3smhv5z_test.go:37: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2.4)\
    \ %!s(float64=2.2) %!s(float64=3) %!s(float64=2.6) %!s(float64=2.8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result []float64\n    for _, v := range numbers {\n   \
    \     result = append(result, v/(numbers[len(numbers)-1]))\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7r056epu_test.go:37: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7r056epu_test.go:37: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=2.0040080160320644) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7r056epu_test.go:37: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp7r056epu_test.go:37:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.5) %!s(float64=0.25) %!s(float64=1.25)\
    \ %!s(float64=0.75) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7r056epu_test.go:37: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8571428571428571)\
    \ %!s(float64=0.7857142857142857) %!s(float64=1.0714285714285714) %!s(float64=0.9285714285714286)\
    \ %!s(float64=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074817
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest, err := math.MaxFloat64(),\
    \ math.Abs(numbers[0])\n    if err == nil {\n        for _, number := range numbers\
    \ {\n            if number != 0 {\n                smallest, err = math.Min(number,\
    \ smallest)\n                largest, err = math.Max(number, largest)\n      \
    \      }\n        }\n    }\n    if err != nil {\n        panic(err)\n    }\n \
    \   scales := make([]float64, len(numbers))\n    min := smallest / largest\n \
    \   for i := range numbers {\n        if numbers[i] != 0 {\n            scales[i]\
    \ = numbers[i] / min\n        }\n    }\n    return scales\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6d2puw_e_test.go:14:21: undefined: math

    /tmp/tmp6d2puw_e_test.go:18:33: undefined: math

    /tmp/tmp6d2puw_e_test.go:19:32: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    return []float64{\n        smallest - largest/2,\n       \
    \ largest,\n    }\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpxuqlxp4w_test.go:52: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-22.95) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpxuqlxp4w_test.go:52: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=-0.10000000000000142) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpxuqlxp4w_test.go:52: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-1.5)\
    \ %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n  \
    \      tmpxuqlxp4w_test.go:52: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-1.5) %!s(float64=5)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpxuqlxp4w_test.go:52:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=3.5) %!s(float64=15)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074817
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    smallest -= largest / 2.0\n    return []float64{smallest,\
    \ 1.0}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpz8382gf8_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-22.95) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpz8382gf8_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=-0.10000000000000142) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpz8382gf8_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-1.5)\
    \ %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n  \
    \      tmpz8382gf8_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-1.5) %!s(float64=1)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpz8382gf8_test.go:44:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=3.5) %!s(float64=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074817
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    largest, smallest := numbers[0], numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > smallest {\n            smallest = number\n\
    \        }\n        if number < largest {\n            largest = number\n    \
    \    }\n    }\n\n    output := []float64{}\n    for _, number := range numbers\
    \ {\n        if number <= smallest {\n            number = 0.0\n        }\n  \
    \      if number >= largest {\n            number = 1.0\n        }\n        output\
    \ = append(output, number*1.0-1.0)\n    }\n    return output\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpaj29nyff_test.go:53: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-1) %!s(float64=-1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpaj29nyff_test.go:53: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=-1) %!s(float64=-1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpaj29nyff_test.go:53: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-1) %!s(float64=-1)\
    \ %!s(float64=-1) %!s(float64=-1) %!s(float64=-1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpaj29nyff_test.go:53: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-1) %!s(float64=-1)\
    \ %!s(float64=-1) %!s(float64=-1) %!s(float64=-1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpaj29nyff_test.go:53: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-1) %!s(float64=-1)\
    \ %!s(float64=-1) %!s(float64=-1) %!s(float64=-1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074817
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    n := len(numbers)\n    if n<2 {\n        return numbers\n \
    \   }\n    if n > 2 {\n        fmt.Fprintf(\n            &testing.T{},\n     \
    \       \"rescale_to_unit called with %d elements\",\n            n,\n       \
    \ )\n    }\n\n    // The first two numbers are always 1 and 1\n    numbers :=\
    \ append(numbers, 1.0)\n    numbers := append(numbers, 1.0)\n\n    // Find the\
    \ min and max numbers in the list\n    var min float64\n    var max float64\n\
    \    for i := 0; i < n; i++ {\n        if min > numbers[i] {\n            min\
    \ = numbers[i]\n        }\n        if max < numbers[i] {\n            max = numbers[i]\n\
    \        }\n    }\n\n    // Calculate the scale factors (by dividing by the max\
    \ and min values)\n    scales := []float64{}\n    for i := 0; i < n; i++ {\n \
    \       scales = append(scales, numbers[i] / max)\n        scales = append(scales,\
    \ numbers[i] / min)\n    }\n\n    // Apply those scales\n    for i := 0; i < n;\
    \ i++ {\n        numbers[i] *= scales[i]\n    }\n\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdlsc3pet_test.go:19:13:\
    \ cannot use &testing.T{} (value of type *testing.T) as type io.Writer in argument\
    \ to fmt.Fprintf:\n\t*testing.T does not implement io.Writer (missing Write method)\n\
    /tmp/tmpdlsc3pet_test.go:26:13: no new variables on left side of :=\n/tmp/tmpdlsc3pet_test.go:27:13:\
    \ no new variables on left side of :=\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074817
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var transformed []float64\n    var min_value float64\n    var\
    \ max_value float64\n    var current_value float64\n    var total_sum float64\n\
    \    var max_scaled float64\n\n    for _, n := range numbers {\n        current_value\
    \ = n\n        total_sum = current_value\n\n        for i := 0; i < len(numbers);\
    \ i++ {\n            total_sum += numbers[i]\n        }\n\n        max_scaled\
    \ = total_sum / float64(len(numbers))\n\n        if max_scaled < min_value {\n\
    \            min_value = max_scaled\n        }\n        if max_scaled > max_value\
    \ {\n            max_value = max_scaled\n        }\n\n        transformed = append(transformed,\
    \ float64(max_scaled))\n    }\n\n    return transformed\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp8t_yyq7s_test.go:60: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=26.95) %!s(float64=50.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp8t_yyq7s_test.go:60: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=124.95) %!s(float64=99.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp8t_yyq7s_test.go:60: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=3.2)\
    \ %!s(float64=3.4) %!s(float64=3.6) %!s(float64=3.8) %!s(float64=4)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp8t_yyq7s_test.go:60:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=3.4) %!s(float64=3.2) %!s(float64=4)\
    \ %!s(float64=3.6) %!s(float64=3.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp8t_yyq7s_test.go:60: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=15.4)\
    \ %!s(float64=15.2) %!s(float64=16) %!s(float64=15.6) %!s(float64=15.8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074817
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    m := -1\n    md := -1\n    for i := 0; i < len(numbers); i++\
    \ {\n        if numbers[i] < m {\n            m = numbers[i]\n            md =\
    \ i\n        } else if numbers[i] > m {\n            numbers[i] = 1 - (md - i)\n\
    \            numbers[md] = m\n            numbers[m] = i\n            numbers[i]\
    \ = 0\n            numbers[md] = 0\n        }\n    }\n    return numbers\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyqt5p6no_test.go:16:25: invalid operation: numbers[i] < m (mismatched
    types float64 and int)

    /tmp/tmpyqt5p6no_test.go:17:17: cannot use numbers[i] (variable of type float64)
    as type int in assignment

    /tmp/tmpyqt5p6no_test.go:19:32: invalid operation: numbers[i] > m (mismatched
    types float64 and int)

    /tmp/tmpyqt5p6no_test.go:20:26: cannot use 1 - (md - i) (value of type int) as
    type float64 in assignment

    /tmp/tmpyqt5p6no_test.go:21:27: cannot use m (variable of type int) as type float64
    in assignment

    /tmp/tmpyqt5p6no_test.go:22:26: cannot use i (variable of type int) as type float64
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074817
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    rescaled := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        if number == 0.0 {\n            rescaled[i] = 1.0\n\
    \            continue\n        }\n        rescaled[i] = (number-min(numbers))/(max(numbers)-min(numbers))\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9whveezn_test.go:19:31: undefined: min

    /tmp/tmp9whveezn_test.go:19:46: undefined: max

    /tmp/tmp9whveezn_test.go:19:59: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074817
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    result := make([]float64, 0, len(numbers))\n    if len(numbers)\
    \ < 2 {\n        return numbers\n    }\n    smallest := numbers[0]\n    for i\
    \ := 0; i < len(numbers); i++ {\n        result := numbers[i]\n        smallest\
    \ += result\n        result = smallest / len(numbers)\n        numbers[i] = result\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_g4wx52_test.go:21:18: invalid operation: smallest / len(numbers) (mismatched
    types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074817
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    n := len(numbers)\n    if n < 2 {\n        return numbers\n\
    \    }\n\n    largest := numbers[0]\n    smallest := numbers[n-1]\n    for i :=\
    \ 1; i < n; i++ {\n        if numbers[i] < smallest {\n            smallest =\
    \ numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n        if numbers[i]\
    \ != 0 {\n            numbers[i] = (largest - smallest) / (numbers[i] - smallest)\n\
    \        }\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp0llzmxd6_test.go:53: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-0) %!s(float64=NaN)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp0llzmxd6_test.go:53: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=+Inf)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp0llzmxd6_test.go:53: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-3) %!s(float64=+Inf)\
    \ %!s(float64=3) %!s(float64=1.5) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp0llzmxd6_test.go:53: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=4) %!s(float64=+Inf)\
    \ %!s(float64=1) %!s(float64=2) %!s(float64=1.3333333333333333)]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__4 (0.00s)\n        tmp0llzmxd6_test.go:53: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[%!s(float64=4) %!s(float64=+Inf) %!s(float64=1) %!s(float64=2) %!s(float64=1.3333333333333333)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, num :=\
    \ range numbers {\n        if num < min {\n            min = num\n        }\n\
    \        if num > max {\n            max = num\n        }\n    }\n\n    result\
    \ := make([]float64, len(numbers))\n    for idx, value := range numbers {\n  \
    \      result[idx] = (value-min)/(max-min)\n    }\n    return result\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074818
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var max = numbers[0]\n    var min = numbers[0]\n    for _,\
    \ v := range numbers {\n        min = math.Min(min, v)\n        max = math.Max(max,\
    \ v)\n    }\n    rescaled_numbers := make([]float64, len(numbers))\n    for i\
    \ := range numbers {\n        rescaled_numbers[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6a3uic3e_test.go:16:15: undefined: math

    /tmp/tmp6a3uic3e_test.go:17:15: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074817
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest_index := 0\n    largest_index := len(numbers)-1\n\
    \    smallest_number := numbers[smallest_index]\n    largest_number := numbers[largest_index]\n\
    \    for index, number := range numbers {\n        if (number > smallest_number)\
    \ {\n            smallest_number = number\n            smallest_index = index\n\
    \        }\n        if (number < largest_number) {\n            largest_number\
    \ = number\n            largest_index = index\n        }\n    }\n    smallest_number\
    \ /= (largest_number - smallest_number)\n    largest_number /= (largest_number\
    \ - smallest_number)\n    result := make([]float64, len(numbers))\n    for index,\
    \ number := range numbers {\n        result[index] = number - (largest_number\
    \ - smallest_number) * (index - smallest_index)\n    }\n    return result\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbv8cn656_test.go:31:34: invalid operation: (largest_number - smallest_number)
    * (index - smallest_index) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074818
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // The last element of the list is never changed\n    var smallest_number\
    \ float64\n    var max_number float64\n    for _, number := range numbers {\n\
    \        if number < smallest_number {\n            smallest_number = number\n\
    \        }\n        if number > max_number {\n            max_number = number\n\
    \        }\n    }\n\n    // Linear transform goes from [smallest_number, max_number]\
    \ to [0, 1]\n    transformed_numbers := make([]float64, 0, len(numbers))\n   \
    \ for _, number := range numbers {\n        transformed_numbers = append(transformed_numbers,\
    \ number-smallest_number) / (max_number-smallest_number)\n    }\n\n    // Transform\
    \ the smallest and largest number back to the original form\n    smallest_number\
    \ -= smallest_number*(max_number-smallest_number)/(max_number-min_number)\n  \
    \  max_number += max_number*(max_number-min_number)/(max_number-min_number)\n\n\
    \    return append(transformed_numbers, smallest_number, max_number)\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkiewzll_test.go:28:31: invalid operation: append(transformed_numbers,
    number - smallest_number) / (max_number - smallest_number) (mismatched types []float64
    and float64)

    /tmp/tmpgkiewzll_test.go:32:81: undefined: min_number

    /tmp/tmpgkiewzll_test.go:33:42: undefined: min_number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074818
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    length := len(numbers)\n    if (length < 2) {\n        return\
    \ numbers\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for i := 0;\
    \ i < length; i++ {\n        if numbers[i] < min {\n            min = numbers[i]\n\
    \        }\n        if numbers[i] > max {\n            max = numbers[i]\n    \
    \    }\n    }\n    length := length + 1\n    rescaled_numbers = make([]float64,\
    \ length)\n    for i := 0; i < length; i++ {\n        if numbers[i] != 0 {\n \
    \           rescaled_numbers[i] = numbers[i] / max - min\n        } else {\n \
    \           rescaled_numbers[i] = 0.0\n        }\n    }\n    return rescaled_numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qjisd92_test.go:27:12: no new variables on left side of :=

    /tmp/tmp1qjisd92_test.go:28:5: undefined: rescaled_numbers

    /tmp/tmp1qjisd92_test.go:31:13: undefined: rescaled_numbers

    /tmp/tmp1qjisd92_test.go:33:13: undefined: rescaled_numbers

    /tmp/tmp1qjisd92_test.go:36:12: undefined: rescaled_numbers

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var rescaled []float64\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n\n    min -= (max - min)/2\n    max += min - (max - min)/2\n\
    \    for _, number := range numbers {\n        rescaled = append(rescaled, number*(max-min)\
    \ + min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpjacak28o_test.go:50: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=5.9999999999999964) %!s(float64=675.4024999999998)]'\n   \
    \ --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpjacak28o_test.go:50:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=6267.35) %!s(float64=3139.8574999999996)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__2 (0.00s)\n        tmpjacak28o_test.go:50:\
    \ expected '[%!s(float64=0) %!s(float64=0.25) %!s(float64=0.5) %!s(float64=0.75)\
    \ %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=3) %!s(float64=5) %!s(float64=7)\
    \ %!s(float64=9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n  \
    \      tmpjacak28o_test.go:50: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=1) %!s(float64=9)\
    \ %!s(float64=5) %!s(float64=7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpjacak28o_test.go:50: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=153)\
    \ %!s(float64=141) %!s(float64=189) %!s(float64=165) %!s(float64=177)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    sorted_numbers := sort.Float64Slice(numbers)\n    sorted_numbers.Sort()\n\
    \n    smallest := sorted_numbers[0]\n    largest := sorted_numbers[len(sorted_numbers)-1]\n\
    \n    diff := largest - smallest\n    scale := (1.0 + (diff / float64(len(sorted_numbers))))\n\
    \n    return append([]float64{0.0}, sorted_numbers...) * scale\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprqgqgmf__test.go:13:23: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    max := numbers[0]\n    for _, x := range numbers {\n      \
    \  if x > max {\n            max = x\n        }\n    }\n    for _, x := range\
    \ numbers {\n        if x < 0 {\n            x = -x\n        }\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpmb1lco5o_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpmb1lco5o_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpmb1lco5o_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpmb1lco5o_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpmb1lco5o_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    sort.Float64s(numbers)\n    if len(numbers) < 2 {\n       \
    \ return numbers\n    }\n    // if first number in list is\n    // 0, we skip\
    \ it (we cannot rescale it into 0)\n    if numbers[0] == 0 {\n        numbers\
    \ = numbers[1:]\n    }\n    // if last number in list is\n    // 1, we skip it\
    \ (we cannot rescale it into 1)\n    if numbers[len(numbers)-1] == 1 {\n     \
    \   numbers = numbers[:len(numbers)-1]\n    }\n\n    min := numbers[0]\n    max\
    \ := numbers[len(numbers)-1]\n    diff := max - min\n    if diff == 0 {\n    \
    \    return numbers\n    }\n    scaler := 1.0 / diff\n    for _, number := range\
    \ numbers {\n        number *= scaler\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91gr879k_test.go:13:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    i := 1\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n        i += 1 // for debugging\n    }\n    if smallest == 0 {\n      \
    \  return numbers\n    }\n    if largest == 1 {\n        return numbers\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    rescaled[0] = largest / smallest\n\
    \    rescaled[1-1] = rescaled[0]\n    rescaled[1] = numbers[1] / rescaled[0]\n\
    \    rescaled[2] = numbers[2] / rescaled[0]\n    rescaled[3] = numbers[3] / rescaled[0]\n\
    \    rescaled[4] = numbers[4] / rescaled[0]\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rescale_to_unit({0xc00001e200?, 0x2, 0x4b31e0?})\n\
    \t/tmp/tmp13zd_81x_test.go:38 +0x15c\ncommand-line-arguments_test.TestRescale_To_Unit(0x0?)\n\
    \t/tmp/tmp13zd_81x_test.go:51 +0x71\ntesting.tRunner(0xc0001a0340, 0x529028)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // Get the smallest number of the list of numbers\n    smallest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n    }\n\n    // Find the difference\
    \ between the smallest and largest number\n    diff := smallest - numbers[len(numbers)-1]\n\
    \n    // Get a list of numbers in the same range as the original numbers, but\n\
    \    // with the smallest number transformed into 0\n    rescaledNumbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        rescaledNumbers[i]\
    \ = number*(1-diff/smallest) + diff/smallest\n    }\n\n    return rescaledNumbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpj7_8x0yv_test.go:51: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=25.95) %!s(float64=1221.0549999999998)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpj7_8x0yv_test.go:51: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpj7_8x0yv_test.go:51: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=6)\
    \ %!s(float64=11) %!s(float64=16) %!s(float64=21)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpj7_8x0yv_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=5) %!s(float64=1)\
    \ %!s(float64=17) %!s(float64=9) %!s(float64=13)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpj7_8x0yv_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=15) %!s(float64=13.727272727272727)\
    \ %!s(float64=18.818181818181817) %!s(float64=16.272727272727273) %!s(float64=17.545454545454543)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    minElem\
    \ := numbers[0]\n    maxElem := numbers[0]\n    for _, elem := range numbers[1:]\
    \ {\n        minElem = math.Min(elem, minElem)\n        maxElem = math.Max(elem,\
    \ maxElem)\n    }\n\n    // Linear rescale so that all numbers are in [0, 1]\n\
    \    var newList []float64\n    for _, number := range numbers {\n        newList\
    \ = append(newList, float32(number)/(maxElem - minElem))\n    }\n    return newList\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkn1g9oih_test.go:19:19: undefined: math

    /tmp/tmpkn1g9oih_test.go:20:19: undefined: math

    /tmp/tmpkn1g9oih_test.go:26:35: invalid operation: float32(number) / (maxElem
    - minElem) (mismatched types float32 and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074819
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var new_numbers []float64\n    var old_min float64\n    var\
    \ old_max float64\n\n    for _, number := range numbers {\n        // Make sure\
    \ the number is valid\n        if number < 0 {\n            t.Errorf(\"Invalid\
    \ number %f. Number should be greater or equal than 0.\", number)\n        }\n\
    \n        // Make sure the number is valid\n        if number > 1 {\n        \
    \    t.Errorf(\"Invalid number %f. Number should be less than 1.\", number)\n\
    \        }\n\n        // Make sure the minimum value hasn't changed\n        if\
    \ old_min < 0 {\n            t.Errorf(\"The minimum number was already set to\
    \ 0, so the first number in the list can't be < 0.\")\n        }\n        if old_min\
    \ > number {\n            t.Errorf(\"The minimum number was already set to 0,\
    \ so the first number in the list can't be > than the number.\")\n        }\n\n\
    \        // Make sure the maximum value hasn't changed\n        if old_max < number\
    \ {\n            t.Errorf(\"The maximum number was already set to 1, so the number\
    \ at the end can't be < than the number.\")\n        }\n\n        // Update the\
    \ minimum\n        old_min = number\n\n        // Update the maximum\n       \
    \ old_max = number\n\n        // Convert the number into a ratio\n        ratio\
    \ := float64(number) / float64(old_max)\n        new_numbers = append(new_numbers,\
    \ ratio)\n    }\n    return new_numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps5xtaayb_test.go:20:13: undefined: t

    /tmp/tmps5xtaayb_test.go:25:13: undefined: t

    /tmp/tmps5xtaayb_test.go:30:13: undefined: t

    /tmp/tmps5xtaayb_test.go:33:13: undefined: t

    /tmp/tmps5xtaayb_test.go:38:13: undefined: t

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest,\
    \ largest := numbers[0], numbers[len(numbers)-1]\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = numbers[i] / largest / smallest\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpl2pwq4gt_test.go:40: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.02004008016032064) %!s(float64=0.5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpl2pwq4gt_test.go:40: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0.020040080160320644) %!s(float64=0.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpl2pwq4gt_test.go:40: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpl2pwq4gt_test.go:40:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.25) %!s(float64=0.125) %!s(float64=0.625)\
    \ %!s(float64=0.375) %!s(float64=0.5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpl2pwq4gt_test.go:40: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.07142857142857142)\
    \ %!s(float64=0.06547619047619048) %!s(float64=0.08928571428571429) %!s(float64=0.07738095238095238)\
    \ %!s(float64=0.08333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074820
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    scaledNumbers := make([]float64, len(numbers))\n    for\
    \ i := range scaledNumbers {\n        scaledNumbers[i] = ((float64(numbers[i])-smallest)/(largest-smallest))\
    \ * 1.0\n    }\n    return scaledNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074820
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    max := numbers[0]\n    for _, n := range numbers[1:] {\n  \
    \      if n >= max {\n            max = n\n        }\n    }\n    min := numbers[0]\n\
    \    for _, n := range numbers[1:] {\n        if n < min {\n            min =\
    \ n\n        }\n    }\n    var scaled []float64\n    for _, n := range numbers\
    \ {\n        scaledSlice = append(scaled, ((n - min)/(max - min))*1000)\n    }\n\
    \    return scaled\n}\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ko4i3ni_test.go:27:9: undefined: scaledSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074819
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // check we have at least 2 numbers\n    if len(numbers) <\
    \ 2 {\n        panic(fmt.Sprintf(\"rescale_to_unit: passed a list with %d elements,\
    \ expecting at least two\", len(numbers)))\n    }\n    // get min and max element\n\
    \    min := numbers[0]\n    max := numbers[0]\n    for _, v := range numbers {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n\n    // rescale all numbers to range\
    \ [min, max]\n    res := []float64{}\n    for _, v := range numbers {\n      \
    \  val = v * (max-min) / (max - min)\n        res = append(res, val)\n    }\n\
    \    return res\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxpr8tpra_test.go:32:9: undefined: val

    /tmp/tmpxpr8tpra_test.go:33:27: undefined: val

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074819
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // Find min and max numbers\n    minNum := numbers[0]\n   \
    \ maxNum := numbers[0]\n    for _, num := range numbers {\n        if num < minNum\
    \ {\n            minNum = num\n        }\n        if num > maxNum {\n        \
    \    maxNum = num\n        }\n    }\n\n    // Calculate the range (max - min)\n\
    \    maxNumRange := maxNum - minNum\n\n    // Calculate linear transformation\
    \ factor from range [0, maxNumRange] to range [0, 1], such that\n    // the smallest\
    \ number will become 0 and the largest will become 1\n    factor = ((maxNumRange\
    \ - minNum) / maxNumRange)\n\n    // Apply the linear transformation factor to\
    \ all numbers\n    rescaledNumbers := make([]float64, len(numbers))\n    for i\
    \ := 0; i < len(numbers); i++ {\n        rescaledNumbers[i] = numbers[i] - minNum\n\
    \        rescaledNumbers[i] *= factor\n        rescaledNumbers[i] += minNum\n\
    \    }\n\n    return rescaledNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmziskqfm_test.go:30:5: undefined: factor

    /tmp/tmpmziskqfm_test.go:36:31: undefined: factor

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074819
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min_number float64\n    var max_number float64\n    for\
    \ i := range numbers {\n        min_number = math.Min(min_number, numbers[i])\n\
    \        max_number = math.Max(max_number, numbers[i])\n    }\n    min_number\
    \ = math.Sqrt(min_number)\n    max_number = math.Sqrt(max_number)\n    for i :=\
    \ range numbers {\n        numbers[i] = numbers[i] / min_number\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_khwr04_test.go:16:22: undefined: math

    /tmp/tmp2_khwr04_test.go:17:22: undefined: math

    /tmp/tmp2_khwr04_test.go:19:18: undefined: math

    /tmp/tmp2_khwr04_test.go:20:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074819
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n \
    \   // find largest and smallest numbers\n    var min, max float64\n    for _,\
    \ n := range numbers {\n        if n < min {\n            min = n\n        }\n\
    \        if n > max {\n            max = n\n        }\n    }\n\n    // scale the\
    \ numbers to (0, 1) by subtracting min\n    smallest := 0\n    for i, n := range\
    \ numbers {\n        numbers[i] -= min\n        if numbers[i] < smallest {\n \
    \           smallest = numbers[i]\n        }\n    }\n\n    // scale the numbers\
    \ to (0, 1) by dividing by max - min\n    for i, n := range numbers {\n      \
    \  numbers[i] /= (max - min)\n    }\n\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvvfk97c8_test.go:30:12: n declared but not used

    /tmp/tmpvvfk97c8_test.go:32:25: invalid operation: numbers[i] < smallest (mismatched
    types float64 and int)

    /tmp/tmpvvfk97c8_test.go:33:24: cannot use numbers[i] (variable of type float64)
    as type int in assignment

    /tmp/tmpvvfk97c8_test.go:38:12: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    \n\
    \    // Find the smallest and largest\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, v := range numbers {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    \n\
    \    // Rescale each number in the list\n    newNumbers := make([]float64, len(numbers))\n\
    \    for i := range newNumbers {\n        newNumbers[i] = min + (numbers[i] -\
    \ min) * (max - min) / (max - min)\n    }\n    \n    return newNumbers\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpmtocmebk_test.go:55: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpmtocmebk_test.go:55: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpmtocmebk_test.go:55: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpmtocmebk_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpmtocmebk_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074820
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var rescaledNumbers []float64\n    for _, num := range numbers\
    \ {\n        rescaledNumbers = append(rescaledNumbers, float64(num)/float64(len(numbers)))\n\
    \    }\n    return rescaledNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp68hdseit_test.go:37: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=1) %!s(float64=24.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp68hdseit_test.go:37: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=50) %!s(float64=24.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp68hdseit_test.go:37: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp68hdseit_test.go:37:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp68hdseit_test.go:37: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2.4)\
    \ %!s(float64=2.2) %!s(float64=3) %!s(float64=2.6) %!s(float64=2.8)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074820
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    n := len(numbers)\n    if n < 2 {\n        return numbers\n\
    \    }\n    min := numbers[0]\n    max := numbers[n-1]\n    r := max - min\n \
    \   delta := r / float64(n)\n    delta /= 2.0\n    for i := 0; i < n; i++ {\n\
    \        numbers[i] += delta\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpl9jdl_nh_test.go:45: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=13.975) %!s(float64=61.875)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpl9jdl_nh_test.go:45: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=87.475) %!s(float64=37.375)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpl9jdl_nh_test.go:45: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1.4)\
    \ %!s(float64=2.4) %!s(float64=3.4) %!s(float64=4.4) %!s(float64=5.4)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpl9jdl_nh_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=2.2) %!s(float64=1.2) %!s(float64=5.2)\
    \ %!s(float64=3.2) %!s(float64=4.2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpl9jdl_nh_test.go:45: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12.2)\
    \ %!s(float64=11.2) %!s(float64=15.2) %!s(float64=13.2) %!s(float64=14.2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074820
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    real := (largest - smallest) / (len(numbers) - 1)\n   \
    \ rescaled := make([]float64, len(numbers))\n    i := 0\n    for _, number :=\
    \ range numbers {\n        rescaled[i] = real * number + smallest\n        i++\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bi356mk_test.go:23:13: invalid operation: (largest - smallest) / (len(numbers)
    - 1) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074820
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    var\
    \ smallest, largest float64\n    for _, n := range numbers {\n        smallest\
    \ = math.Min(smallest, n)\n        largest = math.Max(largest, n)\n    }\n   \
    \ if smallest != 0 {\n        numbers = append(numbers, 0)\n    }\n    if largest\
    \ != 1 {\n        numbers = append(numbers, 1)\n    }\n    return numbers\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fac9q88_test.go:18:20: undefined: math

    /tmp/tmp7fac9q88_test.go:19:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074820
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      } else if number > max {\n            max = number\n        }\n    }\n\n\
    \    return make([]float64, len(numbers))\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpzl_e30q8_test.go:43: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpzl_e30q8_test.go:43: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpzl_e30q8_test.go:43: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=0)\
    \ %!s(float64=0) %!s(float64=0) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpzl_e30q8_test.go:43: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=0)\
    \ %!s(float64=0) %!s(float64=0) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpzl_e30q8_test.go:43: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=0)\
    \ %!s(float64=0) %!s(float64=0) %!s(float64=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074820
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  var min, max float64\n    for _, num := range numbers {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n\n    if min < 0 && max < 0 {\n        return nil\n\
    \    }\n\n    return []float64{\n        ((min - max) * 0.5) + max,\n        ((min\
    \ - max) * 0.5) + min,\n    }\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp4wwr01yo_test.go:54: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=24.95) %!s(float64=-24.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp4wwr01yo_test.go:54: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=50) %!s(float64=-50)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp4wwr01yo_test.go:54: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=2.5)\
    \ %!s(float64=-2.5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n\
    \        tmp4wwr01yo_test.go:54: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2.5) %!s(float64=-2.5)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmp4wwr01yo_test.go:54:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=7.5) %!s(float64=-7.5)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074820
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, value\
    \ := range numbers {\n        if value < min {\n            min = value\n    \
    \    } else if value > max {\n            max = value\n        }\n    }\n    for\
    \ _, value := range numbers {\n        value /= max - min\n        numbers[0]\
    \ -= min * value\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp1qc3ets7_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-0.16701461377870586) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp1qc3ets7_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=-49.30159680638722) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp1qc3ets7_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-2.75)\
    \ %!s(float64=2) %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp1qc3ets7_test.go:46: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[%!s(float64=-1.75) %!s(float64=1) %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmp1qc3ets7_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=-166.75) %!s(float64=11) %!s(float64=15)\
    \ %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074820
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min, max := min(numbers), max(numbers)\n    if min == 0.0 {\n\
    \        return numbers\n    }\n\n    scaled_numbers := make([]float64, len(numbers))\n\
    \    scaled_numbers[0] = 0\n    for i := range scaled_numbers {\n        scaled_numbers[i]\
    \ = numbers[i] / max - min\n    }\n\n    return scaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpngrzb5h6_test.go:13:17: undefined: min

    /tmp/tmpngrzb5h6_test.go:13:31: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074820
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // Convert the list to sorted (by first element), so that we\
    \ can find the first and last\n    // elements that are exactly 0 or 1, and adjust\
    \ their neighboring values\n    sort.Float64s(numbers)\n    i := sort.Search(len(numbers),\
    \ func(i int) bool {\n        return numbers[i] < numbers[i+1]\n    })\n    numbers\
    \ := append(numbers[:i], numbers[i+1:]...)\n\n    min := numbers[0]\n    max :=\
    \ numbers[len(numbers)-1]\n    // Convert the numbers to 0-1 interval, where 0\
    \ means min and 1 means max\n    numbers = make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        numbers[i] = ((numbers[i]-min) / (max-min))\
    \ // the range is (min to max)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt1zsajay_test.go:15:5: undefined: sort

    /tmp/tmpt1zsajay_test.go:16:10: undefined: sort

    /tmp/tmpt1zsajay_test.go:19:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074821
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil {\n        return nil\n    }\n\n    var minInt,\
    \ maxInt int64\n\n    for _, n := range numbers {\n        if n >= 0.0 {\n   \
    \         minInt = n\n        } else {\n            maxInt = n\n        }\n  \
    \  }\n\n    var newNumbers []float64\n    for _, n := range numbers {\n      \
    \  if n == 0.0 {\n            newNumbers = append(newNumbers, 0.0)\n        }\
    \ else {\n            newNumbers = append(newNumbers, n/float64(minInt)/float64(maxInt))\n\
    \        }\n    }\n\n    return newNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpogfm1xbm_test.go:21:22: cannot use n (variable of type float64) as type
    int64 in assignment

    /tmp/tmpogfm1xbm_test.go:23:22: cannot use n (variable of type float64) as type
    int64 in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074820
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) <= 1 {\n        return numbers\n    }\n\n \
    \   min := math.SmallestNonzeroFloat64(numbers)\n    max := math.LargestFloat64(numbers)\n\
    \n    numbers2 := make([]float64, len(numbers))\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers2[i] = numbers[i] / max - min\n    }\n\n    return numbers2\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptr5yf77h_test.go:17:12: undefined: math

    /tmp/tmptr5yf77h_test.go:18:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074820
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    sorted_numbers := sortFloat64s(numbers)\n    smallest_number\
    \ := sorted_numbers[0]\n    largest_number := sorted_numbers[len(sorted_numbers)-1]\n\
    \    new_numbers_rescaled := make([]float64, len(numbers))\n    new_numbers_rescaled[0]\
    \ = smallest_number / largest_number\n    for index, number := range sorted_numbers[1:]\
    \ {\n        new_numbers_rescaled[index] = new_numbers_rescaled[index-1] + (number-smallest_number)\
    \ / (largest_number-smallest_number)\n    }\n    return new_numbers_rescaled\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwlhupz2_test.go:13:23: undefined: sortFloat64s

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074821
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n\n    for _, number\
    \ := range numbers {\n        if number > max {\n            max = number\n  \
    \      } else if number < min {\n            min = number\n        }\n    }\n\n\
    \    var rescaled_numbers []float64\n    for _, number := range numbers {\n  \
    \      rescaled_numbers = append(rescaled_numbers, ((max-min)/(number-min))*(number-min)\
    \ + min)\n    }\n    return rescaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpi95q_rd1_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=NaN) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpi95q_rd1_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=NaN)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpi95q_rd1_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=NaN)\
    \ %!s(float64=5) %!s(float64=5) %!s(float64=5) %!s(float64=5)]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpi95q_rd1_test.go:48: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[%!s(float64=5) %!s(float64=NaN) %!s(float64=5) %!s(float64=5) %!s(float64=5)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpi95q_rd1_test.go:48:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=15) %!s(float64=NaN) %!s(float64=15)\
    \ %!s(float64=15) %!s(float64=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074821
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // find the smallest and largest numbers\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, n := range numbers[1:] {\n        if n\
    \ < smallest {\n            smallest = n\n        } else if n > largest {\n  \
    \          largest = n\n        }\n    }\n\n    // rescale each number by the\
    \ maximum - minimum ratio\n    ratio := largest / smallest\n    for _, n := range\
    \ numbers {\n        numbers[n] = ratio * n\n    }\n\n    return numbers\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphjt7vhkt_test.go:27:17: invalid argument: index n (variable of type float64)
    must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074821
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n\n    r := make([]float64,\
    \ len(numbers))\n    for i := range r {\n        r [i] = (max - min) / (numbers[i]-min)\n\
    \    }\n\n    return r\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpg7mbraxh_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=+Inf) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpg7mbraxh_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=+Inf)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpg7mbraxh_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=+Inf)\
    \ %!s(float64=4) %!s(float64=2) %!s(float64=1.3333333333333333) %!s(float64=1)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpg7mbraxh_test.go:49:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=4) %!s(float64=+Inf) %!s(float64=1) %!s(float64=2)\
    \ %!s(float64=1.3333333333333333)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpg7mbraxh_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=4) %!s(float64=+Inf)\
    \ %!s(float64=1) %!s(float64=2) %!s(float64=1.3333333333333333)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min_ float64\n    var max_ float64\n    var min_pos int\n\
    \    var max_pos int\n    for i := 0; i < len(numbers); i++ {\n        min_ =\
    \ min_\n        max_ = max_\n        if numbers[i] < min_ {\n            min_\
    \ = numbers[i]\n            min_pos = i\n        }\n        if numbers[i] > max_\
    \ {\n            max_ = numbers[i]\n            max_pos = i\n        }\n    }\n\
    \    new_list := make([]float64, 0, len(numbers))\n    new_list = append(new_list,\
    \ min_)\n    new_list = append(new_list, numbers[min_pos:])\n    new_list = append(new_list,\
    \ max_)\n    new_list = append(new_list, numbers[:max_pos])\n    return new_list\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4t_jis33_test.go:31:40: cannot use numbers[min_pos:] (value of type []float64)
    as type float64 in argument to append

    /tmp/tmp4t_jis33_test.go:33:40: cannot use numbers[:max_pos] (value of type []float64)
    as type float64 in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074821
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var smallest float64\n    var largest float64\n    for _, v\
    \ := range numbers {\n        if smallest == 0 {\n            smallest = v\n \
    \       }\n        if largest == 0 {\n            largest = v\n        }\n   \
    \     if v < smallest {\n            smallest = v\n        }\n        if v > largest\
    \ {\n            largest = v\n        }\n    }\n    smallest -= smallest / 2\n\
    \    largest += smallest / 2\n    smallest += smallest / 2\n    smallest /= 2\n\
    \    smallest -= 1\n    smallest += 1\n    largest *= 2\n    largest *= 2\n  \
    \  largest += 1\n    largest *= 2\n    largest *= 2\n    for _, v := range numbers\
    \ {\n        if v < smallest {\n            numbers[len(numbers)-1] -= smallest\
    \ - v\n        }\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmppl_amzfs_test.go:65: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmppl_amzfs_test.go:65: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmppl_amzfs_test.go:65: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmppl_amzfs_test.go:65: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmppl_amzfs_test.go:65: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    // scale the elements\n    scaledNumbers := make([]float64,\
    \ len(numbers))\n    for idx, number := range numbers {\n        scaledNumbers[idx]\
    \ = float64(number-smallest) / (largest-smallest)\n    }\n\n    // rescale to\
    \ the unit interval [0, 1]\n    scaledNumbersScaled := make([]float64, len(scaledNumbers))\n\
    \    for idx, number := range scaledNumbers {\n        scaledNumbersScaled[idx]\
    \ = float64(number*largest-smallest) + smallest\n    }\n\n    return scaledNumbersScaled\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk9vc9gkw_test.go:56: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk9vc9gkw_test.go:56: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk9vc9gkw_test.go:56: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=1.25)\
    \ %!s(float64=2.5) %!s(float64=3.75) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk9vc9gkw_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1.25)\
    \ %!s(float64=0) %!s(float64=5) %!s(float64=2.5) %!s(float64=3.75)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpk9vc9gkw_test.go:56:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=3.75) %!s(float64=0) %!s(float64=15)\
    \ %!s(float64=7.5) %!s(float64=11.25)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    numbers := make([]float64, len(numbers))\n\n    smallest, largest\
    \ := numbers[0], numbers[0]\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        } else if number\
    \ > largest {\n            largest = number\n        }\n    }\n\n    if smallest\
    \ == 0 {\n        return numbers\n    }\n\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) / float64(len(numbers))\n    }\n\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbb9idwa_test.go:13:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074822
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var smallest float64\n    var largest = math.Inf(-1)\n\n  \
    \  // Find the smallest number and largest number in the list\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n    }\n\n    switch {\n    case smallest > 0.0:\n \
    \       smallest -= smallest % 1.0\n    case smallest < 0.0:\n        smallest\
    \ += 1.0\n    }\n\n    switch {\n    case largest < 1.0:\n        largest += 1.0\n\
    \    case largest > 0.0:\n        largest -= largest % 1.0\n    }\n\n    numbers\
    \ := make([]float64, len(numbers))\n    copy(numbers, numbers)\n    for i := 0;\
    \ i < len(numbers); i++ {\n        numbers[i] = numbers[i] - (smallest - numbers[i])\
    \ / largest\n    }\n\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcxxpemyz_test.go:14:19: undefined: math

    /tmp/tmpcxxpemyz_test.go:29:21: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpcxxpemyz_test.go:41:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074822
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var rescaledNumbers []float64\n    var smallestNumber float64\n\
    \    var largestNumber float64\n    var firstElement float64\n\n    for _, number\
    \ := range numbers {\n        smallestNumber = min(smallestNumber, number)\n \
    \       largestNumber = max(largestNumber, number)\n        rescaledNumbers =\
    \ append(rescaledNumbers, float64(number-smallestNumber)/(largestNumber-smallestNumber))\n\
    \    }\n    for i := 0; i < len(rescaledNumbers); i++ {\n        if rescaledNumbers[i]\
    \ < 0.0 || rescaledNumbers[i] > 1.0 {\n            fmt.Println(\"Rescale factor\
    \ for number\", i, \"is outside of range [0, 1]. Aborting!\")\n            fmt.Println(rescaledNumbers)\n\
    \            t.FailNow()\n        }\n    }\n    return rescaledNumbers\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvm91v42__test.go:16:9: firstElement declared but not used

    /tmp/tmpvm91v42__test.go:19:26: undefined: min

    /tmp/tmpvm91v42__test.go:20:25: undefined: max

    /tmp/tmpvm91v42__test.go:27:13: undefined: t

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074822
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if smallest > number {\n            smallest = number\n \
    \       }\n        if largest < number {\n            largest = number\n     \
    \   }\n    }\n\n    if smallest == 0 {\n        return numbers\n    }\n\n    var\
    \ scale = (largest - smallest) / (len(numbers) - 1)\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = number\
    \ * scale\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpozmgmhgl_test.go:32:17: invalid operation: (largest - smallest) / (len(numbers)
    - 1) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074822
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, num := range numbers {\n        if smallest > num {\n            smallest\
    \ = num\n        }\n        if largest < num {\n            largest = num\n  \
    \      }\n    }\n    factor := 1.0\n    if smallest != 0 {\n        factor = largest\
    \ / smallest\n    }\n    numbers := make([]float64, len(numbers))\n    for i,\
    \ num := range numbers {\n        numbers[i] = num / factor\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ks_me8u_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074822
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    rescaled := []float64{}\n    rescaled[0] = numbers[0]\n   \
    \ max := numbers[0]\n    for _, number := range numbers[1:] {\n        rescaled[1]\
    \ = rescaled[0] * number / max\n        max = max * number\n        rescaled =\
    \ append(rescaled, rescaled[1])\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.rescale_to_unit(...)\n\t/tmp/tmpb33owk3s_test.go:14\n\
    command-line-arguments_test.TestRescale_To_Unit(0x0?)\n\t/tmp/tmpb33owk3s_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    delta := max - min\n    results := make([]float64, len(numbers))\n  \
    \  for i := range results {\n        results[i] = min + float64(i)*delta/float64(len(numbers))\n\
    \    }\n    return results\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp1iot61ue_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=25.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp1iot61ue_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=49.9) %!s(float64=74.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp1iot61ue_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=1.8)\
    \ %!s(float64=2.6) %!s(float64=3.4) %!s(float64=4.2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp1iot61ue_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=1.8)\
    \ %!s(float64=2.6) %!s(float64=3.4) %!s(float64=4.2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp1iot61ue_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=11) %!s(float64=11.8)\
    \ %!s(float64=12.6) %!s(float64=13.4) %!s(float64=14.2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // The first number is the \"scale\"\n    smallestNumber :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallestNumber {\n            smallestNumber = number\n \
    \       } else if number > largest {\n            largest = number\n        }\n\
    \    }\n    \n    // We start from (smallestNumber - largest) / scale\n    scale\
    \ := (smallest - largest) / float64(len(numbers))\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            number += largest\n \
    \       } else if (number - smallest) < scale {\n            number *= scale\n\
    \        } else {\n            number /= scale\n        }\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezpzt5uf_test.go:25:15: undefined: smallest

    /tmp/tmpezpzt5uf_test.go:27:21: undefined: smallest

    /tmp/tmpezpzt5uf_test.go:29:29: undefined: smallest

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074822
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers[1:] {\n        if n < min {\n            min = n\n        }\n      \
    \  if n > max {\n            max = n\n        }\n    }\n    numbers = numbers[:]\n\
    \    for _, n := range numbers {\n        n /= max - min\n        numbers[len(numbers)-1]\
    \ += (n-min)/(max-min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpkjmxk5un_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.83909506933388)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpkjmxk5un_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=47.96732396783068)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpkjmxk5un_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=4.6640625)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpkjmxk5un_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=3.66796875)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpkjmxk5un_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=3.82421875)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074823
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        fmt.Printf(\"Error: need at\
    \ least 2 numbers to rescale\")\n        return nil\n    }\n    smallest, largest\
    \ := numbers[0], numbers[0]\n    for _, n := range numbers[1:] {\n        if n\
    \ < smallest {\n            smallest = n\n        }\n        if n > largest {\n\
    \            largest = n\n        }\n    }\n    min := smallest / largest\n  \
    \  max := largest / largest\n    numbers2 := make([]float64, len(numbers))\n \
    \   for i, n := range numbers {\n        numbers2[i] = n * min + (max - min) *\
    \ n\n    }\n    return numbers2\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp020t44i2_test.go:52: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp020t44i2_test.go:52: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp020t44i2_test.go:52: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3.0000000000000004) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp020t44i2_test.go:52: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[%!s(float64=2) %!s(float64=1) %!s(float64=5) %!s(float64=3.0000000000000004)\
    \ %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n  \
    \      tmp020t44i2_test.go:52: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074823
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if numbers == nil {\n        return nil\n    }\n\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, n := range numbers {\n\
    \        if n < smallest {\n            smallest = n\n        }\n        if n\
    \ > largest {\n            largest = n\n        }\n    }\n\n    result := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        result[i] =\
    \ smallest + (largest - smallest) * float64(i) / float64(len(numbers))\n    }\n\
    \n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpztrjebu9_test.go:53: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=25.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpztrjebu9_test.go:53: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=49.9) %!s(float64=74.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpztrjebu9_test.go:53: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=1.8)\
    \ %!s(float64=2.6) %!s(float64=3.4) %!s(float64=4.2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpztrjebu9_test.go:53: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=1.8)\
    \ %!s(float64=2.6) %!s(float64=3.4) %!s(float64=4.2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpztrjebu9_test.go:53: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=11) %!s(float64=11.8)\
    \ %!s(float64=12.6) %!s(float64=13.4) %!s(float64=14.2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074823
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    return make([]float64, 0, len(numbers))\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpnm0ow91l_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[]'\n    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpnm0ow91l_test.go:48:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpnm0ow91l_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpnm0ow91l_test.go:48: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[]'\n    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpnm0ow91l_test.go:48:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074823
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n\n    var result\
    \ []float64\n\n    for _, number := range numbers {\n        result = append(result,\
    \ number/(max-min))\n    }\n\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmphgbuxl2l_test.go:50: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmphgbuxl2l_test.go:50: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmphgbuxl2l_test.go:50: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmphgbuxl2l_test.go:50:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmphgbuxl2l_test.go:50: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074823
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n\n    if smallest == 0 {\n        smallest = 0.001\n    }\n\
    \    if largest == 1 {\n        largest = 0.01\n    }\n\n    return []float64{smallest\
    \ / largest}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmps_funzao_test.go:56: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmps_funzao_test.go:56: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2 (0.00s)\n\
    \        tmps_funzao_test.go:56: expected '[%!s(float64=0) %!s(float64=0.25) %!s(float64=0.5)\
    \ %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)]'\n    --- FAIL:\
    \ TestRescale_To_Unit/test_num__3 (0.00s)\n        tmps_funzao_test.go:56: expected\
    \ '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]',\
    \ got '[%!s(float64=0.2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n\
    \        tmps_funzao_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.7333333333333333)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074823
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var largest, smallest float64\n    for _, value := range numbers\
    \ {\n        if value > largest {\n            largest = value\n        } else\
    \ if value < smallest {\n            smallest = value\n        }\n    }\n    scaled,\
    \ err := rescale(numbers, smallest, largest)\n    if err != nil {\n        panic(err)\n\
    \    }\n    return scaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxa0vnm4e_test.go:21:20: undefined: rescale

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074823
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result []float64\n    var minVal float64\n    var maxVal\
    \ float64\n    var prevMin float64\n    var prevMax float64\n\n    if len(numbers)\
    \ <= 1 {\n        return numbers\n    }\n\n    minVal, maxVal = numbers[0], numbers[0]\n\
    \    for _, num := range numbers[1:] {\n        minVal = math.Min(minVal, num)\n\
    \        maxVal = math.Max(maxVal, num)\n    }\n    // If all numbers are equal,\
    \ result is 0\n    if minVal == maxVal {\n        return nil\n    }\n    // If\
    \ there are one or two numbers and they are equal, result is 0\n    if prevMin\
    \ == minVal && prevMax == maxVal {\n        return nil\n    }\n    // We need\
    \ to rescale the range of numbers to 0-1\n    // So we divide the range in 2:1\
    \ steps,\n    // and multiply the result by 2\n    // Since we divide by 2, we\
    \ divide by 2\n    prevMin = math.Ceil(minVal)\n    prevMax = math.Ceil(maxVal)\n\
    \    if prevMin == prevMax {\n        prevMin = prevMax + 1\n    }\n    stepSize\
    \ := (prevMax - prevMin) / 2\n    result = make([]float64, len(numbers))\n   \
    \ for i := range result {\n        result[i] = float64(prevMin+stepSize*float64(i))\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpokgx5il3_test.go:25:18: undefined: math

    /tmp/tmpokgx5il3_test.go:26:18: undefined: math

    /tmp/tmpokgx5il3_test.go:40:15: undefined: math

    /tmp/tmpokgx5il3_test.go:41:15: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074822
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    rescaled := []float64{}\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if smallest > number\
    \ {\n            smallest = number\n        }\n        if largest < number {\n\
    \            largest = number\n        }\n    }\n    rescaled = append(rescaled,\
    \ 0)\n    rescaled = append(rescaled, largest-smallest)\n    for _, number :=\
    \ range numbers {\n        rescaled = append(rescaled, ((number-smallest)/(largest-smallest))*len(rescaled))\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpol8xw3ka_test.go:27:37: invalid operation: ((number - smallest) / (largest
    - smallest)) * len(rescaled) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074823
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var newNumbers []float64\n    for _, number := range numbers\
    \ {\n        newNumbers = append(newNumbers, ((number-min(numbers))/(max(numbers)-min(numbers))))\n\
    \    }\n    return newNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvrji9j_d_test.go:15:50: undefined: min

    /tmp/tmpvrji9j_d_test.go:15:65: undefined: max

    /tmp/tmpvrji9j_d_test.go:15:78: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074823
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        fmt.Println(\"Warning: cannot\
    \ perform rescaling because the list is not long enough\")\n        return numbers\n\
    \    }\n    largestIndex := -1\n    smallest := numbers[0]\n    for i := 0; i\
    \ < len(numbers); i++ {\n        if numbers[i] > smallest {\n            largestIndex\
    \ = i\n        }\n        if smallest > numbers[i] {\n            smallest = numbers[i]\n\
    \        }\n    }\n    fmt.Println(\"Largest index \" + strconv.Itoa(largestIndex))\n\
    \    fmt.Println(\"Smallest number \" + strconv.FormatFloat(smallest, 'f', 1))\n\
    \    largestDelta := smallest / float64(len(numbers) - 1)\n    smallestDelta :=\
    \ largest / float64(len(numbers) - 1)\n    for i := 0; i < len(numbers); i++ {\n\
    \        if numbers[i] > largest {\n            numbers[i] = largest\n       \
    \ } else {\n            numbers[i] = smallest + numbers[i]*largestDelta\n    \
    \    }\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4h2rtbch_test.go:27:36: undefined: strconv

    /tmp/tmp4h2rtbch_test.go:28:38: undefined: strconv

    /tmp/tmp4h2rtbch_test.go:30:22: undefined: largest

    /tmp/tmp4h2rtbch_test.go:32:25: undefined: largest

    /tmp/tmp4h2rtbch_test.go:33:26: undefined: largest

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074823
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    i := 1\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n        i++\n    }\n\n    smallest += 0.1\n    largest += 0.1\n\n    scales\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     scales[i] = ((number - smallest) / (largest - smallest)) * (largest-smallest)\
    \ + smallest\n    }\n\n    return scales\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp4_w5l00j_test.go:58: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp4_w5l00j_test.go:58: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp4_w5l00j_test.go:58: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp4_w5l00j_test.go:58: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp4_w5l00j_test.go:58: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074823
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := math.Min(numbers[0], numbers[1])\n    max := math.Max(numbers[0],\
    \ numbers[1])\n    delta := max - min\n    new_numbers := make([]float64, 0, len(numbers))\n\
    \    for _, number := range numbers {\n        new_numbers = append(new_numbers,\
    \ ((number - min) / delta) + 0.5)\n    }\n    return new_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppotung79_test.go:13:12: undefined: math

    /tmp/tmppotung79_test.go:14:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074823
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) <= 1 {\n        return numbers\n    }\n\n \
    \   minVal := numbers[0]\n    maxVal := numbers[0]\n\n    for _, number := range\
    \ numbers[1:] {\n        if number < minVal {\n            minVal = number\n \
    \       }\n\n        if number > maxVal {\n            maxVal = number\n     \
    \   }\n    }\n\n    return []float64{\n        0.5 * (minVal + maxVal),\n    \
    \    0.5 * (maxVal - minVal),\n    }\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpy0nc1edd_test.go:53: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=25.95) %!s(float64=23.95)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpy0nc1edd_test.go:53: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=74.95) %!s(float64=25.05)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpy0nc1edd_test.go:53: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=3) %!s(float64=2)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpy0nc1edd_test.go:53:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpy0nc1edd_test.go:53: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=13) %!s(float64=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074824
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  min := numbers[0]\n    max := numbers[len(numbers)-1]\n    var scale float64\n\
    \n    for i := 0; i < len(numbers); i++ {\n        current := numbers[i]\n   \
    \     if current-min > 0 {\n            scale = float64(current-min) / (max-min)\n\
    \        } else {\n            scale = float64(max-current) / (max-min)\n    \
    \    }\n        numbers[i] = min + scale * (max-min)\n    }\n\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpflxmy6lm_test.go:51: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=49.9) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpflxmy6lm_test.go:51: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=49.9) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpflxmy6lm_test.go:51: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=5) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpflxmy6lm_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=4) %!s(float64=5)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpflxmy6lm_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=14) %!s(float64=15)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074824
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  min, max := numbers[0], numbers[len(numbers)-1]\n    n := len(numbers)\n  \
    \  f := make([]float64, n)\n    for i := range numbers {\n        f[i] = numbers[i]\
    \ - min\n    }\n\n    for i := n - 1; i > 0; i-- {\n        if f[i] < 0 {\n  \
    \          f[i] = 0\n            continue\n        }\n        f[i] /= max\n  \
    \  }\n    return f\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmplmzrjt87_test.go:51: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0) %!s(float64=0.9599198396793587)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmplmzrjt87_test.go:51: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmplmzrjt87_test.go:51: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmplmzrjt87_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=0)\
    \ %!s(float64=0.75) %!s(float64=0.25) %!s(float64=0.5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmplmzrjt87_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=0)\
    \ %!s(float64=0.21428571428571427) %!s(float64=0.07142857142857142) %!s(float64=0.14285714285714285)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074823
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(fmt.Sprintf(\"len(numbers)\
    \ must be >= 2, got %v\", len(numbers)))\n    }\n\n    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n \
    \       if number < smallestNumber {\n            smallestNumber = number\n  \
    \      } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n\n    return []float64{\n        float(smallestNumber) / float(largestNumber),\n\
    \        float(largestNumber) / float(smallestNumber),\n    }\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi2w_xss_test.go:28:9: undefined: float

    /tmp/tmpzi2w_xss_test.go:29:9: undefined: float

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074823
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if min > number {\n            min = number\n  \
    \      } else if max < number {\n            max = number\n        }\n    }\n\
    \    r := make([]float64, len(numbers))\n    for i := range r {\n        if min\
    \ == 0.0 {\n            r[i] = 0.0\n        } else {\n            r[i] = numbers[i]\
    \ - min\n        }\n    }\n    for i := range r {\n        if r[i] < 0.0 {\n \
    \           r[i] = -r[i]\n        }\n    }\n    return r\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpz6tv_qbu_test.go:55: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0) %!s(float64=47.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpz6tv_qbu_test.go:55: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=50.1) %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpz6tv_qbu_test.go:55: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=1)\
    \ %!s(float64=2) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpz6tv_qbu_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=0)\
    \ %!s(float64=4) %!s(float64=2) %!s(float64=3)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpz6tv_qbu_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=0)\
    \ %!s(float64=4) %!s(float64=2) %!s(float64=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074824
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var new_numbers = make([]float64, len(numbers))\n    for i,\
    \ number := range numbers {\n        new_numbers[i] = (number - math.Min(number,\
    \ math.Max(number, 0))) / (math.Max(number, 0) - math.Min(number, 0))\n    }\n\
    \    return new_numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnlsunl4_test.go:15:36: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074823
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result []float64\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, n := range numbers[1:] {\n        min = min(min, n)\n        max =\
    \ max(max, n)\n    }\n    for _, n := range numbers {\n        if min == 0 {\n\
    \            fmt.Println(\"min:\", n, min)\n        }\n        if max == 1 {\n\
    \            fmt.Println(\"max:\", n, max)\n        }\n        if min > max {\n\
    \            // min > max means that all numbers are equal\n            // In\
    \ this case, we can scale all numbers in range [0, 1]\n            result[len(result)-1]\
    \ = n\n        } else {\n            result[len(result)-1] = (n - min) / (max\
    \ - min)\n        }\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyup3dhd9_test.go:16:12: n declared but not used

    /tmp/tmpyup3dhd9_test.go:17:15: invalid operation: cannot call non-function min
    (variable of type float64)

    /tmp/tmpyup3dhd9_test.go:18:15: invalid operation: cannot call non-function max
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074823
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) == 0 {\n        return numbers\n    }\n   \
    \ var min_v float64 = math.Inf(0)\n    var max_v float64 = -math.Inf(0)\n    for\
    \ _, number := range numbers {\n        if number < min_v {\n            min_v\
    \ = number\n        }\n        if number > max_v {\n            max_v = number\n\
    \        }\n    }\n    var rescaled_numbers = make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        rescaled_numbers[i] = numbers[i]\
    \ / float64(max_v - min_v)\n    }\n    return rescaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpntecsj58_test.go:16:25: undefined: math

    /tmp/tmpntecsj58_test.go:17:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074823
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    n := len(numbers)\n    x := numbers[0]\n    y := 1\n    for\
    \ i := 1; i < n; i++ {\n        x /= numbers[i]\n        y *= numbers[i]\n   \
    \ }\n    return []float64{y, x}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyfcul31__test.go:18:9: invalid operation: y *= numbers[i] (mismatched
    types int and float64)

    /tmp/tmpyfcul31__test.go:20:22: cannot use y (variable of type int) as type float64
    in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074824
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  // If all the numbers are non-negative, just rescale one number so that it\
    \ becomes 0 and the other becomes 1\n    if allAreNonnegative(numbers) {\n   \
    \     return make([]float64, 1)\n    }\n\n    x := numbers[0]\n    y := numbers[1]\n\
    \    diff := x - y\n    diff /= y\n    diff += 1.0\n    diff /= 2.0\n    return\
    \ make([]float64, len(numbers)+1)\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpni8l80ef_test.go:18:8: undefined: allAreNonnegative

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074824
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = math.Min(numbers[0], numbers[1])\n    var max = math.Max(numbers[0],\
    \ numbers[1])\n\n    var newMin float64\n    var newMax float64\n\n    if min\
    \ > 0 {\n        newMin = math.Inf(-1e15, 1e15)\n    } else {\n        newMin\
    \ = 0\n    }\n    if max < 0 {\n        newMax = math.Inf(-1e15, 1e15)\n    }\
    \ else {\n        newMax = 1\n    }\n\n    var rescaledMin float64\n    var rescaledMax\
    \ float64\n\n    if newMin < 0 {\n        rescaledMin = -(newMin * -1)\n    }\
    \ else {\n        rescaledMin = newMin\n    }\n\n    if newMax > 1 {\n       \
    \ rescaledMax = newMax\n    } else {\n        rescaledMax = 1\n    }\n\n    numbers\
    \ := make([]float64, len(numbers))\n\n    var i int\n    for i = 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = float64((numbers[i] - rescaledMin) / (rescaledMax\
    \ - rescaledMin))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk38qqabn_test.go:13:15: undefined: math

    /tmp/tmpk38qqabn_test.go:14:15: undefined: math

    /tmp/tmpk38qqabn_test.go:20:18: undefined: math

    /tmp/tmpk38qqabn_test.go:25:18: undefined: math

    /tmp/tmpk38qqabn_test.go:45:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074824
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minV, maxV float64\n    for _, num := range numbers {\n\
    \        minV = num\n        maxV = num\n    }\n    for i := range numbers {\n\
    \        numbers[i] = ((numbers[i] - minV) / (maxV - minV))\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp5aqbegz__test.go:41: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-Inf) %!s(float64=NaN)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp5aqbegz__test.go:41: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=+Inf) %!s(float64=NaN)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp5aqbegz__test.go:41: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-Inf)\
    \ %!s(float64=-Inf) %!s(float64=-Inf) %!s(float64=-Inf) %!s(float64=NaN)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp5aqbegz__test.go:41:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=-Inf) %!s(float64=-Inf) %!s(float64=+Inf)\
    \ %!s(float64=-Inf) %!s(float64=NaN)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp5aqbegz__test.go:41: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-Inf)\
    \ %!s(float64=-Inf) %!s(float64=+Inf) %!s(float64=-Inf) %!s(float64=NaN)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074824
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    scaler := max\
    \ - min\n    return make([]float64, len(numbers)-1)\n    for i := range numbers\
    \ {\n        numbers[i] += min * scaler\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpp88xgrdq_test.go:51: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n\
    \        tmpp88xgrdq_test.go:51: expected '[%!s(float64=1) %!s(float64=0)]', got\
    \ '[%!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2 (0.00s)\n\
    \        tmpp88xgrdq_test.go:51: expected '[%!s(float64=0) %!s(float64=0.25) %!s(float64=0.5)\
    \ %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=0) %!s(float64=0)\
    \ %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n  \
    \      tmpp88xgrdq_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=0) %!s(float64=0)\
    \ %!s(float64=0)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n  \
    \      tmpp88xgrdq_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=0) %!s(float64=0)\
    \ %!s(float64=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074824
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    //\
    \ Get the min and max values\n    min := numbers[0]\n    max := numbers[0]\n \
    \   for _, n := range numbers[1:] {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    //\
    \ Calculate scale\n    scale := (max - min) / float64(len(numbers))\n    // Apply\
    \ linear transform\n    res := make([]float64, len(numbers))\n    for idx, n :=\
    \ range numbers {\n        res[idx] = n * scale\n    }\n    return res\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp_yvp0f2n_test.go:54: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=47.9) %!s(float64=1195.105)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp_yvp0f2n_test.go:54: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=2505) %!s(float64=1249.995)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp_yvp0f2n_test.go:54: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.8)\
    \ %!s(float64=1.6) %!s(float64=2.4000000000000004) %!s(float64=3.2) %!s(float64=4)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp_yvp0f2n_test.go:54:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=1.6) %!s(float64=0.8) %!s(float64=4)\
    \ %!s(float64=2.4000000000000004) %!s(float64=3.2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp_yvp0f2n_test.go:54: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=9.600000000000001)\
    \ %!s(float64=8.8) %!s(float64=12) %!s(float64=10.4) %!s(float64=11.200000000000001)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074824
