language: go_test.go
name: HumanEval_19_sort_numbers
results:
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var result strings.Builder\n\n    for _, number := range numbers\
    \ {\n        if number == \"nine\" {\n            result.WriteString(number+\"\
    \ \")\n        } else {\n            switch number {\n            case \"zero\"\
    :\n                result.WriteString(number+\" \")\n            case \"one\"\
    :\n                result.WriteString(\"one \")\n            case \"two\":\n \
    \               result.WriteString(\"two \")\n            case \"three\":\n  \
    \              result.WriteString(\"three \")\n            case \"four\":\n  \
    \              result.WriteString(\"four \")\n            case \"five\":\n   \
    \             result.WriteString(\"five \")\n            case \"six\":\n     \
    \           result.WriteString(\"six \")\n            case \"seven\":\n      \
    \          result.WriteString(\"seven \")\n            case \"eight\":\n     \
    \           result.WriteString(\"eight \")\n            case \"nine\":\n     \
    \           result.WriteString(\"nine \")\n            }\n        }\n    }\n \
    \   return result.String()\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmw_q_5b_test.go:14:13: no new variables on left side of :=

    /tmp/tmpmmw_q_5b_test.go:14:16: undefined: strings

    /tmp/tmpmmw_q_5b_test.go:15:16: undefined: strings

    /tmp/tmpmmw_q_5b_test.go:18:22: invalid operation: number == "nine" (mismatched
    types rune and untyped string)

    /tmp/tmpmmw_q_5b_test.go:19:32: invalid operation: number + " " (mismatched types
    rune and untyped string)

    /tmp/tmpmmw_q_5b_test.go:22:18: cannot convert "zero" (untyped string constant)
    to rune

    /tmp/tmpmmw_q_5b_test.go:23:36: invalid operation: number + " " (mismatched types
    rune and untyped string)

    /tmp/tmpmmw_q_5b_test.go:24:18: cannot convert "one" (untyped string constant)
    to rune

    /tmp/tmpmmw_q_5b_test.go:26:18: cannot convert "two" (untyped string constant)
    to rune

    /tmp/tmpmmw_q_5b_test.go:28:18: cannot convert "three" (untyped string constant)
    to rune

    /tmp/tmpmmw_q_5b_test.go:28:18: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    for i := 1; i < len(numbers);\
    \ i++ {\n        for j := i; j < len(numbers); j++ {\n            if numbers[j]\
    \ > numbers[j-1] {\n                numbers[j], numbers[j-1] = numbers[j-1], numbers[j]\n\
    \            }\n        }\n    }\n    return strings.Join(numbers, \" \")\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxw9_3epa_test.go:14:15: undefined: strings

    /tmp/tmpxw9_3epa_test.go:15:13: no new variables on left side of :=

    /tmp/tmpxw9_3epa_test.go:15:16: undefined: strings

    /tmp/tmpxw9_3epa_test.go:19:17: cannot assign to numbers[j] (value of type byte)

    /tmp/tmpxw9_3epa_test.go:19:29: cannot assign to numbers[j - 1] (value of type
    byte)

    /tmp/tmpxw9_3epa_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var out []int\n    for _, n :=\
    \ range strings.Split(numbers, \" \") {\n        out, _ = sort_numbers_imp([]int(n))\n\
    \    }\n    return fmt.Sprintf(\"%v\", out)\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpktk39o3j_test.go:15:23: undefined: strings

    /tmp/tmpktk39o3j_test.go:16:18: undefined: sort_numbers_imp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers_array := strings.Split(numbers,\
    \ \" \")\n    numbers_array_copy := make([]string, len(numbers_array))\n\n   \
    \ for i := 0; i < len(numbers_array); i++ {\n        numbers_array_copy[i] = numbers_array[i]\n\
    \    }\n\n    sort.Strings(numbers_array_copy)\n\n    return strings.Join(numbers_array_copy,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9fxm8n_r_test.go:14:22: undefined: strings

    /tmp/tmp9fxm8n_r_test.go:21:5: undefined: sort

    /tmp/tmp9fxm8n_r_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // First sort the array in descending\
    \ order\n    numbers := strings.Split(numbers, \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \n    // Now convert the sorted array back into a space-delimited string\n   \
    \ numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gl5lcpe_test.go:15:13: no new variables on left side of :=

    /tmp/tmp9gl5lcpe_test.go:15:16: undefined: strings

    /tmp/tmp9gl5lcpe_test.go:16:5: undefined: sort

    /tmp/tmp9gl5lcpe_test.go:19:13: no new variables on left side of :=

    /tmp/tmp9gl5lcpe_test.go:19:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers = make([]string,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n\
    \    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,go |>\nThe solution by James Potter\
    \ didn't work for me. As I didn't want to sort strings or numbers, I needed a\
    \ more generic solution where you can sort anything by any number of fields.\n\
    I created an interface that has the \"Order\" method and then created this function:\n\
    <code>\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpncg9c_xs_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numberMap map[string]bool\n\
    \    numberMap = make(map[string]bool)\n    for _, number := range strings.Split(numbers,\
    \ \" \") {\n        numberMap[number] = true\n    }\n    var result strings.Builder\n\
    \    for number := range numberMap {\n        result.WriteString(fmt.Sprintf(\"\
    \ %v\", number))\n    }\n    return result.String()\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg9djgyf4_test.go:16:28: undefined: strings

    /tmp/tmpg9djgyf4_test.go:19:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Create an array of valid choices,\
    \ by splitting on spaces.\n    choices := strings.Split(numbers, \" \")\n    //\
    \ Initialize an array of ints containing the numbers in the input\n    nums :=\
    \ make([]int, len(choices))\n    for i, c := range choices {\n        nums[i]\
    \ = int(c)\n    }\n    // Sort the array using bubble sort.\n    for i := 0; i\
    \ < len(nums)-1; i++ {\n        for j := 1; j < len(nums); j++ {\n           \
    \ if nums[j-1] > nums[j] {\n                nums[j-1], nums[j] = nums[j], nums[j-1]\n\
    \            }\n        }\n    }\n    // Convert back to a string and return it\n\
    \    return fmt.Sprintf(\"%s\", nums)\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7j3275c_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Split the input string on whitespace\n\
    \    numbers := strings.Split(numbers, \" \")\n    // Initialize temporary array\
    \ of strings to return\n    ret := []string{}\n    // Iterate through the input\
    \ array, adding strings to the return array\n    // until the next string is empty,\
    \ or a non-numeric character is encountered\n    for _, num := range numbers {\n\
    \        if strings.TrimSpace(num) == \"\" {\n            break\n        } else\
    \ if _, err := fmt.Sscanf(num, \"%d\", &num); err != nil {\n            break\n\
    \        }\n        ret = append(ret, num)\n    }\n    // Return the space-separated\
    \ string with the input numbers sorted\n    return strings.Join(ret, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvyy3a6vt_test.go:15:13: no new variables on left side of :=

    /tmp/tmpvyy3a6vt_test.go:15:16: undefined: strings

    /tmp/tmpvyy3a6vt_test.go:21:12: undefined: strings

    /tmp/tmpvyy3a6vt_test.go:23:40: cannot use num (variable of type rune) as type
    string in argument to fmt.Sscanf

    /tmp/tmpvyy3a6vt_test.go:26:27: cannot use num (variable of type rune) as type
    string in argument to append

    /tmp/tmpvyy3a6vt_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var result strings.Builder\n    biggest, smallest := 0, 0\n    for\
    \ _, number := range numbers {\n        if number == \"nine\" {\n            smallest\
    \ = 9\n        } else {\n            biggest = number\n        }\n        if biggest-smallest\
    \ > 0 {\n            result.WriteString(number)\n            result.WriteString(\"\
    \ \")\n        }\n    }\n    return result.String()\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0wseufls_test.go:14:13: no new variables on left side of :=

    /tmp/tmp0wseufls_test.go:14:16: undefined: strings

    /tmp/tmp0wseufls_test.go:15:16: undefined: strings

    /tmp/tmp0wseufls_test.go:18:22: invalid operation: number == "nine" (mismatched
    types rune and untyped string)

    /tmp/tmp0wseufls_test.go:21:23: cannot use number (variable of type rune) as type
    int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var newNumbers strings.Builder\n    for _, number := range strings.Split(numbers,\
    \ \" \") {\n        if number == \"zero\" {\n            newNumbers.WriteString(\"\
    zero\")\n        } else if number == \"one\" {\n            newNumbers.WriteString(\"\
    one\")\n        } else if number == \"two\" {\n            newNumbers.WriteString(\"\
    two\")\n        } else if number == \"three\" {\n            newNumbers.WriteString(\"\
    three\")\n        } else if number == \"four\" {\n            newNumbers.WriteString(\"\
    four\")\n        } else if number == \"five\" {\n            newNumbers.WriteString(\"\
    five\")\n        } else if number == \"six\" {\n            newNumbers.WriteString(\"\
    six\")\n        } else if number == \"seven\" {\n            newNumbers.WriteString(\"\
    seven\")\n        } else if number == \"eight\" {\n            newNumbers.WriteString(\"\
    eight\")\n        } else if number == \"nine\" {\n            newNumbers.WriteString(\"\
    nine\")\n        } else {\n            newNumbers.WriteString(number)\n      \
    \  }\n    }\n    return newNumbers.String()\n}\n</code>\nThis solution could easily\
    \ be modified to accept arbitrary input by modifying the function to use strings.Replace()\
    \ rather than string concatenation.\n<|/ a tags=go,string dscore=3 |>\n<| a |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    \"sort\"\n\
    )\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt757m9dw_test.go:43:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := append(numbers,\
    \ \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\")\n    numbers.Sort()\n    return strings.Join(numbers, \"\
    \ \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4__8pixe_test.go:14:15: undefined: strings

    /tmp/tmp4__8pixe_test.go:15:13: no new variables on left side of :=

    /tmp/tmp4__8pixe_test.go:15:16: undefined: strings

    /tmp/tmp4__8pixe_test.go:16:13: no new variables on left side of :=

    /tmp/tmp4__8pixe_test.go:16:23: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmp4__8pixe_test.go:17:13: numbers.Sort undefined (type string has no field
    or method Sort)

    /tmp/tmp4__8pixe_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Println(\"numbers = \", numbers)\n\
    \    var input []string\n    for _, number := range strings.Split(numbers, \"\
    \ \") {\n        number = strings.TrimSpace(number)\n        if number == \"nine\"\
    \ {\n            number = \"\"\n        }\n        input = append(input, number)\n\
    \    }\n    return fmt.Sprintf(\"%s %v %v %v %v %v %v %v %v %v %v %v %v %v %v\
    \ %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v\
    \ %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v\
    \ %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v\
    \ %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v\
    \ %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v\
    \ %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v\
    \ %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v\
    \ %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v %v\
    \ %v %v \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3uppfu5__test.go:23:24: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    var numbers []string\n    for _, number := range strings.Split(numbers, \"\
    \ \") {\n        if number == \"zero\" {\n            numbers = append(numbers,\
    \ \"zero\")\n        } else if number == \"one\" {\n            numbers = append(numbers,\
    \ \"one\")\n        } else if number == \"two\" {\n            numbers = append(numbers,\
    \ \"two\")\n        } else if number == \"three\" {\n            numbers = append(numbers,\
    \ \"three\")\n        } else if number == \"four\" {\n            numbers = append(numbers,\
    \ \"four\")\n        } else if number == \"five\" {\n            numbers = append(numbers,\
    \ \"five\")\n        } else if number == \"six\" {\n            numbers = append(numbers,\
    \ \"six\")\n        } else if number == \"seven\" {\n            numbers = append(numbers,\
    \ \"seven\")\n        } else if number == \"eight\" {\n            numbers = append(numbers,\
    \ \"eight\")\n        } else if number == \"nine\" {\n            numbers = append(numbers,\
    \ \"nine\")\n        }\n    }\n    numbers := strings.Join(numbers, \" \")\n \
    \   var numbers_list []string\n    numbers_list = append(numbers_list, numbers)\n\
    \    numbers := strings.Join(numbers_list, \" \")\n    var number_list []string\n\
    \    number_list = append(number_list, numbers)\n    return numbers\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp76os3sg2_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmp76os3sg2_test.go:14:16: undefined:\
    \ strings\n/tmp/tmp76os3sg2_test.go:15:9: numbers redeclared in this block\n\t\
    /tmp/tmp76os3sg2_test.go:13:19: other declaration of numbers\n/tmp/tmp76os3sg2_test.go:16:28:\
    \ undefined: strings\n/tmp/tmp76os3sg2_test.go:18:30: first argument to append\
    \ must be a slice; have numbers (variable of type string)\n/tmp/tmp76os3sg2_test.go:20:30:\
    \ first argument to append must be a slice; have numbers (variable of type string)\n\
    /tmp/tmp76os3sg2_test.go:22:30: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmp76os3sg2_test.go:24:30: first argument\
    \ to append must be a slice; have numbers (variable of type string)\n/tmp/tmp76os3sg2_test.go:26:30:\
    \ first argument to append must be a slice; have numbers (variable of type string)\n\
    /tmp/tmp76os3sg2_test.go:28:30: first argument to append must be a slice; have\
    \ numbers (variable of type string)\n/tmp/tmp76os3sg2_test.go:28:30: too many\
    \ errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Replace(numbers, \",\", \"0\", -1)\n    numbers\
    \ = strings.Trim(numbers, \" \")\n\n    numbers := strings.Split(numbers, \" \"\
    )\n    for idx, val := range numbers {\n        if strings.HasPrefix(val, \"-\"\
    ) {\n            numbers[idx] = strings.Replace(val, \"-\", \"1\", -1)\n     \
    \   }\n    }\n\n    numbers := strings.Join(numbers, \" \")\n    numbers = strings.Replace(numbers,\
    \ \"0\", \",\", -1)\n    numbers = strings.Replace(numbers, \"1\", \".\", -1)\n\
    \    numbers = strings.Replace(numbers, \"2\", \",\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"3\", \"!\", -1)\n    numbers = strings.Replace(numbers, \"4\", \";\", -1)\n\
    \    numbers = strings.Replace(numbers, \"5\", \":\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"6\", \";\", -1)\n    numbers = strings.Replace(numbers, \"7\", \"%\", -1)\n\
    \    numbers = strings.Replace(numbers, \"8\", \"$\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"9\", \"(\", -1)\n    numbers = strings.Replace(numbers, \"10\", \")\", -1)\n\
    \    numbers = strings.Replace(numbers, \"11\", \"@\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"12\", \"$\", -1)\n    numbers = strings.Replace(numbers, \"13\", \"*\", -1)\n\
    \    numbers = strings.Replace(numbers, \"14\", \"+\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"15\", \"-\", -1)\n    numbers = strings.Replace(numbers, \"16\", \".\", -1)\n\
    \    numbers = strings.Replace(numbers, \"17\", \"(\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"18\", \")\", -1)\n    numbers = strings.Replace(numbers, \"19\", \"*\", -1)\n\
    \    numbers = strings.Replace(numbers, \"20\", \"+\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"21\", \"$\", -1)\n    numbers = strings.Replace(numbers, \"22\", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"23\", \"%\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"24\", \"(\", -1)\n    numbers = strings.Replace(numbers, \"25\", \")\", -1)\n\
    \    numbers = strings.Replace(numbers, \"26\", \"@\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"27\", \"(\", -1)\n    numbers = strings.Replace(numbers, \"28\", \")\", -1)\n\
    \    numbers = strings.Replace(numbers, \"29\", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"30\", \"(\", \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkqsi81tg_test.go:57:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074463
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var result string\n    for _, value := range numbers {\n       \
    \ if value > \"nine\" {\n            result += \"nine \"\n        } else {\n \
    \           result += value + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgs3uv9vj_test.go:14:13: no new variables on left side of :=

    /tmp/tmpgs3uv9vj_test.go:14:16: undefined: strings

    /tmp/tmpgs3uv9vj_test.go:17:20: invalid operation: value > "nine" (mismatched
    types rune and untyped string)

    /tmp/tmpgs3uv9vj_test.go:20:23: invalid operation: value + " " (mismatched types
    rune and untyped string)

    /tmp/tmpgs3uv9vj_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers, err := sort_numbers_test.NumbersSort(numbers)\n    if err\
    \ != nil {\n        fmt.Println(\"sort_numbers_test.NumbersSort error: \",err)\n\
    \    }\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpebxp1lyc_test.go:14:13: no new variables on left side of :=

    /tmp/tmpebxp1lyc_test.go:14:16: undefined: strings

    /tmp/tmpebxp1lyc_test.go:15:21: undefined: sort_numbers_test

    /tmp/tmpebxp1lyc_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numberStrings []string\n \
    \   numberStrings = strings.Split(numbers, \" \")\n    for _, n := range numberStrings\
    \ {\n        if n != \"zero\" && n != \"one\" && n != \"two\" && n != \"three\"\
    \ && n != \"four\" && n != \"five\" && n != \"six\" && n != \"seven\" && n !=\
    \ \"eight\" && n != \"nine\" {\n            continue\n        }\n    }\n    numberStrings\
    \ = sort_numbers_helper(numberStrings)\n    return strings.Join(numberStrings,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj36bfox__test.go:15:21: undefined: strings

    /tmp/tmpj36bfox__test.go:21:21: undefined: sort_numbers_helper

    /tmp/tmpj36bfox__test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var words []string\n    for _,\
    \ word := range strings.Split(numbers, \" \") {\n        if word == \"zero\" ||\
    \ word == \"one\" || word == \"two\" ||\n            word == \"three\" || word\
    \ == \"four\" || word == \"five\" ||\n            word == \"six\" || word == \"\
    seven\" || word == \"eight\" ||\n            word == \"nine\" {\n            words\
    \ = append(words, word)\n        }\n    }\n    sort.Strings(words)\n    return\
    \ strings.Join(words, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiabaucvb_test.go:15:26: undefined: strings

    /tmp/tmpiabaucvb_test.go:23:5: undefined: sort

    /tmp/tmpiabaucvb_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var digits []string\n    numbers\
    \ = strings.Trim(numbers, \" \")\n    for _, digit := range strings.Split(numbers,\
    \ \" \") {\n        digits = append(digits, digit)\n    }\n\n    var sorted []string\n\
    \    for _, d := range digits {\n        for _, s := range digits {\n        \
    \    if d == s {\n                sorted = append(sorted, s)\n            }\n\
    \        }\n    }\n    return strings.Join(sorted, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoz5vllkd_test.go:15:15: undefined: strings

    /tmp/tmpoz5vllkd_test.go:16:27: undefined: strings

    /tmp/tmpoz5vllkd_test.go:28:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append([]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, numbers...)\n\
    \    for i := 0; i < len(numbers)/2; i++ {\n        j := i\n        for j <= len(numbers)-1\
    \ {\n            if numbers[j-1] > numbers[j] {\n                j++\n       \
    \     } else {\n                numbers[j-1], numbers[j] = numbers[j], numbers[j-1]\n\
    \            }\n        }\n    }\n    return strings.Join(numbers, \" \")\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ven598j_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmp3ven598j_test.go:14:16: undefined:\
    \ strings\n/tmp/tmp3ven598j_test.go:15:13: no new variables on left side of :=\n\
    /tmp/tmp3ven598j_test.go:15:16: cannot use append([]int{\u2026}, numbers...) (value\
    \ of type []int) as type string in assignment\n/tmp/tmp3ven598j_test.go:15:60:\
    \ cannot use numbers (variable of type string) as type []int in argument to append\n\
    /tmp/tmp3ven598j_test.go:22:17: cannot assign to numbers[j - 1] (value of type\
    \ byte)\n/tmp/tmp3ven598j_test.go:22:31: cannot assign to numbers[j] (value of\
    \ type byte)\n/tmp/tmp3ven598j_test.go:26:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    fmt.Println(numbers)\n\
    \    fmt.Println(\"sort_numbers\")\n    fmt.Printf(\"numbers string %v\\n\", numbers)\n\
    \    var numbers []int\n    numbers = strings.Split(numbers, \" \")\n    fmt.Printf(\"\
    numbers string %v\\n\", numbers)\n    var numbers []int\n    for _, num := range\
    \ numbers {\n        if num == \"nine\" {\n            fmt.Println(\"nine\")\n\
    \        } else {\n            fmt.Printf(\"num %v\\n\", num)\n            if\
    \ num == \"zero\" {\n                numbers = append(numbers, 0)\n          \
    \  } else {\n                if num == \"one\" {\n                    numbers\
    \ = append(numbers, 1)\n                } else if num == \"two\" {\n         \
    \           numbers = append(numbers, 2)\n                } else if num == \"\
    three\" {\n                    numbers = append(numbers, 3)\n                }\
    \ else if num == \"four\" {\n                    numbers = append(numbers, 4)\n\
    \                } else if num == \"five\" {\n                    numbers = append(numbers,\
    \ 5)\n                } else if num == \"six\" {\n                    numbers\
    \ = append(numbers, 6)\n                } else if num == \"seven\" {\n       \
    \             numbers = append(numbers, 7)\n                } else if num == \"\
    eight\" {\n                    numbers = append(numbers, 8)\n                }\
    \ else if num == \"nine\" {\n                    numbers = append(numbers, 9)\n\
    \                } else {\n                    fmt.Printf(\"unknown number %v\\\
    n\", num)\n                }\n            }\n        }\n    }\n    fmt.Printf(\"\
    numbers array %v\\n\", numbers)\n    numbers := sort.IntSlice(numbers)\n    fmt.Printf(\"\
    numbers array sorted: %v\\n\", numbers)\n    var result = \"\"\n    for _, num\
    \ := range numbers {\n        result += string(num)\n    }\n    fmt.Printf(\"\
    result %v\\n\", result)\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6ttm06rg_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmp6ttm06rg_test.go:14:16: undefined:\
    \ strings\n/tmp/tmp6ttm06rg_test.go:15:15: undefined: strings\n/tmp/tmp6ttm06rg_test.go:16:15:\
    \ undefined: strings\n/tmp/tmp6ttm06rg_test.go:17:15: undefined: strings\n/tmp/tmp6ttm06rg_test.go:21:9:\
    \ numbers redeclared in this block\n\t/tmp/tmp6ttm06rg_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmp6ttm06rg_test.go:22:15: undefined: strings\n/tmp/tmp6ttm06rg_test.go:24:9:\
    \ numbers redeclared in this block\n\t/tmp/tmp6ttm06rg_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmp6ttm06rg_test.go:26:19: invalid operation: num == \"nine\"\
    \ (mismatched types rune and untyped string)\n/tmp/tmp6ttm06rg_test.go:30:23:\
    \ invalid operation: num == \"zero\" (mismatched types rune and untyped string)\n\
    /tmp/tmp6ttm06rg_test.go:30:23: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Split string on spaces\n  \
    \  numbers := strings.Split(numbers, \" \")\n    // Convert each string to an\
    \ int\n    ints := make([]int, len(numbers))\n    for i := range ints {\n    \
    \    ints[i] = 0\n    }\n    for _, number := range numbers {\n        ints[strings.Index(number,\
    \ \"0\")]+=1\n    }\n    // Sort the ints\n    ints = make([]int, 0, len(ints))\n\
    \    for i := 0; i < len(ints); i++ {\n        ints = append(ints, ints[i])\n\
    \    }\n    // Convert sorted ints to string\n    s := make([]string, len(ints))\n\
    \    for i := range ints {\n        if ints[i] == 0 {\n            s[i] = \"zero\"\
    \n        } else if ints[i] == 1 {\n            s[i] = \"one\"\n        } else\
    \ if ints[i] == 2 {\n            s[i] = \"two\"\n        } else if ints[i] ==\
    \ 3 {\n            s[i] = \"three\"\n        } else if ints[i] == 4 {\n      \
    \      s[i] = \"four\"\n        } else if ints[i] == 5 {\n            s[i] = \"\
    five\"\n        } else if ints[i] == 6 {\n            s[i] = \"six\"\n       \
    \ } else if ints[i] == 7 {\n            s[i] = \"seven\"\n        } else if ints[i]\
    \ == 8 {\n            s[i] = \"eight\"\n        } else if ints[i] == 9 {\n   \
    \         s[i] = \"nine\"\n        } else {\n            fmt.Printf(\"unexpected\
    \ value in sort_numbers: %d (should be between 0 and 9)\", ints[i])\n        }\n\
    \    }\n    // Join string\n    return strings.Join(s, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplodf86wz_test.go:15:13: no new variables on left side of :=

    /tmp/tmplodf86wz_test.go:15:16: undefined: strings

    /tmp/tmplodf86wz_test.go:22:14: undefined: strings

    /tmp/tmplodf86wz_test.go:57:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074464
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var list []string\n    list =\
    \ strings.Split(numbers, \" \")\n    sort.Strings(list)\n    result := strings.Join(list,\
    \ \" \")\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0a6dalbi_test.go:15:12: undefined: strings

    /tmp/tmp0a6dalbi_test.go:16:5: undefined: sort

    /tmp/tmp0a6dalbi_test.go:17:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    list := strings.Split(numbers,\
    \ \" \")\n    list.Sort()\n    return strings.Join(list, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa94s1ic__test.go:14:13: undefined: strings

    /tmp/tmpa94s1ic__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = numbers[i]\n    }\n    sort.Strings(numbers)\n \
    \   numbers = strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvmt4gbq3_test.go:14:13: no new variables on left side of :=

    /tmp/tmpvmt4gbq3_test.go:14:16: undefined: strings

    /tmp/tmpvmt4gbq3_test.go:15:13: no new variables on left side of :=

    /tmp/tmpvmt4gbq3_test.go:15:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpvmt4gbq3_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpvmt4gbq3_test.go:19:5: undefined: sort

    /tmp/tmpvmt4gbq3_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Write your solution here\n\
    \    numbers := strings.Split(numbers, \" \")\n    var result strings.Builder\n\
    \n    for _, number := range numbers {\n        switch number {\n        case\
    \ \"zero\":\n            fmt.Fprintf(&result, \"%d \", 0)\n        case \"one\"\
    :\n            fmt.Fprintf(&result, \"%d \", 1)\n        case \"two\":\n     \
    \       fmt.Fprintf(&result, \"%d \", 2)\n        case \"three\":\n          \
    \  fmt.Fprintf(&result, \"%d \", 3)\n        case \"four\":\n            fmt.Fprintf(&result,\
    \ \"%d \", 4)\n        case \"five\":\n            fmt.Fprintf(&result, \"%d \"\
    , 5)\n        case \"six\":\n            fmt.Fprintf(&result, \"%d \", 6)\n  \
    \      case \"seven\":\n            fmt.Fprintf(&result, \"%d \", 7)\n       \
    \ case \"eight\":\n            fmt.Fprintf(&result, \"%d \", 8)\n        case\
    \ \"nine\":\n            fmt.Fprintf(&result, \"%d \", 9)\n        }\n    }\n\n\
    \    return result.String()\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nPlease don't\
    \ give \"code only\" answers, explain your answer and why it works will improve\
    \ the quality of your answer\n<|/ c |>\n<| a |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2kswb8h7_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074465
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    sorted_numbers := make([]string,\
    \ 0)\n    sorted_numbers = append(sorted_numbers, numbers)\n    sorted_numbers\
    \ = append(sorted_numbers, strings.Split(numbers, \" \")...)\n\n    sort.Sort(stringSlices(sorted_numbers))\n\
    \n    sorted_numbers = sorted_numbers[1:]\n\n    sorted_numbers := strings.Join(sorted_numbers,\
    \ \" \")\n    return sorted_numbers\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq2ld1k99_test.go:16:45: undefined: strings

    /tmp/tmpq2ld1k99_test.go:18:5: undefined: sort

    /tmp/tmpq2ld1k99_test.go:18:15: undefined: stringSlices

    /tmp/tmpq2ld1k99_test.go:22:20: no new variables on left side of :=

    /tmp/tmpq2ld1k99_test.go:22:23: undefined: strings

    /tmp/tmpq2ld1k99_test.go:23:12: cannot use sorted_numbers (variable of type []string)
    as type string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers, err := parse_to_numbers(numbers)\n\
    \    if err != nil {\n        return \"\"\n    }\n    sort.Ints(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqrr31t9j_test.go:14:21: undefined: parse_to_numbers

    /tmp/tmpqrr31t9j_test.go:18:5: undefined: sort

    /tmp/tmpqrr31t9j_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var output strings.Builder\n \
    \   switch numbers {\n    case \"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\":\n        numbers.ToSlice().Sort()\n\
    \        output, _ := numbers.Split(\" \")\n        switch len(output) {\n   \
    \     case 1:\n            return output.String() + \" zero\"\n        case 2:\n\
    \            return output.String() + \" zero and \" + output.String() + \" one\"\
    \n        default:\n            return output.String()\n        }\n    default:\n\
    \        panic(\"invalid input for sort_numbers\")\n    }\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpji22csjv_test.go:14:16: undefined: strings

    /tmp/tmpji22csjv_test.go:17:17: numbers.ToSlice undefined (type string has no
    field or method ToSlice)

    /tmp/tmpji22csjv_test.go:18:30: numbers.Split undefined (type string has no field
    or method Split)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result []string\n\n    numbers\
    \ := strings.TrimSpace(numbers)\n    numbers = strings.ToLower(numbers)\n    numbers\
    \ = strings.Trim(numbers, \" \")\n\n    for _, number := range strings.Split(numbers,\
    \ \" \") {\n        if number == \"zero\" {\n            result = append(result,\
    \ \"zero\")\n        } else if number == \"one\" {\n            result = append(result,\
    \ \"one\")\n        } else if number == \"two\" {\n            result = append(result,\
    \ \"two\")\n        } else if number == \"three\" {\n            result = append(result,\
    \ \"three\")\n        } else if number == \"four\" {\n            result = append(result,\
    \ \"four\")\n        } else if number == \"five\" {\n            result = append(result,\
    \ \"five\")\n        } else if number == \"six\" {\n            result = append(result,\
    \ \"six\")\n        } else if number == \"seven\" {\n            result = append(result,\
    \ \"seven\")\n        } else if number == \"eight\" {\n            result = append(result,\
    \ \"eight\")\n        } else if number == \"nine\" {\n            result = append(result,\
    \ \"nine\")\n        } else {\n            result = append(result, number)\n \
    \       }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5upipzps_test.go:16:13: no new variables on left side of :=

    /tmp/tmp5upipzps_test.go:16:16: undefined: strings

    /tmp/tmp5upipzps_test.go:17:15: undefined: strings

    /tmp/tmp5upipzps_test.go:18:15: undefined: strings

    /tmp/tmp5upipzps_test.go:20:28: undefined: strings

    /tmp/tmp5upipzps_test.go:45:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers := strings.Replace(numbers, \",\", \"\", -1)\n\
    \    numbers := strings.Replace(numbers, \"-\", \"\", -1)\n    numbers := strings.Replace(numbers,\
    \ \"_\", \"\", -1)\n\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := []string{}\n   \
    \ for _, x := range numbers {\n        if strings.TrimSpace(x) != \"\" {\n   \
    \         numbers = append(numbers, x)\n        }\n    }\n    sort.Strings(numbers)\n\
    \    fmt.Println(numbers)\n\n    result := \"\"\n    for _, x := range numbers\
    \ {\n        result = result + \" \" + x\n    }\n    return strings.Replace(result,\
    \ \" \", \"\", -1)\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2bb65nnw_test.go:14:15: undefined: strings

    /tmp/tmp2bb65nnw_test.go:15:13: no new variables on left side of :=

    /tmp/tmp2bb65nnw_test.go:15:16: undefined: strings

    /tmp/tmp2bb65nnw_test.go:16:13: no new variables on left side of :=

    /tmp/tmp2bb65nnw_test.go:16:16: undefined: strings

    /tmp/tmp2bb65nnw_test.go:17:13: no new variables on left side of :=

    /tmp/tmp2bb65nnw_test.go:17:16: undefined: strings

    /tmp/tmp2bb65nnw_test.go:19:15: undefined: strings

    /tmp/tmp2bb65nnw_test.go:20:15: undefined: strings

    /tmp/tmp2bb65nnw_test.go:21:15: undefined: strings

    /tmp/tmp2bb65nnw_test.go:21:15: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var (\n        sortedNumbers =\
    \ \"\"\n        numbersArray  = strings.Split(numbers, \" \")\n    )\n    sort.Sort(sort.Reverse(sort.IntSlice(numbersArray)))\n\
    \    for _, value := range numbersArray {\n        sortedNumbers += value + \"\
    \ \" // Sort numbers in reverse\n    }\n    return strings.TrimSpace(sortedNumbers)\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5qh18fi4_test.go:16:25: undefined: strings

    /tmp/tmp5qh18fi4_test.go:18:5: undefined: sort

    /tmp/tmp5qh18fi4_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Split input into individual\
    \ numbers\n    nums := strings.Split(numbers, \" \")\n\n    // Sort numbers from\
    \ smallest to largest\n    nums = sort.Ints(nums)\n\n    // Join numbers back\
    \ into a string\n    return strings.Join(nums, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqpaapgct_test.go:15:13: undefined: strings

    /tmp/tmpqpaapgct_test.go:18:12: undefined: sort

    /tmp/tmpqpaapgct_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    words := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(words)\n    sort.Strings(words)\n    return strings.Join(words,\
    \ \" \")\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=1 |>\nA straight forward solution\
    \ for this, using regular expressions:\n<code>\npackage main\n\nimport (\n   \
    \ \"fmt\"\n    \"strings\"\n)\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqfh_5qzd_test.go:19:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var (\n        i, j, k int\n \
    \       buffer []string\n    )\n    for j := 0; j < len(numbers); j++ {\n    \
    \    buffer := make([]string, 0, 9)\n        for k := '0'; k < '9'; k++ {\n  \
    \          switch numbers[j] {\n            case numbers[j]:\n               \
    \ buffer = append(buffer, k)\n            }\n        }\n        if len(buffer)\
    \ > 1 {\n            i := 0\n            for k = len(buffer) - 1; k > 0; k-- {\n\
    \                if buffer[k] < buffer[k+1] {\n                    i++\n     \
    \           }\n                buffer[i] := buffer[k]\n            }\n       \
    \     buffer[0] := numbers[j]\n        }\n        for k = len(buffer) - 1; k >\
    \ 0; k-- {\n            buffer[i] = buffer[k-1]\n        }\n    }\n    return\
    \ strings.Join(buffer, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzmt_gwxw_test.go:32:17: expected identifier on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var result strings.Builder\n    for _, number := range numbers {\n\
    \        if number == \"zero\" {\n            result.WriteRune(\"one\")\n    \
    \    } else if number == \"one\" {\n            result.WriteRune(\"two\")\n  \
    \      } else if number == \"two\" {\n            result.WriteRune(\"three\")\n\
    \        } else if number == \"three\" {\n            result.WriteRune(\"four\"\
    )\n        } else if number == \"four\" {\n            result.WriteRune(\"five\"\
    )\n        } else if number == \"five\" {\n            result.WriteRune(\"six\"\
    )\n        } else if number == \"six\" {\n            result.WriteRune(\"seven\"\
    )\n        } else if number == \"seven\" {\n            result.WriteRune(\"eight\"\
    )\n        } else if number == \"eight\" {\n            result.WriteRune(\"nine\"\
    )\n        } else if number == \"nine\" {\n            result.WriteRune(\"zero\"\
    )\n        } else {\n            fmt.Printf(\"%s is not an allowed choice. Try\
    \ \\\"zero\\\" \\\"one\\\" \\\"two\\\" \\\"three\\\" \\\"four\\\" \\\"five\\\"\
    \ \\\"six\\\" \\\"seven\\\" \\\"eight\\\" \\\"nine\\\"\\n\", number)\n       \
    \     t.Fail()\n        }\n    }\n    return result.String()\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=sorting,go,string-sorting |>\nHere's a solution that\
    \ I got working quickly using a map with a custom comparator function.\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\ntype stringSlice []string\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaec01i8__test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    if numbers == \"\" {\n        return \"\"\n    }\n    var output strings.Builder\n\
    \    for _, c := range strings.Split(numbers, \" \") {\n        if c != \"zero\"\
    \ && c != \"one\" && c != \"two\" && c != \"three\" && c != \"four\" && c != \"\
    five\" && c != \"six\" && c != \"seven\" && c != \"eight\" && c != \"nine\" {\n\
    \            continue\n        }\n        c := strings.Replace(c, \"zero\", \"\
    0\", 1)\n        c := strings.Replace(c, \"one\", \"1\", 1)\n        c := strings.Replace(c,\
    \ \"two\", \"2\", 1)\n        c := strings.Replace(c, \"three\", \"3\", 1)\n \
    \       c := strings.Replace(c, \"four\", \"4\", 1)\n        c := strings.Replace(c,\
    \ \"five\", \"5\", 1)\n        c := strings.Replace(c, \"six\", \"6\", 1)\n  \
    \      c := strings.Replace(c, \"seven\", \"7\", 1)\n        c := strings.Replace(c,\
    \ \"eight\", \"8\", 1)\n        c := strings.Replace(c, \"nine\", \"9\", 1)\n\
    \        output = output.WriteString(c)\n    }\n    return strings.TrimSpace(output.String())\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1s60xjq1_test.go:14:13: no new variables on left side of :=

    /tmp/tmp1s60xjq1_test.go:14:16: undefined: strings

    /tmp/tmp1s60xjq1_test.go:18:16: undefined: strings

    /tmp/tmp1s60xjq1_test.go:19:23: undefined: strings

    /tmp/tmp1s60xjq1_test.go:23:14: undefined: strings

    /tmp/tmp1s60xjq1_test.go:24:11: no new variables on left side of :=

    /tmp/tmp1s60xjq1_test.go:24:14: undefined: strings

    /tmp/tmp1s60xjq1_test.go:25:11: no new variables on left side of :=

    /tmp/tmp1s60xjq1_test.go:25:14: undefined: strings

    /tmp/tmp1s60xjq1_test.go:26:14: undefined: strings

    /tmp/tmp1s60xjq1_test.go:26:14: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var output string = \"\"\n   \
    \ for _, number := range strings.Fields(numbers) {\n        output += fmt.Sprintf(\"\
    %v\\n\", number)\n    }\n    for i := 1; i < 10; i++ {\n        for j := 1; j\
    \ < 10; j++ {\n            output += fmt.Sprintf(\"%v\\n\", sort_number(numbers[i*j]))\n\
    \        }\n    }\n    return output\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9q_epf0_test.go:15:28: undefined: strings

    /tmp/tmpf9q_epf0_test.go:20:43: undefined: sort_number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberList := strings.Split(numbers,\
    \ \" \")\n    numberList = append(numberList, \"\")\n\n    for _, number := range\
    \ numberList {\n        numberList := strings.Split(number, \" \")\n        numberList\
    \ = append(numberList, \"\")\n        numberList = sort_numbers_sort(numberList)\n\
    \        fmt.Println(numberList)\n    }\n\n    return strings.Join(numberList,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqnlbo3_t_test.go:14:19: undefined: strings

    /tmp/tmpqnlbo3_t_test.go:18:23: undefined: strings

    /tmp/tmpqnlbo3_t_test.go:20:22: undefined: sort_numbers_sort

    /tmp/tmpqnlbo3_t_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    sorted, err := strconv.Atoi(numbers)\n    if err != nil {\n        return\
    \ fmt.Sprintf(\"invalid numbers: %s\", err)\n    }\n    result := make([]int,\
    \ len(sorted))\n    for i, v := range sorted {\n        result[i] = v\n    }\n\
    \    return fmt.Sprintf(\"%d %d %d\", result[0], result[len(result)-1], len(result))\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy29i764y_test.go:14:13: no new variables on left side of :=

    /tmp/tmpy29i764y_test.go:14:16: undefined: strings

    /tmp/tmpy29i764y_test.go:15:20: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Allocate memory for result\
    \ string\n    ret := make([]string, 0, len(numbers))\n    // Parse all numbers\
    \ into an array\n    numbers := strings.Split(numbers, \" \")\n    // Reverse\
    \ the array\n    for i := range numbers {\n        numbers[i], _ = strconv.Atoi(numbers[i])\n\
    \    }\n    // Loop through the array in reverse to spit out the correct numbers\n\
    \    for i := len(numbers) - 1; i >= 0; i-- {\n        if numbers[i] < numbers[i+1]\
    \ {\n            ret = append(ret, numbers[i])\n            numbers[i] = numbers[i+1]\n\
    \        }\n    }\n    // Return results\n    return strings.Join(ret, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdwy3ad0x_test.go:17:13: no new variables on left side of :=

    /tmp/tmpdwy3ad0x_test.go:17:16: undefined: strings

    /tmp/tmpdwy3ad0x_test.go:20:25: undefined: strconv

    /tmp/tmpdwy3ad0x_test.go:25:31: cannot use numbers[i] (value of type byte) as
    type string in argument to append

    /tmp/tmpdwy3ad0x_test.go:26:13: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpdwy3ad0x_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.TrimSpace(numbers)\n    var nums strings.Split(numbers,\
    \ \" \")\n    sort.Strings(nums)\n    numbers := strings.Join(nums, \" \")\n \
    \   return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__9bue2v_test.go:16:27: expected '';'', found ''(''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers\
    \ := strings.Trim(numbers, \" \")\n    numbers := strings.Replace(numbers, \"\
    \ \", \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers :=\
    \ strings.Trim(numbers, \" \")\n    numbers := strings.Replace(numbers, \" \"\
    , \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Replace(numbers, \" \", \"\", -1)\n    numbers\
    \ := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \"\
    )\n    numbers := strings.Replace(numbers, \" \", \"\", -1)\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers\
    \ := strings.Trim(numbers, \" \")\n    numbers := strings.Replace(numbers, \"\
    \ \", \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers :=\
    \ strings.Trim(numbers, \" \")\n    numbers := strings.Replace(numbers, \" \"\
    , \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Replace(numbers, \" \", \"\", -1)\n    numbers\
    \ := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \"\
    )\n    numbers := strings.Replace(numbers, \" \", \"\", -1)\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers\
    \ := strings.Trim(numbers, \" \")\n    numbers := strings.Replace(numbers, \"\
    \ \", \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers :=\
    \ strings.Trim(numbers, \" \")\n    numbers := strings.Replace(numbers, \" \"\
    , \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Replace(numbers, \" \", \"\", -1)\n    numbers\
    \ := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \"\
    )\n    numbers := strings.Replace(numbers, \" \", \"\", -1)\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(number\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplb92e1k7_test.go:60:35: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var output string\n    var i,\
    \ j int\n\n    numbers = strings.Trim(numbers, \" \")\n\n    for _, n := range\
    \ strings.Split(numbers, \" \") {\n        switch n {\n        case \"zero\",\
    \ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\":\n            i++\n            if i == numbers {\n                i\
    \ = 0\n                j += 1\n            }\n            output += n\n      \
    \  default:\n            fmt.Println(\"Unexpected value in:\", n)\n        }\n\
    \    }\n\n    return output\n}\n</code>\n<|/ a |>\n<| a tags=go dscore=1 |>\n\
    A slight variation of Eric's answer (but more succinct, and easier to understand\
    \ for beginners):\n<code>\npackage sort_numbers_test\n\nimport (\n    \"fmt\"\n\
    \    \"sort\"\n)\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9s2degnu_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.TrimSpace(numbers)\n    numbers := strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers\
    \ := strings.TrimSpace(numbers)\n    numbers := strings.Join(numbers, \" \")\n\
    \n    numbers := strings.Split(numbers, \"-\")\n    numbers := strings.TrimSpace(numbers[0])\n\
    \    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n\n    numbers := strings.Split(numbers,\
    \ \"+\")\n    numbers := strings.TrimSpace(numbers[0])\n    numbers := strings.Replace(numbers,\
    \ \"+\", \" \", -1)\n\n    numbers := strings.Split(numbers, \"/\")\n    numbers\
    \ := strings.TrimSpace(numbers[0])\n    numbers := strings.Replace(numbers, \"\
    /\", \" \", -1)\n\n    numbers := strings.Split(numbers, \",\")\n    numbers :=\
    \ strings.TrimSpace(numbers[0])\n    numbers := strings.Replace(numbers, \",\"\
    , \" \", -1)\n\n    numbers := strings.Split(numbers, \"-\")\n    numbers := strings.TrimSpace(numbers[0])\n\
    \    numbers := strings.Replace(numbers, \"-\", \" \", -1)\n\n    numbers := strings.Split(numbers,\
    \ \"+\")\n    numbers := strings.TrimSpace(numbers[0])\n    numbers := strings.Replace(numbers,\
    \ \"+\", \" \", -1)\n\n    numbers := strings.Split(numbers, \"/\")\n    numbers\
    \ := strings.TrimSpace(numbers[0])\n    numbers := strings.Replace(numbers, \"\
    /\", \" \", -1)\n\n    numbers := strings.Split(numbers, \",\")\n    numbers :=\
    \ strings.TrimSpace(numbers[0])\n    numbers := strings.Replace(numbers, \",\"\
    , \" \", -1)\n\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers[0])\n\
    \    numbers := strings.Replace(numbers, \" \", \" \", -1)\n\n    numbers := strings.Split(numbers,\
    \ \"-\")\n    numbers := strings.TrimSpace(numbers[0])\n    numbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\n    numbers := strings.Split(numbers, \"+\")\n    numbers\
    \ := strings.TrimSpace(numbers[0])\n    numbers := strings.Replace(numbers, \"\
    +\", \" \", -1)\n\n    numbers := strings.Split(numbers, \"/\")\n    numbers :=\
    \ strings.TrimSpace(numbers[0])\n    numbers := strings.Replace(numbers, \"/\"\
    , \" \", -1)\n\n    numbers := strings.Split(numbers, \",\")\n    numbers := strings.TrimSpace(numbers[0])\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_jou1mka_test.go:72:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074466
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers := strings.Split(numbers, \" \")\n    numbers = sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptxobl4c1_test.go:14:15: undefined: strings

    /tmp/tmptxobl4c1_test.go:15:13: no new variables on left side of :=

    /tmp/tmptxobl4c1_test.go:15:16: undefined: strings

    /tmp/tmptxobl4c1_test.go:16:15: undefined: sort_numbers_test

    /tmp/tmptxobl4c1_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Replace(strings.Trim(numbers),\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"n\", \"\", -1)\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\n\
    \    numbers := strings.Split(numbers, \" \")\n\n    // Convert to ints, sort\
    \ them, and convert back.\n    nums := make([]int, len(numbers))\n    for i, s\
    \ := range numbers {\n        nums[i], _ = strconv.Atoi(s)\n    }\n    sort.Ints(nums)\n\
    \n    return strings.Join(make([]string, len(nums)), \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphyvg1m0q_test.go:14:13: no new variables on left side of :=

    /tmp/tmphyvg1m0q_test.go:14:16: undefined: strings

    /tmp/tmphyvg1m0q_test.go:15:15: undefined: strings

    /tmp/tmphyvg1m0q_test.go:16:15: undefined: strings

    /tmp/tmphyvg1m0q_test.go:17:15: undefined: strings

    /tmp/tmphyvg1m0q_test.go:18:15: undefined: strings

    /tmp/tmphyvg1m0q_test.go:19:15: undefined: strings

    /tmp/tmphyvg1m0q_test.go:20:15: undefined: strings

    /tmp/tmphyvg1m0q_test.go:21:15: undefined: strings

    /tmp/tmphyvg1m0q_test.go:22:15: undefined: strings

    /tmp/tmphyvg1m0q_test.go:22:15: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Replace(numbers, \" \", \"\", -1)\n    numbers\
    \ := strings.Split(numbers, \" \")\n    numbers := strings.Trim(strings.Join(numbers,\
    \ \" \"), \"0\")\n    numbers := strings.Split(numbers, \" \")\n    for idx, item\
    \ := range numbers {\n        if idx%2 == 0 {\n            if item != \"0\" &&\
    \ item != \"one\" && item != \"two\" && item != \"three\" &&\n               \
    \ item != \"four\" && item != \"five\" && item != \"six\" && item != \"seven\"\
    \ && item != \"eight\" && item != \"nine\" {\n                numbers[idx] = \"\
    zero\"\n            } else {\n                numbers[idx] = item\n          \
    \  }\n        }\n    }\n    numbers := strings.Join(numbers, \" \")\n    return\
    \ numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy61riqx1_test.go:14:15: undefined: strings

    /tmp/tmpy61riqx1_test.go:15:13: no new variables on left side of :=

    /tmp/tmpy61riqx1_test.go:15:16: undefined: strings

    /tmp/tmpy61riqx1_test.go:16:13: no new variables on left side of :=

    /tmp/tmpy61riqx1_test.go:16:16: undefined: strings

    /tmp/tmpy61riqx1_test.go:17:13: no new variables on left side of :=

    /tmp/tmpy61riqx1_test.go:17:16: undefined: strings

    /tmp/tmpy61riqx1_test.go:18:13: no new variables on left side of :=

    /tmp/tmpy61riqx1_test.go:18:16: undefined: strings

    /tmp/tmpy61riqx1_test.go:21:24: invalid operation: item != "0" (mismatched types
    rune and untyped string)

    /tmp/tmpy61riqx1_test.go:21:24: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \"  \", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"  \", \" \", -1)\n\n    numbers = strings.Split(numbers,\
    \ \" \")\n\n    numbers = append(numbers, \"nine\")\n    numbers = append(numbers,\
    \ \"zero\")\n    numbers = append(numbers, \"one\")\n    numbers = append(numbers,\
    \ \"two\")\n    numbers = append(numbers, \"three\")\n    numbers = append(numbers,\
    \ \"four\")\n    numbers = append(numbers, \"five\")\n    numbers = append(numbers,\
    \ \"six\")\n    numbers = append(numbers, \"seven\")\n    numbers = append(numbers,\
    \ \"eight\")\n    numbers = append(numbers, \"nine\")\n\n    sort.Strings(numbers)\n\
    \n    var ret string\n    for _, v := range numbers {\n        ret += \" \" +\
    \ v\n    }\n    ret = strings.TrimSpace(ret)\n\n    return ret\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrs2bsfk_test.go:14:15: undefined: strings

    /tmp/tmpsrs2bsfk_test.go:15:15: undefined: strings

    /tmp/tmpsrs2bsfk_test.go:16:15: undefined: strings

    /tmp/tmpsrs2bsfk_test.go:17:15: undefined: strings

    /tmp/tmpsrs2bsfk_test.go:18:15: undefined: strings

    /tmp/tmpsrs2bsfk_test.go:20:15: undefined: strings

    /tmp/tmpsrs2bsfk_test.go:22:22: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmpsrs2bsfk_test.go:23:22: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmpsrs2bsfk_test.go:24:22: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmpsrs2bsfk_test.go:25:22: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmpsrs2bsfk_test.go:25:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Fields(numbers)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3iejvl6_test.go:14:13: no new variables on left side of :=

    /tmp/tmpp3iejvl6_test.go:14:16: undefined: strings

    /tmp/tmpp3iejvl6_test.go:15:5: undefined: sort

    /tmp/tmpp3iejvl6_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    input := strings.Split(numbers,\
    \ \" \")\n    var output []string\n    for _, i := range input {\n        if i\
    \ != \"zero\" && i != \"nine\" {\n            output = append(output, i)\n   \
    \     }\n    }\n    sort.Strings(output)\n    return strings.Join(output, \" \"\
    )\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp97uhveza_test.go:14:14: undefined: strings

    /tmp/tmp97uhveza_test.go:21:5: undefined: sort

    /tmp/tmp97uhveza_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\n    var smallest, largest int\n    for _, number := range numbers\
    \ {\n        number, _ := strconv.Atoi(number)\n        switch number {\n    \
    \    default:\n            fmt.Println(\"Invalid number:\", number)\n        \
    \    fmt.Println()\n        case \"zero\":\n            smallest = 0\n       \
    \ case \"one\":\n            smallest = 1\n        case \"two\":\n           \
    \ smallest = 2\n        case \"three\":\n            smallest = 3\n        case\
    \ \"four\":\n            smallest = 4\n        case \"five\":\n            smallest\
    \ = 5\n        case \"six\":\n            smallest = 6\n        case \"seven\"\
    :\n            smallest = 7\n        case \"eight\":\n            smallest = 8\n\
    \        case \"nine\":\n            smallest = 9\n        case \"ten\":\n   \
    \         smallest = 10\n        case \"eleven\":\n            smallest = 11\n\
    \        case \"twelve\":\n            smallest = 12\n        case \"thirteen\"\
    :\n            smallest = 13\n        case \"fourteen\":\n            smallest\
    \ = 14\n        case \"fifteen\":\n            smallest = 15\n        case \"\
    sixteen\":\n            smallest = 16\n        case \"seventeen\":\n         \
    \   smallest = 17\n        case \"eighteen\":\n            smallest = 18\n   \
    \     case \"nineteen\":\n            smallest = 19\n        case \"twenty\":\n\
    \            smallest = 20\n        case \"thirty\":\n            smallest = 21\n\
    \        case \"forty\":\n            smallest = 22\n        case \"fifty\":\n\
    \            smallest = 23\n        case \"sixty\":\n            smallest = 24\n\
    \        case \"seventy\":\n            smallest = 25\n        case \"eighty\"\
    :\n            smallest = 26\n        case \"ninety\":\n            smallest =\
    \ 27\n        case \"hundred\":\n            smallest = 100\n        case \"thousand\"\
    :\n            smallest = 1000\n        case \"million\":\n            smallest\
    \ = 1000000\n        case \"billion\":\n            smallest = 1000000000\n  \
    \      case \"trillion\":\n            smallest = 1000000000000\n        case\
    \ \"quadrillion\":\n            smallest = 1000000000000000\n        case \"quintillion\"\
    :\n            smallest = 1000000000000000000\n        case \"sextillion\":\n\
    \            smallest = 1000000000000000000000\n        case \"septillion\":\n\
    \            smallest = 1000000000000000000000000\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqnml6at3_test.go:100:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    split := strings.Fields(numbers)\n\
    \    sort.Strings(split)\n    return strings.Join(split, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwe9tw797_test.go:14:14: undefined: strings

    /tmp/tmpwe9tw797_test.go:15:5: undefined: sort

    /tmp/tmpwe9tw797_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers []string\n    for\
    \ _, s := range strings.Split(numbers, \" \") {\n        if s == \"zero\" {\n\
    \            numbers = append(numbers, \"zero\")\n        } else if s == \"one\"\
    \ {\n            numbers = append(numbers, \"one\")\n        } else if s == \"\
    two\" {\n            numbers = append(numbers, \"two\")\n        } else if s ==\
    \ \"three\" {\n            numbers = append(numbers, \"three\")\n        } else\
    \ if s == \"four\" {\n            numbers = append(numbers, \"four\")\n      \
    \  } else if s == \"five\" {\n            numbers = append(numbers, \"five\")\n\
    \        } else if s == \"six\" {\n            numbers = append(numbers, \"six\"\
    )\n        } else if s == \"seven\" {\n            numbers = append(numbers, \"\
    seven\")\n        } else if s == \"eight\" {\n            numbers = append(numbers,\
    \ \"eight\")\n        } else if s == \"nine\" {\n            numbers = append(numbers,\
    \ \"nine\")\n        }\n    }\n    fmt.Println(numbers)\n    fmt.Println(strings.Join(numbers,\
    \ \" \"))\n    return strings.Join(numbers, \" \")\n}\n</code>\n<|/ a |>\n<| a\
    \ |>\nThe function below takes a string and returns a new string with the numbers\
    \ in ascending order.\n<code>\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9rvkv97o_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074467
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := numbers[:len(numbers)-1]\n    numbers := make([]int,\
    \ 0, len(numbers))\n    for _, num := range numbers {\n        number, err :=\
    \ strconv.Atoi(num)\n        if err != nil {\n            fmt.Println(err)\n \
    \       }\n        numbers = append(numbers, number)\n    }\n    numbers := sort.Ints(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsat8f4ja_test.go:14:13: no new variables on left side of :=

    /tmp/tmpsat8f4ja_test.go:14:16: undefined: strings

    /tmp/tmpsat8f4ja_test.go:15:13: no new variables on left side of :=

    /tmp/tmpsat8f4ja_test.go:16:13: no new variables on left side of :=

    /tmp/tmpsat8f4ja_test.go:16:16: cannot use make([]int, 0, len(numbers)) (value
    of type []int) as type string in assignment

    /tmp/tmpsat8f4ja_test.go:18:24: undefined: strconv

    /tmp/tmpsat8f4ja_test.go:22:26: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmpsat8f4ja_test.go:24:13: no new variables on left side of :=

    /tmp/tmpsat8f4ja_test.go:24:16: undefined: sort

    /tmp/tmpsat8f4ja_test.go:25:12: undefined: strings

    /tmp/tmpsat8f4ja_test.go:25:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var sorted []string\n    for _, num := range numbers {\n       \
    \ sorted = append(sorted, num)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(sorted)))\n\
    \    return strings.Join(sorted, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7c9a9kj2_test.go:14:13: no new variables on left side of :=

    /tmp/tmp7c9a9kj2_test.go:14:16: undefined: strings

    /tmp/tmp7c9a9kj2_test.go:17:33: cannot use num (variable of type rune) as type
    string in argument to append

    /tmp/tmp7c9a9kj2_test.go:19:5: undefined: sort

    /tmp/tmp7c9a9kj2_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \n    if len(numbers) == 0 {\n        return \"\"\n    }\n\n    // Split string\
    \ into chunks of digits and sort each chunk\n    numberChunks := strings.Split(numbers,\
    \ \" \")\n    numberChunksSorted := make([]string, 0)\n    for _, chunk := range\
    \ numberChunks {\n        numberChunksSorted = append(numberChunksSorted, sort_numbers_test.SortNumber(chunk))\n\
    \    }\n    return strings.Join(numberChunksSorted, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9noow_n_test.go:14:13: no new variables on left side of :=

    /tmp/tmpj9noow_n_test.go:14:16: undefined: strings

    /tmp/tmpj9noow_n_test.go:21:21: undefined: strings

    /tmp/tmpj9noow_n_test.go:24:57: undefined: sort_numbers_test

    /tmp/tmpj9noow_n_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    var ret string\n    numbers = strings.TrimSpace(numbers)\n    var\
    \ digits = \"zero one two three four five six seven eight nine\".split(\" \")\n\
    \    var i = 0\n    for _, num := range strings.Split(numbers, \"\") {\n     \
    \   i, err := strconv.Atoi(num)\n        if err != nil {\n            i = 9\n\
    \        }\n        if i <  0 {\n            i = 9\n        }\n        if i >\
    \ 9 {\n            i = 9\n        }\n        if i < 0 {\n            i = 0\n \
    \       }\n        if i >= len(digits) {\n            i = 0\n        }\n     \
    \   switch digits[i] {\n        case \"zero\":\n            ret = append(ret,\
    \ \"0\")\n        case \"one\":\n            ret = append(ret, \"1\")\n      \
    \  case \"two\":\n            ret = append(ret, \"2\")\n        case \"three\"\
    :\n            ret = append(ret, \"3\")\n        case \"four\":\n            ret\
    \ = append(ret, \"4\")\n        case \"five\":\n            ret = append(ret,\
    \ \"5\")\n        case \"six\":\n            ret = append(ret, \"6\")\n      \
    \  case \"seven\":\n            ret = append(ret, \"7\")\n        case \"eight\"\
    :\n            ret = append(ret, \"8\")\n        case \"nine\":\n            ret\
    \ = append(ret, \"9\")\n        default:\n            fmt.Println(\"unknown number\"\
    )\n            ret = append(ret, \"9\")\n        }\n    }\n    return strings.Join(ret,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuwub5wzq_test.go:14:15: undefined: strings

    /tmp/tmpuwub5wzq_test.go:16:15: undefined: strings

    /tmp/tmpuwub5wzq_test.go:17:70: "zero one two three four five six seven eight
    nine".split undefined (type untyped string has no field or method split)

    /tmp/tmpuwub5wzq_test.go:19:25: undefined: strings

    /tmp/tmpuwub5wzq_test.go:20:19: undefined: strconv

    /tmp/tmpuwub5wzq_test.go:38:26: first argument to append must be a slice; have
    ret (variable of type string)

    /tmp/tmpuwub5wzq_test.go:40:26: first argument to append must be a slice; have
    ret (variable of type string)

    /tmp/tmpuwub5wzq_test.go:42:26: first argument to append must be a slice; have
    ret (variable of type string)

    /tmp/tmpuwub5wzq_test.go:44:26: first argument to append must be a slice; have
    ret (variable of type string)

    /tmp/tmpuwub5wzq_test.go:46:26: first argument to append must be a slice; have
    ret (variable of type string)

    /tmp/tmpuwub5wzq_test.go:46:26: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \"\\n\")\n    numbers := strings.Fields(numbers)\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if numbers[i] < \"n\" {\n            switch {\n            case\
    \ i == len(numbers)-1:\n                numbers[i], numbers[i+1] = numbers[i+1],\
    \ numbers[i]\n            case numbers[i] > numbers[i+1]:\n                numbers[i],\
    \ numbers[i+1] = numbers[i+1], numbers[i]\n            }\n        }\n    }\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbgeflmw__test.go:14:13: no new variables on left side of :=

    /tmp/tmpbgeflmw__test.go:14:16: undefined: strings

    /tmp/tmpbgeflmw__test.go:15:13: no new variables on left side of :=

    /tmp/tmpbgeflmw__test.go:15:16: undefined: strings

    /tmp/tmpbgeflmw__test.go:17:25: invalid operation: numbers[i] < "n" (mismatched
    types byte and untyped string)

    /tmp/tmpbgeflmw__test.go:20:17: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpbgeflmw__test.go:20:29: cannot assign to numbers[i + 1] (value of type
    byte)

    /tmp/tmpbgeflmw__test.go:22:17: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpbgeflmw__test.go:22:29: cannot assign to numbers[i + 1] (value of type
    byte)

    /tmp/tmpbgeflmw__test.go:26:12: undefined: strings

    /tmp/tmpbgeflmw__test.go:26:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Printf(\"sort_numbers(%q)\\\
    n\", numbers)\n    // Return an error if numbers is empty or has only one word\
    \ or contains no numbers at all\n    if len(numbers) == 0 || len(numbers) == 1\
    \ {\n        fmt.Println(\"len(numbers) == 0 || len(numbers) == 1\")\n       \
    \ return \"\"\n    }\n\n    // Use strings.Split() to split each word in numbers\
    \ into an array\n    // Use sort.Strings to sort the slice of numbers in ascending\
    \ order\n    // Join the sorted slice of numbers with a space\n    // Return the\
    \ joined string with a space separating the sorted words\n    fmt.Printf(\"strings.Split(%q)\
    \ %q %q\\n\", numbers, strings.Split(numbers, \" \")[0], strings.Split(numbers,\
    \ \" \")[1])\n    sort.Strings(strings.Split(numbers, \" \")[1])\n    fmt.Printf(\"\
    sort.Strings(strings.Split(%q) %q %q) %q\\n\", numbers, strings.Split(numbers,\
    \ \" \")[0], strings.Split(numbers, \" \")[1], sort.Strings(strings.Split(numbers,\
    \ \" \")[1]))\n    return strings.Join(sort.Strings(strings.Split(numbers, \"\
    \ \")[1]), \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzq7_jo0g_test.go:25:54: undefined: strings

    /tmp/tmpzq7_jo0g_test.go:26:5: undefined: sort

    /tmp/tmpzq7_jo0g_test.go:26:18: undefined: strings

    /tmp/tmpzq7_jo0g_test.go:27:71: undefined: strings

    /tmp/tmpzq7_jo0g_test.go:27:135: undefined: sort

    /tmp/tmpzq7_jo0g_test.go:27:148: undefined: strings

    /tmp/tmpzq7_jo0g_test.go:28:12: undefined: strings

    /tmp/tmpzq7_jo0g_test.go:28:25: undefined: sort

    /tmp/tmpzq7_jo0g_test.go:28:38: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result string\n    var numbers\
    \ = strings.Split(numbers, \" \")\n    var n int\n    for _, number := range numbers\
    \ {\n        if n == len(numbers) {\n            result = number\n           \
    \ break\n        }\n        n, ok := StringToInt(number)\n        if ok {\n  \
    \          result = fmt.Sprintf(\" %s \", numbers[n])\n            break\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfw0uip1f_test.go:15:9:\
    \ numbers redeclared in this block\n\t/tmp/tmpfw0uip1f_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmpfw0uip1f_test.go:15:19: undefined: strings\n/tmp/tmpfw0uip1f_test.go:19:22:\
    \ cannot use number (variable of type rune) as type string in assignment\n/tmp/tmpfw0uip1f_test.go:22:18:\
    \ undefined: StringToInt\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers []string\n    numbers\
    \ = strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    numbers := strings.Join(numbers,\
    \ \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp14u38qsk_test.go:14:9:\
    \ numbers redeclared in this block\n\t/tmp/tmp14u38qsk_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmp14u38qsk_test.go:15:15: undefined: strings\n/tmp/tmp14u38qsk_test.go:16:5:\
    \ undefined: sort\n/tmp/tmp14u38qsk_test.go:17:13: no new variables on left side\
    \ of :=\n/tmp/tmp14u38qsk_test.go:17:16: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Println(\"sort_numbers\")\n\
    \    var result strings.Builder\n    var split []string\n    for _, element :=\
    \ range strings.Split(numbers, \" \") {\n        split = strings.Split(element,\
    \ \" \")\n        var result strings.Builder\n        var tempstring string\n\
    \        for _, element := range split {\n            if element != \"zero\" &&\
    \ element != \"one\" && element != \"two\" && element != \"three\" && element\
    \ != \"four\" && element != \"five\" && element != \"six\" && element != \"seven\"\
    \ && element != \"eight\" && element != \"nine\" {\n                tempstring\
    \ = fmt.Sprintf(\"%v\", element)\n            }\n            if element == \"\
    nine\" {\n                result += fmt.Sprintf(\"%v\", element)\n           \
    \ } else if element == \"zero\" {\n                result += fmt.Sprintf(\"%v\"\
    , element)\n            } else if element == \"one\" {\n                result\
    \ += fmt.Sprintf(\"%v\", element)\n            } else if element == \"two\" {\n\
    \                result += fmt.Sprintf(\"%v\", element)\n            } else if\
    \ element == \"three\" {\n                result += fmt.Sprintf(\"%v\", element)\n\
    \            } else if element == \"four\" {\n                result += fmt.Sprintf(\"\
    %v\", element)\n            } else if element == \"five\" {\n                result\
    \ += fmt.Sprintf(\"%v\", element)\n            } else if element == \"six\" {\n\
    \                result += fmt.Sprintf(\"%v\", element)\n            } else if\
    \ element == \"seven\" {\n                result += fmt.Sprintf(\"%v\", element)\n\
    \            } else if element == \"eight\" {\n                result += fmt.Sprintf(\"\
    %v\", element)\n            } else if element == \"nine\" {\n                result\
    \ += fmt.Sprintf(\"%v\", element)\n            }\n        }\n        fmt.Println(result.String())\n\
    \        result.Reset()\n    }\n    fmt.Println(result.String())\n    return result.String()\n\
    }\n</code>\nOutput (for both inputs):\n<code>\nsort_numbers\nnine two zero four\
    \ five six seven eight one\none three five nine two zero four five six seven eight\
    \ one\none three five nine two zero four five six seven eight one\none three five\
    \ nine two zero four five six seven eight one\none three five nine two zero four\
    \ five six seven eight one\none three five nine two zero four five six seven eight\
    \ one\none three five nine two zero four five six seven eight one\none three five\
    \ nine two \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_0asgglt_test.go:55:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result string\n    numbers\
    \ := strings.TrimSpace(numbers)\n    numbers := strings.TrimFunc(numbers, func(r\
    \ rune) bool {\n        return !unicode.IsLetter(r)\n    })\n    numbers := strings.Trim(numbers,\
    \ \" \")\n\n    for _, num := range strings.Fields(numbers) {\n        switch\
    \ {\n        case num <= \"nine\":\n            result += \"one \" + num + \"\
    \ nine\\n\"\n        case \"two\":\n            result += \"two \" + num + \"\
    \ eight\\n\"\n        case \"three\":\n            result += \"three \" + num\
    \ + \" seven\\n\"\n        case \"four\":\n            result += \"four \" + num\
    \ + \" six\\n\"\n        case \"five\":\n            result += \"five \" + num\
    \ + \" five\\n\"\n        case \"six\":\n            result += \"six \" + num\
    \ + \" four\\n\"\n        case \"seven\":\n            result += \"seven \" +\
    \ num + \" three\\n\"\n        case \"eight\":\n            result += \"eight\
    \ \" + num + \" two\\n\"\n        case \"nine\":\n            result += \"nine\
    \ \" + num + \" one\\n\"\n        default:\n            fmt.Println(\"Oops!\"\
    )\n            fmt.Println(\"'\" + num + \"' not a valid number\")\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmjbt5y6z_test.go:15:13: no new variables on left side of :=

    /tmp/tmpmjbt5y6z_test.go:15:16: undefined: strings

    /tmp/tmpmjbt5y6z_test.go:16:13: no new variables on left side of :=

    /tmp/tmpmjbt5y6z_test.go:16:16: undefined: strings

    /tmp/tmpmjbt5y6z_test.go:17:17: undefined: unicode

    /tmp/tmpmjbt5y6z_test.go:19:13: no new variables on left side of :=

    /tmp/tmpmjbt5y6z_test.go:19:16: undefined: strings

    /tmp/tmpmjbt5y6z_test.go:21:25: undefined: strings

    /tmp/tmpmjbt5y6z_test.go:25:14: cannot convert "two" (untyped string constant)
    to bool

    /tmp/tmpmjbt5y6z_test.go:27:14: cannot convert "three" (untyped string constant)
    to bool

    /tmp/tmpmjbt5y6z_test.go:27:14: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    arr := strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    return strings.Join(arr,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhoq6oo2_test.go:14:12: undefined: strings

    /tmp/tmpjhoq6oo2_test.go:15:5: undefined: sort

    /tmp/tmpjhoq6oo2_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberList := strings.Split(numbers,\
    \ \" \")\n    var sortedNumbers []string\n\n    for _, number := range numberList\
    \ {\n        i := strings.Index(strings.ToLower(number), \"zero\")\n        if\
    \ i < 0 {\n            i = strings.Index(strings.ToLower(number), \"one\")\n \
    \           if i < 0 {\n                i = strings.Index(strings.ToLower(number),\
    \ \"two\")\n                if i < 0 {\n                    i = strings.Index(strings.ToLower(number),\
    \ \"three\")\n                    if i < 0 {\n                        i = strings.Index(strings.ToLower(number),\
    \ \"four\")\n                        if i < 0 {\n                            i\
    \ = strings.Index(strings.ToLower(number), \"five\")\n                       \
    \     if i < 0 {\n                                i = strings.Index(strings.ToLower(number),\
    \ \"six\")\n                                if i < 0 {\n                     \
    \               i = strings.Index(strings.ToLower(number), \"seven\")\n      \
    \                              if i < 0 {\n                                  \
    \      i = strings.Index(strings.ToLower(number), \"eight\")\n               \
    \                         if i < 0 {\n                                       \
    \     i = strings.Index(strings.ToLower(number), \"nine\")\n                 \
    \                           if i < 0 {\n                                     \
    \           i = strings.Index(strings.ToLower(number), \"ten\")\n            \
    \                                    if i < 0 {\n                            \
    \                        i = strings.Index(strings.ToLower(number), \"eleven\"\
    )\n                                                    if i < 0 {\n          \
    \                                              i = strings.Index(strings.ToLower(number),\
    \ \"twelve\")\n                                                        if i <\
    \ 0 {\n                                                            i = strings.Index(strings.ToLower(number),\
    \ \"thirteen\")\n                                                            if\
    \ i < 0 {\n                                                                i =\
    \ strings.Index(strings.ToLower(number), \"fourteen\")\n                     \
    \                                           if i < 0 {\n                     \
    \                                               i = strings.Index(strings.ToLower(number),\
    \ \"fifteen\")\n                                                             \
    \       if i < 0 {\n                                                         \
    \               i = strings.Index(strings.ToLower(number), \"sixteen\")\n    \
    \                                                                    if i < 0\
    \ {\n                                                                        \
    \    i = strings.Index(strings.ToLower(number), \"seventeen\")\n             \
    \                                                               if i < 0 {\n \
    \                                                                            \
    \   i = strings.Index(strings.ToLower(number), \"eighteen\")\n               \
    \                                                                 if i < 0 {\n\
    \                                                                            \
    \        i = strings.Index(strings.ToLower(number), \"nineteen\")\n          \
    \                                                                          if\
    \ i < 0 {\n                                                                  \
    \                      i = strings.Index(strings.ToLower(number), \"twenty\")\n\
    \                                                                            \
    \            if i < 0 {\n                                                    \
    \                                        i = strings.Index(strings.ToLower(number),\
    \ \"thirty\")\n                                                              \
    \                              if i < 0 {\n                                  \
    \                                                              i = strings.Index(strings.ToLower(number),\
    \ \"forty\")\n                                                               \
    \                                 if i < 0 {\n                               \
    \                                                                     i = strings.Index(strings.ToLower(number),\
    \ \"fifty\")\n                                                               \
    \                                     if i < 0 {\n                           \
    \                                                                            \
    \ \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp29ck_qac_test.go:67:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers = sort_numbers_sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ujob_c1_test.go:14:13: no new variables on left side of :=

    /tmp/tmp0ujob_c1_test.go:14:16: undefined: strings

    /tmp/tmp0ujob_c1_test.go:15:15: undefined: sort_numbers_sort

    /tmp/tmp0ujob_c1_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberList := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numberList))\n    for i, s := range numberList\
    \ {\n        numbers[i] = atoi(numberList)\n    }\n    sort.Ints(numbers)\n  \
    \  list := make([]string, len(numbers))\n    for i, num := range numbers {\n \
    \       list[i] = fmt.Sprintf(\"%d\", num)\n    }\n    return strings.Join(list,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6l6p4uh3_test.go:14:19: undefined: strings

    /tmp/tmp6l6p4uh3_test.go:15:13: no new variables on left side of :=

    /tmp/tmp6l6p4uh3_test.go:15:16: cannot use make([]int, len(numberList)) (value
    of type []int) as type string in assignment

    /tmp/tmp6l6p4uh3_test.go:17:22: undefined: atoi

    /tmp/tmp6l6p4uh3_test.go:19:5: undefined: sort

    /tmp/tmp6l6p4uh3_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers =\
    \ strings.Split(numbers, \" \")\n    numbers := sort.Ints(numbers)\n    var ret\
    \ strings.Builder\n    for _, n := range numbers {\n        ret.WriteString(fmt.Sprintf(\"\
    %s \", n))\n    }\n    return strings.Trim(ret.String(), \"\\n\")\n}\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpit9ajxhw_test.go:14:15: undefined: strings

    /tmp/tmpit9ajxhw_test.go:15:15: undefined: strings

    /tmp/tmpit9ajxhw_test.go:16:15: undefined: strings

    /tmp/tmpit9ajxhw_test.go:17:13: no new variables on left side of :=

    /tmp/tmpit9ajxhw_test.go:17:16: undefined: sort

    /tmp/tmpit9ajxhw_test.go:18:13: undefined: strings

    /tmp/tmpit9ajxhw_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberList := strings.Split(numbers,\
    \ \" \")\n\n    numberList := sort_numbers_test.ValidInputs(numberList)\n\n  \
    \  numberList := sort_numbers_test.NumericSort(numberList)\n\n    return strings.Join(numberList,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51jeg_a7_test.go:14:19: undefined: strings

    /tmp/tmp51jeg_a7_test.go:16:16: no new variables on left side of :=

    /tmp/tmp51jeg_a7_test.go:16:19: undefined: sort_numbers_test

    /tmp/tmp51jeg_a7_test.go:18:16: no new variables on left side of :=

    /tmp/tmp51jeg_a7_test.go:18:19: undefined: sort_numbers_test

    /tmp/tmp51jeg_a7_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Initialize array with all values\
    \ 'zero' to 'nine' plus 'zero' and\n    // 'one'\n    var arr []string\n    for\
    \ _, n := range []string{\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\"} {\n        arr = append(arr, n)\n \
    \   }\n\n    // Add 'zero' to the beginning of the array\n    arr = append(arr,\
    \ \"zero\")\n\n    // Sort arr from smallest to largest\n    sort.Strings(arr)\n\
    \n    // Return a string with the numbers in sorted order.\n    return strings.Join(arr,\
    \ \" \")\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=go,sorting dscore=0 |>\nYou\
    \ can use this package github.com/peterh/linked/blob/master/linked/internal/sort.go\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    \"github.com/peterh/linked/internal/sort\"\
    \n)\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx2xiyctn_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074469
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    if len(numbers) == 0 {\n        return numbers\n    }\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers2 := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers2[i] = sort_number(number)\n    }\n    return strings.Join(numbers2,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjyk0c6jm_test.go:14:13: no new variables on left side of :=

    /tmp/tmpjyk0c6jm_test.go:14:16: undefined: strings

    /tmp/tmpjyk0c6jm_test.go:18:13: no new variables on left side of :=

    /tmp/tmpjyk0c6jm_test.go:18:16: undefined: strings

    /tmp/tmpjyk0c6jm_test.go:21:23: undefined: sort_number

    /tmp/tmpjyk0c6jm_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    sort.Sort(SortNumbers(numbers))\n\
    \    result := strings.Join(numbers, \" \")\n    if len(numbers) > 0 && !strings.Contains(result,\
    \ \"one\") {\n        result += \"one\"\n    }\n    return result\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph00ukphh_test.go:14:15: undefined: strings

    /tmp/tmph00ukphh_test.go:15:13: no new variables on left side of :=

    /tmp/tmph00ukphh_test.go:15:16: undefined: strings

    /tmp/tmph00ukphh_test.go:16:5: undefined: sort

    /tmp/tmph00ukphh_test.go:16:15: undefined: SortNumbers

    /tmp/tmph00ukphh_test.go:17:15: undefined: strings

    /tmp/tmph00ukphh_test.go:18:29: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers []string\n    for\
    \ _, str := range strings.Split(numbers, \" \") {\n        num, err := strconv.Atoi(str)\n\
    \        if err != nil {\n            return str\n        }\n        numbers =\
    \ append(numbers, strconv.Itoa(num))\n    }\n    sort.Sort(sort_numbers_test.NumbersSorter(numbers))\n\
    \    return strings.Join(numbers, \" \")\n}\n\ntype NumbersSorter []string\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp56nd0ww3_test.go:14:9:\
    \ numbers redeclared in this block\n\t/tmp/tmp56nd0ww3_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmp56nd0ww3_test.go:15:25: undefined: strings\n/tmp/tmp56nd0ww3_test.go:16:21:\
    \ undefined: strconv\n/tmp/tmp56nd0ww3_test.go:20:26: first argument to append\
    \ must be a slice; have numbers (variable of type string)\n/tmp/tmp56nd0ww3_test.go:20:35:\
    \ undefined: strconv\n/tmp/tmp56nd0ww3_test.go:22:5: undefined: sort\n/tmp/tmp56nd0ww3_test.go:22:15:\
    \ undefined: sort_numbers_test\n/tmp/tmp56nd0ww3_test.go:23:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int,\
    \ len(numbers))\n\n    for index, element := range numbers {\n        if element\
    \ == \"zero\" {\n            numbers[index] = 0\n        } else if element ==\
    \ \"one\" {\n            numbers[index] = 1\n        } else if element == \"two\"\
    \ {\n            numbers[index] = 2\n        } else if element == \"three\" {\n\
    \            numbers[index] = 3\n        } else if element == \"four\" {\n   \
    \         numbers[index] = 4\n        } else if element == \"five\" {\n      \
    \      numbers[index] = 5\n        } else if element == \"six\" {\n          \
    \  numbers[index] = 6\n        } else if element == \"seven\" {\n            numbers[index]\
    \ = 7\n        } else if element == \"eight\" {\n            numbers[index] =\
    \ 8\n        } else if element == \"nine\" {\n            numbers[index] = 9\n\
    \        } else {\n            fmt.Println(\"Invalid number.\")\n        }\n \
    \   }\n\n    numbers := numbers[len(numbers)-1]\n    numbers := numbers[:len(numbers)-1]\n\
    \    fmt.Println(numbers)\n\n    for index := 0; index < len(numbers); index++\
    \ {\n        if numbers[index] > numbers[index+1] {\n            numbers[index],\
    \ numbers[index+1] = numbers[index+1], numbers[index]\n        }\n    }\n    return\
    \ strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9rcy6vta_test.go:14:13: no new variables on left side of :=

    /tmp/tmp9rcy6vta_test.go:14:16: undefined: strings

    /tmp/tmp9rcy6vta_test.go:15:13: no new variables on left side of :=

    /tmp/tmp9rcy6vta_test.go:15:16: undefined: strings

    /tmp/tmp9rcy6vta_test.go:16:13: no new variables on left side of :=

    /tmp/tmp9rcy6vta_test.go:16:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp9rcy6vta_test.go:19:23: invalid operation: element == "zero" (mismatched
    types rune and untyped string)

    /tmp/tmp9rcy6vta_test.go:20:13: cannot assign to numbers[index] (value of type
    byte)

    /tmp/tmp9rcy6vta_test.go:21:30: invalid operation: element == "one" (mismatched
    types rune and untyped string)

    /tmp/tmp9rcy6vta_test.go:22:13: cannot assign to numbers[index] (value of type
    byte)

    /tmp/tmp9rcy6vta_test.go:22:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers []string\n    words\
    \ := strings.Split(numbers, \" \")\n    for _, word := range words {\n       \
    \ if number := strconv.ParseInt(word, 10, 32); number != 0 {\n            numbers\
    \ = append(numbers, fmt.Sprintf(\"%d\", number))\n        }\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1cgb0kn_test.go:14:9:\
    \ numbers redeclared in this block\n\t/tmp/tmph1cgb0kn_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmph1cgb0kn_test.go:15:14: undefined: strings\n/tmp/tmph1cgb0kn_test.go:17:22:\
    \ undefined: strconv\n/tmp/tmph1cgb0kn_test.go:18:30: first argument to append\
    \ must be a slice; have numbers (variable of type string)\n/tmp/tmph1cgb0kn_test.go:21:5:\
    \ undefined: sort\n/tmp/tmph1cgb0kn_test.go:22:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers := strings.Split(numbers, \" \")\n    numbers.Sort()\n\
    \    sorted_numbers := strings.Join(numbers, \" \")\n    return sorted_numbers\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4uxeso16_test.go:14:15: undefined: strings

    /tmp/tmp4uxeso16_test.go:15:13: no new variables on left side of :=

    /tmp/tmp4uxeso16_test.go:15:16: undefined: strings

    /tmp/tmp4uxeso16_test.go:16:13: numbers.Sort undefined (type string has no field
    or method Sort)

    /tmp/tmp4uxeso16_test.go:17:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberWords := strings.Split(numbers,\
    \ \" \")\n    numberInts := make([]int, len(numberWords))\n    for i, w := range\
    \ numberWords {\n        numberInts[i] = sort_numbers_test.StringToInt(w)\n  \
    \  }\n    numberInts = sort_numbers_test.IntSlice(numberInts)\n    output := \"\
    \"\n    for _, n := range numberInts {\n        if n == 0 {\n            return\
    \ numbers\n        }\n        output = fmt.Sprintf(\"%d \", n)\n    }\n    return\
    \ output + numbers[len(numbers)-1:]\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnpmmw7iz_test.go:14:20: undefined: strings

    /tmp/tmpnpmmw7iz_test.go:17:25: undefined: sort_numbers_test

    /tmp/tmpnpmmw7iz_test.go:19:18: undefined: sort_numbers_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    for i := len(numbers) - 1; i >= 0; i-- {\n        if numbers[i]\
    \ != \"nine\" {\n            numbers[i], numbers[i+1] = numbers[i+1], numbers[i]\n\
    \        }\n    }\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz2ik2jy0_test.go:14:13: no new variables on left side of :=

    /tmp/tmpz2ik2jy0_test.go:14:16: undefined: strings

    /tmp/tmpz2ik2jy0_test.go:16:26: invalid operation: numbers[i] != "nine" (mismatched
    types byte and untyped string)

    /tmp/tmpz2ik2jy0_test.go:17:13: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpz2ik2jy0_test.go:17:25: cannot assign to numbers[i + 1] (value of type
    byte)

    /tmp/tmpz2ik2jy0_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var input []string\n    for _,\
    \ s := range strings.Split(numbers, \" \") {\n        if s != \"zero\" && s !=\
    \ \"one\" && s != \"two\" && s != \"three\" && s != \"four\" && s != \"five\"\
    \ && s != \"six\" && s != \"seven\" && s != \"eight\" && s != \"nine\" {\n   \
    \         fmt.Printf(\"%s isn't a number\\n\", s)\n            fmt.Printf(\"%q\\\
    n\", numbers)\n            t.Fail()\n        }\n        input = append(input,\
    \ s)\n    }\n    sort.Strings(input)\n    var output strings.Builder\n    for\
    \ _, s := range input {\n        output.WriteString(s)\n    }\n    return output.String()\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hmd6jdc_test.go:15:23: undefined: strings

    /tmp/tmp2hmd6jdc_test.go:19:13: undefined: t

    /tmp/tmp2hmd6jdc_test.go:23:5: undefined: sort

    /tmp/tmp2hmd6jdc_test.go:24:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \"\\n\")\n    var numbers []int\n    numbers := strings.Split(numbers, \" \"\
    )\n    for i := 0; i < len(numbers); i++ {\n        if numbers[i] > 9 || numbers[i]\
    \ < 0 {\n            fmt.Println(numbers[i])\n            t.Fatalf(\"Invalid number\
    \ '%s', must be between zero and nine\", numbers[i])\n        }\n    }\n    for\
    \ i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] - 0\n    }\n\
    \    var ret strings.Builder\n    for i := 0; i < len(numbers); i++ {\n      \
    \  ret = ret.String() + \" \" + strconv.Itoa(numbers[i])\n    }\n    return ret.String()\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwduf316p_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmpwduf316p_test.go:14:16: undefined:\
    \ strings\n/tmp/tmpwduf316p_test.go:15:9: numbers redeclared in this block\n\t\
    /tmp/tmpwduf316p_test.go:13:19: other declaration of numbers\n/tmp/tmpwduf316p_test.go:16:13:\
    \ no new variables on left side of :=\n/tmp/tmpwduf316p_test.go:16:16: undefined:\
    \ strings\n/tmp/tmpwduf316p_test.go:20:13: undefined: t\n/tmp/tmpwduf316p_test.go:24:9:\
    \ cannot assign to numbers[i] (value of type byte)\n/tmp/tmpwduf316p_test.go:26:13:\
    \ undefined: strings\n/tmp/tmpwduf316p_test.go:28:36: undefined: strconv\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    parts := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(parts)\n    out := \"\"\n    for _, part := range parts\
    \ {\n        out = out + \" \" + part\n    }\n    return out\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1tisfieg_test.go:14:14: undefined: strings

    /tmp/tmp1tisfieg_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \"0\")\n    numbers := strings.Trim(numbers,\
    \ \"1\")\n    numbers := strings.Trim(numbers, \"2\")\n    numbers := strings.Trim(numbers,\
    \ \"3\")\n    numbers := strings.Trim(numbers, \"4\")\n    numbers := strings.Trim(numbers,\
    \ \"5\")\n    numbers := strings.Trim(numbers, \"6\")\n    numbers := strings.Trim(numbers,\
    \ \"7\")\n    numbers := strings.Trim(numbers, \"8\")\n    numbers := strings.Trim(numbers,\
    \ \"9\")\n    numbers := strings.Trim(numbers, \"0\")\n    numbers := strings.Trim(numbers,\
    \ \"1\")\n    numbers := strings.Trim(numbers, \"2\")\n    numbers := strings.Trim(numbers,\
    \ \"3\")\n    numbers := strings.Trim(numbers, \"4\")\n    numbers := strings.Trim(numbers,\
    \ \"5\")\n    numbers := strings.Trim(numbers, \"6\")\n    numbers := strings.Trim(numbers,\
    \ \"7\")\n    numbers := strings.Trim(numbers, \"8\")\n    numbers := strings.Trim(numbers,\
    \ \"9\")\n    numbers := strings.Trim(numbers, \"0\")\n    numbers := strings.Trim(numbers,\
    \ \"1\")\n    numbers := strings.Trim(numbers, \"2\")\n    numbers := strings.Trim(numbers,\
    \ \"3\")\n    numbers := strings.Trim(numbers, \"4\")\n    numbers := strings.Trim(numbers,\
    \ \"5\")\n    numbers := strings.Trim(numbers, \"6\")\n    numbers := strings.Trim(numbers,\
    \ \"7\")\n    numbers := strings.Trim(numbers, \"8\")\n    numbers := strings.Trim(numbers,\
    \ \"9\")\n    numbers := strings.Trim(numbers, \"0\")\n    numbers := strings.Trim(numbers,\
    \ \"1\")\n    numbers := strings.Trim(numbers, \"2\")\n    numbers := strings.Trim(numbers,\
    \ \"3\")\n    numbers := strings.Trim(numbers, \"4\")\n    numbers := strings.Trim(numbers,\
    \ \"5\")\n    numbers := strings.Trim(numbers, \"6\")\n    numbers := strings.Trim(numbers,\
    \ \"7\")\n    numbers := strings.Trim(numbers, \"8\")\n    numbers := strings.Trim(numbers,\
    \ \"9\")\n    numbers := strings.Trim(numbers, \"0\")\n    numbers := strings.Trim(numbers,\
    \ \"1\")\n    numbers := strings.Trim(numbers, \"2\")\n    numbers := strings.Trim(numbers,\
    \ \"3\")\n    numbers := strings.Trim(numbers, \"4\")\n    numbers := strings.Trim(numbers,\
    \ \"5\")\n    numbers := strings.Trim(numbers, \"6\")\n    numbers := strings.Trim(numbers,\
    \ \"7\")\n    numbers := \nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmz_2ulw__test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var sorted []string\n    var index\
    \ int\n    var current string\n    for _, i := range strings.Split(numbers, \"\
    \ \") {\n        if i == \"zero\" {\n            index = 0\n        } else if\
    \ i == \"one\" {\n            index = 1\n        } else if i == \"two\" {\n  \
    \          index = 2\n        } else if i == \"three\" {\n            index =\
    \ 3\n        } else if i == \"four\" {\n            index = 4\n        } else\
    \ if i == \"five\" {\n            index = 5\n        } else if i == \"six\" {\n\
    \            index = 6\n        } else if i == \"seven\" {\n            index\
    \ = 7\n        } else if i == \"eight\" {\n            index = 8\n        } else\
    \ if i == \"nine\" {\n            index = 9\n        } else {\n            index\
    \ = -1\n        }\n\n        if index >= 0 {\n            current = strings.Replace(i,\
    \ \"-\", \"\", 1)\n            if current != i {\n                if index < len(sorted)\
    \ {\n                    sorted = append(sorted, current)\n                } else\
    \ {\n                    sorted = append(sorted, i)\n                }\n     \
    \       }\n        }\n    }\n\n    for _, i := range sorted {\n        fmt.Print(i)\n\
    \    }\n    return \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgrtbpi8k_test.go:17:23: undefined: strings

    /tmp/tmpgrtbpi8k_test.go:43:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    result := \"\"\n\n    for _, s\
    \ := range strings.Split(numbers, \" \") {\n        if s == \"zero\" {\n     \
    \       result += \"0\"\n        } else if s == \"one\" {\n            result\
    \ += \"1\"\n        } else if s == \"two\" {\n            result += \"2\"\n  \
    \      } else if s == \"three\" {\n            result += \"3\"\n        } else\
    \ if s == \"four\" {\n            result += \"4\"\n        } else if s == \"five\"\
    \ {\n            result += \"5\"\n        } else if s == \"six\" {\n         \
    \   result += \"6\"\n        } else if s == \"seven\" {\n            result +=\
    \ \"7\"\n        } else if s == \"eight\" {\n            result += \"8\"\n   \
    \     } else if s == \"nine\" {\n            result += \"9\"\n        } else {\n\
    \            fmt.Printf(\"%s: invalid input\\n\", numbers)\n        }\n    }\n\
    \n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphwrtj3ss_test.go:16:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var (\n        numbersString =\
    \ \"\"\n        numbersLength = numbers.length\n        numbersNumbers = strings.Split(numbers,\
    \ \" \")\n        numbersNumbersLength = numbersNumbers.length\n        numbersNumbersNumbersLength\
    \ = 0\n        numbersNumbersNumbersLengthString = \"\"\n        numbersNumbersNumbersLengthNumbersString\
    \ = \"\"\n    )\n    // Loop to count the number of occurrences of the numbers\n\
    \    for _, n := range numbersNumbers {\n        numbersNumbersNumbersLength++\n\
    \    }\n    // Loop to loop through the numbers once for each number in numberNumbers\n\
    \    for _, n := range numbersNumbers {\n        for _, m := range numbersNumbers\
    \ {\n            numbersNumbersNumbersLength++\n        }\n        numbersNumbersNumbersLengthString\
    \ += \" \" + n\n    }\n\n    // Loop to count the number of occurrences of each\
    \ number in numberNumbers\n    for _, n := range numbersNumbers {\n        numbersNumbersNumbersLengthNumbersString\
    \ += \" \" + n\n    }\n\n    // Loop to append each number of numbersNumbers to\
    \ a space delimited string\n    for _, n := range numbersNumbers {\n        numbersString\
    \ += \" \" + n\n    }\n\n    // Loop to loop through the numbers once for each\
    \ number in numbers\n    for _, n := range numbersNumbers {\n        for _, m\
    \ := range numbersNumbers {\n            numbersString += \" \" + n\n        }\n\
    \    }\n\n    // Loop to append each number in numbersNumbers to numbersString\n\
    \    for _, n := range numbersNumbers {\n        numbersString += \" \" + n\n\
    \    }\n\n    // Loop to loop through the numbers once for each number in numbers\n\
    \    for _, n := range numbersNumbers {\n        for _, m := range numbersNumbers\
    \ {\n            numbersString += \" \" + n\n        }\n    }\n\n    // Loop to\
    \ append each number in numbersNumbers to numbersString\n    for _, n := range\
    \ numbersNumbers {\n        numbersString += \" \" + n\n    }\n\n    // Loop to\
    \ loop through the numbers once for each number in numbers\n    for _, n := range\
    \ numbersNumbers {\n        for _, m := range numbersNumbers {\n            numbersString\
    \ += \" \" + n\n        }\n    }\n    // Return the output\n    return numbersString\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzuq9gptz_test.go:16:33: numbers.length undefined (type string has no field
    or method length)

    /tmp/tmpzuq9gptz_test.go:17:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \"\\n\")\n\n    // Create a slice with all the numbers\n    numbers := strings.Split(numbers,\
    \ \" \")\n\n    // Sort the slice in descending order\n    sort.Strings(numbers)\n\
    \n    // Recon\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3lgjksm6_test.go:23:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Build sorted numbers from numbers\
    \ in input\n    var numbers []int\n    for _, number := range strings.Split(numbers,\
    \ \" \") {\n        if number == \"zero\" || number == \"one\" || number == \"\
    two\" || number == \"three\" || number == \"four\" || number == \"five\" || number\
    \ == \"six\" || number == \"seven\" || number == \"eight\" || number == \"nine\"\
    \ {\n            numbers = append(numbers, 0)\n        } else {\n            numbers\
    \ = append(numbers, int(number))\n        }\n    }\n\n    // Reverse array in\
    \ place (thanks SO user nneonneo!)\n    sort.Ints(numbers)\n    for i := 0; i\
    \ < len(numbers); i++ {\n        numbers[i] = numbers[len(numbers)-1-i]\n    }\n\
    \n    // Combine sorted numbers in output string\n    return strings.Join(numbers,\
    \ \" \")\n}\n`\n)\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprsiaaq7o_test.go:33:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    n := make([]string, len(numbers))\n\
    \    for _, v := range strings.Split(numbers, \" \") {\n        n[strings.Index(v,\
    \ \".\")] = v\n    }\n\n    n := sort_slice(n, 0, len(n))\n    return strings.Join(n,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0h7eg_9h_test.go:15:23: undefined: strings

    /tmp/tmp0h7eg_9h_test.go:16:11: undefined: strings

    /tmp/tmp0h7eg_9h_test.go:19:7: no new variables on left side of :=

    /tmp/tmp0h7eg_9h_test.go:19:10: undefined: sort_slice

    /tmp/tmp0h7eg_9h_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Replace(numbers, \"one\", \"1\", -1)\n    numbers\
    \ = strings.Replace(numbers, \"two\", \"2\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"three\", \"3\", -1)\n    numbers = strings.Replace(numbers, \"four\", \"4\"\
    , -1)\n    numbers = strings.Replace(numbers, \"five\", \"5\", -1)\n    numbers\
    \ = strings.Replace(numbers, \"six\", \"6\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"seven\", \"7\", -1)\n    numbers = strings.Replace(numbers, \"eight\", \"\
    8\", -1)\n    numbers = strings.Replace(numbers, \"nine\", \"9\", -1)\n    numbers\
    \ = strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr65x_3jw_test.go:14:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:15:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:16:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:17:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:18:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:19:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:20:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:21:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:22:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:23:15: undefined: strings

    /tmp/tmpr65x_3jw_test.go:23:15: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n\n    result := strings.Join(numbers, \"\
    \ \")\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb75b8bz9_test.go:14:13: no new variables on left side of :=

    /tmp/tmpb75b8bz9_test.go:14:16: undefined: strings

    /tmp/tmpb75b8bz9_test.go:15:5: undefined: sort

    /tmp/tmpb75b8bz9_test.go:17:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return strings.Split(numbers,\
    \ \" \")\n        .Sort()\n        .Join(\" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprn537zzr_test.go:15:9: expected statement, found ''.''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074470
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Printf(\"%#v\\n\", numbers)\n\
    \    // Split the string into an array of strings\n    words := strings.Split(numbers,\
    \ \" \")\n    fmt.Printf(\"%#v\\n\", words)\n    // Sort the array\n    sort.Strings(words)\n\
    \    fmt.Printf(\"%#v\\n\", words)\n    // Join the array into a single string\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuvppjmm4_test.go:16:14: undefined: strings

    /tmp/tmpuvppjmm4_test.go:19:5: undefined: sort

    /tmp/tmpuvppjmm4_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    sort.Ints(numbers)\n\
    \    numbers = strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0na7x912_test.go:14:15: undefined: strings

    /tmp/tmp0na7x912_test.go:15:13: no new variables on left side of :=

    /tmp/tmp0na7x912_test.go:15:16: undefined: strings

    /tmp/tmp0na7x912_test.go:16:5: undefined: sort

    /tmp/tmp0na7x912_test.go:17:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n\n    // Handle invalid\
    \ input -- must be numeric strings only.\n    numeric := make([]string, len(numbers))\n\
    \    for i, v := range numbers {\n        if v, err := strconv.Atoi(v); err !=\
    \ nil {\n            fmt.Println(\"sort_numbers: invalid number:\", numbers[i],\
    \ err)\n            fmt.Println(\"sort_numbers: string:\", numbers)\n        }\n\
    \        numeric[i] = v\n    }\n    sort.Strings(numeric)\n\n    return strings.Join(numeric,\
    \ \" \")\n}\n</code>\n<|/ a tags=sorting,go,string |>\n<| a dscore=4 |>\nThe Go\
    \ Programming Language Specification\nThe fmt package implements a variety of\
    \ printing operations on Go\n  values. These methods typically print the value\
    \ as a formatted string.\n  The fmt package uses the concept of Format String\
    \ Syntax (FSS) to\n  format values. \nFSS is a language feature for specifying\
    \ formatted output. FSS\n  supports the following format specifiers:\nThe verbs\
    \ supported by fmt are:\n<code>\nf - prints f as a floating point number (default\
    \ for %f)\nF - prints f as an integer with +ve sign and an optional + or - indicating\
    \ the absolute value (default for %d)\ng - prints f with fixed decimal places\
    \ (default for %g)\nG - prints f with fixed decimal places and trailing zeros\
    \ (default for %G)\nb - prints f as a rune instead of as a floating point number\
    \ (default for %b)\nB - prints f as a rune instead of as a floating point number\
    \ (default for %B)\nc - prints f as an integer or rune depending on its value\n\
    </code>\nFor example the following prints \u201Cabc\u201D in lowercase letters:\n\
    <code>\nfmt.Printf(\"%c%c%c%c%c%c%c\\n\", 65, 66, 67, 68, 69, 70, 71, 72)\n</code>\n\
    <|/ a tags=sorting,go,string |>\n<| a dscore=3 tags=sorting,go,string |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_j7xfw46_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Write code here\n    // return\
    \ \"one three five\"\n    numbers = strings.Trim(numbers, \"\\n\\r\")\n    numbers\
    \ = strings.Replace(numbers, \" \", \",\", -1)\n    numbers = strings.Split(numbers,\
    \ \",\")\n    numbers = numbers[:len(numbers)-1]\n    sort.Ints(numbers)\n   \
    \ numbers := strings.Join(numbers, \" \")\n    numbers = strings.Replace(numbers,\
    \ \",\", \" \", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj1qj_0ax_test.go:16:15: undefined: strings

    /tmp/tmpj1qj_0ax_test.go:17:15: undefined: strings

    /tmp/tmpj1qj_0ax_test.go:18:15: undefined: strings

    /tmp/tmpj1qj_0ax_test.go:20:5: undefined: sort

    /tmp/tmpj1qj_0ax_test.go:21:13: no new variables on left side of :=

    /tmp/tmpj1qj_0ax_test.go:21:16: undefined: strings

    /tmp/tmpj1qj_0ax_test.go:22:15: undefined: strings

    /tmp/tmpj1qj_0ax_test.go:23:15: undefined: strings

    /tmp/tmpj1qj_0ax_test.go:24:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result string = \"\"\n\n \
    \   var numbers []string\n    var found bool\n\n    if numbers == \"\" {\n   \
    \     return \"\"\n    }\n\n    for _, num := range strings.Split(numbers, \"\
    \ \") {\n        switch num {\n        case \"zero\":\n        case \"one\":\n\
    \        case \"two\":\n        case \"three\":\n        case \"four\":\n    \
    \    case \"five\":\n        case \"six\":\n        case \"seven\":\n        case\
    \ \"eight\":\n        case \"nine\":\n            found = true\n        }\n  \
    \  }\n\n    if found {\n        for _, num := range strings.Split(numbers, \"\
    \ \") {\n            if num == \"zero\" {\n                result = result + \"\
    0\"\n                continue\n            }\n            if num == \"one\" {\n\
    \                result = result + \"1\"\n                continue\n         \
    \   }\n            if num == \"two\" {\n                result = result + \"2\"\
    \n                continue\n            }\n            if num == \"three\" {\n\
    \                result = result + \"3\"\n                continue\n         \
    \   }\n            if num == \"four\" {\n                result = result + \"\
    4\"\n                continue\n            }\n            if num == \"five\" {\n\
    \                result = result + \"5\"\n                continue\n         \
    \   }\n            if num == \"six\" {\n                result = result + \"6\"\
    \n                continue\n            }\n            if num == \"seven\" {\n\
    \                result = result + \"7\"\n                continue\n         \
    \   }\n            if num == \"eight\" {\n                result = result + \"\
    8\"\n                continue\n            }\n            if num == \"nine\" {\n\
    \                result = result + \"9\"\n                continue\n         \
    \   }\n        }\n    } else {\n        result = numbers\n    }\n\n    return\
    \ result\n}\n</code>\n<|/ a |>\n<| c |>\nI wouldn't be surprised if the Go runtime\
    \ optimizes out the unnecessary `strings.Split` calls.  I wonder if that would\
    \ affect how this code would be written more clearly in C or Go?\n<|/ c |>\n<|\
    \ c |>\nGood point about Go optimizing out `strings.Split`. It would still be\
    \ nice to see how this could be done in C or Go.\n<|/ c |>\n<| c |>\nThanks Dave,\
    \ I appreciate the help.\n<|/ c |>\n<| c |>\nThanks Dave, I appreciate the help.\
    \ I've been working on this problem for 3 days straight and I still can't get\
    \ it to work. I will post what I've done so far.\n<|/ c |>\n<| c |>\nI've made\
    \ some changes and added a link to my code as well.\n<|/ c |>\n<| a dscore=2 |>\n\
    Here is my Go implementation for solving this problem in O(n) time.\n<code>\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbia8o8pg_test.go:88:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074471
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var number int\n    var words\
    \ []string\n\n    for _, word := range strings.Split(numbers, \" \") {\n     \
    \   number = atoi(word)\n        words = append(words, strconv.Itoa(number))\n\
    \    }\n\n    sort.Ints(words)\n    output := strings.Join(words, \" \")\n\n \
    \   return output\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17y4jfsg_test.go:17:26: undefined: strings

    /tmp/tmp17y4jfsg_test.go:18:18: undefined: atoi

    /tmp/tmp17y4jfsg_test.go:19:31: undefined: strconv

    /tmp/tmp17y4jfsg_test.go:22:5: undefined: sort

    /tmp/tmp17y4jfsg_test.go:23:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    var buffer bytes.Buffer\n    for _, number :=\
    \ range numbers {\n        if number == \"nine\" {\n            continue\n   \
    \     }\n        if number == \"zero\" {\n            buffer.WriteString(\"zero\"\
    )\n            continue\n        }\n        buffer.WriteString(\"one two three\
    \ four five six seven eight nine\")\n        buffer.WriteString(number)\n    }\n\
    \    return buffer.String()\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_l_wb8c9_test.go:14:13: no new variables on left side of :=

    /tmp/tmp_l_wb8c9_test.go:14:16: undefined: strings

    /tmp/tmp_l_wb8c9_test.go:15:13: numbers.Sort undefined (type string has no field
    or method Sort)

    /tmp/tmp_l_wb8c9_test.go:16:16: undefined: bytes

    /tmp/tmp_l_wb8c9_test.go:18:22: invalid operation: number == "nine" (mismatched
    types rune and untyped string)

    /tmp/tmp_l_wb8c9_test.go:21:22: invalid operation: number == "zero" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberList := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numberList)\n\n    return strings.Join(numberList,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4h23qqvq_test.go:14:19: undefined: strings

    /tmp/tmp4h23qqvq_test.go:15:5: undefined: sort

    /tmp/tmp4h23qqvq_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Write your code here.\n   \
    \ var (\n        i int\n        j int\n        l int\n        m int\n        t\
    \ int\n        n int\n    )\n    for ; i < len(numbers); i++ {\n        switch\
    \ numbers[i] {\n        case \"zero\":\n            m = 0\n            break;\n\
    \        case \"one\":\n            m = 1\n            break;\n        case \"\
    two\":\n            m = 2\n            break;\n        case \"three\":\n     \
    \       m = 3\n            break;\n        case \"four\":\n            m = 4\n\
    \            break;\n        case \"five\":\n            m = 5\n            break;\n\
    \        case \"six\":\n            m = 6\n            break;\n        case \"\
    seven\":\n            m = 7\n            break;\n        case \"eight\":\n   \
    \         m = 8\n            break;\n        case \"nine\":\n            m = 9\n\
    \            break;\n        default:\n            break;\n        }\n       \
    \ for ; j < len(numbers); j++ {\n            switch numbers[j] {\n           \
    \ case \"zero\":\n                t = 0\n                break;\n            case\
    \ \"one\":\n                t = 1\n                break;\n            case \"\
    two\":\n                t = 2\n                break;\n            case \"three\"\
    :\n                t = 3\n                break;\n            case \"four\":\n\
    \                t = 4\n                break;\n            case \"five\":\n \
    \               t = 5\n                break;\n            case \"six\":\n   \
    \             t = 6\n                break;\n            case \"seven\":\n   \
    \             t = 7\n                break;\n            case \"eight\":\n   \
    \             t = 8\n                break;\n            case \"nine\":\n    \
    \            t = 9\n                break;\n            default:\n           \
    \     break;\n            }\n            switch {\n            case m == t &&\
    \ i >= m:\n                l = i\n            default:\n                n = m\
    \ > t ? m : t\n                l = j\n            }\n            fmt.Println(l,\
    \ i, j)\n            switch {\n            case l > j:\n                break\n\
    \            default:\n                fmt.Println(n, m, t)\n            }\n \
    \       }\n    }\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxcadrbrp_test.go:97:27: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result string\n    var i int\n\
    \    for i := 0; i < len(numbers); i++ {\n        var j int\n        for j = i;\
    \ j < len(numbers); j++ {\n            if numbers[i] < numbers[j] {\n        \
    \        i = j\n            }\n        }\n        if numbers[i] != \" \" {\n \
    \           result = result + numbers[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8e7pxmfy_test.go:15:9: i declared but not used

    /tmp/tmp8e7pxmfy_test.go:23:26: invalid operation: numbers[i] != " " (mismatched
    types byte and untyped string)

    /tmp/tmp8e7pxmfy_test.go:24:22: invalid operation: result + numbers[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    words := strings.Split(numbers, \" \")\n    words := make([]string, 0)\n\
    \    for _, word := range words {\n        if word == \"zero\" || word == \"one\"\
    \ || word == \"two\" || word == \"three\" || word == \"four\" || word == \"five\"\
    \ || word == \"six\" || word == \"seven\" || word == \"eight\" || word == \"nine\"\
    \ {\n            words = append(words, word)\n        }\n    }\n    sort.Strings(words)\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4lziejs3_test.go:14:15: undefined: strings

    /tmp/tmp4lziejs3_test.go:15:14: undefined: strings

    /tmp/tmp4lziejs3_test.go:16:11: no new variables on left side of :=

    /tmp/tmp4lziejs3_test.go:22:5: undefined: sort

    /tmp/tmp4lziejs3_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    if len(numbers) == 0 {\n     \
    \   return \"\"\n    }\n\n    numberArr := strings.Split(numbers, \" \")\n   \
    \ sortedArr := make([]string, len(numberArr))\n\n    for i, number := range numberArr\
    \ {\n        number, err := strconv.Atoi(number)\n        if err != nil {\n  \
    \          return \"\"\n        }\n        if number < 0 || number > 9 {\n   \
    \         return \"\"\n        }\n        sortedArr[i] = strconv.Itoa(number)\n\
    \    }\n    sort.Strings(sortedArr)\n    return strings.Join(sortedArr, \" \"\
    )\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_bzld6c_test.go:18:18: undefined: strings

    /tmp/tmpy_bzld6c_test.go:22:24: undefined: strconv

    /tmp/tmpy_bzld6c_test.go:29:24: undefined: strconv

    /tmp/tmpy_bzld6c_test.go:31:5: undefined: sort

    /tmp/tmpy_bzld6c_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Your code here\n    fmt.Println(numbers)\n\
    \    // Write code here\n    number := strings.Split(numbers, \" \")\n    numbers\
    \ = \"\"\n    sort.Strings(number)\n    for _, v := range number {\n        fmt.Println(v)\n\
    \        numbers = numbers + \" \" + v\n    }\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpufw4c6my_test.go:17:15: undefined: strings

    /tmp/tmpufw4c6my_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Create an array of strings\n\
    \    arr := strings.Split(numbers, \" \")\n\n    // Add numbers to a map, keyed\
    \ by 'words'\n    // The key is the string, the value is the number it represents\n\
    \    numbers := map[string]int{}\n\n    for _, v := range arr {\n        numbers[v]\
    \ = numbers[v] + 1\n    }\n\n    // Create a list with the largest number\n  \
    \  // and sort by that number\n    largestNumber := numbers[arr[len(arr) - 1]]\n\
    \n    numberList := make([]int, 0, len(arr))\n    for _, v := range arr {\n  \
    \      numberList = append(numberList, numbers[v])\n    }\n\n    sort.Sort(sort.Reverse(sort.IntSlice(numberList)))\n\
    \n    // Re-build the string with the numbers sorted\n    return strings.Join(numberList,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6mjl2jyu_test.go:15:12: undefined: strings

    /tmp/tmp6mjl2jyu_test.go:19:13: no new variables on left side of :=

    /tmp/tmp6mjl2jyu_test.go:19:16: cannot use map[string]int{} (value of type map[string]int)
    as type string in assignment

    /tmp/tmp6mjl2jyu_test.go:22:9: cannot assign to numbers[v] (value of type byte)

    /tmp/tmp6mjl2jyu_test.go:27:5: largestNumber declared but not used

    /tmp/tmp6mjl2jyu_test.go:31:41: cannot use numbers[v] (value of type byte) as
    type int in argument to append

    /tmp/tmp6mjl2jyu_test.go:34:5: undefined: sort

    /tmp/tmp6mjl2jyu_test.go:37:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    words := strings.Split(numbers, \" \")\n\n    sort.Strings(words)\n\
    \n    return strings.Join(words, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwdcjz7b2_test.go:14:13: no new variables on left side of :=

    /tmp/tmpwdcjz7b2_test.go:14:16: undefined: strings

    /tmp/tmpwdcjz7b2_test.go:15:14: undefined: strings

    /tmp/tmpwdcjz7b2_test.go:17:5: undefined: sort

    /tmp/tmpwdcjz7b2_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result strings.Builder\n \
    \   var currentNumber *int\n    var currentSortOrder int\n\n    // Split the input\
    \ string into a slice of numbers\n    numSlice := strings.Fields(numbers)\n\n\
    \    // Convert each number from string to int\n    for _, v := range numSlice\
    \ {\n        currentNumber = nil\n        currentSortOrder = 0\n\n        // Parse\
    \ string representation of number into int\n        if i, err := strconv.Atoi(v);\
    \ err != nil {\n            // Parsing error, print error and return result\n\
    \            fmt.Println(err)\n            return result.String()\n        }\n\
    \n        // Determine current number sort order\n        currentSortOrder = currentNumber\n\
    \        if currentSortOrder == 0 {\n            // Zero sort order\n        \
    \    currentSortOrder = i\n        } else if currentSortOrder < i {\n        \
    \    // Number is less than the first\n            currentSortOrder = i\n    \
    \    } else if currentSortOrder > i {\n            // Number is greater than the\
    \ first\n            currentSortOrder = currentSortOrder + 1\n        }\n\n  \
    \      // Add number to the result\n        result.WriteString(fmt.Sprintf(\"\
    %d \", currentSortOrder))\n    }\n\n    // Return resulting string\n    return\
    \ result.String()\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpain2uyyu_test.go:14:16: undefined: strings

    /tmp/tmpain2uyyu_test.go:19:17: undefined: strings

    /tmp/tmpain2uyyu_test.go:27:22: undefined: strconv

    /tmp/tmpain2uyyu_test.go:34:28: cannot use currentNumber (variable of type *int)
    as type int in assignment

    /tmp/tmpain2uyyu_test.go:37:32: undefined: i

    /tmp/tmpain2uyyu_test.go:38:38: undefined: i

    /tmp/tmpain2uyyu_test.go:40:32: undefined: i

    /tmp/tmpain2uyyu_test.go:41:38: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074472
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Split the string into an array\
    \ of strings by space\n    numberArray := strings.Split(numbers, \" \")\n\n  \
    \  // Make an array containing the sorted numbers\n    sortedNumbers := []string{}\n\
    \    for _, number := range numberArray {\n        // If the number is in the\
    \ correct order, add it to the sorted numbers array\n        if number == \"zero\"\
    \ {\n            sortedNumbers = append(sortedNumbers, \"zero\")\n        } else\
    \ if number == \"one\" {\n            sortedNumbers = append(sortedNumbers, \"\
    one\")\n        } else if number == \"two\" {\n            sortedNumbers = append(sortedNumbers,\
    \ \"two\")\n        } else if number == \"three\" {\n            sortedNumbers\
    \ = append(sortedNumbers, \"three\")\n        } else if number == \"four\" {\n\
    \            sortedNumbers = append(sortedNumbers, \"four\")\n        } else if\
    \ number == \"five\" {\n            sortedNumbers = append(sortedNumbers, \"five\"\
    )\n        } else if number == \"six\" {\n            sortedNumbers = append(sortedNumbers,\
    \ \"six\")\n        } else if number == \"seven\" {\n            sortedNumbers\
    \ = append(sortedNumbers, \"seven\")\n        } else if number == \"eight\" {\n\
    \            sortedNumbers = append(sortedNumbers, \"eight\")\n        } else\
    \ if number == \"nine\" {\n            sortedNumbers = append(sortedNumbers, \"\
    nine\")\n        } else {\n            fmt.Println(\"Error sorting numbers.\"\
    )\n        }\n    }\n\n    // Join the sorted numbers array into a space-delimited\
    \ string\n    return strings.Join(sortedNumbers, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpny9issc7_test.go:15:20: undefined: strings

    /tmp/tmpny9issc7_test.go:47:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers []int\n    for _,\
    \ n := range strings.Fields(numbers) {\n        if n, ok := integerMap[strings.ToLower(n)];\
    \ !ok || n < 0 {\n            numbers = []int{}\n        } else {\n          \
    \  numbers = append(numbers, int(n))\n        }\n    }\n\n    sort.Ints(numbers)\n\
    \n    return strings.Join(strings.Fields(strings.ToLower(fmt.Sprintf(\"%v\", numbers))),\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphadnwpdp_test.go:14:9:\
    \ numbers redeclared in this block\n\t/tmp/tmphadnwpdp_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmphadnwpdp_test.go:15:23: undefined: strings\n/tmp/tmphadnwpdp_test.go:16:21:\
    \ undefined: integerMap\n/tmp/tmphadnwpdp_test.go:16:32: undefined: strings\n\
    /tmp/tmphadnwpdp_test.go:17:23: cannot use []int{} (value of type []int) as type\
    \ string in assignment\n/tmp/tmphadnwpdp_test.go:19:30: first argument to append\
    \ must be a slice; have numbers (variable of type string)\n/tmp/tmphadnwpdp_test.go:23:5:\
    \ undefined: sort\n/tmp/tmphadnwpdp_test.go:25:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var ret string\n    for _, n := range numbers {\n        if n ==\
    \ \"nine\" {\n            break\n        }\n        if n == \"zero\" {\n     \
    \       if ret != \"\" {\n                ret += \" \"\n            }\n      \
    \      continue\n        }\n        if ret != \"\" {\n            ret += \" \"\
    \n        }\n        ret += n\n    }\n    return ret\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxdzx7qc_test.go:14:13: no new variables on left side of :=

    /tmp/tmpbxdzx7qc_test.go:14:16: undefined: strings

    /tmp/tmpbxdzx7qc_test.go:17:17: invalid operation: n == "nine" (mismatched types
    rune and untyped string)

    /tmp/tmpbxdzx7qc_test.go:20:17: invalid operation: n == "zero" (mismatched types
    rune and untyped string)

    /tmp/tmpbxdzx7qc_test.go:29:9: invalid operation: ret += n (mismatched types string
    and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSpace(numbers)\n    numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = sort_numbers_test.sort_numbers(numbers)\n    sorted, _\
    \ := sort.Float64s(numbers)\n    numbers := make([]string, len(sorted))\n    for\
    \ i, _ := range sorted {\n        numbers[i] = fmt.Sprintf(\"%v\", sorted[i])\n\
    \    }\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnoaqdao_test.go:14:15: undefined: strings

    /tmp/tmplnoaqdao_test.go:15:15: undefined: strings

    /tmp/tmplnoaqdao_test.go:16:15: undefined: strings

    /tmp/tmplnoaqdao_test.go:17:15: undefined: sort_numbers_test

    /tmp/tmplnoaqdao_test.go:18:18: undefined: sort

    /tmp/tmplnoaqdao_test.go:19:13: no new variables on left side of :=

    /tmp/tmplnoaqdao_test.go:19:16: cannot use make([]string, len(sorted)) (value
    of type []string) as type string in assignment

    /tmp/tmplnoaqdao_test.go:21:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmplnoaqdao_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var sorted_numbers = \"\"\n  \
    \  for _, number_str := range strings.Fields(numbers) {\n        sorted_numbers\
    \ += number_str\n    }\n    sorted_numbers, _ = sort.Strings(strings.Fields(sorted_numbers))\n\
    \    return strings.Join(sorted_numbers, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgukzv5uw_test.go:15:32: undefined: strings

    /tmp/tmpgukzv5uw_test.go:18:25: undefined: sort

    /tmp/tmpgukzv5uw_test.go:18:38: undefined: strings

    /tmp/tmpgukzv5uw_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // your code goes here\n    numbers\
    \ := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n    sort.Ints(numbers)\n\
    \    numbers = strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjt1_zl9_test.go:15:13: no new variables on left side of :=

    /tmp/tmpfjt1_zl9_test.go:15:16: undefined: strings

    /tmp/tmpfjt1_zl9_test.go:16:5: undefined: sort

    /tmp/tmpfjt1_zl9_test.go:17:5: undefined: sort

    /tmp/tmpfjt1_zl9_test.go:18:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result string\n    var index\
    \ int\n    var length int\n\n    numbers = strings.TrimSpace(numbers)\n\n    //\
    \ Check that the input is a valid string\n    switch strings.ToLower(numbers)\
    \ {\n        case \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"\
    six\", \"seven\", \"eight\", \"nine\":\n        default:\n            return numbers\n\
    \    }\n\n    // Find out the length\n    length, index = split_number(numbers,\
    \ \" \")\n    index = strings.LastIndexAny(numbers, \" \")\n    numbers = numbers[index:]\n\
    \    length--\n\n    // Sort them\n    for index = 0; index < length; index++\
    \ {\n        result = fmt.Sprintf(`%s `, result)\n        if strings.Contains(numbers,\
    \ \" \") {\n            numbers = strings.Replace(numbers, \" \", `%s `, -1)\n\
    \        }\n        numbers = strings.Replace(numbers, \"0\", `%s `, -1)\n   \
    \     numbers = strings.Replace(numbers, \"1\", `%s `, -1)\n        numbers =\
    \ strings.Replace(numbers, \"2\", `%s `, -1)\n        numbers = strings.Replace(numbers,\
    \ \"3\", `%s `, -1)\n        numbers = strings.Replace(numbers, \"4\", `%s `,\
    \ -1)\n        numbers = strings.Replace(numbers, \"5\", `%s `, -1)\n        numbers\
    \ = strings.Replace(numbers, \"6\", `%s `, -1)\n        numbers = strings.Replace(numbers,\
    \ \"7\", `%s `, -1)\n        numbers = strings.Replace(numbers, \"8\", `%s `,\
    \ -1)\n        numbers = strings.Replace(numbers, \"9\", `%s `, -1)\n    }\n \
    \   if strings.Contains(numbers, \" \") {\n        result = fmt.Sprintf(`%s `,\
    \ result)\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsjvabhp_test.go:18:15: undefined: strings

    /tmp/tmpzsjvabhp_test.go:21:12: undefined: strings

    /tmp/tmpzsjvabhp_test.go:28:21: undefined: split_number

    /tmp/tmpzsjvabhp_test.go:29:13: undefined: strings

    /tmp/tmpzsjvabhp_test.go:36:12: undefined: strings

    /tmp/tmpzsjvabhp_test.go:37:23: undefined: strings

    /tmp/tmpzsjvabhp_test.go:39:19: undefined: strings

    /tmp/tmpzsjvabhp_test.go:40:19: undefined: strings

    /tmp/tmpzsjvabhp_test.go:41:19: undefined: strings

    /tmp/tmpzsjvabhp_test.go:42:19: undefined: strings

    /tmp/tmpzsjvabhp_test.go:42:19: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    split := strings.Split(numbers, \" \")\n    sorted := make([]string, 0)\n\
    \    for _, n := range split {\n        if n != \"zero\" && n != \"one\" && n\
    \ != \"two\" && n != \"three\" && n != \"four\" && n != \"five\" && n != \"six\"\
    \ && n != \"seven\" && n != \"eight\" && n != \"nine\" {\n            fmt.Printf(\"\
    invalid input: only 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', and 'nine' are allowed\\n\")\n            return\n        }\n    }\n\
    \    for _, n := range split {\n        if n != \"zero\" && n != \"one\" && n\
    \ != \"two\" && n != \"three\" && n != \"four\" && n != \"five\" && n != \"six\"\
    \ && n != \"seven\" && n != \"eight\" && n != \"nine\" {\n            fmt.Printf(\"\
    invalid input: only 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', and 'nine' are allowed\\n\")\n            return\n        }\n     \
    \   sorted = append(sorted, n)\n    }\n    sorted = sort.Strings(sorted)\n   \
    \ return strings.Join(sorted, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbovwgnft_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmpbovwgnft_test.go:14:16: undefined:\
    \ strings\n/tmp/tmpbovwgnft_test.go:15:14: undefined: strings\n/tmp/tmpbovwgnft_test.go:20:13:\
    \ not enough return values\n\thave ()\n\twant (string)\n/tmp/tmpbovwgnft_test.go:26:13:\
    \ not enough return values\n\thave ()\n\twant (string)\n/tmp/tmpbovwgnft_test.go:30:14:\
    \ undefined: sort\n/tmp/tmpbovwgnft_test.go:31:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var out string\n    numbers :=\
    \ strings.TrimSpace(numbers)\n    var numberArr []string\n    for _, str := range\
    \ strings.Split(numbers, \" \") {\n        if strings.TrimSpace(str) != \"\" {\n\
    \            numberArr = append(numberArr, strings.TrimSpace(str))\n        }\n\
    \    }\n    numberArr = numberArr.Sort()\n    numbers = strings.Join(numberArr,\
    \ \" \")\n    for _, str := range strings.Split(numbers, \" \") {\n        if\
    \ str == \"zero\" {\n            out = \"zero \" + out\n        }\n        if\
    \ str == \"one\" {\n            out = \"one \" + out\n        }\n        if str\
    \ == \"two\" {\n            out = \"two \" + out\n        }\n        if str ==\
    \ \"three\" {\n            out = \"three \" + out\n        }\n        if str ==\
    \ \"four\" {\n            out = \"four \" + out\n        }\n        if str ==\
    \ \"five\" {\n            out = \"five \" + out\n        }\n        if str ==\
    \ \"six\" {\n            out = \"six \" + out\n        }\n        if str == \"\
    seven\" {\n            out = \"seven \" + out\n        }\n        if str == \"\
    eight\" {\n            out = \"eight \" + out\n        }\n        if str == \"\
    nine\" {\n            out = \"nine \" + out\n        }\n    }\n    return out\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjj5l0ub_test.go:15:13: no new variables on left side of :=

    /tmp/tmpsjj5l0ub_test.go:15:16: undefined: strings

    /tmp/tmpsjj5l0ub_test.go:17:25: undefined: strings

    /tmp/tmpsjj5l0ub_test.go:18:12: undefined: strings

    /tmp/tmpsjj5l0ub_test.go:19:43: undefined: strings

    /tmp/tmpsjj5l0ub_test.go:22:27: numberArr.Sort undefined (type []string has no
    field or method Sort)

    /tmp/tmpsjj5l0ub_test.go:23:15: undefined: strings

    /tmp/tmpsjj5l0ub_test.go:24:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \n    // We will use this variable to keep track of the largest number we encounter.\n\
    \    var max_val int\n    numbers := strings.Fields(numbers)\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \n    // Go through the numbers array, adding them to our running total.\n   \
    \ // This loop will only run for the first number in the array.\n    for _, v\
    \ := range numbers {\n        if v == \"zero\" {\n            continue\n     \
    \   }\n\n        // If this number is the largest we've seen so far, we need to\
    \ subtract it from the total.\n        if v > max_val {\n            max_val =\
    \ v\n        }\n    }\n\n    // Build the output string.\n    output := \"\"\n\
    \    for _, v := range numbers {\n        if v == max_val {\n            output\
    \ += \" \" + max_val\n        } else {\n            output += \" \" + v\n    \
    \    }\n    }\n\n    return output\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppuf3v8i7_test.go:14:15: undefined: strings

    /tmp/tmppuf3v8i7_test.go:18:13: no new variables on left side of :=

    /tmp/tmppuf3v8i7_test.go:18:16: undefined: strings

    /tmp/tmppuf3v8i7_test.go:19:5: undefined: sort

    /tmp/tmppuf3v8i7_test.go:24:17: invalid operation: v == "zero" (mismatched types
    rune and untyped string)

    /tmp/tmppuf3v8i7_test.go:29:16: invalid operation: v > max_val (mismatched types
    rune and int)

    /tmp/tmppuf3v8i7_test.go:30:23: cannot use v (variable of type rune) as type int
    in assignment

    /tmp/tmppuf3v8i7_test.go:37:17: invalid operation: v == max_val (mismatched types
    rune and int)

    /tmp/tmppuf3v8i7_test.go:38:23: invalid operation: " " + max_val (mismatched types
    untyped string and int)

    /tmp/tmppuf3v8i7_test.go:40:23: invalid operation: " " + v (mismatched types untyped
    string and rune)

    /tmp/tmppuf3v8i7_test.go:40:23: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.ToLower(numbers)\n\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    var sorted []string\n\
    \    for _, n := range numbers {\n        n = strings.Trim(n, \" \")\n       \
    \ if n != \"\" {\n            sorted = append(sorted, n)\n        }\n    }\n \
    \   sort.Strings(sorted)\n    numbers = strings.Join(sorted, \" \")\n    return\
    \ numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprif6l6is_test.go:14:13: no new variables on left side of :=

    /tmp/tmprif6l6is_test.go:14:16: undefined: strings

    /tmp/tmprif6l6is_test.go:15:13: no new variables on left side of :=

    /tmp/tmprif6l6is_test.go:15:16: undefined: strings

    /tmp/tmprif6l6is_test.go:17:13: no new variables on left side of :=

    /tmp/tmprif6l6is_test.go:17:16: undefined: strings

    /tmp/tmprif6l6is_test.go:18:13: no new variables on left side of :=

    /tmp/tmprif6l6is_test.go:18:16: undefined: strings

    /tmp/tmprif6l6is_test.go:21:13: undefined: strings

    /tmp/tmprif6l6is_test.go:22:17: invalid operation: n != "" (mismatched types rune
    and untyped string)

    /tmp/tmprif6l6is_test.go:22:17: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Println(numbers)\n    numbers\
    \ = strings.TrimSpace(numbers)\n    var outputs []string\n    words := strings.Split(numbers,\
    \ \" \")\n    for _, word := range words {\n        number := strings.Split(word,\
    \ \" \")\n        var numberString = number[0]\n        if len(number) == 1 {\n\
    \            numberString = number[0]\n        } else {\n            numberString\
    \ = strings.Join(number[0:len(number)-1], \" \")\n        }\n        outputs =\
    \ append(outputs, numberString)\n    }\n    sort.Strings(outputs)\n    return\
    \ strings.Join(outputs, \" \")\n}\n</code>\n<|/ a dscore=1 tags=string,sorting,go\
    \ |>\n<| c |>\nThis is not what the OP asked for\n<|/ c |>\n<| a tags=string,sorting,go\
    \ dscore=1 |>\nYou can use a simple bubble sort for this\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n)\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp20k8zpar_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n\n    sorted_numbers :=\
    \ \"\"\n    sorted_numbers = strings.Join(strings.Sort(numbers), \" \")\n    return\
    \ sorted_numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv1i6525n_test.go:14:15: undefined: strings

    /tmp/tmpv1i6525n_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv1i6525n_test.go:15:16: undefined: strings

    /tmp/tmpv1i6525n_test.go:18:22: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    if len(numbers) == 0 {\n        return \"\"\n    }\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_strings(numbers, 0)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb11ynz_h_test.go:14:13: no new variables on left side of :=

    /tmp/tmpb11ynz_h_test.go:14:16: undefined: strings

    /tmp/tmpb11ynz_h_test.go:18:13: no new variables on left side of :=

    /tmp/tmpb11ynz_h_test.go:18:16: undefined: strings

    /tmp/tmpb11ynz_h_test.go:19:13: no new variables on left side of :=

    /tmp/tmpb11ynz_h_test.go:19:16: undefined: sort_strings

    /tmp/tmpb11ynz_h_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    var buffer []string\n\n    buffer := strings.Split(numbers, \" \")\n\n  \
    \  for i := 0; i < len(buffer); i++ {\n        if i == 0 {\n            buffer[i]\
    \ = fmt.Sprintf(\"%v\", buffer[i])\n        }\n\n        if buffer[i] != \"zero\"\
    \ && buffer[i] != \"one\" && buffer[i] != \"two\" && buffer[i] != \"three\" &&\n\
    \            buffer[i] != \"four\" && buffer[i] != \"five\" && buffer[i] != \"\
    six\" && buffer[i] != \"seven\" &&\n            buffer[i] != \"eight\" && buffer[i]\
    \ != \"nine\" {\n            buffer[i] = fmt.Sprintf(\"%v\", buffer[i])\n    \
    \    }\n\n        if buffer[i] == \"zero\" || buffer[i] == \"one\" || buffer[i]\
    \ == \"two\" || buffer[i] == \"three\" || buffer[i] == \"four\" || buffer[i] ==\
    \ \"five\" || buffer[i] == \"six\" || buffer[i] == \"seven\" || buffer[i] == \"\
    eight\" || buffer[i] == \"nine\" {\n            continue\n        }\n\n      \
    \  if buffer[i] != buffer[i-1] {\n            buffer[i] = fmt.Sprintf(\"%v %v\"\
    , buffer[i], buffer[i-1])\n        }\n    }\n\n    return strings.Join(buffer,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqco7c8dy_test.go:14:13: no new variables on left side of :=

    /tmp/tmpqco7c8dy_test.go:14:16: undefined: strings

    /tmp/tmpqco7c8dy_test.go:17:12: no new variables on left side of :=

    /tmp/tmpqco7c8dy_test.go:17:15: undefined: strings

    /tmp/tmpqco7c8dy_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    if len(numbers) == 0 {\n        return \"\"\n    }\n    numbers\
    \ := strings.Split(numbers, \" \")\n    sortedNumbers := []string{}\n    smallestNumber\
    \ := \"\"\n    largestNumber := \"\"\n    for _, number := range numbers {\n \
    \       if number == \"\" {\n            continue\n        }\n        number,\
    \ err := strconv.Atoi(number)\n        if err != nil {\n            continue\n\
    \        }\n        if number < 0 {\n            continue\n        }\n       \
    \ if smallestNumber == \"\" {\n            smallestNumber = number\n        }\n\
    \        if number > largestNumber {\n            largestNumber = number\n   \
    \     }\n    }\n    sortedNumbers = append(sortedNumbers, smallestNumber)\n  \
    \  sortedNumbers = append(sortedNumbers, largestNumber)\n    numbers := sortedNumbers\n\
    \    for _, number := range numbers {\n        if number == \"\" {\n         \
    \   continue\n        }\n        fmt.Printf(\"%v \", number)\n    }\n    return\
    \ \"\"\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph4k8g2ey_test.go:14:13: no new variables on left side of :=

    /tmp/tmph4k8g2ey_test.go:14:16: undefined: strings

    /tmp/tmph4k8g2ey_test.go:18:13: no new variables on left side of :=

    /tmp/tmph4k8g2ey_test.go:18:16: undefined: strings

    /tmp/tmph4k8g2ey_test.go:23:22: invalid operation: number == "" (mismatched types
    rune and untyped string)

    /tmp/tmph4k8g2ey_test.go:26:24: undefined: strconv

    /tmp/tmph4k8g2ey_test.go:42:13: no new variables on left side of :=

    /tmp/tmph4k8g2ey_test.go:42:16: cannot use sortedNumbers (variable of type []string)
    as type string in assignment

    /tmp/tmph4k8g2ey_test.go:44:22: invalid operation: number == "" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n\n    numbers := strings.Split(numbers, \" \")\n\n    sorted := make([]string,\
    \ 0)\n    for _, num := range numbers {\n        if !strings.HasPrefix(num, \"\
    -\") {\n            num = fmt.Sprintf(\"%v\", num)\n        }\n\n        if strings.HasPrefix(num,\
    \ \"-\") {\n            nums := strings.Split(num, \"-\")\n            sorted\
    \ = append(sorted, nums[0], nums[1])\n        } else {\n            sorted = append(sorted,\
    \ num)\n        }\n    }\n\n    return strings.Join(sorted, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnj2df7w3_test.go:14:13: no new variables on left side of :=

    /tmp/tmpnj2df7w3_test.go:14:16: undefined: strings

    /tmp/tmpnj2df7w3_test.go:16:13: no new variables on left side of :=

    /tmp/tmpnj2df7w3_test.go:16:16: undefined: strings

    /tmp/tmpnj2df7w3_test.go:20:13: undefined: strings

    /tmp/tmpnj2df7w3_test.go:21:19: cannot use fmt.Sprintf("%v", num) (value of type
    string) as type rune in assignment

    /tmp/tmpnj2df7w3_test.go:24:12: undefined: strings

    /tmp/tmpnj2df7w3_test.go:25:21: undefined: strings

    /tmp/tmpnj2df7w3_test.go:28:37: cannot use num (variable of type rune) as type
    string in argument to append

    /tmp/tmpnj2df7w3_test.go:32:12: undefined: strings

    /tmp/tmpnj2df7w3_test.go:32:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Initialize variables for the\
    \ loop\n    var minLength int = 0\n    var maxLength int = 0\n    var result string\
    \ = \"\"\n\n    // Loop through all the numbers in the string\n    for _, num\
    \ := range strings.Split(numbers, \" \") {\n        // Find the length of the\
    \ string\n        length := strings.Count(num, \" \")\n\n        // If length\
    \ is smaller than the previous, reset the current min and max to the current length\n\
    \        if length < minLength {\n            minLength = length\n        }\n\
    \        if length > maxLength {\n            maxLength = length\n        }\n\n\
    \        // Get the position of the first number larger than the current max and\
    \ add it onto the result string\n        fmt.Sscanf(num, \"%d\", &number)\n  \
    \      if number > maxLength {\n            result = result + num\n        }\n\
    \    }\n\n    // If the length of result is less than the previous minimum, add\
    \ it to the beginning of result\n    if result != \"\" {\n        result = \"\
    \ \" + result\n    }\n\n    // If the length of result is greater than the previous\
    \ maximum, add it to the end of result\n    if result != \"\" {\n        result\
    \ = result + \" \"\n    }\n\n    // Return the resulting string\n    return result\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps6n6xtdo_test.go:20:25: undefined: strings

    /tmp/tmps6n6xtdo_test.go:22:19: undefined: strings

    /tmp/tmps6n6xtdo_test.go:33:32: undefined: number

    /tmp/tmps6n6xtdo_test.go:34:12: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Println(\"sort_numbers function\
    \ entered\")\n    sort.Sort(sort.Reverse(sort.IntSlice(strings.Fields(numbers))))\n\
    \    return strings.Join(sort.Reverse(sort.IntSlice(strings.Fields(numbers))),\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvd8urhbr_test.go:15:5: undefined: sort

    /tmp/tmpvd8urhbr_test.go:15:42: undefined: strings

    /tmp/tmpvd8urhbr_test.go:16:12: undefined: strings

    /tmp/tmpvd8urhbr_test.go:16:25: undefined: sort

    /tmp/tmpvd8urhbr_test.go:16:52: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sortableSliceOfNumbers(numbers))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_xopdkw_test.go:14:13: no new variables on left side of :=

    /tmp/tmpw_xopdkw_test.go:14:16: undefined: strings

    /tmp/tmpw_xopdkw_test.go:15:5: undefined: sort

    /tmp/tmpw_xopdkw_test.go:15:15: undefined: sortableSliceOfNumbers

    /tmp/tmpw_xopdkw_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberList := strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Join(numberList, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSuffix(numbers, \"zero\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"one\")\n    numbers := strings.TrimSuffix(numbers, \"two\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"three\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"four\")\n    numbers := strings.TrimSuffix(numbers, \"five\")\n    numbers\
    \ := strings.TrimSuffix(numbers, \"six\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"seven\")\n    numbers := strings.TrimSuffix(numbers, \"eight\")\n    numbers\
    \ := strings.TrimSuffix(numbers, \"nine\")\n    numbers = strings.Replace(numbers,\
    \ \"zero \", \"zero \", -1)\n    numbers = strings.Replace(numbers, \"one \",\
    \ \"one \", -1)\n    numbers = strings.Replace(numbers, \"two \", \"two \", -1)\n\
    \    numbers = strings.Replace(numbers, \"three \", \"three \", -1)\n    numbers\
    \ = strings.Replace(numbers, \"four \", \"four \", -1)\n    numbers = strings.Replace(numbers,\
    \ \"five \", \"five \", -1)\n    numbers = strings.Replace(numbers, \"six \",\
    \ \"six \", -1)\n    numbers = strings.Replace(numbers, \"seven \", \"seven \"\
    , -1)\n    numbers = strings.Replace(numbers, \"eight \", \"eight \", -1)\n  \
    \  numbers = strings.Replace(numbers, \"nine \", \"nine \", -1)\n    numbers =\
    \ strings.Replace(numbers, \" zero \", \"zero \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" one \", \"one \", -1)\n    numbers = strings.Replace(numbers, \" two \",\
    \ \"two \", -1)\n    numbers = strings.Replace(numbers, \" three \", \"three \"\
    , -1)\n    numbers = strings.Replace(numbers, \" four \", \"four \", -1)\n   \
    \ numbers = strings.Replace(numbers, \" five \", \"five \", -1)\n    numbers =\
    \ strings.Replace(numbers, \" six \", \"six \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" seven \", \"seven \", -1)\n    numbers = strings.Replace(numbers, \" eight\
    \ \", \"eight \", -1)\n    numbers = strings.Replace(numbers, \" nine \", \"nine\
    \ \", -1)\n    numbers = strings.Replace(numbers, \" \", \" \", -1)\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmponcexmbl_test.go:50:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Use a slice to hold the numbers\n\
    \    numberList := make([]string, 0, 10)\n    // Go through the string and get\
    \ the numbers\n    for _, num := range strings.Split(numbers, \" \") {\n     \
    \   // If the number is not 'zero', add it to our slice\n        if num != \"\
    zero\" {\n            numberList = append(numberList, num)\n        }\n    }\n\
    \    // Sort the slice in reverse order\n    sort.Strings(numberList)\n    //\
    \ And turn it back into a string and return\n    return strings.Join(numberList,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp30kqw04u_test.go:17:25: undefined: strings

    /tmp/tmp30kqw04u_test.go:24:5: undefined: sort

    /tmp/tmp30kqw04u_test.go:26:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers_array := strings.Split(numbers,\
    \ \" \")\n    var numbers string\n    var i int\n\n    for i = 1; i < len(numbers_array);\
    \ i++ {\n        numbers = numbers + \" \" + numbers_array[i]\n    }\n\n    numbers\
    \ = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8y40jji3_test.go:14:22:\
    \ undefined: strings\n/tmp/tmp8y40jji3_test.go:15:9: numbers redeclared in this\
    \ block\n\t/tmp/tmp8y40jji3_test.go:13:19: other declaration of numbers\n/tmp/tmp8y40jji3_test.go:22:15:\
    \ undefined: strings\n/tmp/tmp8y40jji3_test.go:23:15: undefined: strings\n/tmp/tmp8y40jji3_test.go:24:15:\
    \ undefined: strings\n/tmp/tmp8y40jji3_test.go:25:15: undefined: strings\n/tmp/tmp8y40jji3_test.go:26:15:\
    \ undefined: strings\n/tmp/tmp8y40jji3_test.go:27:15: undefined: strings\n/tmp/tmp8y40jji3_test.go:28:15:\
    \ undefined: strings\n/tmp/tmp8y40jji3_test.go:29:15: undefined: strings\n/tmp/tmp8y40jji3_test.go:29:15:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    if len(numbers) == 0 {\n        return numbers\n    }\n    numbers\
    \ := strings.Split(numbers, \" \")\n    var res string = \"\"\n    var curr int\n\
    \    for _, num := range numbers {\n        if curr >= len(numbers) {\n      \
    \      break\n        }\n        curr = strings.Index(strings.Trim(numbers[curr],\
    \ \" \"), num)\n        if curr == -1 {\n            return numbers\n        }\n\
    \        curr = curr + 1\n        if curr < len(numbers) {\n            numbers[curr],\
    \ numbers[curr-1] = numbers[curr-1], numbers[curr]\n            res = strings.Join(numbers,\
    \ \" \")\n        }\n    }\n    return res\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu3fqvo29_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu3fqvo29_test.go:14:16: undefined: strings

    /tmp/tmpu3fqvo29_test.go:18:13: no new variables on left side of :=

    /tmp/tmpu3fqvo29_test.go:18:16: undefined: strings

    /tmp/tmpu3fqvo29_test.go:25:16: undefined: strings

    /tmp/tmpu3fqvo29_test.go:31:13: cannot assign to numbers[curr] (value of type
    byte)

    /tmp/tmpu3fqvo29_test.go:31:28: cannot assign to numbers[curr - 1] (value of type
    byte)

    /tmp/tmpu3fqvo29_test.go:32:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n\n    numberList := strings.Split(numbers, \" \")\n    numberList :=\
    \ append(numberList, \"zero\")\n\n    j := 0\n    for i := 1; i < len(numberList);\
    \ i++ {\n        if numberList[i] == \"nine\" {\n            numberList[j] = \"\
    nine\"\n            numberList[j+1] = \"zero\"\n            j++\n        }\n \
    \   }\n\n    numberList := strings.Join(numberList, \" \")\n    return numberList\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofhpttx__test.go:14:13: no new variables on left side of :=

    /tmp/tmpofhpttx__test.go:14:16: undefined: strings

    /tmp/tmpofhpttx__test.go:15:13: no new variables on left side of :=

    /tmp/tmpofhpttx__test.go:15:16: undefined: strings

    /tmp/tmpofhpttx__test.go:16:13: no new variables on left side of :=

    /tmp/tmpofhpttx__test.go:16:16: undefined: strings

    /tmp/tmpofhpttx__test.go:18:19: undefined: strings

    /tmp/tmpofhpttx__test.go:19:16: no new variables on left side of :=

    /tmp/tmpofhpttx__test.go:30:16: no new variables on left side of :=

    /tmp/tmpofhpttx__test.go:30:19: undefined: strings

    /tmp/tmpofhpttx__test.go:30:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Fields(numbers)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3iejvl6_test.go:14:13: no new variables on left side of :=

    /tmp/tmpp3iejvl6_test.go:14:16: undefined: strings

    /tmp/tmpp3iejvl6_test.go:15:5: undefined: sort

    /tmp/tmpp3iejvl6_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var list []string\n    for _, num := range numbers {\n        list\
    \ = append(list, num)\n    }\n    return strings.Join(sort_numbers_helper(list),\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp163ugev5_test.go:14:13: no new variables on left side of :=

    /tmp/tmp163ugev5_test.go:14:16: undefined: strings

    /tmp/tmp163ugev5_test.go:17:29: cannot use num (variable of type rune) as type
    string in argument to append

    /tmp/tmp163ugev5_test.go:19:12: undefined: strings

    /tmp/tmp163ugev5_test.go:19:25: undefined: sort_numbers_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers []string\n    for\
    \ _, number := range strings.Split(numbers, \" \") {\n        if number == \"\
    zero\" {\n            numbers = []string{\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}\n        } else\
    \ if number == \"one\" {\n            numbers = []string{\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    }\n        } else if number == \"two\" {\n            numbers = []string{\"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    , \"eleven\"}\n        } else if number == \"three\" {\n            numbers =\
    \ []string{\"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    , \"ten\", \"eleven\", \"twelve\"}\n        } else if number == \"four\" {\n \
    \           numbers = []string{\"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\"}\n        } else if\
    \ number == \"five\" {\n            numbers = []string{\"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    }\n        } else if number == \"six\" {\n            numbers = []string{\"six\"\
    , \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\"\
    , \"fourteen\", \"fifteen\"}\n        } else if number == \"seven\" {\n      \
    \      numbers = []string{\"seven\", \"eight\", \"nine\", \"ten\", \"eleven\"\
    , \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\"}\n        }\
    \ else if number == \"eight\" {\n            numbers = []string{\"eight\", \"\
    nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\"}\n        } else if number == \"nine\" {\n      \
    \      numbers = []string{\"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\"\
    , \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"}\n     \
    \   } else {\n            numbers = []string{number, number+string(9-len(number)),\
    \ number+string(9-len(number))+string(0-9-len(number)), number+string(9-len(number))+string(0-9-len(number))+string(0-9-len(number))}\n\
    \        }\n    }\n    sort.String\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpty1s5ypw_test.go:41:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074474
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    fmt.Println(\"sort_numbers called\"\
    )\n    numbers := strings.Trim(numbers, \" \")\n    var i int\n    numbers :=\
    \ strings.Split(numbers, \" \")\n    for i = len(numbers) - 1; i >= 0; i-- {\n\
    \        if sort_number(numbers[i]) > sort_number(numbers[i+1]) {\n          \
    \  numbers[i], numbers[i+1] = numbers[i+1], numbers[i]\n        }\n    }\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn8hzdjtk_test.go:15:13: no new variables on left side of :=

    /tmp/tmpn8hzdjtk_test.go:15:16: undefined: strings

    /tmp/tmpn8hzdjtk_test.go:17:13: no new variables on left side of :=

    /tmp/tmpn8hzdjtk_test.go:17:16: undefined: strings

    /tmp/tmpn8hzdjtk_test.go:19:12: undefined: sort_number

    /tmp/tmpn8hzdjtk_test.go:20:13: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpn8hzdjtk_test.go:20:25: cannot assign to numbers[i + 1] (value of type
    byte)

    /tmp/tmpn8hzdjtk_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers = strings.Split(numbers, \" \")\n\n    var i int\n    for _, number\
    \ := range numbers {\n        n, err := strconv.Atoi(number)\n        if err !=\
    \ nil {\n            fmt.Println(\"Invalid number %v\", number)\n            continue\n\
    \        }\n\n        if n >= 0 && n < 10 {\n            numbers[i] = string(n)\n\
    \            i++\n        }\n    }\n\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxssquun_test.go:14:13: no new variables on left side of :=

    /tmp/tmpaxssquun_test.go:14:16: undefined: strings

    /tmp/tmpaxssquun_test.go:15:15: undefined: strings

    /tmp/tmpaxssquun_test.go:19:19: undefined: strconv

    /tmp/tmpaxssquun_test.go:31:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Replace(numbers, \"_\", \" \", -1)\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var out []string\n    var index int\n    for index, number := range\
    \ numbers {\n        number, err := strconv.ParseInt(number, 10, 64)\n       \
    \ if err != nil {\n            continue\n        }\n        numbers[index], numbers[index]\
    \ = numbers[index], number\n        numbers[index], numbers[index] = numbers[index],\
    \ number\n        out = append(out, fmt.Sprintf(\"%v\", number))\n    }\n    out\
    \ = append(out, numbers...)\n    sort.Strings(out)\n    return strings.Join(out,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf47kynr2_test.go:14:15: undefined: strings

    /tmp/tmpf47kynr2_test.go:15:15: undefined: strings

    /tmp/tmpf47kynr2_test.go:16:13: no new variables on left side of :=

    /tmp/tmpf47kynr2_test.go:16:16: undefined: strings

    /tmp/tmpf47kynr2_test.go:20:24: undefined: strconv

    /tmp/tmpf47kynr2_test.go:24:9: cannot assign to numbers[index] (value of type
    byte)

    /tmp/tmpf47kynr2_test.go:25:9: cannot assign to numbers[index] (value of type
    byte)

    /tmp/tmpf47kynr2_test.go:28:23: cannot use numbers (variable of type string) as
    type []string in argument to append

    /tmp/tmpf47kynr2_test.go:29:5: undefined: sort

    /tmp/tmpf47kynr2_test.go:30:12: undefined: strings

    /tmp/tmpf47kynr2_test.go:30:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n\n    sorted, _ := make([]string,\
    \ 0, 10)\n    for _, num := range strings.Split(numbers, \" \") {\n        if\
    \ num == \"zero\" {\n            sorted = append(sorted, \"zero\")\n        }\
    \ else if num == \"one\" {\n            sorted = append(sorted, \"one\")\n   \
    \     } else if num == \"two\" {\n            sorted = append(sorted, \"two\"\
    )\n        } else if num == \"three\" {\n            sorted = append(sorted, \"\
    three\")\n        } else if num == \"four\" {\n            sorted = append(sorted,\
    \ \"four\")\n        } else if num == \"five\" {\n            sorted = append(sorted,\
    \ \"five\")\n        } else if num == \"six\" {\n            sorted = append(sorted,\
    \ \"six\")\n        } else if num == \"seven\" {\n            sorted = append(sorted,\
    \ \"seven\")\n        } else if num == \"eight\" {\n            sorted = append(sorted,\
    \ \"eight\")\n        } else if num == \"nine\" {\n            sorted = append(sorted,\
    \ \"nine\")\n        } else {\n            sorted = append(sorted, num)\n    \
    \    }\n    }\n\n    fmt.Println(sorted)\n\n    return strings.Join(sorted, \"\
    \ \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpanqtpc_w_test.go:14:15: undefined: strings

    /tmp/tmpanqtpc_w_test.go:15:15: undefined: strings

    /tmp/tmpanqtpc_w_test.go:17:18: assignment mismatch: 2 variables but make returns
    1 value

    /tmp/tmpanqtpc_w_test.go:18:25: undefined: strings

    /tmp/tmpanqtpc_w_test.go:46:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    var sorted []string\n    for _, num := range strings.Split(numbers,\
    \ \" \") {\n        if num == \"zero\" {\n            sorted = append(sorted,\
    \ \"0\")\n        }\n        if num == \"one\" {\n            sorted = append(sorted,\
    \ \"1\")\n        }\n        if num == \"two\" {\n            sorted = append(sorted,\
    \ \"2\")\n        }\n        if num == \"three\" {\n            sorted = append(sorted,\
    \ \"3\")\n        }\n        if num == \"four\" {\n            sorted = append(sorted,\
    \ \"4\")\n        }\n        if num == \"five\" {\n            sorted = append(sorted,\
    \ \"5\")\n        }\n        if num == \"six\" {\n            sorted = append(sorted,\
    \ \"6\")\n        }\n        if num == \"seven\" {\n            sorted = append(sorted,\
    \ \"7\")\n        }\n        if num == \"eight\" {\n            sorted = append(sorted,\
    \ \"8\")\n        }\n        if num == \"nine\" {\n            sorted = append(sorted,\
    \ \"9\")\n        }\n    }\n    sorted = append(sorted, \"zero\")\n    return\
    \ strings.Join(sorted, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0f8ih2ya_test.go:14:13: no new variables on left side of :=

    /tmp/tmp0f8ih2ya_test.go:14:16: undefined: strings

    /tmp/tmp0f8ih2ya_test.go:16:25: undefined: strings

    /tmp/tmp0f8ih2ya_test.go:49:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.ToLower(numbers)\n    numbers := strings.Split(numbers,\
    \ \" \")\n\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = strings.ToLower(numbers[i])\n    }\n\n    sort.Ints(numbers)\n\
    \n    words := []string{}\n    for _, number := range numbers {\n        words\
    \ = append(words, fmt.Sprintf(\"%v\", number))\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo3q13akc_test.go:14:13: no new variables on left side of :=

    /tmp/tmpo3q13akc_test.go:14:16: undefined: strings

    /tmp/tmpo3q13akc_test.go:15:13: no new variables on left side of :=

    /tmp/tmpo3q13akc_test.go:15:16: undefined: strings

    /tmp/tmpo3q13akc_test.go:16:13: no new variables on left side of :=

    /tmp/tmpo3q13akc_test.go:16:16: undefined: strings

    /tmp/tmpo3q13akc_test.go:18:13: no new variables on left side of :=

    /tmp/tmpo3q13akc_test.go:18:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpo3q13akc_test.go:20:22: undefined: strings

    /tmp/tmpo3q13akc_test.go:23:5: undefined: sort

    /tmp/tmpo3q13akc_test.go:23:5: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Fields(numbers)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3iejvl6_test.go:14:13: no new variables on left side of :=

    /tmp/tmpp3iejvl6_test.go:14:16: undefined: strings

    /tmp/tmpp3iejvl6_test.go:15:5: undefined: sort

    /tmp/tmpp3iejvl6_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers_array []string\n \
    \   numbers = strings.TrimSpace(numbers)\n    for _, num := range strings.Split(numbers,\
    \ \" \") {\n        if num != \"0\" {\n            numbers_array = append(numbers_array,\
    \ num)\n        }\n    }\n    numbers_array = sort_numbers_array(numbers_array)\n\
    \    return strings.Join(numbers_array, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_0zqjrh_test.go:15:15: undefined: strings

    /tmp/tmpu_0zqjrh_test.go:16:25: undefined: strings

    /tmp/tmpu_0zqjrh_test.go:21:21: undefined: sort_numbers_array

    /tmp/tmpu_0zqjrh_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberArray := strings.Fields(numbers)\n\
    \    sort.Strings(numberArray)\n    return strings.Join(numberArray, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gneu6ef_test.go:14:20: undefined: strings

    /tmp/tmp9gneu6ef_test.go:15:5: undefined: sort

    /tmp/tmp9gneu6ef_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers = sort_numbers(numbers)\n    numbers = strings.Join(numbers,\
    \ \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsidj4fss_test.go:14:13: no new variables on left side of :=

    /tmp/tmpsidj4fss_test.go:14:16: undefined: strings

    /tmp/tmpsidj4fss_test.go:16:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Build up a new string with\
    \ numbers sorted from smallest to largest\n    var result string = numbers\n \
    \   for i := 1; i < 10; i++ {\n        result += \" \" + i\n    }\n    for _,\
    \ value := range strings.Split(numbers, \" \") {\n        if value == '' {\n \
    \           continue\n        }\n        if value[0] == '-' {\n            value\
    \ = value[1:]\n        }\n        if value[len(value)-1] == '-' {\n          \
    \  value = value[:len(value)-1]\n        }\n        if value[0] == '+' {\n   \
    \         value = value[1:]\n        }\n        if value[len(value)-1] == '+'\
    \ {\n            value = value[:len(value)-1]\n        }\n        if value[0]\
    \ == '0' {\n            value = value[1:]\n        }\n        if value[len(value)-1]\
    \ == '0' {\n            value = value[:len(value)-1]\n        }\n        if value[0]\
    \ == '9' {\n            value = value[1:]\n        }\n        if value[len(value)-1]\
    \ == '9' {\n            value = value[:len(value)-1]\n        }\n        if value\
    \ == \" \" {\n            continue\n        }\n        if value == \"zero\" {\n\
    \            result = \"zero \" + result\n        }\n        if value == \"one\"\
    \ {\n            result = \"one \" + result\n        }\n        if value == \"\
    two\" {\n            result = \"two \" + result\n        }\n        if value ==\
    \ \"three\" {\n            result = \"three \" + result\n        }\n        if\
    \ value == \"four\" {\n            result = \"four \" + result\n        }\n  \
    \      if value == \"five\" {\n            result = \"five \" + result\n     \
    \   }\n        if value == \"six\" {\n            result = \"six \" + result\n\
    \        }\n        if value == \"seven\" {\n            result = \"seven \" +\
    \ result\n        }\n        if value == \"eight\" {\n            result = \"\
    eight \" + result\n        }\n        if value == \"nine\" {\n            result\
    \ = \"nine \" + result\n        }\n        if value == \"hundred\" {\n       \
    \     result = \"hundred \" + result\n        }\n        if value == \"thousand\"\
    \ {\n            result = \"thousand \" + result\n        }\n        if value\
    \ == \"ten\" {\n            result = \"ten \" + result\n        }\n        if\
    \ value == \"eleven\" {\n            result = \"eleven \" + result\n        }\n\
    \        if value == \"twelve\" {\n            result = \"twelve \" + result\n\
    \        }\n        if value == \"thirteen\" {\n            result = \"thirteen\
    \ \" + result\n        }\n        if value == \"fourteen\" {\n            result\
    \ = \"fourteen \" + result\n        }\n        if value == \"fifteen\" {\n   \
    \         result = \"fifteen \" + result\n        }\n        if value == \"sixteen\"\
    \ {\n            result = \"sixteen \" + result\n        }\n        if value \n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplznefs5i_test.go:20:21: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result strings.Builder\n \
    \   numberList := strings.Split(numbers, \" \")\n    for _, number := range numberList\
    \ {\n        if number != \"zero\" && number != \"one\" && number != \"two\" &&\
    \ number != \"three\" && number != \"four\" && number != \"five\" && number !=\
    \ \"six\" && number != \"seven\" && number != \"eight\" && number != \"nine\"\
    \ {\n            fmt.Fprintf(&result, \"Bad number \\\"%s\\\" received, number\
    \ must be 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ or 'nine'.\", number)\n            return result.String()\n        }\n    }\n\
    \    for _, number := range numberList {\n        if number == \"zero\" {\n  \
    \          result.Write([]byte(\"zero \"))\n        } else if number == \"one\"\
    \ {\n            result.Write([]byte(\"one \"))\n        } else if number == \"\
    two\" {\n            result.Write([]byte(\"two \"))\n        } else if number\
    \ == \"three\" {\n            result.Write([]byte(\"three \"))\n        } else\
    \ if number == \"four\" {\n            result.Write([]byte(\"four \"))\n     \
    \   } else if number == \"five\" {\n            result.Write([]byte(\"five \"\
    ))\n        } else if number == \"six\" {\n            result.Write([]byte(\"\
    six \"))\n        } else if number == \"seven\" {\n            result.Write([]byte(\"\
    seven \"))\n        } else if number == \"eight\" {\n            result.Write([]byte(\"\
    eight \"))\n        } else if number == \"nine\" {\n            result.Write([]byte(\"\
    nine \"))\n        } else {\n            fmt.Fprintf(&result, \"Bad number \\\"\
    %s\\\" received, number must be 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' or 'nine'.\", number)\n            return result.String()\n\
    \        }\n    }\n    return result.String()\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7t1scboc_test.go:14:16: undefined: strings

    /tmp/tmp7t1scboc_test.go:15:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    numbers = append([]string{\"zero\"},\
    \ numbers)\n    numbers = append(numbers, []string{\"nine\"}...)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplxe7yq9c_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmplxe7yq9c_test.go:14:16: undefined:\
    \ strings\n/tmp/tmplxe7yq9c_test.go:15:5: undefined: sort\n/tmp/tmplxe7yq9c_test.go:16:15:\
    \ cannot use append([]string{\u2026}, numbers) (value of type []string) as type\
    \ string in assignment\n/tmp/tmplxe7yq9c_test.go:17:22: first argument to append\
    \ must be a slice; have numbers (variable of type string)\n/tmp/tmplxe7yq9c_test.go:18:12:\
    \ undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    if len(numbers) == 0 {\n     \
    \   return numbers\n    }\n\n    numbers := strings.Split(numbers, \" \")\n  \
    \  result := \"\"\n    smallest := numbers[0]\n    largestNumber := numbers[len(numbers)-1]\n\
    \n    for _, number := range numbers {\n        number, err := strconv.Atoi(number)\n\
    \        if err != nil {\n            fmt.Println(\"Couldn't convert to\", number,\
    \ \"for\", numbers)\n        }\n\n        if number > largest {\n            largest\
    \ = number\n        }\n\n        if number < smallest {\n            smallest\
    \ = number\n        }\n    }\n\n    for _, number := range numbers {\n       \
    \ number = strconv.Itoa(number)\n        if number == smallest {\n           \
    \ result += \"one \"\n        } else {\n            result += \"three \"\n   \
    \     }\n    }\n\n    result += \"five\"\n    result += \"one \"\n\n    result\
    \ += \"three \"\n\n    result += \"four \"\n\n    result += \"six \"\n\n    result\
    \ += \"seven \"\n\n    result += \"eight \"\n\n    result += \"nine \"\n    result\
    \ += \"one \"\n\n    result += \"two \"\n    result += \"five \"\n\n    result\
    \ += \"zero \"\n\n    result += \"nine \"\n    result += \"six \"\n\n    result\
    \ += \"seven \"\n    result += \"eight \"\n    result += \"four \"\n\n    result\
    \ += \"three \"\n    result += \"six \"\n\n    result += \"five \"\n    result\
    \ += \"two \"\n\n    result += \"one \"\n\n    result += \"zero \"\n    result\
    \ += \"nine \"\n    result += \"four \"\n    result += \"three \"\n    result\
    \ += \"five \"\n    result += \"two \"\n    result += \"one \"\n\n    result +=\
    \ \"zero \"\n    result += \"nine \"\n    result += \"three \"\n    result +=\
    \ \"four \"\n    result += \"one \"\n    result += \"five \"\n    result += \"\
    two \"\n    result += \"six \"\n    result += \"seven \"\n    result += \"eight\
    \ \"\n\n    result += \"six \"\n    result += \"seven \"\n    result += \"eight\
    \ \"\n    result += \"four \"\n    result += \"three \"\n    result += \"five\
    \ \"\n    result += \"two \"\n    result += \"one \"\n\n    result += \"zero \"\
    \n    result += \"nine \"\n    result += \"three \"\n    result += \"four \"\n\
    \    result += \"one \"\n    result += \"five \"\n    result += \"two \"\n   \
    \ result += \"six \"\n    result \nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp21qbmngr_test.go:120:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimPrefix(numbers, \"zero \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \"one \")\n    numbers := strings.TrimPrefix(numbers, \"two \")\n    numbers\
    \ := strings.TrimPrefix(numbers, \"three \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \"four \")\n    numbers := strings.TrimPrefix(numbers, \"five \")\n    numbers\
    \ := strings.TrimPrefix(numbers, \"six \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \"seven \")\n    numbers := strings.TrimPrefix(numbers, \"eight \")\n    numbers\
    \ := strings.TrimPrefix(numbers, \"nine \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers = sort_numbers_internal(numbers)\n    numbers := strings.Join(numbers,\
    \ \" \")\n    fmt.Println(numbers)\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40gqj6_f_test.go:14:15: undefined: strings

    /tmp/tmp40gqj6_f_test.go:15:13: no new variables on left side of :=

    /tmp/tmp40gqj6_f_test.go:15:16: undefined: strings

    /tmp/tmp40gqj6_f_test.go:16:13: no new variables on left side of :=

    /tmp/tmp40gqj6_f_test.go:16:16: undefined: strings

    /tmp/tmp40gqj6_f_test.go:17:13: no new variables on left side of :=

    /tmp/tmp40gqj6_f_test.go:17:16: undefined: strings

    /tmp/tmp40gqj6_f_test.go:18:13: no new variables on left side of :=

    /tmp/tmp40gqj6_f_test.go:18:16: undefined: strings

    /tmp/tmp40gqj6_f_test.go:19:16: undefined: strings

    /tmp/tmp40gqj6_f_test.go:19:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var nums []string\n    switch\
    \ numbers {\n    case \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\":\n        nums = strings.Split(numbers,\
    \ \" \")\n        sort.Strings(nums)\n        return strings.Join(nums, \" \"\
    )\n    default:\n        return \"\"\n    }\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptyivdg5e_test.go:17:16: undefined: strings

    /tmp/tmptyivdg5e_test.go:18:9: undefined: sort

    /tmp/tmptyivdg5e_test.go:19:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    var result string\n\n    for _, number := range strings.Split(numbers,\
    \ \" \") {\n        if number == \"zero\" {\n            result = fmt.Sprintf(\"\
    %v\", int(0) * 10)\n        } else if number == \"one\" {\n            result\
    \ = fmt.Sprintf(\"%v\", int(1) * 10)\n        } else if number == \"two\" {\n\
    \            result = fmt.Sprintf(\"%v\", int(2) * 10)\n        } else if number\
    \ == \"three\" {\n            result = fmt.Sprintf(\"%v\", int(3) * 10)\n    \
    \    } else if number == \"four\" {\n            result = fmt.Sprintf(\"%v\",\
    \ int(4) * 10)\n        } else if number == \"five\" {\n            result = fmt.Sprintf(\"\
    %v\", int(5) * 10)\n        } else if number == \"six\" {\n            result\
    \ = fmt.Sprintf(\"%v\", int(6) * 10)\n        } else if number == \"seven\" {\n\
    \            result = fmt.Sprintf(\"%v\", int(7) * 10)\n        } else if number\
    \ == \"eight\" {\n            result = fmt.Sprintf(\"%v\", int(8) * 10)\n    \
    \    } else if number == \"nine\" {\n            result = fmt.Sprintf(\"%v\",\
    \ int(9) * 10)\n        }\n    }\n    return result\n}\n</code>\n<|/ a dscore=1\
    \ tags=algorithm,numbers,sorting,go |>\n<| c |>\nThanks, i tried this and got\
    \ some error so i found this https://stackoverflow.com/a/59603272/1248342 answer\
    \ which worked for me\n<|/ c |>\n<| a dscore=1 |>\nI realise this is an old question\
    \ but I found it while searching for a similar problem and didn't see any answers\
    \ online so here's my solution.\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"strings\"\n    \"sort\"\n)\n\nfunc TestSort_Numbers(t *testing.T) {\n\
    \  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbyj1ucmo_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers := strings.Fields(numbers)\n\n    sort.Strings(numbers)\n\
    \n    numbers := strings.Join(numbers, \" \")\n\n    return numbers\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprxu8lc9i_test.go:14:13: no new variables on left side of :=

    /tmp/tmprxu8lc9i_test.go:14:16: undefined: strings

    /tmp/tmprxu8lc9i_test.go:15:13: no new variables on left side of :=

    /tmp/tmprxu8lc9i_test.go:15:16: undefined: strings

    /tmp/tmprxu8lc9i_test.go:17:5: undefined: sort

    /tmp/tmprxu8lc9i_test.go:19:13: no new variables on left side of :=

    /tmp/tmprxu8lc9i_test.go:19:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Initialize a slice to hold\
    \ the numbers\n    numberArr := make([]string, 0, len(numbers))\n\n    for _,\
    \ number := range strings.Split(numbers, \" \") {\n        numberArr = append(numberArr,\
    \ number)\n    }\n    // Sort the numbers lexicographically\n    sort.Strings(numberArr)\n\
    \n    return strings.Join(numberArr, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptoc4khrz_test.go:17:28: undefined: strings

    /tmp/tmptoc4khrz_test.go:21:5: undefined: sort

    /tmp/tmptoc4khrz_test.go:23:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var numbers []string\n    for _, number := range numbers {\n   \
    \     if number == \"zero\" {\n            number = \"one\"\n        } else if\
    \ number == \"one\" {\n            number = \"two\"\n        } else if number\
    \ == \"two\" {\n            number = \"three\"\n        } else if number == \"\
    three\" {\n            number = \"four\"\n        } else if number == \"four\"\
    \ {\n            number = \"five\"\n        } else if number == \"five\" {\n \
    \           number = \"six\"\n        } else if number == \"six\" {\n        \
    \    number = \"seven\"\n        } else if number == \"seven\" {\n           \
    \ number = \"eight\"\n        } else if number == \"eight\" {\n            number\
    \ = \"nine\"\n        } else if number == \"nine\" {\n            number = \"\
    zero\"\n        }\n        numbers = append(numbers, number)\n    }\n    var sorted,\
    \ i int\n    for i < len(numbers) {\n        sorted, i = sortStrings(numbers[i:],\
    \ numbers[:i], false)\n    }\n    return strings.Join(numbers[:i], \" \")\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9b235h34_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmp9b235h34_test.go:14:16: undefined:\
    \ strings\n/tmp/tmp9b235h34_test.go:15:9: numbers redeclared in this block\n\t\
    /tmp/tmp9b235h34_test.go:13:19: other declaration of numbers\n/tmp/tmp9b235h34_test.go:17:22:\
    \ invalid operation: number == \"zero\" (mismatched types rune and untyped string)\n\
    /tmp/tmp9b235h34_test.go:18:22: cannot use \"one\" (untyped string constant) as\
    \ rune value in assignment\n/tmp/tmp9b235h34_test.go:19:29: invalid operation:\
    \ number == \"one\" (mismatched types rune and untyped string)\n/tmp/tmp9b235h34_test.go:20:22:\
    \ cannot use \"two\" (untyped string constant) as rune value in assignment\n/tmp/tmp9b235h34_test.go:21:29:\
    \ invalid operation: number == \"two\" (mismatched types rune and untyped string)\n\
    /tmp/tmp9b235h34_test.go:22:22: cannot use \"three\" (untyped string constant)\
    \ as rune value in assignment\n/tmp/tmp9b235h34_test.go:23:29: invalid operation:\
    \ number == \"three\" (mismatched types rune and untyped string)\n/tmp/tmp9b235h34_test.go:23:29:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers []int\n    switch\
    \ {\n    case strings.TrimSpace(numbers) == \"\":\n        return \"zero\"\n \
    \   case strings.Contains(numbers, \"one\"):\n        numbers = []int{1, 2}\n\
    \    case strings.Contains(numbers, \"two\"):\n        numbers = []int{2, 1}\n\
    \    case strings.Contains(numbers, \"three\"):\n        numbers = []int{3, 2}\n\
    \    case strings.Contains(numbers, \"four\"):\n        numbers = []int{4, 3}\n\
    \    case strings.Contains(numbers, \"five\"):\n        numbers = []int{5, 4}\n\
    \    case strings.Contains(numbers, \"six\"):\n        numbers = []int{6, 5}\n\
    \    case strings.Contains(numbers, \"seven\"):\n        numbers = []int{7, 6}\n\
    \    case strings.Contains(numbers, \"eight\"):\n        numbers = []int{8, 7}\n\
    \    case strings.Contains(numbers, \"nine\"):\n        numbers = []int{9, 8}\n\
    \    }\n    sort.Ints(numbers)\n    return strings.Join(numbers, \" \")\n}\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu0fzdhn6_test.go:14:9:\
    \ numbers redeclared in this block\n\t/tmp/tmpu0fzdhn6_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmpu0fzdhn6_test.go:16:10: undefined: strings\n/tmp/tmpu0fzdhn6_test.go:18:10:\
    \ undefined: strings\n/tmp/tmpu0fzdhn6_test.go:19:19: cannot use []int{\u2026\
    } (value of type []int) as type string in assignment\n/tmp/tmpu0fzdhn6_test.go:20:10:\
    \ undefined: strings\n/tmp/tmpu0fzdhn6_test.go:21:19: cannot use []int{\u2026\
    } (value of type []int) as type string in assignment\n/tmp/tmpu0fzdhn6_test.go:22:10:\
    \ undefined: strings\n/tmp/tmpu0fzdhn6_test.go:23:19: cannot use []int{\u2026\
    } (value of type []int) as type string in assignment\n/tmp/tmpu0fzdhn6_test.go:24:10:\
    \ undefined: strings\n/tmp/tmpu0fzdhn6_test.go:25:19: cannot use []int{\u2026\
    } (value of type []int) as type string in assignment\n/tmp/tmpu0fzdhn6_test.go:25:19:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.ToLower(numbers)\n    var numbers []string\n\
    \    numbers := strings.Split(numbers, \" \")\n    var temp string\n    var i\
    \ int\n    for i = 0; i <= len(numbers); i++ {\n        numbers[i] = numbers[i]\
    \ + \"0\"\n    }\n    for i = 0; i <= len(numbers); i++ {\n        numbers[i]\
    \ = strings.Replace(numbers[i], \"0\", \"9\", -1)\n    }\n    for i = 0; i <=\
    \ len(numbers); i++ {\n        if temp, temp = temp, temp + numbers[i]; temp !=\
    \ temp {\n            break\n        }\n    }\n    return strings.Join(numbers[:i],\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt47u0qke_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmpt47u0qke_test.go:14:16: undefined:\
    \ strings\n/tmp/tmpt47u0qke_test.go:15:13: no new variables on left side of :=\n\
    /tmp/tmpt47u0qke_test.go:15:16: undefined: strings\n/tmp/tmpt47u0qke_test.go:16:9:\
    \ numbers redeclared in this block\n\t/tmp/tmpt47u0qke_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmpt47u0qke_test.go:17:13: no new variables on left side of\
    \ :=\n/tmp/tmpt47u0qke_test.go:17:16: undefined: strings\n/tmp/tmpt47u0qke_test.go:21:22:\
    \ invalid operation: numbers[i] + \"0\" (mismatched types byte and untyped string)\n\
    /tmp/tmpt47u0qke_test.go:24:22: undefined: strings\n/tmp/tmpt47u0qke_test.go:27:31:\
    \ invalid operation: temp + numbers[i] (mismatched types string and byte)\n/tmp/tmpt47u0qke_test.go:27:31:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var out string\n    var nums []int\n\
    \    numbers = strings.Replace(numbers, \" \", \"\", -1)\n    nums = strings.Split(numbers,\
    \ \" \")\n    for _, num := range nums {\n        if num >= 1 && num <= 9 {\n\
    \            out += \" \" + fmt.Sprint(num)\n        }\n    }\n    fmt.Println(out)\n\
    \    return out\n}\n</code>\n<|/ a |>\n<| c |>\nI appreciate the answer, but this\
    \ doesn't work for the test case in the question because your `sort_numbers` function\
    \ doesn't sort from smallest to largest.\n<|/ c |>\n<| a dscore=2 |>\nHere's my\
    \ solution:\n<code>\npackage sort_numbers_test\n\nimport (\n    \"fmt\"\n    \"\
    strings\"\n)\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8rsvjket_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074476
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    switch len(numbers) {\n    case 0:\n        return \"zero\"\n  \
    \  case 1:\n        return numbers[0]\n    case 2:\n        return numbers[0]\
    \ + \" \" + numbers[1]\n    default:\n        return numbers[0] + \" \" + sort_numbers(strings.Join(numbers[2:],\
    \ \" \"))\n    }\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83kl4hpe_test.go:14:13: no new variables on left side of :=

    /tmp/tmp83kl4hpe_test.go:14:16: undefined: strings

    /tmp/tmp83kl4hpe_test.go:19:16: cannot use numbers[0] (value of type byte) as
    type string in return statement

    /tmp/tmp83kl4hpe_test.go:21:16: invalid operation: numbers[0] + " " (mismatched
    types byte and untyped string)

    /tmp/tmp83kl4hpe_test.go:23:16: invalid operation: numbers[0] + " " (mismatched
    types byte and untyped string)

    /tmp/tmp83kl4hpe_test.go:23:48: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    var sorted_numbers []string\n    var i int\n    for i = 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] == \"zero\" {\n            sorted_numbers = append(sorted_numbers,\
    \ \"zero\")\n        } else if numbers[i] == \"one\" {\n            sorted_numbers\
    \ = append(sorted_numbers, \"one\")\n        } else if numbers[i] == \"two\" {\n\
    \            sorted_numbers = append(sorted_numbers, \"two\")\n        } else\
    \ if numbers[i] == \"three\" {\n            sorted_numbers = append(sorted_numbers,\
    \ \"three\")\n        } else if numbers[i] == \"four\" {\n            sorted_numbers\
    \ = append(sorted_numbers, \"four\")\n        } else if numbers[i] == \"five\"\
    \ {\n            sorted_numbers = append(sorted_numbers, \"five\")\n        }\
    \ else if numbers[i] == \"six\" {\n            sorted_numbers = append(sorted_numbers,\
    \ \"six\")\n        } else if numbers[i] == \"seven\" {\n            sorted_numbers\
    \ = append(sorted_numbers, \"seven\")\n        } else if numbers[i] == \"eight\"\
    \ {\n            sorted_numbers = append(sorted_numbers, \"eight\")\n        }\
    \ else if numbers[i] == \"nine\" {\n            sorted_numbers = append(sorted_numbers,\
    \ \"nine\")\n        } else {\n            fmt.Println(\"Invalid choice\", numbers[i])\n\
    \        }\n    }\n    return strings.Join(sorted_numbers, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0jb6_gmh_test.go:14:13: no new variables on left side of :=

    /tmp/tmp0jb6_gmh_test.go:14:16: undefined: strings

    /tmp/tmp0jb6_gmh_test.go:18:26: invalid operation: numbers[i] == "zero" (mismatched
    types byte and untyped string)

    /tmp/tmp0jb6_gmh_test.go:20:33: invalid operation: numbers[i] == "one" (mismatched
    types byte and untyped string)

    /tmp/tmp0jb6_gmh_test.go:22:33: invalid operation: numbers[i] == "two" (mismatched
    types byte and untyped string)

    /tmp/tmp0jb6_gmh_test.go:24:33: invalid operation: numbers[i] == "three" (mismatched
    types byte and untyped string)

    /tmp/tmp0jb6_gmh_test.go:26:33: invalid operation: numbers[i] == "four" (mismatched
    types byte and untyped string)

    /tmp/tmp0jb6_gmh_test.go:28:33: invalid operation: numbers[i] == "five" (mismatched
    types byte and untyped string)

    /tmp/tmp0jb6_gmh_test.go:30:33: invalid operation: numbers[i] == "six" (mismatched
    types byte and untyped string)

    /tmp/tmp0jb6_gmh_test.go:32:33: invalid operation: numbers[i] == "seven" (mismatched
    types byte and untyped string)

    /tmp/tmp0jb6_gmh_test.go:32:33: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \n    // Find min and max numbers\n    var min, max int\n    for _, number :=\
    \ range strings.Split(numbers, \" \") {\n        number := strings.TrimSpace(number)\n\
    \        if number, err := strconv.Atoi(number); err == nil {\n            if\
    \ number < min {\n                min = number\n            }\n            if\
    \ number > max {\n                max = number\n            }\n        }\n   \
    \ }\n\n    // Sort numbers\n    result := \"\"\n    for _, number := range strings.Split(numbers,\
    \ \" \") {\n        number := strings.TrimSpace(number)\n        number = strings.TrimRight(strings.ToLower(number))\n\
    \        if number, err := strconv.Atoi(number); err == nil {\n            if\
    \ number >= min && number <= max {\n                result += \" \" + number\n\
    \            }\n        }\n    }\n\n    return result\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8pettbbq_test.go:14:15: undefined: strings

    /tmp/tmp8pettbbq_test.go:18:28: undefined: strings

    /tmp/tmp8pettbbq_test.go:19:19: undefined: strings

    /tmp/tmp8pettbbq_test.go:20:27: undefined: strconv

    /tmp/tmp8pettbbq_test.go:32:28: undefined: strings

    /tmp/tmp8pettbbq_test.go:33:19: undefined: strings

    /tmp/tmp8pettbbq_test.go:34:18: undefined: strings

    /tmp/tmp8pettbbq_test.go:35:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Replace(numbers, \" \", \"_\", -1)\n    numbers\
    \ = strings.Replace(numbers, \"_\", \" \", -1)\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers = append([]string{}, numbers...)\n\n    result := \"\"\n\
    \    for _, n := range numbers {\n        if n != \"\" {\n            if n > result\
    \ {\n                result = n\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzb56e9hk_test.go:14:15: undefined: strings

    /tmp/tmpzb56e9hk_test.go:15:15: undefined: strings

    /tmp/tmpzb56e9hk_test.go:16:15: undefined: strings

    /tmp/tmpzb56e9hk_test.go:17:13: no new variables on left side of :=

    /tmp/tmpzb56e9hk_test.go:17:16: undefined: strings

    /tmp/tmpzb56e9hk_test.go:18:15: cannot use append([]string{}, numbers...) (value
    of type []string) as type string in assignment

    /tmp/tmpzb56e9hk_test.go:18:34: cannot use numbers (variable of type string) as
    type []string in argument to append

    /tmp/tmpzb56e9hk_test.go:22:17: invalid operation: n != "" (mismatched types rune
    and untyped string)

    /tmp/tmpzb56e9hk_test.go:23:20: invalid operation: n > result (mismatched types
    rune and string)

    /tmp/tmpzb56e9hk_test.go:24:26: cannot use n (variable of type rune) as type string
    in assignment

    /tmp/tmpzb56e9hk_test.go:24:26: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var result string\n\n    // We\
    \ need to count how many numbers there are so that\n    // we can use that to\
    \ index into the numbers array below.\n    var nums int\n\n    for _, n := range\
    \ strings.Split(numbers, \" \") {\n        // If we have a number, make sure it's\
    \ in the right range\n        if !validNumber(n) {\n            fmt.Println(\"\
    invalid number encountered:\", n)\n            continue\n        }\n\n       \
    \ // Add the number to the current string and count how many were found\n    \
    \    result = result + n\n        nums++\n    }\n\n    // Sort the numbers found\n\
    \    numbers, err := sort.Strings(numbers)\n    if err != nil {\n        fmt.Println(\"\
    sorting failed\", err)\n    }\n\n    // Replace the numbers with the sorted string\n\
    \    for i := 0; i < nums; i++ {\n        result = strings.Replace(result, numbers[i],\
    \ numbers[nums-i-1], 1)\n    }\n\n    return result\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09kz7hwz_test.go:20:23: undefined: strings

    /tmp/tmp09kz7hwz_test.go:22:13: undefined: validNumber

    /tmp/tmp09kz7hwz_test.go:33:21: undefined: sort

    /tmp/tmp09kz7hwz_test.go:40:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers []int\n    numbers\
    \ = strings.Split(numbers, \" \")\n    sort.SliceStable(numbers, func(i, j int)\
    \ bool {\n        return numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp36rly73_test.go:14:9:\
    \ numbers redeclared in this block\n\t/tmp/tmpp36rly73_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmpp36rly73_test.go:15:15: undefined: strings\n/tmp/tmpp36rly73_test.go:16:5:\
    \ undefined: sort\n/tmp/tmpp36rly73_test.go:19:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var output string\n    numbers\
    \ := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers, \" \\\
    n\")\n    numbers := strings.Trim(numbers, \" \")\n    for _, num := range strings.Split(numbers,\
    \ \" \") {\n        if num == \"zero\" {\n            output = \"zero\"\n    \
    \    } else if num == \"one\" {\n            output = \"one\"\n        } else\
    \ if num == \"two\" {\n            output = \"two\"\n        } else if num ==\
    \ \"three\" {\n            output = \"three\"\n        } else if num == \"four\"\
    \ {\n            output = \"four\"\n        } else if num == \"five\" {\n    \
    \        output = \"five\"\n        } else if num == \"six\" {\n            output\
    \ = \"six\"\n        } else if num == \"seven\" {\n            output = \"seven\"\
    \n        } else if num == \"eight\" {\n            output = \"eight\"\n     \
    \   } else if num == \"nine\" {\n            output = \"nine\"\n        } else\
    \ if num == \"ten\" {\n            output = \"ten\"\n        } else if num ==\
    \ \"eleven\" {\n            output = \"eleven\"\n        } else if num == \"twelve\"\
    \ {\n            output = \"twelve\"\n        } else if num == \"thirteen\" {\n\
    \            output = \"thirteen\"\n        } else if num == \"fourteen\" {\n\
    \            output = \"fourteen\"\n        } else if num == \"fifteen\" {\n \
    \           output = \"fifteen\"\n        } else if num == \"sixteen\" {\n   \
    \         output = \"sixteen\"\n        } else if num == \"seventeen\" {\n   \
    \         output = \"seventeen\"\n        } else if num == \"eighteen\" {\n  \
    \          output = \"eighteen\"\n        } else if num == \"nineteen\" {\n  \
    \          output = \"nineteen\"\n        } else if num == \"twenty\" {\n    \
    \        output = \"twenty\"\n        } else if num == \"thirty\" {\n        \
    \    output = \"thirty\"\n        } else if num == \"forty\" {\n            output\
    \ = \"forty\"\n        } else if num == \"fifty\" {\n            output = \"fifty\"\
    \n        } else if num == \"sixty\" {\n            output = \"sixty\"\n     \
    \   } else if num == \"seventy\" {\n            output = \"seventy\"\n       \
    \ } else if num == \"eighty\" {\n            output = \"eighty\"\n        } else\
    \ if num == \"ninety\" {\n            output = \"ninety\"\n        } else {\n\
    \            output = num\n        }\n    }\n    return output\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqp8ud6x_test.go:15:13: no new variables on left side of :=

    /tmp/tmppqp8ud6x_test.go:15:16: undefined: strings

    /tmp/tmppqp8ud6x_test.go:16:13: no new variables on left side of :=

    /tmp/tmppqp8ud6x_test.go:16:16: undefined: strings

    /tmp/tmppqp8ud6x_test.go:17:13: no new variables on left side of :=

    /tmp/tmppqp8ud6x_test.go:17:16: undefined: strings

    /tmp/tmppqp8ud6x_test.go:18:25: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := numbers[:len(numbers)-1]\n    var out string\n    for\
    \ _, number := range numbers {\n        if number != \"zero\" {\n            out\
    \ = out + \" \" + number\n        }\n    }\n    fmt.Println(out)\n    return out\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s1lst16_test.go:14:13: no new variables on left side of :=

    /tmp/tmp5s1lst16_test.go:14:16: undefined: strings

    /tmp/tmp5s1lst16_test.go:15:13: no new variables on left side of :=

    /tmp/tmp5s1lst16_test.go:18:22: invalid operation: number != "zero" (mismatched
    types rune and untyped string)

    /tmp/tmp5s1lst16_test.go:19:19: invalid operation: out + " " + number (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    list := strings.Split(numbers, \" \")\n    sort.Strings(list)\n    out :=\
    \ strings.Join(list, \" \")\n    return out\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc0ly_aze_test.go:14:15: undefined: strings

    /tmp/tmpc0ly_aze_test.go:15:13: undefined: strings

    /tmp/tmpc0ly_aze_test.go:16:5: undefined: sort

    /tmp/tmpc0ly_aze_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Sort(numbers)\n    result := \"\"\n    for _, number := range\
    \ numbers {\n        result = fmt.Sprintf(\"%s %s\", result, number)\n    }\n\
    \    return result\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqi3k47qk_test.go:14:13: no new variables on left side of :=

    /tmp/tmpqi3k47qk_test.go:14:16: undefined: strings

    /tmp/tmpqi3k47qk_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    n := make([]string, 0)\n    for\
    \ _, v := range strings.Split(numbers, \" \") {\n        if v == \"zero\" {\n\
    \            n = append(n, \"zero\")\n        } else if v == \"one\" {\n     \
    \       n = append(n, \"one\")\n        } else if v == \"two\" {\n           \
    \ n = append(n, \"two\")\n        } else if v == \"three\" {\n            n =\
    \ append(n, \"three\")\n        } else if v == \"four\" {\n            n = append(n,\
    \ \"four\")\n        } else if v == \"five\" {\n            n = append(n, \"five\"\
    )\n        } else if v == \"six\" {\n            n = append(n, \"six\")\n    \
    \    } else if v == \"seven\" {\n            n = append(n, \"seven\")\n      \
    \  } else if v == \"eight\" {\n            n = append(n, \"eight\")\n        }\
    \ else if v == \"nine\" {\n            n = append(n, \"nine\")\n        }\n  \
    \  }\n    sort.Strings(n)\n    out := strings.Join(n, \" \")\n    return out\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfkr4xc5f_test.go:15:23: undefined: strings

    /tmp/tmpfkr4xc5f_test.go:38:5: undefined: sort

    /tmp/tmpfkr4xc5f_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    fmt.Printf(\"numbers: %s\\n\", numbers)\n    nums := strings.Split(numbers,\
    \ \" \")\n\n    var n string\n    for i := 0; i < len(nums); i++ {\n        if\
    \ nums[i] == \"nine\" {\n            n = nums[i+1:]\n            break\n     \
    \   }\n    }\n\n    for i := 0; i < len(nums); i++ {\n        if nums[i] == \"\
    nine\" {\n            continue // ignore nines\n        }\n        nums[i+1] =\
    \ nums[i]\n    }\n\n    nums = append(nums, n)\n    sort.Strings(nums)\n    return\
    \ strings.Join(nums, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzkim1apm_test.go:14:15: undefined: strings

    /tmp/tmpzkim1apm_test.go:16:13: undefined: strings

    /tmp/tmpzkim1apm_test.go:34:5: undefined: sort

    /tmp/tmpzkim1apm_test.go:35:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numbers []string\n\n    numbers\
    \ = strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0pcklcb_test.go:14:9:\
    \ numbers redeclared in this block\n\t/tmp/tmpm0pcklcb_test.go:13:19: other declaration\
    \ of numbers\n/tmp/tmpm0pcklcb_test.go:16:15: undefined: strings\n/tmp/tmpm0pcklcb_test.go:17:5:\
    \ undefined: sort\n/tmp/tmpm0pcklcb_test.go:19:12: undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    arr := strings.Fields(numbers)\n\
    \    sort.Strings(arr)\n    return strings.Join(arr, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfg4a803__test.go:14:12: undefined: strings

    /tmp/tmpfg4a803__test.go:15:5: undefined: sort

    /tmp/tmpfg4a803__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var out strings.Builder\n\n  \
    \  numbers.Split(\" \", func(s string, num int) {\n        if num < 10 {\n   \
    \         fmt.Fprintf(&out, \"%s \", s)\n        }\n    })\n    fmt.Fprintf(&out,\
    \ \"%s\", \"one\")\n\n    return out\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhzse3qv_test.go:14:13: undefined: strings

    /tmp/tmpmhzse3qv_test.go:16:13: numbers.Split undefined (type string has no field
    or method Split)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1) // Remove spaces\n    numbers := strings.Split(numbers, \"\"\
    ) // Split string into words\n    numbers := sort_numbers_test.SortNumbers(numbers)\
    \ // Return sorted list\n    fmt.Printf(\"sort_numbers(\\\"%s\\\") -> \\\"%s\\\
    \"\\n\", numbers, strings.Join(numbers, \" \"))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5q7xrmft_test.go:14:15: undefined: strings

    /tmp/tmp5q7xrmft_test.go:15:13: no new variables on left side of :=

    /tmp/tmp5q7xrmft_test.go:15:16: undefined: strings

    /tmp/tmp5q7xrmft_test.go:16:13: no new variables on left side of :=

    /tmp/tmp5q7xrmft_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp5q7xrmft_test.go:17:61: undefined: strings

    /tmp/tmp5q7xrmft_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var ret string\n    for _, val\
    \ := range strings.Fields(numbers) {\n        if val != \"zero\" && val != \"\
    one\" && val != \"two\" && val != \"three\" && val != \"four\" && val != \"five\"\
    \ && val != \"six\" && val != \"seven\" && val != \"eight\" && val != \"nine\"\
    \ {\n            fmt.Fprintln(os.Stderr, \"sort_numbers: Invalid input: not a\
    \ number\", val)\n            continue\n        }\n        if val == \"zero\"\
    \ {\n            ret += \" zero\"\n        } else if val == \"one\" {\n      \
    \      ret += \" one\"\n        } else if val == \"two\" {\n            ret +=\
    \ \" two\"\n        } else if val == \"three\" {\n            ret += \" three\"\
    \n        } else if val == \"four\" {\n            ret += \" four\"\n        }\
    \ else if val == \"five\" {\n            ret += \" five\"\n        } else if val\
    \ == \"six\" {\n            ret += \" six\"\n        } else if val == \"seven\"\
    \ {\n            ret += \" seven\"\n        } else if val == \"eight\" {\n   \
    \         ret += \" eight\"\n        } else if val == \"nine\" {\n           \
    \ ret += \" nine\"\n        } else {\n            fmt.Fprintln(os.Stderr, \"sort_numbers:\
    \ Invalid input: not a number\", val)\n        }\n    }\n    return ret\n}\n\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnqcf2g8d_test.go:15:25: undefined: strings

    /tmp/tmpnqcf2g8d_test.go:17:26: undefined: os

    /tmp/tmpnqcf2g8d_test.go:41:26: undefined: os

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    // Declare a variable to hold\
    \ the output\n    var output string\n\n    // Declare a variable to hold an iterator\
    \ position\n    var pos int\n\n    // Iterate over the string space delimited\
    \ by spaces and append to the output variable\n    for pos, number := range strings.Split(numbers,\
    \ \" \") {\n        // If the current number is less than the position\n     \
    \   if number < numbers[pos] {\n            // Add one to the position\n     \
    \       pos = pos + 1\n        // If the current number is greater than the position\n\
    \        } else if number > numbers[pos] {\n            // Add one to the position\n\
    \            pos = pos + 1\n            // If the position is equal to the length\
    \ of the string\n        } else if pos == len(numbers) {\n            // Add one\
    \ to the position\n            pos = pos + 1\n        }\n        // Append the\
    \ number to the output string\n        output = output + number\n    }\n    //\
    \ Return the output string\n    return output\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2wothpn_test.go:18:9: pos declared but not used

    /tmp/tmpk2wothpn_test.go:21:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n\n    var numberStr string\n\
    \n    for _, number := range numbers {\n        if number != \"zero\" && number\
    \ != \"one\" && number != \"two\" && number != \"three\" && number != \"four\"\
    \ &&\n            number != \"five\" && number != \"six\" && number != \"seven\"\
    \ && number != \"eight\" && number != \"nine\" {\n            fmt.Printf(\"Invalid\
    \ choice: %s\\n\", number)\n        }\n\n        numberStr += \" \" + number\n\
    \    }\n\n    numberStr := strings.Replace(numberStr, \" \", \"%20\", -1)\n  \
    \  return fmt.Sprintf(\"%s?sort_by=sort_numbers\", numberStr)\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz2wqbn__test.go:14:15: undefined: strings

    /tmp/tmphz2wqbn__test.go:15:13: no new variables on left side of :=

    /tmp/tmphz2wqbn__test.go:15:16: undefined: strings

    /tmp/tmphz2wqbn__test.go:20:22: invalid operation: number != "zero" (mismatched
    types rune and untyped string)

    /tmp/tmphz2wqbn__test.go:20:42: invalid operation: number != "one" (mismatched
    types rune and untyped string)

    /tmp/tmphz2wqbn__test.go:20:61: invalid operation: number != "two" (mismatched
    types rune and untyped string)

    /tmp/tmphz2wqbn__test.go:20:80: invalid operation: number != "three" (mismatched
    types rune and untyped string)

    /tmp/tmphz2wqbn__test.go:20:101: invalid operation: number != "four" (mismatched
    types rune and untyped string)

    /tmp/tmphz2wqbn__test.go:21:23: invalid operation: number != "five" (mismatched
    types rune and untyped string)

    /tmp/tmphz2wqbn__test.go:21:43: invalid operation: number != "six" (mismatched
    types rune and untyped string)

    /tmp/tmphz2wqbn__test.go:21:43: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    var buffer bytes.Buffer\n  \
    \  for _, number := range strings.Split(numbers, \" \") {\n        if number ==\
    \ \"zero\" {\n            buffer.WriteString(\"0\")\n        } else if number\
    \ == \"one\" {\n            buffer.WriteString(\"1\")\n        } else if number\
    \ == \"two\" {\n            buffer.WriteString(\"2\")\n        } else if number\
    \ == \"three\" {\n            buffer.WriteString(\"3\")\n        } else if number\
    \ == \"four\" {\n            buffer.WriteString(\"4\")\n        } else if number\
    \ == \"five\" {\n            buffer.WriteString(\"5\")\n        } else if number\
    \ == \"six\" {\n            buffer.WriteString(\"6\")\n        } else if number\
    \ == \"seven\" {\n            buffer.WriteString(\"7\")\n        } else if number\
    \ == \"eight\" {\n            buffer.WriteString(\"8\")\n        } else if number\
    \ == \"nine\" {\n            buffer.WriteString(\"9\")\n        } else {\n   \
    \         fmt.Println(\"Unknown number: \" + number)\n        }\n    }\n\n   \
    \ numbers := buffer.String()\n\n    for _, number := range strings.Split(numbers,\
    \ \" \") {\n        numbers := strings.Replace(number, \"zero\", \"0\", -1)\n\
    \        numbers := strings.Replace(number, \"one\", \"1\", -1)\n        numbers\
    \ := strings.Replace(number, \"two\", \"2\", -1)\n        numbers := strings.Replace(number,\
    \ \"three\", \"3\", -1)\n        numbers := strings.Replace(number, \"four\",\
    \ \"4\", -1)\n        numbers := strings.Replace(number, \"five\", \"5\", -1)\n\
    \        numbers := strings.Replace(number, \"six\", \"6\", -1)\n        numbers\
    \ := strings.Replace(number, \"seven\", \"7\", -1)\n        numbers := strings.Replace(number,\
    \ \"eight\", \"8\", -1)\n        numbers := strings.Replace(number, \"nine\",\
    \ \"9\", -1)\n    }\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3jdsv_4c_test.go:14:13: no new variables on left side of :=

    /tmp/tmp3jdsv_4c_test.go:14:16: undefined: strings

    /tmp/tmp3jdsv_4c_test.go:15:13: no new variables on left side of :=

    /tmp/tmp3jdsv_4c_test.go:15:16: undefined: strings

    /tmp/tmp3jdsv_4c_test.go:16:16: undefined: bytes

    /tmp/tmp3jdsv_4c_test.go:17:28: undefined: strings

    /tmp/tmp3jdsv_4c_test.go:43:13: no new variables on left side of :=

    /tmp/tmp3jdsv_4c_test.go:45:28: undefined: strings

    /tmp/tmp3jdsv_4c_test.go:46:20: undefined: strings

    /tmp/tmp3jdsv_4c_test.go:47:20: undefined: strings

    /tmp/tmp3jdsv_4c_test.go:47:20: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sortStrings(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphnuam973_test.go:14:13: no new variables on left side of :=

    /tmp/tmphnuam973_test.go:14:16: undefined: strings

    /tmp/tmphnuam973_test.go:15:13: no new variables on left side of :=

    /tmp/tmphnuam973_test.go:15:16: undefined: strings

    /tmp/tmphnuam973_test.go:16:13: no new variables on left side of :=

    /tmp/tmphnuam973_test.go:16:16: undefined: strings

    /tmp/tmphnuam973_test.go:17:13: no new variables on left side of :=

    /tmp/tmphnuam973_test.go:17:16: undefined: sortStrings

    /tmp/tmphnuam973_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var numberList = strings.Split(numbers,\
    \ \" \")\n\n    var output strings.Builder\n    for index, number := range numberList\
    \ {\n        output += fmt.Sprintf(\"%d \", number)\n        if index != len(numberList)-1\
    \ {\n            output += \"| \"\n        }\n    }\n    return output.String()\n\
    }\n</code>\n<|/ a |>\n<| a tags=sorting,go |>\nHere is my go solution:\n<code>\n\
    package main\n\nimport (\n    \"strings\"\n    \"github.com/haya14busa/rewrite/rules/sort_numbers\"\
    \n)\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx2q9wc_b_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := numbers[1:]\n\
    \    numbers := append(numbers, numbers[0])\n    var sorted = make([]string, 0)\n\
    \    for _, num := range numbers {\n        if num != \"zero\" {\n           \
    \ sorted = append(sorted, num)\n        }\n    }\n    for j := 0; j < len(sorted);\
    \ j++ {\n        for i := j + 1; i < len(sorted); i++ {\n            if sorted[i]\
    \ > sorted[j] {\n                t := sorted[j]\n                sorted[j] = sorted[i]\n\
    \                sorted[i] = t\n            }\n        }\n    }\n    fmt.Printf(\"\
    %q\\n\", sorted.String())\n    return strings.Join(sorted, \" \")\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nTo sort a list with strings:\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi2_uich8_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    var result strings.Builder\n    var lastNum string\n    for _, num\
    \ := range strings.Split(numbers, \" \") {\n        num, _ = strings.ToLower(num)\n\
    \        if num == \"zero\" {\n            result.WriteString(\"zero\")\n    \
    \    } else {\n            if num > lastNum {\n                result.WriteString(lastNum)\n\
    \            }\n            result.WriteString(num)\n        }\n        lastNum\
    \ = num\n    }\n    return result.String()\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4l62j2px_test.go:14:15: undefined: strings

    /tmp/tmp4l62j2px_test.go:15:16: undefined: strings

    /tmp/tmp4l62j2px_test.go:17:25: undefined: strings

    /tmp/tmp4l62j2px_test.go:18:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    words := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, 0, len(words))\n    for _, word := range\
    \ words {\n        if word == \"zero\" || word == \"one\" || word == \"two\" ||\
    \ word == \"three\" || word == \"four\" || word == \"five\" || word == \"six\"\
    \ || word == \"seven\" || word == \"eight\" || word == \"nine\" {\n          \
    \  numbers = append(numbers, word)\n        }\n    }\n    return strings.Join(sort_numbers_sorted(numbers),\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16_skwor_test.go:14:14: undefined: strings

    /tmp/tmp16_skwor_test.go:15:13: no new variables on left side of :=

    /tmp/tmp16_skwor_test.go:15:16: cannot use make([]string, 0, len(words)) (value
    of type []string) as type string in assignment

    /tmp/tmp16_skwor_test.go:18:30: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmp16_skwor_test.go:21:12: undefined: strings

    /tmp/tmp16_skwor_test.go:21:25: undefined: sort_numbers_sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    if numbers == \"\" {\n        return numbers\n    }\n\n    numbers\
    \ = strings.Split(numbers, \" \")\n    var result strings.Builder\n\n    for _,\
    \ num := range numbers {\n        switch num {\n        case \"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    :\n            continue\n        default:\n            numbers = strings.Split(num,\
    \ \" \")\n            sort.Strings(numbers)\n            result = append(result,\
    \ strings.Join(numbers, \" \"))\n        }\n    }\n    return result.String()\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=go |>\nThis works. \n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1przh0xz_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers = append(numbers, \"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n    numbers =\
    \ append(numbers, []string{\"zero\", \"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\"}...)\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3hkumott_test.go:14:13: no new variables on left side of :=

    /tmp/tmp3hkumott_test.go:14:16: undefined: strings

    /tmp/tmp3hkumott_test.go:15:22: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmp3hkumott_test.go:16:22: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmp3hkumott_test.go:17:5: undefined: sort

    /tmp/tmp3hkumott_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var output string\n    numberArray\
    \ := strings.Split(numbers, \" \")\n    numberArray = append(numberArray, \"zero\"\
    )\n    numberArray = append(numberArray, \"one\")\n    numberArray = append(numberArray,\
    \ \"two\")\n    numberArray = append(numberArray, \"three\")\n    numberArray\
    \ = append(numberArray, \"four\")\n    numberArray = append(numberArray, \"five\"\
    )\n    numberArray = append(numberArray, \"six\")\n    numberArray = append(numberArray,\
    \ \"seven\")\n    numberArray = append(numberArray, \"eight\")\n    numberArray\
    \ = append(numberArray, \"nine\")\n    for index := 0; index < len(numberArray);\
    \ index++ {\n        smallestNum := numberArray[index]\n        if index <= len(numberArray)-1\
    \ {\n            smallestNum = numberArray[index+1]\n        }\n        output\
    \ += fmt.Sprintf(\"%v \", smallestNum)\n    }\n    return output\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_xq20f6_test.go:15:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numberArray := strings.Split(numbers,\
    \ \" \")\n    for i := 0; i < len(numberArray); i++ {\n        for j := 0; j <\
    \ i; j++ {\n            numberArray[j], numberArray[i] = numberArray[i], numberArray[j]\n\
    \        }\n    }\n    return strings.Join(numberArray, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8pk4rqfc_test.go:14:20: undefined: strings

    /tmp/tmp8pk4rqfc_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Fields(numbers)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3iejvl6_test.go:14:13: no new variables on left side of :=

    /tmp/tmpp3iejvl6_test.go:14:16: undefined: strings

    /tmp/tmpp3iejvl6_test.go:15:5: undefined: sort

    /tmp/tmpp3iejvl6_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074468
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Numbers (0.00s)\n    --- FAIL: TestSort_Numbers/test_num__3\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero four five seven eight\
    \ nine', got 'five zero four seven nine eight'\n    --- FAIL: TestSort_Numbers/test_num__4\
    \ (0.00s)\n        tmpl4k252pq_test.go:34: expected 'zero one two three four five\
    \ six', got 'six five four three two one zero'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    nums := []string{}\n    for _,\
    \ num := range strings.Split(numbers, \" \") {\n        nums = append(nums, num)\n\
    \    }\n    return strings.Join(sort_numbers_test.sort_numbers(nums), \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0j02pvv_test.go:15:25: undefined: strings

    /tmp/tmpl0j02pvv_test.go:18:12: undefined: strings

    /tmp/tmpl0j02pvv_test.go:18:25: undefined: sort_numbers_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    if len(numbers) <= 0 {\n        return \"\"\n    }\n\n    numbers\
    \ := strings.Split(numbers, \" \")\n    var result string\n\n    for _, number\
    \ := range numbers {\n        number := strings.Trim(number, \" \")\n        if\
    \ number == \"zero\" {\n            result = fmt.Sprintf(\"%v\", 0)\n        }\
    \ else if number == \"one\" {\n            result = fmt.Sprintf(\"%v\", 1)\n \
    \       } else if number == \"two\" {\n            result = fmt.Sprintf(\"%v\"\
    , 2)\n        } else if number == \"three\" {\n            result = fmt.Sprintf(\"\
    %v\", 3)\n        } else if number == \"four\" {\n            result = fmt.Sprintf(\"\
    %v\", 4)\n        } else if number == \"five\" {\n            result = fmt.Sprintf(\"\
    %v\", 5)\n        } else if number == \"six\" {\n            result = fmt.Sprintf(\"\
    %v\", 6)\n        } else if number == \"seven\" {\n            result = fmt.Sprintf(\"\
    %v\", 7)\n        } else if number == \"eight\" {\n            result = fmt.Sprintf(\"\
    %v\", 8)\n        } else if number == \"nine\" {\n            result = fmt.Sprintf(\"\
    %v\", 9)\n        } else {\n            result = fmt.Sprintf(\"%v\", 10)\n   \
    \     }\n        result = fmt.Sprintf(\"%v\", result)\n    }\n\n    return result\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpybd6tw9k_test.go:14:15: undefined: strings

    /tmp/tmpybd6tw9k_test.go:19:13: no new variables on left side of :=

    /tmp/tmpybd6tw9k_test.go:19:16: undefined: strings

    /tmp/tmpybd6tw9k_test.go:23:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    var output []string\n    var numberList\
    \ []string\n    \n    // Split the string into a list of strings\n    numberList\
    \ = strings.Split(numbers, \" \")\n    \n    // Sort numberList from smallest\
    \ to largest\n    for i := 0; i < len(numberList); i++ {\n        numberList[i]\
    \ = strings.TrimSpace(numberList[i])\n        fmt.Printf(\"numberList[%d] = %s\\\
    n\", i, numberList[i])\n    }\n    \n    // Concatenate and output to string\n\
    \    output = numberList\n    sort.Strings(output)\n    \n    // Convert back\
    \ to string\n    output = strings.Join(output, \" \")\n    \n    // Return string\n\
    \    return output\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks everyone for\
    \ the replies.  I've tried this but it is not working.  I've pasted my code below...any\
    \ ideas what I'm doing wrong?\n<|/ c |>\n<| c |>\nI forgot to add that I'm using\
    \ Scratch.  Not sure if that makes a difference?\n<|/ c |>\n<| c |>\nYou are not\
    \ returning the result. Try changing the last line to `return output`\n<|/ c |>\n\
    <| c |>\nI've added it to the code, still not working.  It seems like Scratch\
    \ is not recognizing the package.  What would it look like then?  I've tried both\
    \ with and without the package and still no luck.\n<|/ c |>\n<| a |>\nAfter reviewing\
    \ your code, it looks like your function only works in interactive mode.  In order\
    \ for this to work, it requires the user to pass in the string.  I would suggest\
    \ using the Command Line Interface (CLI) to test the function before adding it\
    \ to your code.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n\
    )\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7ivtitij_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n\n    var result string = \"\"\n    var prev string = \"\"\n    for\
    \ _, num := range numbers {\n        if prev != \"\" && num > prev {\n       \
    \     result = result + \" \"\n        }\n        result = result + num\n    \
    \    prev = num\n    }\n    return result\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4apcn21y_test.go:14:13: no new variables on left side of :=

    /tmp/tmp4apcn21y_test.go:14:16: undefined: strings

    /tmp/tmp4apcn21y_test.go:19:32: invalid operation: num > prev (mismatched types
    rune and string)

    /tmp/tmp4apcn21y_test.go:22:18: invalid operation: result + num (mismatched types
    string and rune)

    /tmp/tmp4apcn21y_test.go:23:16: cannot use num (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
