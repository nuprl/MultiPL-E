name: HumanEval_118_get_closest_vowel
language: go_test.go
prompt: "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word\
  \ string) string {\n"
tests: "func TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n\
  \     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"\
  easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n\
  \     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"\
  bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\"\
  \ },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"\
  ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n\
  \     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"\
  Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\
    \    for i := len(word) - 1; ; i-- {\n        if word[i] == word[len(word)-1]\
    \ {\n            if i != 0 {\n                return word[i]\n            }\n\
    \        }\n        if word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\"\
    \ || word[i] == \"o\" || word[i] == \"u\" {\n            return word[i]\n    \
    \    }\n        if i == 0 {\n            return \"\"\n        }\n        if word[i]\
    \ == \"y\" && word[i-1] == \"u\" && word[i+1] == \"i\" && word[i+2] == \"o\" {\n\
    \            return word[i]\n        }\n    }\n}\n", "    return find_vowel(word,\
    \ len(word)-1, len(word))\n}\n", "    vowels := \"AEIOUaeiou\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u'{\n            index := word[i]\n   \
    \         for _, v := range vowels {\n                if index == v {\n      \
    \              return index\n                }\n            }\n        }\n   \
    \ }\n    return \"\"\n}\n</code>\n<|/ a tags=string,go,algorithm dscore=2 |>\n\
    <| c |>\nI'm trying your solution and it works only for words with 3 characters\
    \ and more (it returns empty string in this case) when it should return \"U\"\
    \ instead.\n<|/ c |>\n<| c |>\nI believe that for words with 3 chars it will return\
    \ \"U\"\n<|/ c |>\n<| c |>\nI'm sorry, I thought that the question was about words\
    \ with 3 chars too. Now I realized that it was about 4 chars only. I updated the\
    \ answer.\n<|/ c |>\n<| a tags=string,go,algorithm |>\nHere is a solution for\
    \ strings with 3 or more consonants:\n<code>\npackage main\n\nimport (\n    \"\
    fmt\"\n    \"strconv\"\n    \"strings\"\n)\n", "    if len(word) <= 1 {\n    \
    \    return \"\"\n    }\n    \n    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\"}\n    for i := len(word) - 2; i >= 0; i-- {\n        for _,\
    \ v := range vowels {\n            if word[i] == v {\n                return word[i]\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowel := \"AEIOUaeiou\"\
    \n    vowelPos := strings.LastIndex(vowel, word)+1\n    if vowelPos < 0 {\n  \
    \      fmt.Println(\"No vowel found!\")\n        return \"\"\n    }\n    char\
    \ := word[vowelPos]\n    pos1 := strings.Index(word, char)\n    pos2 := strings.Index(word[:pos1],\
    \ char)\n    if pos1 < 0 {\n        return \"\"\n    } else if pos2 < 0 {\n  \
    \      return char\n    } else {\n        switch char {\n        case 'A':\n \
    \           return 'A'\n        case 'E':\n            return 'E'\n        case\
    \ 'I':\n            return 'I'\n        case 'O':\n            return 'O'\n  \
    \      case 'U':\n            return 'U'\n        }\n    }\n}\n", "    var i int\n\
    \    var v int\n    var result string\n    vowels := []rune{'a', 'e', 'i', 'o',\
    \ 'u'}\n    for i = 0; i <= len(word) - 2; i++ {\n        v = vowels[int(word[len(word)-1-i])\
    \ - 97]\n        if v > 0 {\n            result = result[:0] + v\n           \
    \ break\n        }\n    }\n    if result != \"\" {\n        return result\n  \
    \  }\n    \n    i = 0\n    v = 0\n    for i = 0; i <= len(word) - 2; i++ {\n \
    \       v = vowels[int(word[len(word)-1-i]) - 97]\n        if v > 0 {\n      \
    \      result = result + v\n            break\n        }\n    }\n    if result\
    \ != \"\" {\n        return result\n    }\n    \n    return \"\"\n}", "    var\
    \ result string = \"\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i] == \"o\"\
    \ || word[i] == \"u\" {\n            result = word[i]\n            break\n   \
    \     }\n    }\n    return result.(string)\n}\n", "    words := strings.Split(word,\
    \ \"u\")\n    vowel := make([]string, 0)\n    i := len(words) - 1\n    for ; i\
    \ > -1; i-- {\n        if strings.HasSuffix(words[i], \"u\") {\n            vowel\
    \ = append(vowel, words[i])\n        }\n    }\n    if len(vowel) > 0 {\n     \
    \   return vowel[0]\n    }\n    return \"\"\n}\n", "    // write your code here\n\
    \    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    found := false\n\
    \    for i := 0; i < len(word); i++ {\n        if word[i] == 'a' {\n         \
    \   found = true\n            break\n        }\n        if word[i] == 'e' {\n\
    \            found = true\n            break\n        }\n        if word[i] ==\
    \ 'i' {\n            found = true\n            break\n        }\n        if word[i]\
    \ == 'o' {\n            found = true\n            break\n        }\n        if\
    \ word[i] == 'u' {\n            found = true\n            break\n        }\n \
    \   }\n    if !found {\n        return \"\"\n    }\n    if word[len(word)-1] ==\
    \ 'a' || word[len(word)-1] == 'e' {\n        return word[len(word)-1]\n    }\n\
    \    if word[len(word)-1] == 'i' || word[len(word)-1] == 'o' {\n        return\
    \ word[len(word)-1]\n    }\n    if word[len(word)-1] == 'u' {\n        return\
    \ word[len(word)-1]\n    }\n    if word[len(word)-1] == 'y' {\n        return\
    \ word[len(word)-1]\n    }\n    if word[len(word)-1] == 'h' {\n        return\
    \ word[len(word)-1]\n    }\n    if word[len(word)-1] == 'r' {\n        return\
    \ word[len(word)-1]\n    }\n    return \"\"\n}\n", "    leftVowel := \"\"\n  \
    \  rightVowel := \"\"\n    index := len(word)-2\n    for index < len(word) {\n\
    \        if word[index] == \"a\" || word[index] == \"e\" || word[index] == \"\
    i\" {\n            rightVowel = word[index]\n            break\n        }\n  \
    \      if word[index] != \"a\" && word[index] != \"e\" && word[index] != \"i\"\
    \ {\n            leftVowel = word[index]\n            break\n        }\n     \
    \   index--\n    }\n    if rightVowel != \"\" && leftVowel != \"\" {\n       \
    \ return rightVowel\n    }\n    return leftVowel\n}\n", "    if len(word) < 3\
    \ {\n        return \"\"\n    }\n    vowel := []rune{\n        'a', 'e', 'i',\
    \ 'o', 'u', 'y',\n    }\n    result := word[:len(word)-len(word)]\n\n    for i\
    \ := len(word) - len(word) - 1; i >= 0; i-- {\n        if strings.Contains(string(vowel),\
    \ word[i+1:]) {\n            result = word[:i+1]\n            break\n        }\n\
    \    }\n    return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n    // if first letter is vowel, return it\n    if len(word)\
    \ > 0 && word[0] in vowels {\n        return word[0]\n    }\n    start := len(word)\
    \ - 1 // vowels start from the right side\n    for i := range vowels {\n     \
    \   if start >= 0 && word[start] == vowels[i] {\n            return vowels[i]\n\
    \        }\n        start -= 1\n    }\n    return \"\"\n}\n", "    if word ==\
    \ \"\" {\n        return \"\"\n    }\n\n    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    \n    if len(word) <= 1 {\n        return \"\"\n    }\n\
    \    \n    for i := len(word) - 1; i >= 0; i-- {\n        if word[i] == 'A' ||\
    \ word[i] == 'a' {\n            for _, vw := range vowels {\n                if\
    \ vw == word[i+1:i+2] {\n                    return vw\n                }\n  \
    \          }\n        }\n    }\n    return \"\"\n}\n", "    if word == \"\" {\n\
    \        return \"\"\n    }\n    // find the index of last consonant from right\n\
    \    lastIndex := len(word) - 1\n    for i := lastIndex; i >= 0; i-- {\n     \
    \   if word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i] ==\
    \ \"o\" || word[i] == \"u\" {\n            lastIndex = i\n            break\n\
    \        }\n    }\n    if lastIndex == -1 {\n        return \"\"\n    }\n    if\
    \ word[lastIndex] == \"a\" || word[lastIndex] == \"e\" || word[lastIndex] == \"\
    i\" || word[lastIndex] == \"o\" || word[lastIndex] == \"u\" {\n        return\
    \ word[lastIndex]\n    }\n    // get the vowel at previous index\n    previousIndex\
    \ := lastIndex - 1\n    for i := lastIndex; i >= 0; i-- {\n        if word[i]\
    \ != \" \" && word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i]\
    \ == \"o\" || word[i] == \"u\" {\n            previousIndex = i\n            break\n\
    \        }\n    }\n    if previousIndex == -1 {\n        return \"\"\n    }\n\
    \    return word[previousIndex]\n}\n", "    if len(word) <= 1 {\n        return\
    \ \"\"\n    }\n\n    var result string\n    for i := len(word) - 2; i >= 0; i--\
    \ {\n        if word[i] == 'u' || word[i] == 'o' || word[i] == 'e' || word[i]\
    \ == 'a' {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
  "    vowel := []string{\"a\",\"e\",\"i\",\"o\",\"u\"}\n    if word == \"\" {\n \
    \       return \"\"\n    }\n\n    if len(word) > 0 {\n        for i := len(word)\
    \ - 1; i >= 0; i-- {\n            index := strings.LastIndex(word, vowel[i])\n\
    \            if index < 0 {\n                return \"\"\n            }\n    \
    \        if strings.Compare(word, word[index+1:]) < 0 {\n                return\
    \ vowel[i]\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels\
    \ := []rune(\"AEIOU\")\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ unicode.IsUpper(word[i]) {\n            vowels = append(vowels, word[i])\n \
    \       }\n    }\n    for i, vr := range vowels {\n        if i > 0 {\n      \
    \      if unicode.IsUpper(vowels[i-1]) && unicode.IsUpper(vr) {\n            \
    \    return vr\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowel\
    \ := \"a\" // Initialize to the first vowel\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if isVowel(word[i]) { // Check if the current letter is a\
    \ vowel\n            if word[i] == vowel { // If the current letter is equal to\
    \ the vowel\n                // If the current letter is equal to the vowel after\
    \ one iteration\n                vowel = word[i+1] // Then assign the vowel to\
    \ the next one (current letter + 1).\n            }\n        }\n    }\n    return\
    \ vowel\n}\n", "    if word == \"\" {\n        return \"\"\n    }\n\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        c := word[i]\n        if strings.ContainsAny(c,\
    \ []rune(\"aeiou\")) {\n            i -= 1 // skip the first char\n          \
    \  continue // skip it\n        }\n\n        if strings.ContainsAny(c, []rune(\"\
    aeiouy\")) { // if it's a consonant, skip it\n            continue\n        }\n\
    \n        if strings.ContainsAny(c, []rune(\"AEIOUY\")) { // if it's a vowel,\
    \ skip it\n            continue\n        }\n\n        break // found a vowel,\
    \ stop loop\n    }\n    return string(c)\n}\n", "    \n    //var result string\n\
    \    //var vowel string\n    var vowel_index int\n    \n    var result string\n\
    \    \n    var is_vowel bool\n    \n    // first check each character for vowel\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        \n        is_vowel = is_vowel(word[i])\n\
    \        \n        if !is_vowel {\n            continue\n        }\n        \n\
    \        if i == 0 {\n            continue\n        }\n        \n        is_vowel\
    \ = is_vowel(word[i-1])\n        \n        if !is_vowel {\n            continue\n\
    \        }\n        \n        vowel_index = i\n        break\n    }\n    \n  \
    \  if vowel_index == 0 {\n        return \"\"\n    }\n    \n    var is_consonant\
    \ bool\n    \n    for i := vowel_index + 1; i <= len(word)-1; i++ {\n        \n\
    \        is_consonant = is_consonant(word[i])\n        \n        if !is_consonant\
    \ {\n            continue\n        }\n        \n        break\n    }\n    \n \
    \   if i < len(word) {\n        \n        for i := vowel_index; i < len(word)-1;\
    \ i++ {\n            \n            is_consonant = is_consonant(word[i])\n    \
    \        \n            if !is_consonant {\n                continue\n        \
    \    }\n            \n            break\n        }\n        \n        if i ==\
    \ len(word) {\n            return \"\"\n        }\n    }\n    \n    if i == len(word)\
    \ {\n        return \"\"\n    }\n    \n    var prev_is_consonant bool\n    \n\
    \    for i := i - 1; i >= 0; i-- {\n        \n        is_consonant = is_consonant(word[i])\n\
    \        \n        if !is_consonant {\n            continue\n        }\n     \
    \   \n        if i == 0 {\n            continue\n        }\n        \n       \
    \ is_consonant = is_consonant(word[i-1])\n        \n        if !is_consonant {\n\
    \            continue\n        }\n        \n        if prev_is_consonant {\n \
    \           return word[i-1]\n        }\n        \n        prev_is_consonant =\
    \ is_consonant\n        break\n    }\n    \n    return \"\"\n}\n", "    if word[len(word)-1]\
    \ == 'a' {\n        if word[len(word)-2] == 'e' {\n            if word[len(word)-3]\
    \ == 'i' {\n                if word[len(word)-4] == 'o' {\n                  \
    \  if word[len(word)-5] == 'u' {\n                        return word[len(word)-6]\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return \"\"\n}", "    if len(word) <= 3 {\n        return \"\"\n    }\n  \
    \  if word[len(word)-2:len(word)] != \"u\" && word[len(word)-2:len(word)] != \"\
    e\" && word[len(word)-2:len(word)] != \"i\" && word[len(word)-2:len(word)] !=\
    \ \"o\" {\n        return \"\"\n    }\n    var i int\n    char := word[len(word)-2:len(word)]\n\
    \    for i = len(word)-2; i > 0; i-- {\n        if word[i] == \"u\"{\n       \
    \     return word[i]\n        }\n        if word[i] == \"e\"{\n            return\
    \ word[i]\n        }\n        if word[i] == \"i\"{\n            return word[i]\n\
    \        }\n        if word[i] == \"o\"{\n            return word[i]\n       \
    \ }\n        if word[i] == char{\n            return word[i]\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    vowels2 := []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    for _, value\
    \ := range vowels {\n        if strings.Contains(strings.ToLower(word), value)\
    \ {\n            return value\n        }\n    }\n    for _, value := range vowels2\
    \ {\n        if strings.Contains(strings.ToLower(word), value) {\n           \
    \ return value\n        }\n    }\n    return \"\"\n}\n", "    // Write your code\
    \ here.\n    return \"\"\n}\n", "    vowel := \"\"\n    vowelCount := 0\n    charCount\
    \ := len(word)\n    for i := 0; i < charCount; i++ {\n        if isVowel(word[i])\
    \ {\n            vowelCount += 1\n        } else {\n            if vowelCount\
    \ == 0 {\n                vowelCount = 0\n            }\n            if vowelCount\
    \ == charCount-2 {\n                vowelCount = 0\n                vowel = word[i]\n\
    \            }\n        }\n    }\n    return vowel\n}\n", "    vowel := []rune(\"\
    aeiou\")\n    leftVowel := make([]rune, 0)\n    rightVowel := make([]rune, 0)\n\
    \    found := false\n    for i := len(word) - 2; i >= 0; i-- {\n        leftVowel\
    \ = append(leftVowel, word[i])\n        if found {\n            rightVowel = append(rightVowel,\
    \ word[i+1])\n        }\n        for _, v := range vowel {\n            if leftVowel\
    \ == v {\n                found = true\n                break\n            }\n\
    \            if rightVowel == v {\n                found = true\n            \
    \    break\n            }\n        }\n    }\n    if !found {\n        return \"\
    \"\n    }\n    return rightVowel[0]\n}\n", "    var vowels = new(string)\n   \
    \ vowels[`A`] = \"a\"\n    vowels[`E`] = \"e\"\n    vowels[`I`] = \"i\"\n    vowels[`O`]\
    \ = \"o\"\n    vowels[`U`] = \"u\"\n\n    var lastVowel string = \"\"\n    var\
    \ lastVowelIndex int = -1\n    var vowelCount int = 0\n\n    for i := len(word)\
    \ - 1; ; i-- {\n        switch word[i] {\n        case \"A\":\n            vowelCount\
    \ += 1\n            lastVowelIndex = i\n            lastVowel = word[i]\n    \
    \    case \"E\":\n            if vowelCount > 0 {\n                vowelCount\
    \ -= 1\n            }\n            lastVowelIndex = i\n            lastVowel =\
    \ word[i]\n        case \"I\":\n            if vowelCount > 0 {\n            \
    \    vowelCount -= 1\n            }\n            lastVowelIndex = i\n        \
    \    lastVowel = word[i]\n        case \"O\":\n            if vowelCount > 0 {\n\
    \                vowelCount -= 1\n            }\n            lastVowelIndex =\
    \ i\n            lastVowel = word[i]\n        case \"U\":\n            lastVowelIndex\
    \ = i\n            lastVowel = word[i]\n            if vowelCount > 0 {\n    \
    \            vowelCount -= 1\n            }\n        }\n\n        if i == 0 {\n\
    \            break\n        }\n    }\n    if vowelCount == 0 {\n        return\
    \ \"\"\n    }\n\n    if lastVowel == \"a\" {\n        return vowels[`A`]\n   \
    \ }\n    if lastVowel == \"e\" {\n        return vowels[`E`]\n    }\n    if lastVowel\
    \ == \"i\" {\n        return vowels[`I`]\n    }\n    if lastVowel == \"o\" {\n\
    \        return vowels[`O`]\n    }\n    if lastVowel == \"u\" {\n        return\
    \ vowels[`U`]\n    }\n    return \"\"\n}\n", "    // Write your code here\n  \
    \  return \"\"\n}\n", "    vowel := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'}\n    vowel_count := 0\n    for i := len(word) - 2; i >= 0; i--\
    \ {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' {\n            vowel_count++\n            if vowel_count\
    \ == 1 {\n                return word[i]\n            }\n        }\n        if\
    \ word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i]\
    \ == 'U' {\n            vowel_count++\n            if vowel_count == 1 {\n   \
    \             return word[i]\n            }\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := map[rune]rune{'u': 'U', 'e': 'I', 'o': 'O', 'a': 'A'}\n\
    \    \n    // To keep track of found vowels so we don't search past the consonant\n\
    \    // and start over again from beginning.\n    foundVowel := map[rune]bool{}\n\
    \    \n    // Go through all the runes in the given string and find the closest\
    \ match\n    // against the map of vowels.\n    for pos := len(word) - 1; pos\
    \ >= 0; pos-- {\n        // Get rune at current position\n        currRune :=\
    \ rune(word[pos])\n        \n        // Check if the rune is a vowel at the given\
    \ position\n        if foundVowel[currRune] {\n            // The vowel was found\
    \ earlier so return it \n            return string(currRune)\n        }\n    \
    \    \n        // Check if the rune is a consonant and if that consonant is not\
    \ at the end \n        // of the string\n        if currRune < 'a' || currRune\
    \ > 'z' {\n            continue\n        }\n        \n        // Check if the\
    \ rune is in the map of vowels. If it is, store the rune in\n        // foundVowel.\
    \ Keep track of the found vowel so we can break out\n        // of this loop when\
    \ we find a consonant later.\n        if _, ok := vowels[currRune]; ok {\n   \
    \         foundVowel[currRune] = true\n        }\n    }\n    \n    // Return empty\
    \ string if there are no vowels found.\n    return \"\"\n}\n", "    if len(word)\
    \ <= 1 {\n        return \"\"\n    }\n\n    index := len(word) - 2\n    for {\n\
    \        if index >= len(word) {\n            break\n        }\n        if word[index]\
    \ == 'A' || word[index] == 'E' || word[index] == 'I' || word[index] == 'O' ||\
    \ word[index] == 'U' {\n            return word[index]\n        }\n        index--\n\
    \    }\n\n    return \"\"\n}\n", "    vowels := []string{\"\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\"}\n    chars := word[len(\"yogurt\"): len(\"yogurt\")+len(\"\
    yogurt\")] // chars in yogurt\n    for _, c := range chars {\n        if vowels[([]rune(c)).Index(-1)-1]\
    \ != \"\" {\n            return vowels[([]rune(c)).Index(-1)-1]\n        }\n \
    \   }\n    return \"\"\n}\n", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n\
    \    vowelsMap := map[rune]bool{\n        'a': true,\n        'e': true,\n   \
    \     'i': true,\n        'o': true,\n        'u': true,\n    }\n\n    for _,\
    \ v := range vowels {\n        if vowelsMap[v] {\n            if word[len(word)-1]\
    \ == v {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    if len(word) < 3 {\n        return\
    \ \"\"\n    }\n    vowelMap := map[string]bool{\n        \"a\":  true,\n     \
    \   \"e\":  true,\n        \"i\":  true,\n        \"o\":  true,\n        \"u\"\
    :  true,\n        \"A\":  true,\n        \"E\":  true,\n        \"I\":  true,\n\
    \        \"O\":  true,\n        \"U\":  true,\n        \"!\":  false,\n      \
    \  \"?\":  false,\n        \",\":  false,\n    }\n    if !vowelMap[word[0]] &&\
    \ !vowelMap[word[len(word)-1]] {\n        return \"\"\n    }\n    if len(word)\
    \ == 3 {\n        return word[0]\n    }\n    for i, c := range word[len(word)-1:]\
    \ {\n        if c == word[len(word)-1] && vowelMap[word[len(word)-2]] {\n    \
    \        return word[i]\n        }\n    }\n    return \"\"\n}\n", "    if word\
    \ == \"\" {\n        return \"\"\n    }\n    vowels := []string{\"a\",\"e\",\"\
    i\",\"o\",\"u\"}\n    vowelsLen := len(vowels)\n    i := len(word) - 1\n    for\
    \ i >= 0 {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' {\n            if i == 0 {\n                return\
    \ \"\"\n            }\n            if word[i-1] == 'a' || word[i-1] == 'e' ||\
    \ word[i-1] == 'i' || word[i-1] == 'o' || word[i-1] == 'u' {\n               \
    \ i -= 1\n            } else {\n                return vowels[vowelsLen-1]\n \
    \           }\n        } else {\n            return \"\"\n        }\n    }\n \
    \   return \"\"\n}", "    if len(word) < 2 {\n        return \"\"\n    }\n\n \
    \   // Find the index of first consonant\n    cons := -1\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if word[i] == ' ' {\n            cons = i\n    \
    \        break\n        }\n    }\n\n    if cons == -1 {\n        return \"\"\n\
    \    }\n\n    vowel := \"\"\n    for i := len(word) - 1; i >= 0; i-- {\n     \
    \   if i > cons {\n            break\n        }\n\n        if word[i] == 'A' ||\
    \ word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U' {\n   \
    \         vowel = word[i]\n            break\n        }\n    }\n\n    return vowel\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 2; i >= 0; i-- {\n        for _, v := range vowels {\n         \
    \   if v == word[i] {\n                return word[i]\n            }\n       \
    \ }\n    }\n    return \"\"\n}\n", "    //return \"\"\n    if len(word) == 0 {\n\
    \        return \"\"\n    }\n    for i := len(word) - 2; i >= 0; i-- {\n     \
    \   char := word[i]\n        if char == 'A' || char == 'E' || char == 'I' || char\
    \ == 'O' || char == 'U' {\n            n := i + 1\n            if n >= len(word)\
    \ {\n                break\n            }\n            c := word[n]\n        \
    \    if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n         \
    \       return char\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   var vowels []rune = \"aeiouAEIOU\"\n    \n    for i := 0; i < len(word); i++\
    \ {\n        if isVowel(word[i], vowels) {\n            if i+1 < len(word) &&\
    \ isConsonant(word[i+1], vowels) {\n                return word[i+1:]\n      \
    \      }\n            if isConsonant(word[i], vowels) {\n                return\
    \ word[:i]\n            }\n        }\n    }\n    return \"\"\n}\n", "    // base\
    \ case\n    if word == \"\" {\n        return \"\"\n    }\n    vowels := []rune(\"\
    AEIOUaeiou\")\n    i := len(word) - 1\n    // get the right most consonant and\
    \ the left most vowel\n    for ; i>=0; i-- {\n        if word[i] == 'z' {\n  \
    \          break\n        }\n        if word[i] == 'a' {\n            if i==len(word)-2\
    \ {\n                return \"\"\n            }\n            if word[i+1] == 'e'\
    \ || word[i+1] == 'i' || word[i+1] == 'o' || word[i+1] == 'u' {\n            \
    \    if i-1 == -1 { // word doesn't contains vowel before\n                  \
    \  return \"\"\n                }\n                if word[i-1] != word[i+2] {\n\
    \                    return \"\"\n                }\n            } else if i ==\
    \ 1 {\n                return \"\"\n            }\n        }\n        if word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n           \
    \ if i-1 == -1 { // word doesn't contains vowel before\n                return\
    \ \"\"\n            }\n            if word[i-1] != word[i+1] {\n             \
    \   return \"\"\n            }\n        }\n    }\n    for i = 0; i<len(word);\
    \ i++ {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' {\n            if i-1 == -1 { // word doesn't contains\
    \ vowel before\n                return \"\"\n            }\n            if word[i-1]\
    \ != word[i+1] {\n                return \"\"\n            }\n        }\n    }\n\
    \    return word[len(word) - 1]\n}\n", "    vowel := []rune(\"aeiouy\")\n    i,\
    \ _ := strconv.Atoi(word)\n    for ; i < len(word); i++ {\n        if vowel[i\
    \ % len(vowel)] != word[i-1:] {\n            break\n        }\n    }\n    if i\
    \ == len(word) {\n        return \"\"\n    }\n    if i == 0 {\n        return\
    \ word[i]\n    }\n    return word[i]\n}\n", "    var result string\n    prevChar\
    \ := word[len(word)-1]\n    for _, char := range word[0:(len(word)-2)] {\n   \
    \     switch char {\n        case \"a\":\n            switch prevChar {\n    \
    \        case \"e\", \"i\", \"o\":\n                result += \"a\"\n        \
    \    case \"u\":\n                result += \"i\"\n            default:\n    \
    \            result += \"a\"\n            }\n        case \"e\":\n           \
    \ switch prevChar {\n            case \"i\", \"o\":\n                result +=\
    \ \"e\"\n            case \"u\":\n                result += \"i\"\n          \
    \  default:\n                result += \"e\"\n            }\n        case \"i\"\
    :\n            switch prevChar {\n            case \"e\", \"o\":\n           \
    \     result += \"i\"\n            case \"u\":\n                result += \"i\"\
    \n            default:\n                result += \"i\"\n            }\n     \
    \   case \"o\":\n            switch prevChar {\n            case \"i\", \"e\"\
    :\n                result += \"o\"\n            case \"u\":\n                result\
    \ += \"o\"\n            default:\n                result += \"o\"\n          \
    \  }\n        case \"u\":\n            result += \"u\"\n        }\n        prevChar\
    \ = char\n    }\n    return result \n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for _, vowel := range vowels {\n        wordSplit\
    \ := strings.Split(word, vowel)\n        if wordSplit[len(wordSplit)-1] == vowel\
    \ {\n            return vowel\n        }\n    }\n    return \"\"\n}\n", "    if\
    \ word == \"\" {\n        return \"\"\n    }\n\n    vowels := []rune(\"aeiouAEIOU\"\
    )\n\n    for i := len(word) - 2; i >= 0; i-- {\n        prev := word[i-1]\n\n\
    \        // Find the next vowel from the right\n        for j := len(vowels) -\
    \ 1; j >= 0; j-- {\n            if prev == vowels[j] {\n                return\
    \ string(vowels[j])\n            }\n        }\n    }\n\n    return \"\"\n}\n",
  "    // Write your code here\n    vowel := \"\"\n    i := len(word) - 1\n    for\
    \ i > 0 {\n        if word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\"\
    \ || word[i] == \"o\" || word[i] == \"u\" {\n            vowel = word[i]\n   \
    \         break\n        }\n        i--\n    }\n    return vowel\n}\n", "    //\
    \ write your code here\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    var found bool = false\n    for i := len(word) - 2; !found && i >= 0;\
    \ i-- {\n        if vowels[len(vowels)-i] == \"a\" {\n            if vowels[i+2]\
    \ == \"e\" || vowels[i+2] == \"i\" || vowels[i+2] == \"o\" || vowels[i+2] == \"\
    u\" {\n                found = true\n            }\n        } else if vowels[len(vowels)-i]\
    \ == \"e\" || vowels[len(vowels)-i] == \"i\" || vowels[len(vowels)-i] == \"o\"\
    \ || vowels[len(vowels)-i] == \"u\" {\n            if vowels[i-2] == \"a\" ||\
    \ vowels[i-2] == \"e\" || vowels[i-2] == \"i\" || vowels[i-2] == \"o\" || vowels[i-2]\
    \ == \"u\" {\n                found = true\n            }\n        } else {\n\
    \            if vowels[i+2] == \"a\" || vowels[i+2] == \"e\" || vowels[i+2] ==\
    \ \"i\" || vowels[i+2] == \"o\" || vowels[i+2] == \"u\" {\n                found\
    \ = true\n            }\n        }\n    }\n    if !found {\n        return \"\"\
    \n    }\n    return vowels[len(vowels)-i]\n}\n", "    // Your code here\n    for\
    \ idx := len(word) - 1; idx >= 0; idx-- {\n        if idx%2 == 0 && word[idx]\
    \ == word[idx+1] && word[idx] == word[idx-1] {\n            return word[idx]\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowel := []rune{\n        'a',\n\
    \        'e',\n        'i',\n        'o',\n        'u',\n    }\n    leftIndex\
    \ := 0\n    rightIndex := len(word) - 1\n    currentWord := word\n    for leftIndex\
    \ <= rightIndex {\n        i := rightIndex - leftIndex\n        j := -1\n    \
    \    if i > 0 && vowel[i-1] == 'o' {\n            j = i-1\n        }\n       \
    \ if j > 0 && vowel[j-1] == 'u' {\n            j = j-1\n        }\n        if\
    \ j == -1 || j > i {\n            continue\n        }\n        if word[j] == currentWord[j]\
    \ {\n            currentWord = word[0:j+1] + word[j+1:]\n            leftIndex\
    \ = j\n            rightIndex = j\n            break\n        }\n    }\n    return\
    \ currentWord\n}\n", "    vowels := []rune(\"aeiouy\")\n    words := strings.Split(word,\
    \ \" \")\n    \n    max := -1\n    for _, word := range words {\n        i :=\
    \ len(word) - 1;\n        last := 0;\n        for {\n            if i == -1 {\n\
    \                return \"\"\n            }\n            if strings.ContainsAny(word[i:],\
    \ vowels) {\n                last = i;\n                i = -1\n             \
    \   break\n            }\n            i--\n        }\n        if max < 0 {\n \
    \           max = last\n        }\n    }\n    return words[max]\n}", "    vowel\
    \ := \"aieoui\"\n    for i, c := range word {\n        if i == len(word)-1 ||\
    \ vowel[strings.IndexRune(vowel, c)+1] < vowel[strings.IndexRune(vowel, c)] {\n\
    \            return \"\"\n        }\n    }\n    return vowel[strings.IndexRune(vowel,\
    \ word[len(word)-1])+1]\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    vowelsLen := len(vowels)\n    \n    lastVowel := \"\"\n    idx\
    \ := len(word) - 1\n    \n    currentVowel := word[idx]\n    lastVowel = currentVowel\n\
    \n    for idx, currentVowel := range word[idx:] {\n        // Find the smallest\
    \ vowel index\n        // If currentVowel equal the smallest vowel\n        if\
    \ idx > 0 && currentVowel == word[idx-1] {\n            idx--\n            lastVowel\
    \ = word[idx]\n            continue\n        }\n        \n        // Find the\
    \ last vowel index\n        // If currentVowel equal the last vowel\n        if\
    \ idx >= vowelsLen && currentVowel == word[vowelsLen-1] {\n            idx--\n\
    \            lastVowel = word[idx]\n            continue\n        }\n        \n\
    \        // If currentVowel not equal the smallest vowel or the largest vowel\n\
    \        if currentVowel != word[idx] && (idx < vowelsLen || currentVowel != word[vowelsLen-1])\
    \ {\n            return \"\"\n        }\n    }\n    \n    return lastVowel\n}\n",
  '    vowels := map[rune]', "    // start by checking if vowel exists in the right\
    \ side of the word\n    \n    if len(word) >= 2 && word[len(word)-1] == 'a' ||\
    \ word[len(word)-1] == 'e' || word[len(word)-1] == 'i' || word[len(word)-1] ==\
    \ 'o' || word[len(word)-1] == 'u' || word[len(word)-1] == 'A' || word[len(word)-1]\
    \ == 'E' || word[len(word)-1] == 'I' || word[len(word)-1] == 'O' || word[len(word)-1]\
    \ == 'U' {\n        return word[len(word)-1]\n    }\n    // if there is no vowel\
    \ on the right side of the word\n    \n    if len(word) <= 1 {\n        return\
    \ \"\"\n    }\n    // check the last character of the word is either a consonant\
    \ or vowel\n    \n    lastChar := word[len(word)-1]\n    if lastChar == 'a' ||\
    \ lastChar == 'e' || lastChar == 'i' || lastChar == 'o' || lastChar == 'u' ||\
    \ lastChar == 'A' || lastChar == 'E' || lastChar == 'I' || lastChar == 'O' ||\
    \ lastChar == 'U' {\n        return lastChar\n    }\n    // check all the consonants\
    \ of the word\n    \n    for i := len(word)-1; i >= 0; i-- {\n        if word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\
    \ || word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i]\
    \ == 'U' {\n            return word[i]\n        }\n    }\n    \n    return \"\"\
    \n}\n", "    word := strings.ToLower(word)\n    if len(word) <= 1 {\n        return\
    \ \"\"\n    }\n    vowels := []string{\"\", \"\", \"\"}\n    vowels[0] = \"a\"\
    \n    vowels[1] = \"e\"\n    vowels[2] = \"i\"\n    vowels[3] = \"o\"\n    vowels[4]\
    \ = \"u\"\n    vowels[5] = \"A\"\n    vowels[6] = \"E\"\n    vowels[7] = \"I\"\
    \n    vowels[8] = \"O\"\n    vowels[9] = \"U\"\n    \n    for i := len(word) -\
    \ 1; i >= 0; i-- {\n        if word[i] >= 'a' && word[i] <= 'z' {\n          \
    \  break\n        }\n    }\n    for i := len(word) - 2; i >= 0; i-- {\n      \
    \  if word[i] >= 'A' && word[i] <= 'Z' {\n            break\n        }\n    }\n\
    \    \n    if i >= 0 {\n        if word[i] == vowels[0] || word[i] == vowels[1]\
    \ {\n            return word[i]\n        }\n        if word[i] == vowels[2] ||\
    \ word[i] == vowels[3] {\n            return word[i]\n        }\n        if word[i]\
    \ == vowels[4] || word[i] == vowels[5] {\n            return word[i]\n       \
    \ }\n        if word[i] == vowels[6] || word[i] == vowels[7] {\n            return\
    \ word[i]\n        }\n        if word[i] == vowels[8] || word[i] == vowels[9]\
    \ {\n            return word[i]\n        }\n    }\n    \n    return \"\"\n}\n",
  "    var result string = \"\"\n    for i := len(word) - 1; i > 0; i-- {\n      \
    \  if isVowel(word[i]) {\n            result += word[i]\n        }\n        if\
    \ isVowel(word[i-1]) {\n            result += word[i-1]\n        }\n    }\n  \
    \  return result\n}\n", "    var vowels []rune = \"AEIOUaeiou\"\n    vowels =\
    \ append(vowels, vowels...)\n    vowels = append(vowels, vowels...)\n    vowels\
    \ = append(vowels, vowels...)\n    vowels = append(vowels, vowels...)\n    vowels\
    \ = append(vowels, vowels...)\n    for _, s := range word[1 : len(word)] {\n \
    \       if s == vowels[0] {\n            return word[len(word)-1]\n        }\n\
    \        if s == vowels[len(vowels)-1] {\n            return word[0]\n       \
    \ }\n        if s == vowels[0] && s == vowels[len(vowels)-1] {\n            return\
    \ \"\"\n        }\n    }\n    return \"\"\n}\n", "    for i := len(word) - 2;\
    \ i >= 0; i-- {\n        if word[i] == word[i+1] && word[i] >= 'a' && word[i]\
    \ <= 'z' {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n",
  "    // check first letter, if it contains vowels\n    first := word[0:1]\n    if\
    \ len(first) == 1 && isVowel(first[0]) {\n        return first[0]\n    }\n   \
    \ // check last letter, if it contains vowels\n    last := word[len(word)-1:len(word)]\n\
    \    if len(last) == 1 && isVowel(last[0]) {\n        return last[0]\n    }\n\
    \    // check other letters, if it contains vowels\n    for i := 2; i < len(word);\
    \ i++ {\n        if isVowel(word[i]) {\n            return word[i]\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowel := \"aeiouAEIOU\"\n    vowelPos := 0\n\
    \    index := len(word)\n    var vowelPos int\n    var i int\n\n    for i = index\
    \ - 1; i>=0; i-- {\n        if word[i] == 'A' || word[i] == 'E' || word[i] ==\
    \ 'I'\n            || word[i] == 'O' || word[i] == 'U' {\n            break\n\
    \        }\n    }\n\n    if i == -1 {\n        return \"\"\n    }\n\n    for ;\
    \ i < index; i++ {\n        for _, v := range vowel {\n            if word[i]\
    \ == v {\n                vowelPos = i\n            }\n        }\n    }\n\n  \
    \  return word[vowelPos:index]\n}\n", "    if len(word) <= 0 {\n        return\
    \ \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ i := len(word) - 1\n    j := len(word) - 2\n    for len(word) > 0 {\n      \
    \  if word[i] != word[j] {\n            if word[i] == 'a' || word[i] == 'e' ||\
    \ word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n                return\
    \ word[i]\n            }\n            i -= 1 \n            j += 1\n        } else\
    \ {\n            i -= 1\n            j -= 1\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := []rune{\n        'a', 'e', 'i', 'o', 'u', 'y',\n    }\n\
    \    left := len(word)\n    right := 0\n    for i := right + 1; i <= len(word);\
    \ i++ {\n        if !is_consonant(word[i]) {\n            left = i\n         \
    \   break\n        }\n    }\n    for i := left - 1; i >= 0; i-- {\n        if\
    \ !is_consonant(word[i]) {\n            right = i\n            break\n       \
    \ }\n    }\n    if right < left {\n        return \"\"\n    }\n    if right ==\
    \ left {\n        return word[left]\n    }\n    i := right + 1\n    if i == len(word)\
    \ {\n        return word[left]\n    }\n    for ; i < len(word); i++ {\n      \
    \  if word[i] == word[i-1] {\n            break\n        }\n        if word[i]\
    \ == word[i+1] {\n            right = i\n            break\n        }\n    }\n\
    \    if i == len(word) {\n        return word[left]\n    }\n    for ; i < len(word);\
    \ i++ {\n        if word[i] != word[i-1] && word[i] != word[i+1] {\n         \
    \   left = i\n            break\n        }\n    }\n    return word[left]\n}\n",
  "    fmt.Printf(\"get_closest_vowel(\\\"%s\\\") => %s\\n\", word, getClosestVowel(word))\n\
    \    return \"\"\n}\n", "    if len(word) == 0 {\n        return \"\"\n    }\n\
    \    vowels := []rune{'a', 'e', 'i', 'o', 'u', 'y'}\n    for i := 0; i < len(word);\
    \ i++ {\n        if word[(i+1)%len(word)] >= 'a' && word[(i+1)%len(word)] <= 'z'\
    \ {\n            continue\n        }\n        if word[(i+1)%len(word)] >= 'A'\
    \ && word[(i+1)%len(word)] <= 'Z' {\n            continue\n        }\n       \
    \ if word[(i+1)%len(word)] >= '0' && word[(i+1)%len(word)] <= '9' {\n        \
    \    continue\n        }\n        if word[(i+1)%len(word)] >= '-' && word[(i+1)%len(word)]\
    \ <= ':' {\n            continue\n        }\n        if word[(i+1)%len(word)]\
    \ >= '@' && word[(i+1)%len(word)] <= '@' {\n            continue\n        }\n\
    \        if word[(i+1)%len(word)] >= '$' && word[(i+1)%len(word)] <= '$' {\n \
    \           continue\n        }\n        if word[(i+1)%len(word)] >= '&' && word[(i+1)%len(word)]\
    \ <= '&' {\n            continue\n        }\n        if word[(i+1)%len(word)]\
    \ >= '-' && word[(i+1)%len(word)] <= '-' {\n            continue\n        }\n\
    \        if word[(i+1)%len(word)] >= '/' && word[(i+1)%len(word)] <= '/' {\n \
    \           continue\n        }\n        if word[(i+1)%len(word)] >= '_' && word[(i+1)%len(word)]\
    \ <= '_' {\n            continue\n        }\n        if word[(i+1)%len(word)]\
    \ >= '!' && word[(i+1)%len(word)] <= '!' {\n            continue\n        }\n\
    \        if word[(i+1)%len(word)] >= '<' && word[(i+1)%len(word)] <= '<' {\n \
    \           continue\n        }\n        if word[(i+1)%len(word)] >= '>' && word[(i+1)%len(word)]\
    \ <= '>' {\n            continue\n        }\n        if word[(i+1)%len(word)]\
    \ >= '=' && word[(i+1)%len(word)] <= '=' {\n            continue\n        }\n\
    \        if word[(i+1)%len(word)] >= '?' && word[(i+1)%len(word)] <= '?' {\n \
    \           continue\n        }\n        if word[(i+1)%len(word)] >= '*' && word[",
  "    for _, vowel := range vowels {\n        if strings.HasSuffix(word, vowel) {\n\
    \            return vowel\n        }\n    }\n\n    return \"\"\n}\n", "    if\
    \ len(word) < 2 {\n        return \"\"\n    }\n    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    vowelsPos := []int{0, -1, 1}\n    vowelsCount :=\
    \ 0\n    for _, v := range vowels {\n        if word == v {\n            return\
    \ v\n        }\n    }\n    for i := len(word) - 1; i > 0; i-- {\n        c :=\
    \ word[i]\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ {\n            vowelsCount++\n        } else {\n            if vowelsCount >\
    \ 0 {\n                vowelsCount--\n            } else {\n                return\
    \ \"\"\n            }\n        }\n        if vowelsCount >= len(vowels) {\n  \
    \          break\n        }\n        for _, p := range vowelsPos {\n         \
    \   if i > 0 {\n                if word[i-1] == 'a' || word[i-1] == 'e' || word[i-1]\
    \ == 'i' || word[i-1] == 'o' || word[i-1] == 'u' {\n                    vowelsCount++\n\
    \                } else {\n                    if vowelsCount > 0 {\n        \
    \                vowelsCount--\n                    } else {\n               \
    \         return \"\"\n                    }\n                }\n            }\n\
    \            vowelsPos++\n            if vowelsCount >= len(vowels) {\n      \
    \          break\n            }\n        }\n    }\n    return \"\"\n}\n", "  \
    \  vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    i := len(word)\n\
    \    result := \"\"\n    for i--; i>0; i-- {\n        if word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n           \
    \ if i > 0 {\n                result += string(word[0 : i])\n                break\n\
    \            }\n        }\n    }\n    if result == \"\" {\n        result = string(vowels[0])\n\
    \    }\n    return result\n}\n", "    vowel := \"\"\n    letters := []rune(\"\
    a\\ufff0\" + \"u\\uffef\") // \"a\\ufff0\" + \"u\\ufffd\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if word[i] == 'z' {\n            letters = append(letters,\
    \ rune(\"a\\ufff0\" + \"u\\ufffd\")) // \"a\\ufff0\" + \"u\\ufffd\"\n        \
    \    continue\n        }\n        if i == 0 {\n            letters = append(letters,\
    \ rune(\"a\\ufff0\" + \"u\\uffef\") + letters[len(letters)-1]) // \"a\\ufff0\"\
    \ + \"u\\uffef\"\n            continue\n        }\n        if word[i] == word[i-1]\
    \ {\n            letters = append(letters, letters[len(letters)-1]) // \"a\\ufff0\"\
    \ + \"u\\uffef\"\n            continue\n        }\n        for _, letter := range\
    \ letters {\n            if word[i] == '\\ufffd' {\n                return letter\n\
    \            }\n            if word[i] == letter {\n                if i+1 < len(word)\
    \ {\n                    if word[i+1] == '\\ufffd' {\n                       \
    \ return letter\n                    }\n                    if word[i+1] == letter\
    \ {\n                        vowel = letter\n                    }\n         \
    \       }\n            }\n        }\n    }\n    if vowel == \"\" {\n        return\
    \ \"\"\n    }\n    return vowel\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    var index int = 0\n    for i, v := range vowels {\n  \
    \      if word[i] == 'y' && word[i+1] == 'o' && word[i+2] == 'g' && word[i+3]\
    \ == 'r' && word[i+4] == 't' {\n            index = i\n            break\n   \
    \     }\n    }\n    if index == 0 {\n        return \"\"\n    }\n    if word[index]\
    \ == 'y' && word[index+1] == 'u' && word[index+2] == 'r' && word[index+3] == 't'\
    \ {\n        return word[index+3]\n    }\n    if word[index] == 'u' && word[index+1]\
    \ == 'r' && word[index+2] == 'y' && word[index+3] == 'l' {\n        return word[index+3]\n\
    \    }\n    if word[index] == 'r' && word[index+1] == 'u' && word[index+2] ==\
    \ 'g' && word[index+3] == 'i' && word[index+4] == 't' {\n        return word[index+4]\n\
    \    }\n    if word[index] == 'r' && word[index+1] == 'u' && word[index+2] ==\
    \ 'g' && word[index+3] == 'i' && word[index+4] == 't' && word[index+5] == 'h'\
    \ {\n        return word[index+4]\n    }\n    if word[index] == 'u' && word[index+1]\
    \ == 'r' && word[index+2] == 'y' && word[index+3] == 'l' && word[index+4] == 's'\
    \ {\n        return word[index+5]\n    }\n    if word[index] == 'u' && word[index+1]\
    \ == 'r' && word[index+2] == 'y' && word[index+3] == 'l' && word[index+4] == 's'\
    \ && word[index+5] == 'd' {\n        return word[index+5]\n    }\n    if word[index]\
    \ == 'u' && word[index+1] == 'r' && word[index+2] == 'y' && word[index+3] == 'l'\
    \ && word[index+4] == 's' && word[index+5] == 'd' && word[index+6] == 'a' {\n\
    \        return word[index+6]\n    }\n    if word[index] == 'u' && word[index+1]\
    \ == 'r' && word[index+2] == 'y' && word[index+3] == 'l' && word[index+4] == 's'\
    \ && word[index+5] == 'd' && word[index+6] == 'a' && word[index+7] == 'k' {\n\
    \        return word[index+6]\n    }\n    if word[index] == 'u' && word[index+1]\
    \ == 'r' && word[index+2] == 'y' && word[index+3] == 'l' && word[index+4] == 's'\
    \ && word[index+5] == 'd' && word[index+6] == 'a' && word[index+7] == 'k' && ",
  "    vowels := \"aeiou\"\n    count := 0\n    for i := len(word) - 2; i >= 0; i--\
    \ {\n        if word[i] == 'u' {\n            count++\n        }\n        if word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\n\
    \        {\n            count++\n        }\n        if word[i] == 'y' || word[i]\
    \ == 'a' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\n        {\n  \
    \          count++\n        }\n    }\n    if count < 3 {\n        return \"\"\n\
    \    }\n    for i := len(word) - 2; i >= 0; i-- {\n        if word[i] == 'a' ||\
    \ word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\n     \
    \   {\n            count++\n        }\n        if word[i] == 'y' || word[i] ==\
    \ 'a' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\n        {\n     \
    \       count++\n        }\n    }\n    if count > 3 {\n        return \"\"\n \
    \   }\n    \n    return vowels[len(vowels)-count]\n}\n", "    // Your code here\n\
    \    vowel := []rune(\"aeiouAEIOU\")\n    if len(vowel) == 0 {\n        fmt.Println(\"\
    \")\n        return \"\"\n    }\n    \n    if strlen(word) < 2 {\n        return\
    \ \"\"\n    }\n    \n    var i int\n    for i, r := range word {\n        if r\
    \ < rune('a') || r > rune('z') {\n            break\n        }\n    }\n    if\
    \ i == len(word) {\n        return \"\"\n    }\n    \n    for _, r := range word[i+1\
    \ : len(word)] {\n        if !contains(vowel, r) {\n            break\n      \
    \  }\n    }\n    \n    if i == len(word) {\n        return \"\"\n    }\n    \n\
    \    for _, r := range word[len(word)-i+1 : len(word)] {\n        if !contains(vowel,\
    \ r) {\n            break\n        }\n    }\n    if i == len(word) {\n       \
    \ return \"\"\n    }\n    \n    return string(vowel[((len(word)-i+1)%len(vowel))])\n\
    }\n", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    idx := len(word) - 1\n\
    \n    // Skip the vowels at the beginning and at the end\n    lastIdx := len(word)\n\
    \    for idx >= 0 {\n        if word[idx] == 'a' || word[idx] == 'e' || word[idx]\
    \ == 'i' || word[idx] == 'o' || word[idx] == 'u' {\n            idx--\n      \
    \      lastIdx--\n        }\n    }\n    lastIdx--\n    for idx < 0 {\n       \
    \ if word[idx] == 'a' || word[idx] == 'e' || word[idx] == 'i' || word[idx] ==\
    \ 'o' || word[idx] == 'u' {\n            idx++\n            lastIdx--\n      \
    \  }\n    }\n\n    // Find the left vowel\n    left := false\n    if idx > lastIdx\
    \ {\n        left = true\n        idx -= lastIdx\n    }\n\n    // Find the right\
    \ vowel\n    right := false\n    if idx < 0 {\n        right = true\n        idx\
    \ += lastIdx\n    }\n\n    leftVowel := rune(0)\n    rightVowel := rune(0)\n \
    \   if left {\n        leftVowel = word[idx-1]\n    }\n    if right {\n      \
    \  rightVowel = word[idx]\n    }\n\n    // Check the vowel range\n    leftVowelIdx\
    \ := 0\n    rightVowelIdx := 0\n    for i := 0; i < len(vowels); i++ {\n     \
    \   if vowels[i] == leftVowel {\n            leftVowelIdx = i\n            break\n\
    \        }\n    }\n    for i := 0; i < len(vowels); i++ {\n        if vowels[i]\
    \ == rightVowel {\n            rightVowelIdx = i\n            break\n        }\n\
    \    }\n\n    // Check if the vowels are in the middle of word\n    if leftVowelIdx\
    \ > 0 && rightVowelIdx < len(vowels) {\n        return word[leftVowelIdx:] + word[0:rightVowelIdx]\n\
    \    }\n    if leftVowelIdx < 0 && rightVowelIdx > 0 {\n        return word[0:rightVowelIdx]\
    \ + word[leftVowelIdx+1:]\n    }\n    if leftVowelIdx < 0 && rightVowelIdx !=\
    \ 0 {\n        return word[leftVowelIdx:] + word[0:rightVowelIdx]\n    }\n   \
    \ if leftVowelIdx > 0 && rightVowelIdx != len(vowels) {\n        return word[leftVowelIdx:]\
    \ + word[0:rightVowelIdx]\n    }\n\n    return \"\"\n}", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    i := len(word) - 1\n    for j := 0; j <=\
    \ i; j++ {\n        for _, v := range vowels {\n            r := strings.IndexByte(word[j],\
    \ v) - j\n            if r < 0 {\n                continue\n            }\n  \
    \          if r == 0 || r > len(word[j]) {\n                continue\n       \
    \     }\n            if word[j][r-1] == v {\n                return v\n      \
    \      }\n        }\n    }\n    return \"\"\n}\n", "    vowel := []rune{'a', 'e',\
    \ 'i', 'o', 'u'}\n    var result rune\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        c := word[i]\n        if c == ' ' {\n            return \"\"\n  \
    \      }\n        for _, vr := range vowel {\n            if c == vr {\n     \
    \           result = vr\n                break\n            }\n        }\n   \
    \ }\n    return result\n}\n", "    vowels := []rune{\n        'a', \n        'e',\n\
    \        'i',\n        'o', \n        'u', \n    }\n    i, k := 0, len(word) -\
    \ 2\n    switch {\n    case word[i] == \"a\":\n        i+=2\n    case word[i]\
    \ == \"e\":\n        i+=2\n    case word[i] == \"i\":\n        i+=2\n    case\
    \ word[i] == \"o\":\n        i+=2\n    case word[i] == \"u\":\n        i+=2\n\
    \    case word[k] == \"a\":\n        k+=2\n    case word[k] == \"e\":\n      \
    \  k+=2\n    case word[k] == \"i\":\n        k+=2\n    case word[k] == \"o\":\n\
    \        k+=2\n    case word[k] == \"u\":\n        k+=2\n    }\n    if i > k {\n\
    \        return \"\"\n    }\n    if k > i {\n        i, k = k, i\n    }\n    \n\
    \    for _, v := range vowels {\n        if k+2 < len(word) {\n            if\
    \ word[k+2] == v {\n                return v\n            }\n        }\n     \
    \   k-=2\n    }\n    return \"\"\n}\n", "    \n    // initialize start at end\n\
    \    var start, end int = len(word) - 1 // -1 because last position is at end\n\
    \n    // initialize vowel map\n    var vowel map[rune]bool = map[rune]bool{\n\
    \        'a': true, 'e': true, 'i': true, 'o': true, 'u': true\n    }\n\n    //\
    \ initialize current vowel\n    var currentVowel rune = 'o'\n\n    // check current\
    \ and next consonants\n    for i := 0; i < len(word); i++ {\n        // if the\
    \ current and next consonants is vowel\n        if vowel[word[i]] && vowel[word[i+1]]\
    \ {\n            // set start at current consonants\n            start = i\n \
    \           // set end at next consonants\n            end = i + 1\n         \
    \   // set current vowel to next consonants\n            currentVowel = word[i+1]\n\
    \            break\n        }\n    }\n\n    // return empty string if we didn't\
    \ find any vowel\n    if end < len(word) - 1 {\n        return \"\"\n    }\n\n\
    \    // initialize current index at start\n    var currentIndex int = len(word)\
    \ - 1 // -1 because last position is at end\n\n    // check current and next consonants\n\
    \    for i := 0; i < len(word); i++ {\n        // if the current consonants is\
    \ vowel\n        if vowel[word[i]] {\n            // if current and next consonants\
    \ index is equal or greater than end\n            if i == end || currentIndex\
    \ >= end {\n                // set current index to end\n                currentIndex\
    \ = len(word) - 1 // -1 because last position is at end\n            }\n\n   \
    \         // compare current index at start and current index at end and return\
    \ the one that is closer to end\n            if currentIndex <= start && currentIndex\
    \ >= end {\n                return word[currentIndex]\n            }\n\n     \
    \       // update current index\n            currentIndex = i + 1\n        }\n\
    \    }\n\n    return \"\"\n}\n", "    // write your code here\n    vowel := make([]rune,\
    \ 0, len(word))\n    vowel = append(vowel, unicode.I) // add I to the front of\
    \ the slice to make it always have at least one\n    vowel = append(vowel, unicode.O)\n\
    \    vowel = append(vowel, unicode.U)\n    vowel = append(vowel, unicode.a)\n\
    \    vowel = append(vowel, unicode.o)\n    vowel = append(vowel, unicode.u)\n\
    \    vowel = append(vowel, unicode.A)\n    vowel = append(vowel, unicode.o)\n\
    \    vowel = append(vowel, unicode.u)\n    vowel = append(vowel, unicode.A)\n\
    \    vowel = append(vowel, unicode.o)\n    vowel = append(vowel, unicode.u)\n\
    \    vowel = append(vowel, unicode.A)\n    vowel = append(vowel, unicode.o)\n\
    \    vowel = append(vowel, unicode.u)\n    vowel = append(vowel, unicode.A)\n\
    \    vowel = append(vowel, unicode.o)\n    vowel = append(vowel, unicode.u)\n\
    \    vowel = append(vowel, unicode.A)\n    vowel = append(vowel, unicode.o)\n\
    \    vowel = append(vowel, unicode.u)\n    vowel = append(vowel, unicode.A)\n\
    \    vowel = append(vowel, unicode.o)\n    vowel = append(vowel, unicode.u)\n\
    \    vowel = append(vowel, unicode.A)\n    vowel = append(vowel, unicode.o)\n\
    \    vowel = append(vowel, unicode.u)\n    vowel = append(vowel, unicode.A)\n\
    \    vowel = append(vowel, unicode.o)\n    vowel = append(vowel, unicode.u)\n\
    \    vowel = append(vowel, unicode.A)\n    vowel = append(vowel, unicode.o)\n\
    \    vowel = append(vowel, unicode.u)\n    vowel = append(vowel, unicode.A)\n\
    \    vowel = append(vowel, unicode.o)\n    vowel = append(vowel, unicode.u)\n\
    \    vowel = append(vowel, unicode.A)\n    vowel = append(vowel, unicode.o)\n\
    \    vowel = append(vowel, unicode.u)\n    vowel = append(vowel, unicode.A)\n\
    \    vowel = append(vowel, unicode.o)\n    vowel = append(vowel, unicode.u)\n\
    \    vowel = append(vowel, unicode.A)\n    vowel = append(vowel, unicode.o)\n\
    \    vowel = append(vowel, unicode.u)\n    vowel = append(vowel, unicode.A)\n\
    \    vowel = append(vowel, unicode.o)\n    vowel = append(vowel, unicode.", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if word[i] == vowels[len(vowels)-1] {\n        \
    \    return word[i]\n        }\n    }\n    return \"\"\n}\n", "    if len(word)\
    \ < 3 {\n        return \"\"\n    }\n    vowel := \"\"\n    index := len(word)\
    \ - 2\n    for _, r := range word[index:] {\n        if r == 'a' || r == 'e' ||\
    \ r == 'i' || r == 'o' || r == 'u' {\n            return r\n        }\n    }\n\
    \    return vowel\n}", "    vowels := []string{\n        \"a\",\n        \"e\"\
    ,\n        \"i\",\n        \"o\",\n        \"u\",\n    }\n    for i := 0; i <\
    \ len(word); i++ {\n        if word[len(word)-1-i] == word[len(word)-1-i]+word[len(word)-1-i]\
    \ {\n            return word[len(word)-1-i]\n        }\n    }\n    for i := 0;\
    \ i < len(vowels); i++ {\n        if word[len(word)-1-i] == vowels[i] {\n    \
    \        return vowels[i]\n        }\n    }\n    return \"\"\n}\n", "    // Convert\
    \ all the letters to lowercase\n    var lowerCasedWord = strings.ToLower(word)\n\
    \n    // Check each consonant from the right side of the word\n    for i := len(lowerCasedWord)\
    \ - 1; i >= 0; i-- {\n        // If the current letter is also a consonant, skip\
    \ this vowel\n        if lowerCasedWord[i] == 'a' || lowerCasedWord[i] == 'e'\
    \ || lowerCasedWord[i] == 'i' || lowerCasedWord[i] == 'o' || lowerCasedWord[i]\
    \ == 'u' {\n            continue\n        }\n        // If the current letter\
    \ is not a vowel, then we go to the next letter\n        // and check all the\
    \ consonants again if the current one is also\n        // a consonant. Once we\
    \ found a vowel, we break the loop and return\n        // the vowel.\n       \
    \ for j := len(lowerCasedWord); j > i; j-- {\n            if lowerCasedWord[j]\
    \ != 'a' && lowerCasedWord[j] != 'e' && lowerCasedWord[j] != 'i' && lowerCasedWord[j]\
    \ != 'o' && lowerCasedWord[j] != 'u' {\n                continue\n           \
    \ }\n            if lowerCasedWord[i] == lowerCasedWord[j] {\n               \
    \ lowerCasedWord = lowerCasedWord[:i+1]\n                break\n            }\n\
    \        }\n    }\n    // If the whole word is still not a vowel, then just return\
    \ the whole word.\n    // In this case, we should check from the beginning and\
    \ end if the word is still\n    // not a vowel. If so, then return the empty string.\n\
    \    if strings.ToLower(lowerCasedWord) == \"a\" {\n        return \"\"\n    }\n\
    \    return lowerCasedWord\n}\n", "    if len(word) < 3 {\n        return \"\"\
    \n    }\n    vowel := \"\"\n    last := len(word) - 1\n    i := 0\n    for i <\
    \ len(word) {\n        if word[i] == \"a\" || word[i] == \"e\" || word[i] == \"\
    i\" || word[i] == \"o\" || word[i] == \"u\" {\n            return word[i]\n  \
    \      }\n        if i == 0 {\n            vowel = word[i]\n            continue\n\
    \        }\n        if last == i {\n            return \"\"\n        }\n     \
    \   if word[i] == \"y\" && word[i-1] == \"u\" && word[i+1] == \"r\" && word[i+2]\
    \ == \"u\" {\n            vowel = word[i]\n            i += 2\n            continue\n\
    \        }\n        if word[i] == \"u\" && word[i-1] == \"a\" && word[i+1] ==\
    \ \"b\" && word[i+2] == \"c\" {\n            vowel = word[i]\n            i +=\
    \ 2\n            continue\n        }\n        if word[i] == \"u\" && word[i-1]\
    \ == \"a\" && word[i+1] == \"h\" && word[i+2] == \"t\" {\n            vowel =\
    \ word[i]\n            i += 2\n            continue\n        }\n        if word[i]\
    \ == \"u\" && word[i-1] == \"e\" && word[i+1] == \"c\" && word[i+2] == \"h\" {\n\
    \            vowel = word[i]\n            i += 2\n            continue\n     \
    \   }\n        if word[i] == \"u\" && word[i-1] == \"e\" && word[i+1] == \"h\"\
    \ && word[i+2] == \"k\" {\n            vowel = word[i]\n            i += 2\n \
    \           continue\n        }\n        if word[i] == \"u\" && word[i-1] == \"\
    e\" && word[i+1] == \"r\" && word[i+2] == \"g\" {\n            vowel = word[i]\n\
    \            i += 2\n            continue\n        }\n        if word[i] == \"\
    u\" && word[i-1] == \"i\" && word[i+1] == \"h\" && word[i+2] == \"t\" {\n    \
    \        vowel = word[i]\n            i += 2\n            continue\n        }\n\
    \        if word[i] == \"u\" && word[i-1] == \"i\" && word[i+1] == \"h\" && word[i+2]\
    \ == \"w\" {\n            vowel = word[i]\n            i += 2\n            continue\n\
    \        }\n        if word[i] == \"u\" && word[i-1] == \"i\" && word[i+1] ==\
    \ \"k\" && word[i+2] == \"g\" {\n            vowel = word[i]\n            i +=\
    \ 2\n            continue\n        }\n        if word[i] == \"u\" && word[i-1]\
    \ == \"i\" && word[i+1] == \"l\" && word[i+2] == \"k\" {\n            vowel =\
    \ word[i]\n            i += 2\n            continue\n        }\n        if word[i]\
    \ == \"u\" && word[i-1] == \"i\" && word[i+1] == \"o\" && word[i+2] == \"c\" {\n\
    \            vowel = word[i]\n            i += 2\n            continue\n     \
    \   }\n        if ", "    var closestVowel = \"\"\n    \n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u' {\n            if closestVowel == \"\
    \" {\n                closestVowel = word[i]\n            } else {\n         \
    \       closestVowel += word[i]\n            }\n        }\n    }\n    \n    return\
    \ closestVowel\n}\n", "    vowels := \"aeiouAEIOU\"\n    \n    // find rightmost\
    \ vowel\n    for i := len(word) - 1; i > 0; i-- {\n        if word[i] == \"a\"\
    \ || word[i] == \"e\" || word[i] == \"i\" || word[i] == \"o\" || word[i] == \"\
    u\"{\n            return word[i]\n        }\n    }\n    return \"\"\n}\n", " \
    \   if len(word) == 0 || len(word) > 6 {\n        return \"\"\n    }\n    vowels\
    \ := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    i := len(word)-1\n\
    \    prev := false\n    count := 0\n    for _, v := range vowels {\n        if\
    \ i == 0 || word[i] == '@' {\n            prev = v\n            count = 1\n  \
    \      } else {\n            if word[i] == '@' || word[i] == v {\n           \
    \     count++\n            } else {\n                if count > 2 {\n        \
    \            if prev == v {\n                        return \"\"\n           \
    \         }\n                    return v\n                }\n               \
    \ prev = v\n                count = 1\n            }\n        }\n        i--\n\
    \    }\n    return \"\"\n}\n", "    var first_letter string\n    var last_letter\
    \ string\n    first_letter := word[0]\n    last_letter := word[len(word)-1]\n\n\
    \    for index := len(word)-2; index >= 0; index-- {\n        if word[index] ==\
    \ first_letter {\n            break\n        }\n        if word[index] == last_letter\
    \ {\n            break\n        }\n    }\n    if index >= 0 {\n        word :=\
    \ word[0:index]\n    }\n    return word\n}\n", "    vowel := []rune{'a', 'e',\
    \ 'i', 'o', 'u'}\n    left, right := 0, 0\n    if len(word) == 0 {\n        return\
    \ \"\"\n    }\n    for _, r := range word[right:] + word[left+1:] {\n        if\
    \ r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n            return\
    \ string(r)\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for len(word) >= 2 {\n        pos := len(word)-2\n\
    \        if word[pos] == word[pos+1] && word[pos] in vowels {\n            return\
    \ word[pos]\n        }\n    }\n    return \"\"\n}\n", "    if len(word) < 2 {\n\
    \        return \"\"\n    }\n    vowel := []rune{'a', 'e', 'i', 'o', 'u'}\n  \
    \  vowelIdx := 0\n    for i := len(word) - 2; i >= 0; i-- {\n        if word[i]\
    \ == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U'\
    \ {\n            vowelIdx = i\n            break\n        }\n    }\n    if vowelIdx\
    \ == 0 {\n        return \"\"\n    }\n    vowelIdx -= 1\n    if vowelIdx < 0 {\n\
    \        vowelIdx = 0\n    }\n    rightVowel := word[vowelIdx]\n    for idx :=\
    \ 1; idx < len(word); idx++ {\n        if word[idx] == rightVowel {\n        \
    \    return word[idx]\n        }\n    }\n    return \"\"\n}\n", "    var index\
    \ int\n    vowels := []string{\n        \"a\", \"e\", \"i\", \"o\", \"u\",\n \
    \   }\n    for index, value := range vowels {\n        if value == word[0 : len(word)-len(value)]\
    \ {\n            break\n        }\n    }\n    if index == len(vowels)-1 {\n  \
    \      return \"\"\n    }\n    return vowels[index+1]\n}\n", "    vowel := []rune(\"\
    aeiou\")\n    length := len(word)\n    i := 0\n    count := 0\n    result := \"\
    \"\n\n    for ; i < length - 1; i++ {\n        letter := word[i]\n        if letter\
    \ != \"\" && !isLetterOnly(letter) {\n            break\n        }\n        if\
    \ letter == \"a\" || letter == \"e\" || letter == \"i\" || letter == \"o\" ||\
    \ letter == \"u\" {\n            count += 1\n        } else if letter == \"A\"\
    \ || letter == \"E\" || letter == \"I\" || letter == \"O\" || letter == \"U\"\
    \ {\n            count -= 1\n        }\n        if count < 0 {\n            result\
    \ = letter\n            break\n        }\n    }\n    return result\n}\n", "  \
    \  if len(word) < 2 {\n        return \"\"\n    }\n\n    for i, c := range word\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           return word[i+1:i+2]\n        }\n    }\n\n    return \"\"\n}\n", " \
    \   var vowels []rune = []rune(\"aeiouy\")\n    index := len(word) - 1\n    found\
    \ := false\n    for i := 0; i < len(word); i++ {\n        if found {\n       \
    \     if vowels[word[i]] == 'y' {\n                return word[i]\n          \
    \  }\n            if index == 0 {\n                break\n            }\n    \
    \        word = word[:index]\n        }\n        if word[i] == word[i+1] {\n \
    \           if vowels[word[i]] == 'y' {\n                vowels[word[i]] = 'u'\n\
    \                found = true\n                index = i\n            }\n    \
    \    } else {\n            if vowels[word[i]] == 'y' {\n                vowels[word[i]]\
    \ = 'u'\n                found = true\n                index = i\n           \
    \ } else {\n                index = -1\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    if len(word) <= 0 {\n        return \"\"\n    }\n    vowel\
    \ := \"a\"\n    for i := len(word) - 2; 0 <= i; i-- {\n        if word[i] == vowel\
    \ {\n            return word[i]\n        }\n    }\n    return \"\"\n}\n", "  \
    \  if len(word) < 2 {\n        return \"\"\n    }\n    vowels := []rune{'a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    index := len(word) - 1\n    for\
    \ ; index >= 0; index-- {\n        if word[index] == vowels[index] {\n       \
    \     return string(vowels[index])\n        }\n    }\n    return \"\"\n}\n", " \
    \   var firstIndex = 0\n    var lastIndex = 0\n    vowelIndex := -1\n    for index,\
    \ _ := range word {\n        if word[index] == 'a' || word[index] == 'e' || word[index]\
    \ == 'i' || word[index] == 'o' || word[index] == 'u' {\n            vowelIndex\
    \ = index\n            break\n        }\n    }\n    if vowelIndex == -1 {\n  \
    \      return \"\"\n    }\n    for index, _ := range word {\n        if word[index]\
    \ == 'a' || word[index] == 'e' || word[index] == 'i' || word[index] == 'o' ||\
    \ word[index] == 'u' {\n            if index > firstIndex {\n                firstIndex\
    \ = index\n            }\n            if index < lastIndex {\n               \
    \ lastIndex = index\n            }\n        }\n    }\n    distance := lastIndex\
    \ - firstIndex + 1\n    vowelDistance := len(word) - vowelIndex - distance - 1\n\
    \    for index, _ := range word {\n        if word[index] == 'a' || word[index]\
    \ == 'e' || word[index] == 'i' || word[index] == 'o' || word[index] == 'u' {\n\
    \            if index < vowelIndex {\n                distance += 1\n        \
    \    } else {\n                break\n            }\n        }\n    }\n    index\
    \ = vowelIndex + distance\n    for index, _ := range word {\n        if word[index]\
    \ == 'a' || word[index] == 'e' || word[index] == 'i' || word[index] == 'o' ||\
    \ word[index] == 'u' {\n            if index < vowelIndex {\n                vowelDistance\
    \ = index - vowelIndex\n                distance = vowelDistance - distance\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return word[index]\n}\n", "    vowel := []rune{'a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U'}\n\n    left := 0\n    right := len(word)-1\n\n    for left\
    \ <= right {\n        if vowel[right] >= vowel[left] {\n            right--\n\
    \            continue\n        }\n\n        if word[right] == word[right+1] {\n\
    \            right--\n            continue\n        }\n\n        if word[left]\
    \ == word[left+1] {\n            left++\n            continue\n        }\n\n \
    \       if word[right] < word[left] {\n            left++\n            continue\n\
    \        }\n\n        if word[right] > word[left] {\n            right--\n   \
    \         continue\n        }\n\n        if word[right] == word[right-1] {\n \
    \           left--\n            continue\n        }\n\n        if word[left] <\
    \ word[left-1] {\n            left--\n            continue\n        }\n\n    \
    \    if word[left] > word[left-1] {\n            left++\n            continue\n\
    \        }\n\n        if word[right] == word[right-1] && word[left] == word[left-1]\
    \ {\n            left--\n            right--\n            continue\n        }\n\
    \n        if word[right] == word[right-1] {\n            left--\n            continue\n\
    \        }\n\n        if word[left] == word[left-1] {\n            right--\n \
    \           continue\n        }\n\n        if word[left] == word[left-1] {\n \
    \           left++\n            continue\n        }\n\n        if word[right]\
    \ == word[right-1] && word[left] < word[left-1] {\n            left++\n      \
    \      continue\n        }\n\n        if word[left] < word[left-1] {\n       \
    \     left++\n            continue\n        }\n\n        if word[left] > word[left-1]\
    \ {\n            left++\n            continue\n        }\n\n        if word[right]\
    \ > word[right-1] {\n            right--\n            continue\n        }\n\n\
    \        return \"\"\n    }\n\n    return word[left]\n}\n", "    \n    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    \n    for _, v := range\
    \ vowels {\n        if word == v {\n            return v\n        }\n    }\n \
    \   for len(word) > 0 {\n        last := len(word) - 1\n        for i := 0; i\
    \ < len(vowels); i++ {\n            if word == vowels[i] {\n                return\
    \ word\n            }\n            if word == vowels[len(vowels)-1-i] {\n    \
    \            return word\n            }\n        }\n        if last > 0 {\n  \
    \          if word[last] == vowels[0] {\n                return word\n       \
    \     }\n            if word[last] == vowels[len(vowels)-1] {\n              \
    \  return word\n            }\n        }\n        if len(word) >= 3 {\n      \
    \      if word[len(word)-2:len(word)-1] == vowels[0] && word[len(word)-1] == vowels[len(vowels)-1]\
    \ {\n                return word\n            }\n            if word[len(word)-2:len(word)-1]\
    \ == vowels[len(vowels)-1] && word[len(word)-1] == vowels[0] {\n             \
    \   return word\n            }\n        }\n        word = word[:len(word)-1]\n\
    \    }\n    return \"\"\n}\n", "    left, right, err := splitRightConsonants(word)\n\
    \    if err != nil {\n        return \"\"\n    }\n    for i := 0; i < len(right);\
    \ i++ {\n        if right[i] == 'a' || right[i] == 'e' || right[i] == 'i' || right[i]\
    \ == 'o' || right[i] == 'u' {\n            return right[i]\n        }\n    }\n\
    \    for i := len(left) - 1; i >= 0; i-- {\n        if left[i] == 'a' || left[i]\
    \ == 'e' || left[i] == 'i' || left[i] == 'o' || left[i] == 'u' {\n           \
    \ return left[i]\n        }\n    }\n    return \"\"\n}\n", "    // TODO:\n   \
    \ // return \"\" if you didn't find a vowel met the above condition. \n    //\
    \ You may assume that the given string contains English letter only.\n    vowel\
    \ := \"\"\n    for i := len(word)-1; i >= 0; i-- {\n        if word[i] == \"a\"\
    \ || word[i] == \"e\" || word[i] == \"i\" || word[i] == \"o\" || word[i] == \"\
    u\" || word[i] == \"A\" || word[i] == \"E\" || word[i] == \"I\" || word[i] ==\
    \ \"O\" || word[i] == \"U\" {\n            vowel = word[i]\n        }\n    }\n\
    \    return vowel\n}\n", "    var result string\n    if len(word) >= 2 {\n   \
    \     if word[len(word)-1] == word[len(word)-2][0] {\n            if word[len(word)-1]\
    \ == word[len(word)-2][1] {\n                result = word[len(word)-2][0]\n \
    \           } else {\n                result = word[len(word)-2][1]\n        \
    \    }\n        } else {\n            result = word[len(word)-2][0]\n        }\n\
    \    }\n    return result\n}\n", "    var vowels []rune = \"AEIOUaeiou\"\n   \
    \ i := len(word) - 1\n    for ; i>=0; i-- {\n        if word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n           \
    \ if word[i] == 'a' {\n                vowels = append(vowels, 'A')\n        \
    \        vowels = append(vowels, 'a')\n            } else if word[i] == 'e' {\n\
    \                vowels = append(vowels, 'E')\n                vowels = append(vowels,\
    \ 'e')\n            } else if word[i] == 'i' {\n                vowels = append(vowels,\
    \ 'I')\n                vowels = append(vowels, 'i')\n            } else if word[i]\
    \ == 'o' {\n                vowels = append(vowels, 'O')\n                vowels\
    \ = append(vowels, 'o')\n            } else if word[i] == 'u' {\n            \
    \    vowels = append(vowels, 'U')\n                vowels = append(vowels, 'u')\n\
    \            }\n        }\n    }\n    for {\n        if i == -1 { \n         \
    \   break\n        } else {\n            if word[i] == 'a' || word[i] == 'e' ||\
    \ word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n                return\
    \ string(vowels[0])\n            }\n            i = i - 1\n        }\n    }\n\
    \    return \"\"\n}\n", "    // TODO: Complete the function\n    if len(word)\
    \ < 3 {\n        return \"\"\n    }\n    for i, char := range word[len(word)-1:len(word)]\
    \ {\n        if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char\
    \ == 'u' {\n            return char\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []rune(\"aeiou\")\n    vowelsIdx := len(vowels)-1\n    for i := 0;\
    \ i < len(word)-1; i++ {\n        if word[i] == 'e' {\n            vowelsIdx--\n\
    \        } else if word[i] == 'a' || word[i] == 'i' {\n            vowelsIdx++\n\
    \        }\n        if vowelsIdx < 0 {\n            return \"\"\n        }\n \
    \       if vowels[vowelsIdx] == word[i+1] {\n            return string(word[i])\
    \ + string(vowels[vowelsIdx])\n        }\n    }\n    return \"\"\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    \n    if len(word) <= 0\
    \ {\n        return \"\"\n    }\n    \n    var i int\n    for i = len(word) -\
    \ 2; i+1 < len(word); i++ {\n        if word[i] in vowels && word[i+1] in vowels\
    \ {\n            return word[i]\n        }\n    }\n    \n    return \"\"\n}\n",
  "    var maxIndex = 0\n    var maxScore = 100000\n    var maxScoreIdx = 0\n    var\
    \ maxScoreValue = 0\n    for idx, _ := range word {\n        if idx == 0 {\n \
    \           if word[idx] != 'a' && word[idx] != 'e' && word[idx] != 'i' && word[idx]\
    \ != 'o' && word[idx] != 'u' {\n                return \"\"\n            }\n \
    \       } else if idx == len(word)-1 {\n            if word[idx] != 'a' && word[idx]\
    \ != 'e' && word[idx] != 'i' && word[idx] != 'o' && word[idx] != 'u' {\n     \
    \           return \"\"\n            }\n        } else {\n            if word[idx]\
    \ != 'a' && word[idx] != 'e' && word[idx] != 'i' && word[idx] != 'o' && word[idx]\
    \ != 'u' && word[idx-1] != 'a' && word[idx-1] != 'e' && word[idx-1] != 'i' &&\
    \ word[idx-1] != 'o' && word[idx-1] != 'u' {\n                return \"\"\n  \
    \          }\n        }\n\n        score := countVowel(word[idx])\n        if\
    \ score > maxScore {\n            maxScore = score\n            maxScoreIdx =\
    \ idx\n            maxScoreValue = score\n        }\n    }\n\n    return string(word[maxScoreIdx])\n\
    }\n", "    // Complete the code here\n    vowels := []rune(\"aeiouAEIOU\")\n \
    \   for _, letter := range word {\n        for _, vo := range vowels {\n     \
    \       if letter == vo {\n                return vo\n            }\n        }\n\
    \    }\n    return \"\"\n}", "    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    vowelCount := 0\n    var index\
    \ int = 0\n    for len(word) >= 2 {\n        if word[index] == \"a\" || word[index]\
    \ == \"A\" {\n            vowelCount++\n        }\n        if word[index] == \"\
    e\" || word[index] == \"E\" {\n            vowelCount++\n        }\n        if\
    \ word[index] == \"i\" || word[index] == \"I\" {\n            vowelCount++\n \
    \       }\n        if word[index] == \"o\" || word[index] == \"O\" {\n       \
    \     vowelCount++\n        }\n        if word[index] == \"u\" || word[index]\
    \ == \"U\" {\n            vowelCount++\n        }\n        index++\n    }\n  \
    \  var closestVowel = vowels[0]\n    var closestVowelDistance float32 = 0\n  \
    \  for _, v := range vowels {\n        if v <= closestVowelDistance {\n      \
    \      continue\n        }\n        var distanceInWord = float32(len(word) - 1\
    \ - index)\n        distanceInWord /= float32(len(word))\n        var distance\
    \ = float32(distanceInWord)\n        if distance < closestVowelDistance {\n  \
    \          closestVowel = v\n            closestVowelDistance = distance\n   \
    \     }\n    }\n    return closestVowel\n}\n</code>\n<|/ a tags=go dscore=4 |>\n\
    <| a tags=go |>\nHere's an implementation using strings to get the vowels directly\
    \ from the string.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\
    \n)\n", "    vowel := \"\"\n    start := len(word)-2\n    end := len(word)-1\n\
    \    for i := start; i < end; i++ {\n        next := i+1\n        if word[i] ==\
    \ 'e' && word[next] == 'a' && word[next+1] == 'n' {\n            vowel = word[i]\n\
    \            break\n        }\n    }\n    if vowel == \"\" {\n        return \"\
    \"\n    }\n    vowel := strings.ToUpper(vowel)\n    return vowel\n}\n", "    //\
    \ Find the vowel in the middle of the string\n    start := 0\n    end := len(word)\
    \ - 1\n    min := abs(len(word) - 2)\n\n    for start < end {\n        var vowel\
    \ string\n        for i := 0; i < len(word); i++ {\n            if i == start\
    \ {\n                vowel = word[i]\n            }\n            if i == end {\n\
    \                vowel = word[len(word)-1]\n            }\n            if vowel\
    \ != \"\" {\n                break\n            }\n        }\n\n        // If\
    \ there is no vowel found, return empty string\n        if vowel == \"\" {\n \
    \           return \"\"\n        }\n\n        // If there is a vowel found, return\
    \ the vowel immediately\n        // If current position is the middle, return\
    \ the vowel\n        if word == vowel {\n            return vowel\n        }\n\
    \n        // If current position is the closest one,\n        // then calculate\
    \ the closest one and return the vowel\n        if min > abs(len(word) - start\
    \ - 1) {\n            min = abs(len(word) - start - 1)\n            vowel = word[start]\n\
    \        } else if min > abs(len(word) - end - 1) {\n            min = abs(len(word)\
    \ - end - 1)\n            vowel = word[end]\n        }\n    }\n\n    return vowel\n\
    }\n", "    for i := len(word); i > 0; i-- {\n        if word == string(i) {\n\
    \            break\n        }\n        if word[len(word)-1-i] >= 'a' && word[len(word)-1-i]\
    \ <= 'z' {\n            return word[len(word)-1-i] \n        } else if word[len(word)-i]\
    \ >= 'a' && word[len(word)-i] <= 'z' {\n            return word[len(word)-i] \n\
    \        }\n    }\n    return \"\"\n}", "    var vowels []rune = []rune(\"a\xE4\
    u\xFC\")\n    var consonants []rune = []rune(\"bcdfghjklmnoprstuvz\")\n    for\
    \ idx, c := range word {\n        if idx > 0 && c == 'w' {\n            vowels\
    \ = append(vowels, word[idx-1])\n        } else if idx > 0 && c == word[idx-1]\
    \ {\n            vowels = append(vowels, word[idx-1])\n        } else {\n    \
    \        consonants = append(consonants, c)\n        }\n    }\n    for _, c :=\
    \ range consonants {\n        if !contains(vowels, c) {\n            return \"\
    \"\n        }\n    }\n    return \"\"\n}\n", "    // Implement here!\n    vowels\
    \ := []string{\n        \"a\", \"e\", \"i\", \"o\", \"u\",\n    }\n    vowels_len\
    \ := len(vowels)\n    \n    result := \"\"\n    \n    for _, i := range word {\n\
    \        if i == word[len(word)-1] {\n            for _, j := range vowels {\n\
    \                if i == j {\n                    result = j\n               \
    \     vowels = vowels[:vowels_len-1]\n                }\n            }\n     \
    \   } else {\n            if i < vowels[vowels_len-1] {\n                vowels\
    \ = append(vowels, i)\n            }\n        }\n    }\n    \n    return result\n\
    }\n", "    vowels, _ := vowel_vowels()\n    index := len(word) - 1\n    for index\
    \ >= 0 && index < len(word) && vowels[word[index]] == \"o\" {\n        index--\n\
    \    }\n    if index >= 0 {\n        return word[index]\n    }\n    return \"\"\
    \n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    // find the consonant at right side\n    for i := len(word) - 1; i\
    \ >= 0; i-- {\n        if word[i] == word[len(word)-1] {\n            vowelsCount++\n\
    \            word = word[:len(word)-1]\n            break\n        }\n    }\n\
    \    // find all vowels in the right side of consonant\n    for _, v := range\
    \ vowels {\n        if vowelsCount == 0 {\n            word = word[:len(word)-1]\
    \ + v\n            break\n        }\n        if word[len(word)-1] == v {\n   \
    \         vowelsCount++\n            word = word[:len(word)-1] + v\n         \
    \   break\n        }\n    }\n    return word\n}\n", "    vowel := []rune(\"aeiou\"\
    )\n    for i := len(word) - 1; i >= 0; i-- {\n        if i == 0 {\n          \
    \  break\n        }\n        if word[i] == vowel[len(vowel)-1] {\n           \
    \ return string(vowel[len(vowel)-1])\n        }\n    }\n    return \"\"\n}\n",
  "    // Your code goes here\n    var vowels []string\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u' {\n            vowels = append(vowels, word[i])\n\
    \        }\n    }\n    if len(vowels) == 0 {\n        return \"\"\n    }\n   \
    \ for _, v := range vowels {\n        if v == word[len(word)-1 {\n           \
    \ return v\n        }\n    }\n    return \"\"\n}\n", "    vowel := \"u\" // default\
    \ vowel\n    vowel_index := 0\n    left_index := len(word) - 1\n    left_word\
    \ := word[0:left_index]\n    right_word := word[right_index:]\n    for left_index\
    \ <= right_index {\n        left_word += string(get_vowel_index(left_index))\n\
    \        right_word += string(get_vowel_index(right_index))\n        if left_word\
    \ == right_word {\n            vowel = string(get_vowel_index(left_index))\n \
    \           break\n        }\n    }\n    return vowel\n}\n", "    vowel := make(map[rune]bool)\n\
    \    vowel['e'] = true\n    vowel['o'] = true\n    vowel['i'] = true\n    vowel['a']\
    \ = true\n\n    for i := len(word) - 1; i > 0; i-- {\n        c := word[i]\n \
    \       if vowel[c] {\n            vowel[c] = false\n            return rune(c)\n\
    \        }\n    }\n\n    return \"\"\n}\n</code>\n<|/ a dscore=4 |>\n<| a |>\n\
    This is my solution, using regexp.\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"strings\"\n)\n", "    \n    // Your code goes here\n    if len(word) <\
    \ 4 {\n        return \"\"\n    }\n    \n    vowels := map[rune]bool{\n      \
    \  'a':true, 'e':true, 'i':true, 'o':true, 'u':true,\n        'A':true, 'E':true,\
    \ 'I':true, 'O':true, 'U':true,\n    }\n    \n    last := len(word) - 1\n    \n\
    \    // start position\n    for pos := len(word) - 3; pos >= 0; pos-- {\n    \
    \    if vowels[rune(word[pos])] {\n            last = pos\n        }\n    }\n\
    \    \n    start := last + 2\n    \n    // end position\n    for pos := len(word)\
    \ - 2; pos >= 0; pos-- {\n        if vowels[rune(word[pos])] {\n            start\
    \ = pos\n            break\n        }\n    }\n    \n    if start < 0 {\n     \
    \   return \"\"\n    }\n    \n    if start == len(word) - 2 {\n        return\
    \ word[start]\n    }\n    \n    if start == len(word) - 1 {\n        return \"\
    \"\n    }\n    \n    if start == 0 {\n        return \"\"\n    }\n    \n    if\
    \ end == len(word) - 2 {\n        return word[end]\n    }\n    \n    if end ==\
    \ len(word) - 1 {\n        return \"\"\n    }\n    \n    if end == 0 {\n     \
    \   return \"\"\n    }\n    \n    return word[start:end]\n}\n", "    return \"\
    \"\n}\n", "    var minLen int\n    var minVowel string\n\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if word[i] != word[len(word)-1] && word[i] != word[0]\
    \ {\n            minLen = i\n            break\n        }\n    }\n\n    if minLen\
    \ >= 1 {\n        for i := minLen; i > 0; i-- {\n            if word[i] != word[minLen-1]\
    \ && word[i] != word[minLen] {\n                minLen = i\n                minVowel\
    \ = word[i]\n                break\n            }\n        }\n    }\n\n    return\
    \ minVowel\n}\n", "    var vowel string\n    vowel = \"\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u' {\n            if word[i] > 'a' && word[i]\
    \ < 'e' {\n                vowel = word[i]\n            }\n        } else {\n\
    \            break\n        }\n    }\n    return vowel\n}\n", "    // code here\n\
    \    vowels := \"AEIOU\"\n    x := len(word)\n    y := len(vowels)\n    i := 0\n\
    \    for ; i < x; i++ {\n        if word[i] == vowels[i] {\n            x -= i\
    \ - 1\n        }\n    }\n    for ; i < y; i++ {\n        if word[i] == vowels[i]\
    \ {\n            y -= i - 1\n        }\n    }\n    if x > y {\n        return\
    \ \"\"\n    }\n    if x == y {\n        return word[y - 1]\n    }\n    if x >\
    \ y {\n        return \"\"\n    }\n    if x == y {\n        return word[x - 1]\n\
    \    }\n    if x == 0 {\n        return \"\"\n    }\n    if y == 0 {\n       \
    \ return word[x - 1]\n    }\n    if x > y {\n        return \"\"\n    }\n    if\
    \ x == y {\n        return word[y - 1]\n    }\n    if x == 0 {\n        return\
    \ \"\"\n    }\n    if y == 0 {\n        return word[x - 1]\n    }\n    if x ==\
    \ y {\n        return word[y - 1]\n    }\n    return \"\"\n}\n</code>\n<|/ a |>\n\
    <| a dscore=2 |>\n<code>", "    if word == \"\" {\n        return \"\"\n    }\n\
    \    lastVowel := \"\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i]\
    \ == 'U' || word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o'\
    \ || word[i] == 'u' {\n            lastVowel = word[i]\n        } else {\n   \
    \         break\n        }\n    }\n    if lastVowel == \"\" {\n        return\
    \ \"\"\n    }\n    return lastVowel\n}", "    vowel := \"a\" // default value\
    \ to return if there is no vowel\n    i := 0         // index for word string\n\
    \    for ; i < len(word); i++ {\n        if word[i] == vowel {\n            i\
    \ = i + 1 // skip vowel\n        } else {\n            i = i // skip consonant\n\
    \        }\n    }\n    return word[i]\n}\n", "    start := len(word) - 2\n   \
    \ end := len(word)\n    for i := range word {\n        if i == 0 || i == 6 {\n\
    \            start = i\n        }\n        if i == len(word)-1 || i == 7 {\n \
    \           end = i\n        }\n        if word[i] == 'A' || word[i] == 'E' ||\
    \ word[i] == 'I' || word[i] == 'O' || word[i] == 'U' {\n            if i != start\
    \ && i != end {\n                return word[i]\n            }\n        }\n  \
    \  }\n    return \"\"\n}\n", "    vowel := \"aieou\"\n    i := len(word)-1\n \
    \   vowelFound := false\n    for ; i>=0 && vowelFound==false; i-- {\n        if\
    \ word[i] == vowel {\n            vowelFound = true\n        }\n    }\n    if\
    \ vowelFound == false {\n        return \"\"\n    }\n    if i < 0 {\n        i\
    \ = len(word)\n    }\n    vowel := word[i]\n    j := len(word)\n    vowelFound\
    \ := false\n    for ; j>=0 && vowelFound==false; j-- {\n        if word[j] ==\
    \ vowel {\n            vowelFound = true\n        }\n    }\n    if vowelFound\
    \ == false {\n        return \"\"\n    }\n    if j > i {\n        return word[i]\n\
    \    }\n    return word[j]\n}\n", "    var index int\n    var result string\n\
    \    \n    for i := len(word) - 2; i >= 0; i-- {\n        if word[i] == 'a' ||\
    \ word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n   \
    \         index = i\n            break\n        }\n    }\n\n    if index == -1\
    \ {\n        return \"\"\n    }\n\n    for i := index; i + 1 <= len(word); i++\
    \ {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' {\n            result += string(word[i+1])\n      \
    \      break\n        }\n    }\n\n    return result\n}\n</code>\nOutput:\n<code>\n\
    $ go test get_closest_vowel_test\n=== RUN   TestGetClosestVowel\n--- PASS: TestGetClosestVowel\
    \ (0.00s)\n    === RUN   TestGetClosestVowelSameLength\n--- PASS: TestGetClosestVowelSameLength\
    \ (0.00s)\n    === RUN   TestGetClosestVowelDifferentLength\n--- PASS: TestGetClosestVowelDifferentLength\
    \ (0.00s)\n    === RUN   TestGetClosestVowelDifferentCase\n--- PASS: TestGetClosestVowelDifferentCase\
    \ (0.00s)\n    === RUN   TestGetClosestVowelSameCase\n--- PASS: TestGetClosestVowelSameCase\
    \ (0.00s)\n    === RUN   TestGetClosestVowelOtherCase\n--- PASS: TestGetClosestVowelOtherCase\
    \ (0.00s)\n    === RUN   TestGetClosestVowelSameCaseWithVowels\n--- PASS: TestGetClosestVowelSameCaseWithVowels\
    \ (0.00s)\n    === RUN   TestGetClosestVowelOtherCaseWithVowels\n--- PASS: TestGetClosestVowelOtherCaseWithVowels\
    \ (0.00s)\n    === RUN   TestGetClosestVowelSameCaseWithVowelsDifferentLength\n\
    --- PASS: TestGetClosestVowelSameCaseWithVowelsDifferentLength (0.00s)\n    ===\
    \ RUN   TestGetClosestVowelOtherCaseWithVowelsDifferentLength\n--- PASS: TestGetClosestVowelOtherCaseWithVowelsDifferentLength\
    \ (0.00s)\n</code>\n<|/ a tags=string,substring,go,algorithm |>\n<| a tags=",
  "    vowel := []rune{'a','e','i','o','u'}\n    start := len(word) - 2\n    end :=\
    \ len(word) - 1\n\n    currentVowelIndex := len(vowel) - 1\n    currentConsonantIndex\
    \ := len(consonants) - 1\n    currentConsonantLength := len(word) - 2\n    currentStart\
    \ := start - 1\n    currentEnd := end - 1\n\n    for {\n        // Find the next\
    \ vowel in word and consonant in the right side\n        if currentConsonantLength\
    \ == currentStart {\n            return string(vowel[currentVowelIndex])\n   \
    \     } else if currentConsonantLength == currentEnd {\n            return string(vowel[currentVowelIndex])\n\
    \        }\n        if currentConsonantLength > currentStart && currentConsonantLength\
    \ > currentEnd {\n            if currentConsonantIndex > 0 {\n               \
    \ currentConsonantIndex--\n                currentConsonantLength--\n        \
    \        currentVowelIndex--\n            }\n        } else {\n            if\
    \ currentVowelIndex > 0 {\n                currentVowelIndex--\n             \
    \   currentConsonantLength--\n                currentConsonantIndex--\n      \
    \      }\n        }\n        if currentConsonantLength <= currentStart {\n   \
    \         break\n        }\n    }\n    return \"\"\n}\n", "    if word == \"\"\
    \ {\n        return \"\"\n    }\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n\
    \    vowelsCount := make([]int, len(vowels))\n    for _, v := range vowels {\n\
    \        vowelsCount[v]++\n    }\n    leftConsonants := 0\n    rightConsonants\
    \ := 0\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowelsCount[word[i]]\
    \ > 0 {\n            leftConsonants++\n        } else {\n            rightConsonants++\n\
    \        }\n    }\n    if rightConsonants == 0 {\n        return \"\"\n    }\n\
    \    if leftConsonants > rightConsonants {\n        rightConsonants -= leftConsonants\n\
    \    }\n    if rightConsonants > leftConsonants {\n        leftConsonants -= rightConsonants\n\
    \    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowelsCount[word[i]]\
    \ > 0 {\n            vowelsCount[word[i]]--\n        } else {\n            vowelsCount[word[i]]++\n\
    \        }\n    }\n    return vowels[leftConsonants]\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelIndex := -1\n    vowelCount := 0\n\
    \    vowelStart := len(word) - len(vowels)\n    vowelEnd := len(word) - 1\n  \
    \  for i := 0; i < len(vowels); i++ {\n        if word[vowelStart+i] == vowels[i]\
    \ {\n            vowelCount++\n            if vowelCount == 2 {\n            \
    \    vowelIndex = i\n            }\n        }\n        if word[vowelEnd-i] ==\
    \ vowels[i] {\n            vowelCount--\n            if vowelCount == 0 {\n  \
    \              vowelIndex = i\n                break\n            }\n        }\n\
    \    }\n    if vowelIndex != -1 {\n        return word[vowelStart:vowelEnd]\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    if len(word) == 0 {\n        return \"\"\n    }\n    if len(word)\
    \ == 1 {\n        return word[0]\n    }\n    \n    var i int\n    for i = len(word)\
    \ - 1; i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u' {\n            return word[i]\n    \
    \    }\n    }\n    return \"\"\n}\n", "    if len(word) <= 1 {\n        return\
    \ \"\"\n    }\n\n    firstVowel := word[len(word)-1:]\n    if firstVowel[0] !=\
    \ \"A\" && firstVowel[0] != \"E\" && firstVowel[0] != \"I\" && firstVowel[0] !=\
    \ \"O\" && firstVowel[0] != \"U\" {\n        return \"\"\n    }\n\n    lastVowel\
    \ := word[0:len(word)-1]\n    if lastVowel[len(lastVowel)-1] != \"A\" && lastVowel[len(lastVowel)-1]\
    \ != \"E\" && lastVowel[len(lastVowel)-1] != \"I\" && lastVowel[len(lastVowel)-1]\
    \ != \"O\" && lastVowel[len(lastVowel)-1] != \"U\" {\n        return \"\"\n  \
    \  }\n\n    charToCheck := []rune(\"A\" + \"E\" + \"I\" + \"O\" + \"U\")\n   \
    \ leftVowelIndex := -1\n    for _, v := range lastVowel {\n        if v != charToCheck[0]\
    \ {\n            break\n        }\n        leftVowelIndex = leftVowelIndex + 1\n\
    \    }\n\n    rightVowelIndex := len(lastVowel)\n    for _, v := range firstVowel\
    \ {\n        if v != charToCheck[len(charToCheck)-1] {\n            break\n  \
    \      }\n        rightVowelIndex = rightVowelIndex - 1\n    }\n\n    if leftVowelIndex\
    \ == -1 || rightVowelIndex == -1 {\n        return \"\"\n    }\n\n    if leftVowelIndex\
    \ < rightVowelIndex {\n        return word[leftVowelIndex+1:]\n    } else {\n\
    \        return word[0:rightVowelIndex]\n    }\n}\n", "    if word == \"\" {\n\
    \        return \"\"\n    }\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n \
    \   vowels2 := []rune{'A', 'E', 'I', 'O', 'U'}\n    result := \"\"\n    if len(word)\
    \ > 0 {\n        if word[len(word)-1] == 'a' || word[len(word)-1] == 'e' || word[len(word)-1]\
    \ == 'i' || word[len(word)-1] == 'o' || word[len(word)-1] == 'u' {\n         \
    \   result := word[len(word)-1]\n            word = word[:len(word)-1]\n     \
    \   }\n        if word[len(word)-2] == 'a' || word[len(word)-2] == 'e' || word[len(word)-2]\
    \ == 'i' || word[len(word)-2] == 'o' || word[len(word)-2] == 'u' {\n         \
    \   result = word[len(word)-2]\n            word = word[:len(word)-2]\n      \
    \  }\n        if word[len(word)-3] == 'a' || word[len(word)-3] == 'e' || word[len(word)-3]\
    \ == 'i' || word[len(word)-3] == 'o' || word[len(word)-3] == 'u' {\n         \
    \   result = word[len(word)-3]\n            word = word[:len(word)-3]\n      \
    \  }\n    }\n    if len(word) > 0 {\n        if word[len(word)-1] == 'a' || word[len(word)-1]\
    \ == 'e' || word[len(word)-1] == 'i' || word[len(word)-1] == 'o' || word[len(word)-1]\
    \ == 'u' {\n            for _, item := range vowels {\n                if item\
    \ == word[len(word)-1] {\n                    result = item\n                \
    \    break\n                }\n            }\n        }\n        if word[len(word)-2]\
    \ == 'a' || word[len(word)-2] == 'e' || word[len(word)-2] == 'i' || word[len(word)-2]\
    \ == 'o' || word[len(word)-2] == 'u' {\n            for _, item := range vowels2\
    \ {\n                if item == word[len(word)-2]{\n                    result\
    \ = item\n                    break\n                }\n            }\n      \
    \  }\n        if word[len(word)-3] == 'a' || word[len(word)-3] == 'e' || word[len(word)-3]\
    \ == 'i' || word[len(word)-3] == 'o' || word[len(word)-3] == 'u' {\n         \
    \   for _, item := range vowels {\n                if item == word[len(word)-3]\
    \ {\n                    result = item\n                    break\n          \
    \      }\n            }\n        }\n    }\n    return result\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis code does not work correctly. Try it with `get_closest_vowel(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nSorry, I haven't read the question, just copied your\
    \ code. You are right! I'll edit my answer.\n<|/ c |>\n<| ", "    \n    for i\
    \ := len(word)-2; i >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' ||\
    \ word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n            return word[i]\n\
    \        }\n    }\n    \n    return \"\"\n}\n", "    vowels := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[word[i]] {\n            if i == 0 {\n\
    \                return word[0]\n            }\n            if i == 1 {\n    \
    \            return word[1]\n            }\n            if i == len(word)-2 {\n\
    \                return word[len(word)-1]\n            }\n            if i ==\
    \ len(word)-3 {\n                return word[len(word)-2]\n            }\n   \
    \         return word[i]\n        }\n    }\n    return \"\"\n}\n", "    vowels\
    \ := []rune{'a', 'e', 'i', 'o', 'u'}\n    n := len(word)\n    vowelIndex := 0\n\
    \    for i := n - 1; i >= 0; i-- {\n        if word[i] == 'A' || word[i] == 'a'\
    \ {\n            vowelIndex = 0\n        } else if (word[i] == 'E' || word[i]\
    \ == 'e' || word[i] == 'I' || word[i] == 'i' || word[i] == 'O' || word[i] == 'o'\
    \ || word[i] == 'U' || word[i] == 'u') && vowelIndex < len(vowels) {\n       \
    \     vowelIndex += 1\n        }\n    }\n    if vowelIndex == 0 {\n        return\
    \ \"\"\n    }\n    return word[n - 1 - vowelIndex]\n}", "    vowels := []string{\n\
    \        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"u\"\
    ,\n    }\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.Contains(word[i:],\
    \ vowels[0]) || strings.Contains(word[i:], vowels[1]) {\n            return word[i:]\n\
    \        }\n    }\n    return \"\"\n}\n", "    if len(word) <= 0 {\n        return\
    \ \"\"\n    }\n\n    vowel := []rune{'A', 'E', 'I', 'O', 'U', 'Y'}\n    vowelIndex\
    \ := -1\n    found := false\n\n    for i, c := range word {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            if\
    \ found {\n                return string(vowel[i+1-vowelIndex])\n            }\n\
    \n            if vowelIndex == -1 {\n                vowelIndex = i\n        \
    \    }\n            found = true\n        }\n    }\n\n    return \"\"\n}\n", " \
    \   if len(word) < 2 {\n        return \"\"\n    }\n\n    if len(word) < 4 {\n\
    \        return \"\"\n    }\n\n    vowel_count := 0\n    if word[len(word)-2]\
    \ != \"a\" && word[len(word)-2] != \"e\" && word[len(word)-2] != \"i\" {\n   \
    \     return \"\"\n    }\n    if word[len(word)-1] != \"o\" && word[len(word)-1]\
    \ != \"u\" && word[len(word)-1] != \"e\" {\n        return \"\"\n    }\n\n   \
    \ for i := len(word) - 3; i > len(word) - 2; i-- {\n        vowel_count += 1\n\
    \        if word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i]\
    \ == \"o\" || word[i] == \"u\" || word[i] == \"y\" {\n            if word[i-1]\
    \ == \"a\" || word[i-1] == \"e\" || word[i-1] == \"i\" || word[i-1] == \"o\" ||\
    \ word[i-1] == \"u\" || word[i-1] == \"y\" {\n                if word[i-2] ==\
    \ \"a\" || word[i-2] == \"e\" || word[i-2] == \"i\" || word[i-2] == \"o\" || word[i-2]\
    \ == \"u\" || word[i-2] == \"y\" {\n                    if word[i-3] == \"a\"\
    \ || word[i-3] == \"e\" || word[i-3] == \"i\" || word[i-3] == \"o\" || word[i-3]\
    \ == \"u\" || word[i-3] == \"y\" {\n                        vowel_count = 4\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    if vowel_count == 0 {\n        return \"\"\n    }\n    \n    if vowel_count\
    \ == 1 {\n        return word[len(word)-2]\n    }\n    \n    if vowel_count ==\
    \ 2 {\n        return word[len(word)-2] + word[len(word)-1]\n    }\n    \n   \
    \ if vowel_count == 3 {\n        return word[len(word)-2] + word[len(word)-1]\
    \ + word[len(word)-2] + word[len(word)-1]\n    }\n    \n    if vowel_count ==\
    \ 4 {\n        return word[len(word)-2] + word[len(word)-1] + word[len(word)-2]\
    \ + word[len(word)-1] + word[len(word)-2] + word[len(word)-1]\n    }\n    \n \
    \   if vowel_count > 4 {\n        return \"\"\n    }\n    \n    return \"\"\n\
    }\n", "    leftConsonant := \"\"\n    rightConsonant := \"\"\n    index := len(word)\
    \ - 2\n    lastVowel := \"\"\n\n    // If word contains only English letters then\
    \ return empty string\n    if len(word) < 2 {\n        return \"\"\n    }\n\n\
    \    // If word contains only English letters then return empty string\n    if\
    \ word[0] != 'a' && word[0] != 'e' && word[0] != 'i' && word[0] != 'o' &&\n  \
    \      word[0] != 'u' && word[0] != 'y' {\n        return \"\"\n    }\n\n    //\
    \ Loop for finding the leftConsonant and rightConsonant with length 1 characters\n\
    \    for i := 0; i < len(word); i++ {\n        // Checking the current character\
    \ is a vowel\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' ||\n            word[i] == 'u' || word[i] == 'y' {\n        \
    \    // If the current character is a vowel then store the current index\n   \
    \         // and current character\n            lastVowel = word[i]\n        \
    \    index++\n            leftConsonant = word[index]\n        }\n    }\n\n  \
    \  // Loop for finding the leftConsonant and rightConsonant with length 2 characters\n\
    \    for i := 0; i < len(word); i++ {\n        // Checking the current character\
    \ is a vowel\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' ||\n            word[i] == 'u' || word[i] == 'y' {\n        \
    \    // If the current character is a vowel then store the current index\n   \
    \         // and current character\n            lastVowel = word[i]\n        \
    \    index++\n            rightConsonant = word[index]\n        }\n    }\n\n \
    \   if lastVowel != \"\" {\n        // Check if leftConsonant and rightConsonant\
    \ are empty\n        if leftConsonant == \"\" && rightConsonant == \"\" {\n  \
    \          return lastVowel\n        }\n\n        // Find the first letter from\
    \ the right side of the word\n        firstLetter := index\n        for index\
    \ += 2; index < len(word); index++ {\n            if word[index] == leftConsonant\
    \ {\n                break\n            }\n        }\n\n        // Find the first\
    \ letter from the left side of the word\n        for index -= 2; index >= 0; index--\
    \ {\n            if word[index] == rightConsonant {\n                break\n \
    \           }\n        }\n\n        // Find the last letter from the left side\
    \ of the word\n        for index -= 2; index >= 0; index-- {\n            if word[index]\
    \ == leftConsonant {\n                break\n            }\n        }\n\n    \
    \    // Find the last letter from the ", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    \n    // find all vowels in right side\n    vowelsR\
    \ := []string{}\n    start := len(word) - 1\n    for i := start; i >= 0; i-- {\n\
    \        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o'\
    \ || word[i] == 'u' {\n            vowelsR = append(vowelsR, word[i])\n      \
    \  }\n    }\n\n    // find all consonants in right side\n    consonants := []string{}\n\
    \    end := len(word) - 1\n    for i := end; i >= 0; i-- {\n        if word[i]\
    \ != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u'\
    \ {\n            consonants = append(consonants, word[i])\n        }\n    }\n\n\
    \    lenV := len(vowels)\n    lenC := len(consonants)\n    lenV := lenV - 1\n\
    \    lenC := lenC - 1\n    if lenC < 0 {\n        lenC = 0\n    }\n    if lenV\
    \ < 0 {\n        lenV = 0\n    }\n\n    // find closet vowel to right side\n \
    \   closetVowel := \"\"\n    if word[end] in vowelsR {\n        closetVowel =\
    \ word[end]\n    } else {\n        // find closet consonant from right side\n\
    \        closetConsonant := \"\"\n        if word[end] in consonants {\n     \
    \       closetConsonant = word[end]\n        } else {\n            closetConsonant\
    \ = \"\"\n        }\n    }\n\n    // find closet vowel and consonant from right\
    \ side\n    closetVowelIndex := -1\n    closetConsonantIndex := -1\n    if closetVowel\
    \ != \"\" {\n        for i, _ := range vowels {\n            if closetVowel ==\
    \ vowels[i] {\n                closetVowelIndex = i\n                break\n \
    \           }\n        }\n    }\n\n    if closetVowelIndex != -1 && closetConsonantIndex\
    \ != -1 {\n        if closetVowelIndex < closetConsonantIndex {\n            closetVowelIndex\
    \ += 1\n        }\n    } else {\n        if closetConsonantIndex > lenC {\n  \
    \          closetVowelIndex = lenV\n        } else {\n            closetVowelIndex\
    \ = lenV + 1\n        }\n    }\n\n    return vowels[closetVowelIndex]\n}", " \
    \   var count int = 0\n    var closest string = \"\"\n    for _, letter := range\
    \ word {\n        if letter == 'u' {\n            count += 1\n        }\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            count -= 1\n        }\n        if count == 0 {\n     \
    \       if closest != \"\" {\n                return closest\n            }\n\
    \            closest = \"\"\n        }\n        if letter == 'u' {\n         \
    \   closest = \"U\"\n            count = 0\n        }\n    }\n    if closest ==\
    \ \"\" {\n        return \"\"\n    }\n    return closest\n}\n", "    if word ==\
    \ \"\" {\n        return \"\"\n    }\n    vowelMap := make(map[rune]int)\n   \
    \ for _, r := range word {\n        if r == 'a' || r == 'e' || r == 'i' || r ==\
    \ 'o' || r == 'u' {\n            vowelMap[r]++\n        }\n    }\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        r := word[i]\n        if r == 'a' || r\
    \ == 'e' || r == 'i' || r == 'o' || r == 'u' {\n            if vowelMap[r] ==\
    \ 0 {\n                return \"\"\n            }\n            if vowelMap[r]\
    \ == 1 {\n                return string(r)\n            }\n            vowelMap[r]\
    \ -= 1\n        }\n    }\n    return \"\"\n}\n", "    vowels := []rune(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\")\n    lenVowels := len(vowels)\n    \n    lastIndex\
    \ := len(word) - 1\n    currentIndex := lastIndex\n    currentVowel := 'z' //\
    \ use 'z' as a default value if a vowel is not found\n    \n    // The while loop\
    \ will find the correct vowel\n    for currentIndex >= 0 {\n        currentVowel\
    \ = word[currentIndex]\n        if currentVowel == 'z' {\n            break //\
    \ jump out of the for loop when we found the 'z' character\n        }\n      \
    \  // Check if the word index is between the vowel range \n        // if so, check\
    \ whether the index is within the current vowel\n        if lastIndex >= 0 &&\
    \ currentIndex >= 0 && currentIndex <= lastIndex {\n            vowelsIndex, _\
    \ := strconv.Atoi(currentVowel)\n            vowelsIndex += 1 // index starts\
    \ from 0 \n            if vowelsIndex <= currentIndex {\n                return\
    \ currentVowel\n            }\n        }\n        lastIndex = currentIndex\n \
    \       currentIndex -= 1\n    }\n    \n    // if we didn't find the vowel\n \
    \   return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    n := len(vowels)\n    offset := len(word) - n\n    for i := n - 1; i\
    \ >= 0; i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u' {\n            if word[i+offset] == 'a' ||\
    \ word[i+offset] == 'e' || word[i+offset] == 'i' || word[i+offset] == 'o' || word[i+offset]\
    \ == 'u' {\n                return word[i+offset]\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    n := len(word)\n    vowels := make([]rune,\
    \ \"AEIOU\")\n    vowels2 := make([]rune, \"AEIOU\")\n    vowels3 := make([]rune,\
    \ \"AEIOU\")\n    vowels4 := make([]rune, \"AEIOU\")\n\n    for i, c := range\
    \ word {\n        if !isVowel(c) {\n            return \"\"\n        }\n\n   \
    \     if i == len(word)-1 || isVowel(word[i+1]) {\n            vowels2[word[i]-'A']\
    \ = 'A'\n            vowels3[word[i]-'A'] = 'E'\n            vowels4[word[i]-'A']\
    \ = 'I'\n            vowels4[word[i]-'A'] = 'O'\n            vowels4[word[i]-'A']\
    \ = 'U'\n\n            if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U' {\n                return word[i] + 'U'\n            }\n        }\n    }\n\
    \    \n    for i, c := range word {\n        if !isVowel(c) {\n            return\
    \ \"\"\n        }\n\n        if i == n-1 || isVowel(word[n-1]) {\n           \
    \ vowels2[word[i]-'A'] = 'A'\n            vowels3[word[i]-'A'] = 'E'\n       \
    \     vowels4[word[i]-'A'] = 'I'\n            vowels4[word[i]-'A'] = 'O'\n   \
    \         vowels4[word[i]-'A'] = 'U'\n\n            if c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U' {\n                return word[i] + 'U'\n \
    \           }\n        }\n    }\n    \n    for i, c := range word {\n        if\
    \ !isVowel(c) {\n            return \"\"\n        }\n\n        if i == n-1 ||\
    \ isVowel(word[n-1]) {\n            vowels2[word[i]-'A'] = 'A'\n            vowels3[word[i]-'A']\
    \ = 'E'\n            vowels4[word[i]-'A'] = 'I'\n            vowels4[word[i]-'A']\
    \ = 'O'\n            vowels4[word[i]-'A'] = 'U'\n\n            if c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n                return word[i]\
    \ + 'U'\n            }\n        }\n    }\n    \n    for i, c := range word {\n\
    \        if !isVowel(c) {\n            return \"\"\n        }\n\n        if i\
    \ == n-1 || isVowel(word[n-1]) {\n            vowels2", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    if len(word) <= 0 {\n        return \"\"\
    \n    }\n    index := len(word) - 1\n    for i := len(word) - 2; i >= 0; i-- {\n\
    \        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o'\
    \ || word[i] == 'u' {\n            if index == i {\n                return word[i]\n\
    \            }\n            index = i\n        }\n    }\n    return \"\"\n}\n",
  "    var first_vowel string\n    var index int\n    for index, _ = utf8.DecodeRuneInString(word);\
    \ index >= 0; index-- {\n        first_vowel = word[index]\n        if index >\
    \ 0 && index > len(word)-1 {\n            break\n        }\n        if first_vowel\
    \ == \"a\" {\n            return first_vowel\n        }\n    }\n\n    for index,\
    \ _ = utf8.DecodeRuneInString(word); index >= 0; index-- {\n        if index >\
    \ 0 && index > len(word)-1 {\n            break\n        }\n        if index ==\
    \ len(word)-1 || word[index] == \"z\" {\n            continue\n        }\n   \
    \     if word[index] == first_vowel {\n            return word[index]\n      \
    \  }\n    }\n    return \"\"\n}\n", "    // 1. Find the length of original word\n\
    \    if len(word) == 0 {\n        return \"\"\n    }\n    \n    // 2. Find the\
    \ first consonant\n    firstCons := find_first_consonant_rt(word)\n    if firstCons\
    \ == -1 {\n        return \"\"\n    }\n    \n    // 3. Find the first vowel\n\
    \    firstVowels := find_first_vowel_rt(word, firstCons)\n    if firstVowels ==\
    \ -1 {\n        return \"\"\n    }\n    \n    // 4. Find the last vowel\n    lastVowels\
    \ := find_last_vowel_rt(word, firstCons, len(word))\n    if lastVowels == -1 {\n\
    \        return \"\"\n    }\n    \n    // 5. Find the length of the string between\
    \ the first vowel\n    // and the last vowel\n    len := lastVowels - firstVowels\n\
    \    if len == 0 {\n        return \"\"\n    }\n    \n    // 6. Find the last\
    \ consonant\n    lastCons := find_last_consonant_rt(word, lastVowels, len(word))\n\
    \    if lastCons == -1 {\n        return \"\"\n    }\n    \n    // 7. Find the\
    \ position of the first vowel\n    pos := firstVowels + 1\n    if firstVowels\
    \ == lastVowels {\n        pos = firstVowels\n    }\n    \n    // 8. Find the\
    \ position of the last vowel\n    if lastVowels == firstVowels {\n        pos\
    \ = lastCons - 1\n    }\n    \n    // 9. Find the difference between first consonant\
    \ and last consonant\n    diff := firstCons - lastCons\n    \n    // 10. Find\
    \ the difference between first vowel and last vowel\n    diffVowels := firstVowels\
    \ - lastVowels\n    \n    // 11. Return the result\n    if diff == 0 {\n     \
    \   return \"\"\n    }\n    if diff < 0 {\n        return word[lastVowels-diffVowels:lastVowels]\n\
    \    }\n    if diff > 0 {\n        return word[firstVowels-diffVowels:firstVowels]\n\
    \    }\n}\n", "    if len(word) < 3 {\n        return \"\"\n    }\n    word +=\
    \ \"z\"\n    for i, c := range word {\n        if c >= 'a' && c <= 'z' || c >=\
    \ 'A' && c <= 'Z' {\n            count := 0\n            if c == 'a' || c == 'A'\
    \ {\n                count = 0\n            }\n            if c == 'b' || c ==\
    \ 'B' {\n                count = 1\n            }\n            if c == 'c' ||\
    \ c == 'C' {\n                count = 2\n            }\n            if c == 'd'\
    \ || c == 'D' {\n                count = 3\n            }\n            if c ==\
    \ 'e' || c == 'E' {\n                count = 4\n            }\n            if\
    \ c == 'f' || c == 'F' {\n                count = 5\n            }\n         \
    \   if c == 'g' || c == 'G' {\n                count = 6\n            }\n    \
    \        if c == 'h' || c == 'H' {\n                count = 7\n            }\n\
    \            if c == 'i' || c == 'I' {\n                count = 8\n          \
    \  }\n            if c == 'j' || c == 'J' {\n                count = 9\n     \
    \       }\n            if c == 'k' || c == 'K' {\n                count = 10\n\
    \            }\n            if c == 'l' || c == 'L' {\n                count =\
    \ 11\n            }\n            if c == 'm' || c == 'M' {\n                count\
    \ = 12\n            }\n            if c == 'n' || c == 'N' {\n               \
    \ count = 13\n            }\n            if c == 'o' || c == 'O' {\n         \
    \       count = 14\n            }\n            if c == 'p' || c == 'P' {\n   \
    \             count = 15\n            }\n            if c == 'q' || c == 'Q' {\n\
    \                count = 16\n            }\n            if c == 'r' || c == 'R'\
    \ {\n                count = 17\n            }\n            if c == 's' || c ==\
    \ 'S' {\n                count = 18\n            }\n            if c == 't' ||\
    \ c == 'T' {\n                count = 19\n            }\n            if c == 'u'\
    \ || c == 'U' {\n                count = 20\n            }\n            if c ==\
    \ 'v' || c == 'V' {\n                count = 21\n            }\n            if\
    \ c == 'w' || c == 'W' {\n                count = 22\n            }\n        \
    \    if c == 'x' || c == 'X' {\n                count = 23\n            }\n  \
    \          if c == 'y' || c == 'Y' {\n                count = 24\n           \
    \ }\n            if c == 'z' || c == 'Z' {\n                count = 25\n     \
    \       }\n            count -= len(word)-1\n            if count <= 0 {\n   \
    \             return c\n            }\n            count ", "    if word == \"\
    \" {\n        return \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\",\
    \ \"o\", \"u\", \"y\", \"y\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"y\"\
    }\n    start := 0\n    for i := len(word) - 1; i >= 0; i-- {\n        if word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\
    \ {\n            if start == 0 {\n                start = i\n            }\n \
    \       }\n        if word[i] == 'y' && start != 0 {\n            return word[start:i]\n\
    \        }\n    }\n    return word[start:]\n}\n", "    // Your code here\n   \
    \ vowels := map[rune]rune{\n        'a': 'u',\n        'e': 'u',\n        'i':\
    \ 'i',\n        'o': 'i',\n        'u': 'u',\n    }\n    vowelsIndex := make([]int,\
    \ len(vowels))\n    for index := 0; index < len(word); index++ {\n        vowelsIndex[index]\
    \ = -1\n    }\n\n    for index := len(word) - 1; index >= 0; index-- {\n     \
    \   if vowels[word[index]] != rune('u') {\n            vowelsIndex[index] = len(word)\n\
    \            break\n        }\n    }\n\n    for index := len(word) - 1; index\
    \ >= 0; index-- {\n        if vowels[word[index]] == rune('u') {\n           \
    \ vowelsIndex[index] = index\n        }\n    }\n\n    return word[vowelsIndex[0]]\n\
    }\n", "    vowels := []rune(\"aeiouy\")\n    leftRightIndex, _ := strconv.Atoi(word)\n\
    \    leftRightIndex--\n    leftRightIndex--\n    foundVowel := false\n    for\
    \ i := 0; i < len(vowels); i++ {\n        if leftRightIndex == len(word) {\n \
    \           if foundVowel {\n                return \"\"\n            }\n    \
    \        foundVowel = true\n        } else {\n            if strings.IndexByte(word[leftRightIndex:i],\
    \ vowels[i]) != -1 {\n                return vowels[i]\n            }\n      \
    \  }\n    }\n    return \"\"\n}\n", "    // return empty string if the word is\
    \ not in English\n    if len(word) < 4 || len(word) > 30 || len(word) == 0 {\n\
    \        return \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    vowels_index := []int{2, 5, 8, 11, 14}\n    index := 0\n    for\
    \ index = 0; index < len(word); index++ {\n        if word[index] in vowels {\n\
    \            vowels = append(vowels, word[index])\n            vowels_index =\
    \ append(vowels_index, index)\n        }\n    }\n    index := vowels_index[len(vowels_index)-1]\n\
    \    if index > len(word)-1 {\n        return \"\"\n    }\n    if word[index]\
    \ in \"AEIOU\" {\n        return word[index]\n    }\n    index := vowels_index[len(vowels_index)-2]\n\
    \    if index > len(word)-1 {\n        return \"\"\n    }\n    if word[index]\
    \ in \"AEIOU\" {\n        return word[index]\n    }\n    return \"\"\n}\n", " \
    \   result := \"\"\n    vowels := []rune(\"aeiouy\")\n    for _, vowel := range\
    \ vowels {\n        if word != \"\" {\n            if word != word {\n       \
    \         break\n            }\n            for i := len(word) - 2; i < len(word);\
    \ i++ {\n                if word[i] == vowel && word[i+1] == vowel {\n       \
    \             result += string(vowel)\n                }\n            }\n    \
    \    }\n    }\n    return result\n}\n", "    vowel := \"aeiouAEIOU\"\n    vowelLen\
    \ := len(vowel)\n    vowelIndex := 0\n    vowelPos := 0\n    i := len(word) -\
    \ 1 // go right to left\n    j := 0\n    k := 0\n\n    // find index of a consonant\n\
    \    for ; i > 0; i-- {\n        if word[i] == rune(\" \") {\n            j =\
    \ i\n            break\n        }\n    }\n    \n    // find closest vowel between\
    \ vowelPos and j\n    for ; i < j; i++ {\n        if word[i] == vowel[j] {\n \
    \           vowelPos = i\n            break\n        }\n    }\n\n    // find closest\
    \ vowel between j and i\n    for ; j < i; j++ {\n        if word[i] == vowel[j]\
    \ {\n            vowelIndex = j\n            break\n        }\n    }\n\n    //\
    \ find closest vowel between i and j\n    for ; i < j; i++ {\n        for ; j\
    \ < len(word); j++ {\n            if word[i] == vowel[j] {\n                vowelIndex\
    \ = i\n                break\n            }\n        }\n    }\n\n    // find closest\
    \ vowel between i and len(word)\n    for ; j < len(word); j++ {\n        for ;\
    \ i < len(word); i++ {\n            if word[i] == vowel[i] {\n               \
    \ vowelIndex = i\n                break\n            }\n        }\n    }\n\n \
    \   if vowelIndex < 0 {\n        return \"\"\n    }\n\n    if vowelPos == 0 {\n\
    \        return vowel[vowelIndex]\n    } else if vowelPos == j {\n        return\
    \ word[vowelPos]\n    } else if vowelIndex == j {\n        return word[vowelPos]\n\
    \    } else {\n        return word[vowelPos] + vowel[vowelIndex]\n    }\n}\n",
  "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    i := len(word) - 2\n    index\
    \ := len(vowels) - 1\n\n    // find out if the first or last character is a vowel\n\
    \    if word[0] == vowels[index] {\n        if i-- == -1 {\n            return\
    \ \"\"\n        }\n    } else {\n        if i == 0 {\n            return \"\"\n\
    \        }\n    }\n\n    for ; index >= 0 && index < len(vowels); index-- {\n\
    \        if word[i] == vowels[index] {\n            i++\n            if i == len(word)\
    \ {\n                return vowels[index]\n            }\n        }\n    }\n\n\
    \    return \"\"\n}\n", "    vowelList := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    vowelIndex := 0\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if word[i] == \"a\" || word[i] == \"e\"\
    \ || word[i] == \"i\" || word[i] == \"o\" || word[i] == \"u\" {\n            if\
    \ vowelIndex == 0 {\n                return word[i]\n            } else {\n  \
    \              if vowelIndex > 0 {\n                    return word[i]\n     \
    \           } else {\n                    break\n                }\n         \
    \   }\n        } else {\n            break\n        }\n    }\n    return \"\"\n\
    }\n", "    vowels := []rune(\"AEIOU\")\n    result := \"\"\n    leftIndex := len(word)\
    \ - 1\n    rightIndex := 0\n    \n    for i := range vowels {\n        if leftIndex\
    \ < 0 || rightIndex < 0 {\n            return \"\"\n        }\n        \n    \
    \    if word[leftIndex] == vowels[i] {\n            leftIndex--\n        }\n \
    \       if word[rightIndex] == vowels[i] {\n            rightIndex++\n       \
    \ }\n    }\n    \n    if leftIndex > 0 && rightIndex > 0 {\n        result = word[rightIndex-1]\n\
    \    }\n    \n    return result\n}\n", "    if word == \"\" {\n        return\
    \ \"\"\n    }\n\n    vowel := \"a\"\n    leftCon := false\n    rightCon := false\n\
    \n    for index, letter := range word {\n        if letter == \"a\" || letter\
    \ == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\" {\n      \
    \      if leftCon {\n                leftCon = false\n            } else {\n \
    \               leftCon = true\n                vowel = letter\n            }\n\
    \        }\n\n        if letter == \"e\" || letter == \"i\" || letter == \"o\"\
    \ || letter == \"u\" {\n            if rightCon {\n                rightCon =\
    \ false\n            } else {\n                rightCon = true\n             \
    \   vowel = letter\n            }\n        }\n    }\n\n    return vowel\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    words := strings.Split(word,\
    \ \"\")\n    result := \"\"\n    for i := len(words) - 2; i >= 0; i-- {\n    \
    \    prev := words[i]\n        current := words[i+1]\n        switch {\n     \
    \   case current == \"y\" && prev == \"g\":\n        case \"h\" && prev == \"\
    q\":\n        case \"z\" && prev == \"z\":\n            result += current\n  \
    \      case strings.Contains(vowels, current):\n            result += current\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhat happens if the first two letters of\
    \ the word are vowels? Your answer will return the second consonant in the word\
    \ instead of the first.\n<|/ c |>\n<| c |>\nYou are right, thanks. I've changed\
    \ the code, now it should work correctly.\n<|/ c |>\n<| a |>\nI think you forgot\
    \ to include a return statement in the else case. Your code will always reach\
    \ the else case and will never return anything. Therefore, that else statement\
    \ will never be reached.\n<|/ a tags=string,go dscore=0 |>\n<| a dscore=0 tags=string,go\
    \ |>\nThe best way to find the closest vowel is to create a map of vowels and\
    \ check where that vowel is in the word.\nHere is a simple solution:\n<code>",
  "    var result string = word\n    var vowel string = strings.ToUpper(word[strings.LastIndex(word,\
    \ \"AEIOUaeiou\")+2:])\n    for i := len(word)-1; i >= 0; i-- {\n        if strings.ContainsAny(word[i:],\
    \ []rune(vowel)) {\n            result = word[:i+1]\n            break\n     \
    \   }\n    }\n    return result\n}\n</code>\n<|/ a |>\n<| c |>\nThe question specifically\
    \ says that you should start searching from the end. Your solution doesn't solve\
    \ the problem for \"Yogurt\" because \"gurt\" is in the middle of the word, which\
    \ is not between vowels.\n<|/ c |>\n<| c |>\n: Updated with solution that works\
    \ in that scenario.\n<|/ c |>\n<| a dscore=0 |>\nBased on my understanding of\
    \ the problem and the provided answers, I came up with the following solution:\n\
    <code>\npackage main\n\nimport (\n    \"strings\"\n    \"unicode\"\n)\n", "  \
    \  vowels := []rune(\"AEIOUaeiou\")\n    for i, _ := range word[0:len(word)-1]\
    \ {\n        if word[i] == vowels[len(vowels)-1] {\n            return string(i)\n\
    \        }\n    }\n    return \"\"\n}\n", "    if len(word) == 0 {\n        return\
    \ \"\"\n    }\n\n    if word[len(word)-1] == 'a' || word[len(word)-1] == 'e' ||\
    \ word[len(word)-1] == 'i' || word[len(word)-1] == 'o' || word[len(word)-1] ==\
    \ 'u' || word[len(word)-1] == 'y' {\n        return word[len(word)-1]\n    }\n\
    \n    if word[len(word)-2] == 'a' || word[len(word)-2] == 'e' || word[len(word)-2]\
    \ == 'i' || word[len(word)-2] == 'o' || word[len(word)-2] == 'u' || word[len(word)-2]\
    \ == 'y' {\n        return word[len(word)-2]\n    }\n\n    if word[len(word)-3]\
    \ == 'a' || word[len(word)-3] == 'e' || word[len(word)-3] == 'i' || word[len(word)-3]\
    \ == 'o' || word[len(word)-3] == 'u' || word[len(word)-3] == 'y' {\n        return\
    \ word[len(word)-3]\n    }\n\n    if word[len(word)-4] == 'a' || word[len(word)-4]\
    \ == 'e' || word[len(word)-4] == 'i' || word[len(word)-4] == 'o' || word[len(word)-4]\
    \ == 'u' || word[len(word)-4] == 'y' {\n        return word[len(word)-4]\n   \
    \ }\n\n    if word[len(word)-5] == 'a' || word[len(word)-5] == 'e' || word[len(word)-5]\
    \ == 'i' || word[len(word)-5] == 'o' || word[len(word)-5] == 'u' || word[len(word)-5]\
    \ == 'y' {\n        return word[len(word)-5]\n    }\n\n    if word[len(word)-6]\
    \ == 'a' || word[len(word)-6] == 'e' || word[len(word)-6] == 'i' || word[len(word)-6]\
    \ == 'o' || word[len(word)-6] == 'u' || word[len(word)-6] == 'y' {\n        return\
    \ word[len(word)-6]\n    }\n\n    if word[len(word)-7] == 'a' || word[len(word)-7]\
    \ == 'e' || word[len(word)-7] == 'i' || word[len(word)-7] == 'o' || word[len(word)-7]\
    \ == 'u' || word[len(word)-7] == 'y' {\n        return word[len(word)-7]\n   \
    \ }\n\n    return \"\"\n}\n</code>\n<|/ a tags=go,string |>\n<| a tags=go,string\
    \ |>\nYou were not using regexp.FindStringSubmatch.\n<code>\npackage main\n\n\
    import \"fmt\"\nimport \"regexp\"\n", "    if len(word) <= 2 {\n        return\
    \ \"\"\n    }\n    // find the first vowel from the right\n    vowel := word[len(word)-2]\n\
    \    if vowel == \"a\" || vowel == \"e\" || vowel == \"i\" || vowel == \"o\" ||\
    \ vowel == \"u\" {\n        return vowel\n    }\n    // find the first vowel from\
    \ the left\n    return word[len(word)-1]\n}\n", "    var vowels []rune = \"AEIOUaeiou\"\
    \n    var k int\n\n    for k := len(word) - 2; k >= 0; k-- {\n        if word[k]\
    \ == vowels[k] && word[k+1] == vowels[k+1] {\n            return string(vowels[k+1])\n\
    \        }\n    }\n\n    return \"\"\n}\n", "    vowels := []rune(\"aeiouAEIOU\"\
    )\n    var i int\n    i := len(word)\n    for ; i < len(word); i++ {\n       \
    \ if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i]\
    \ == 'u' {\n            continue\n        }\n        for k := i - 1; k >= 0; k--\
    \ {\n            if word[k] == 'A' || word[k] == 'E' || word[k] == 'I' || word[k]\
    \ == 'O' || word[k] == 'U' {\n                continue\n            }\n      \
    \      if word[k] == word[i] {\n                return word[k]\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    // Complete this function\n   \
    \ vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelLen := len(vowels)\n\
    \    if len(word) == 0 {\n        return \"\"\n    }\n    if word[0] != vowels[0]\
    \ {\n        return \"\"\n    }\n    lastVowel := vowels[0]\n    lastIndex :=\
    \ 0\n    for i := 1; i < len(word); i++ {\n        if word[i] != vowels[i] {\n\
    \            if word[i] == lastVowel {\n                if i == len(word)-1 {\n\
    \                    return word[lastIndex:len(word)-1]\n                } else\
    \ {\n                    lastIndex = i\n                }\n            } else\
    \ {\n                return \"\"\n            }\n            lastVowel = word[i]\n\
    \        }\n    }\n    return \"\"\n}", "    // Write your code here\n    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\"}\n    wordLen := len(word)\n    left := 0\n    right := len(vowels)\n    closestVowel\
    \ := \"\"\n    \n    if wordLen == 0 {\n        return \"\"\n    }\n    \n   \
    \ for left < right {\n        middle, right := (left + right) / 2, (left + right)\
    \ % 2\n        if vowels[middle] == word[right] {\n            if middle == right\
    \ {\n                closestVowel = vowels[middle]\n            } else {\n   \
    \             closestVowel = vowels[middle]\n            }\n            break\n\
    \        }\n    }\n    return closestVowel\n}\n", "    if len(word) == 0 {\n \
    \       return \"\"\n    }\n    vowels := map[string]", "    vowel := \"AEIOUaeiou\"\
    \n    index := len(word)\n    result := \"\"\n    start := 0\n    end := 0\n \
    \   for start < index {\n        end := start + 1\n        if word[start] != word[end]\
    \ {\n            end -= 1\n        }\n        if word[start] >= 'a' && word[start]\
    \ <= 'z' {\n            end++\n        }\n        if word[end] >= 'A' && word[end]\
    \ <= 'Z' {\n            end--\n        }\n        if start > end {\n         \
    \   break\n        }\n        if word[start] == \"a\" || word[start] == \"e\"\
    \ || word[start] == \"i\" {\n            end++\n        }\n        if word[end]\
    \ == \"a\" || word[end] == \"e\" || word[end] == \"i\" {\n            end--\n\
    \        }\n        if word[start] == \"y\" || word[start] == \"u\" || word[start]\
    \ == \"a\" {\n            start++\n        }\n        if word[end] == \"y\" ||\
    \ word[end] == \"u\" || word[end] == \"a\" {\n            start--\n        }\n\
    \        if word[start] == \"a\" || word[start] == \"e\" || word[start] == \"\
    i\" {\n            start++\n        }\n        if word[end] == \"a\" || word[end]\
    \ == \"e\" || word[end] == \"i\" {\n            start--\n        }\n        if\
    \ word[start] == \"u\" || word[start] == \"o\" || word[start] == \"e\" {\n   \
    \         start++\n        }\n        if word[end] == \"u\" || word[end] == \"\
    o\" || word[end] == \"e\" {\n            start--\n        }\n        if start\
    \ > end {\n            break\n        }\n        if word[start] == \"a\" || word[start]\
    \ == \"e\" || word[start] == \"i\" {\n            end++\n        }\n        if\
    \ word[end] == \"a\" || word[end] == \"e\" || word[end] == \"i\" {\n         \
    \   end--\n        }\n        if word[start] == \"u\" || word[start] == \"o\"\
    \ || word[start] == \"e\" {\n            start++\n        }\n        if word[end]\
    \ == \"u\" || word[end] == \"o\" || word[end] == \"e\" {\n            start--\n\
    \        }\n        if start > end {\n            break\n        }\n        if\
    \ word[start] == \"a\" || word[start] == \"e\" || word[start] == \"i\" {\n   \
    \         end++\n        }\n        if word[end] == \"a\" || ", "    if len(word)\
    \ == 0 {\n        return \"\"\n    }\n    vowels := []string{\"A\", \"E\", \"\
    I\", \"O\", \"U\", \"Y\"}\n    first := len(word)-1\n    last := 0\n    min :=\
    \ len(vowels)\n    for i := 0; i < len(word); i++ {\n        if word[i] == vowels[min]\
    \ {\n            first--\n            min--\n        } else {\n            first++\n\
    \            min++\n        }\n        last++\n    }\n    return word[first:last]\n\
    }\n", "    index := len(word) - 1\n    for i := 0; i < len(word); i++ {\n    \
    \    if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' ||\
    \ word[i] == 'u' {\n            index = i\n            break\n        }\n    }\n\
    \    if index == 0 {\n        return \"\"\n    }\n    wordLen := len(word)\n \
    \   vowelLen := 0\n    vowelIndex := len(word) - 2\n    for i := index; i >= 0;\
    \ i-- {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' {\n            vowelLen += 1\n        } else {\n  \
    \          if wordLen - i != vowelIndex {\n                vowelIndex = i - vowelLen\
    \ + 1\n            } else {\n                vowelIndex = 0\n            }\n \
    \           vowelLen = 0\n        }\n    }\n    return word[vowelIndex:]\n}\n",
  "    word := strings.ToLower(word)\n    vowels := []string{\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n    lastIndex := len(word) - 1\n    index := 0\n    start :=\
    \ false\n    for index < len(word) {\n        if !start && word[index] != vowels[0]\
    \ && word[index] != vowels[len(vowels)-1] {\n            start = true\n      \
    \  }\n        if start {\n            if word[index] == vowels[index] {\n    \
    \            index++\n            } else {\n                start = false\n  \
    \              lastIndex = index\n            }\n        }\n        if index ==\
    \ lastIndex {\n            return \"\"\n        }\n    }\n    return word[index]\n\
    }\n", "    vowels := []rune(\"aeiouAEIOU\")\n    chars := []rune(word)\n    left\
    \ := 0\n    right := len(chars)\n    result := \"\"\n    for {\n        if right\
    \ <= left {\n            return result\n        }\n        char := chars[right]\n\
    \        index := -1\n        for i, _ := range vowels {\n            if char\
    \ == vowels[i] {\n                index = i\n            }\n        }\n      \
    \  if index > -1 {\n            if index == 0 {\n                result = char\n\
    \            } else {\n                result = chars[right-1] + char\n      \
    \      }\n        }\n        right--\n        left++\n    }\n}\n", "    var maxLength\
    \ int = -1\n    var maxVowel string = \"\"\n    for _, i := range word {\n   \
    \     if i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' {\n        \
    \    maxLength++\n            if maxLength > maxVowel {\n                maxLength\
    \ = -1\n                maxVowel = i\n            }\n        }\n    }\n    if\
    \ maxLength == -1 {\n        return \"\"\n    }\n    if maxLength < 2 {\n    \
    \    return maxVowel\n    }\n    for i := len(word) - maxLength - 1; i >= 0; i--\
    \ {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' {\n            if maxLength < 2 {\n               \
    \ return word[i]\n            }\n            maxLength--\n            if maxLength\
    \ == 0 {\n                return \"\"\n            }\n        }\n    }\n    return\
    \ maxVowel\n}\n", "    start := len(word) - 1\n    end := len(word)\n    count\
    \ := 0\n    index := -1\n    for i := 0; i < len(word); i++ {\n        if word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'\
    \ {\n            start = i\n            break\n        }\n    }\n    for i :=\
    \ 0; i < len(word); i++ {\n        if word[len(word)-i-1] == 'a' || word[len(word)-i-1]\
    \ == 'e' || word[len(word)-i-1] == 'i' || word[len(word)-i-1] == 'o' || word[len(word)-i-1]\
    \ == 'u' {\n            end = len(word)-i-1\n            break\n        }\n  \
    \  }\n    for i := 0; i < len(word); i++ {\n        if word[i] >= 'a' && word[i]\
    \ <= 'z' {\n            index++\n        }\n    }\n    for i := 0; i < len(word);\
    \ i++ {\n        if start < i && i < end {\n            if word[i] == word[end]\
    \ {\n                count += 1\n            }\n        }\n    }\n    if count\
    \ > 1 {\n        return word[index]\n    } else {\n        return \"\"\n    }\n\
    }\n", "    vowel := \"AEIOUaeiouAEIOU\"\n    i := 0\n    for ; i < len(word);\
    \ i++ {\n        if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u'{\n            j = i\n            for ; j < len(word)\
    \ && vowel[j] == 'A' && vowel[j+1] == 'E' && vowel[j+2] == 'I' && vowel[j+3] ==\
    \ 'O' && vowel[j+4] == 'U'; j++ {\n            }\n            if j == len(word){\n\
    \                return \"\"\n            }\n            return word[i+1:]\n \
    \       }\n    }\n    return \"\"\n}\n", "    // write your code here\n    //\
    \ if word == \"\" { return \"\" }\n    // vowel := []rune(\"aeiouAEIOU\")\n  \
    \  // start := 0\n    // end := len(word) - 1\n    // if word[start] == 'a' &&\
    \ word[end] == 'a' { start++ }\n    // if word[start] == 'a' && word[end] == 'e'\
    \ { start++ }\n    // if word[start] == 'a' && word[end] == 'i' { start++ }\n\
    \    // if word[start] == 'a' && word[end] == 'o' { start++ }\n    // if word[start]\
    \ == 'a' && word[end] == 'u' { start++ }\n    // if word[start] == 'e' && word[end]\
    \ == 'e' { end-- }\n    // if word[start] == 'e' && word[end] == 'i' { end-- }\n\
    \    // if word[start] == 'e' && word[end] == 'o' { end-- }\n    // if word[start]\
    \ == 'e' && word[end] == 'u' { end-- }\n    // if word[start] == 'i' && word[end]\
    \ == 'i' { end-- }\n    // if word[start] == 'i' && word[end] == 'o' { end-- }\n\
    \    // if word[start] == 'i' && word[end] == 'u' { end-- }\n    // if word[start]\
    \ == 'o' && word[end] == 'o' { end-- }\n    // if word[start] == 'o' && word[end]\
    \ == 'u' { end-- }\n    // if word[start] == 'u' && word[end] == 'u' { end-- }\n\
    \    // if start > end { return \"\" }\n\n    vowel := []rune(\"aeiouAEIOU\")\n\
    \    start := 0\n    end := len(word) - 1\n    if word[start] == 'a' && word[end]\
    \ == 'a' { start++ }\n    if word[start] == 'a' && word[end] == 'e' { start++\
    \ }\n    if word[start] == 'a' && word[end] == 'i' { start++ }\n    if word[start]\
    \ == 'a' && word[end] == 'o' { start++ }\n    if word[start] == 'a' && word[end]\
    \ == 'u' { start++ }\n    if word[start] == 'e' && word[end] == 'e' { end-- }\n\
    \    if word[start] == 'e' && word[end] == 'i' { end-- }\n    if word[start] ==\
    \ 'e' && word[end] == 'o' { end-- }\n    if word[start] == 'e", "    vowel :=\
    \ map[rune]bool{\n        'a':true, 'e':true, 'i':true, 'o':true, 'u':true,\n\
    \        'A':true, 'E':true, 'I':true, 'O':true, 'U':true,\n    }\n    for _,\
    \ i := range word {\n        for _, j := range word {\n            start := j\n\
    \            end := j\n            if i != 'a' {\n                start++\n  \
    \          }\n            if i != ' ' {\n                end++\n            }\n\
    \            if end < start {\n                continue\n            }\n     \
    \       if start > len(word) {\n                start = 0\n            }\n   \
    \         if end > len(word) {\n                end = len(word)\n            }\n\
    \            if start > end {\n                start = end - 1\n             \
    \   end = start + 1\n            }\n            if start > len(word) || end >\
    \ len(word) {\n                continue\n            }\n            if start <\
    \ 0 {\n                start = 0\n            }\n            if end < 0 {\n  \
    \              end = 0\n            }\n            if start > end {\n        \
    \        continue\n            }\n            if start >= len(word) || end >=\
    \ len(word) {\n                continue\n            }\n            if i > rune(word[start])\
    \ {\n                start = end - 1\n                end = start + 1\n      \
    \      }\n            if i > rune(word[end]) {\n                start = end -\
    \ 1\n                end = start + 1\n            }\n            if i > rune(word[start])\
    \ {\n                continue\n            }\n            if i > rune(word[end])\
    \ {\n                continue\n            }\n            if start >= end {\n\
    \                continue\n            }\n            i := rune(word[start])\n\
    \            if i == ' ' || i == ' ' {\n                continue\n           \
    \ }\n            if i > rune(word[end]) {\n                continue\n        \
    \    }\n            if i == ' ' {\n                continue\n            }\n \
    \           if i > rune(word[end]) {\n                continue\n            }\n\
    \            if i := i - rune(word[start]); !vowel[i] {\n                continue\n\
    \            }\n            if i := i + rune(word[end]); !vowel[i] {\n       \
    \         continue\n            }\n            return string(vowel[:])\n     \
    \   }\n    }\n    return \"\"\n}\n", "    if word == \"\" {\n        return \"\
    \"\n    }\n\n    vowels := \"aeiouAEIOU\"\n    lastVowel := 0\n    for _, v :=\
    \ range vowels {\n        if word != \"\" {\n            isVowel := false\n  \
    \          if word[0] == v {\n                isVowel = true\n            }\n\
    \            if word[len(word)-1] == v {\n                isVowel = true\n   \
    \         }\n            if !isVowel {\n                continue\n           \
    \ }\n\n            idx := -1\n            if word[len(word)-1] == v {\n      \
    \          idx = len(word)-1\n            } else {\n                idx = len(word)-2\n\
    \            }\n            if idx > 0 && idx < len(word)-2 {\n              \
    \  lastVowel = v\n                break\n            }\n        }\n    }\n   \
    \ if lastVowel >= 0 {\n        return lastVowel\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"e\",\
    \ \"i\", \"o\", \"u\", \"y\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    for\
    \ i, v := range vowels {\n        if word == v {\n            return word\n  \
    \      }\n    }\n    return \"\"\n}\n", "    var result string\n    var index\
    \ int\n    for index = 1; index+1 < len(word); index++ {\n        if word[index-1]\
    \ == word[index] {\n            if word[index-1] == 'a' || word[index-1] == 'e'\
    \ || word[index-1] == 'i' || word[index-1] == 'o' || word[index-1] == 'u' {\n\
    \                if result != \"\" {\n                    result = \"\"\n    \
    \            }\n                result = word[index-1]\n                break\n\
    \            }\n        }\n    }\n    if result != \"\" {\n        result = \"\
    \"\n    }\n    return result\n}\n", "    // init vowels\n    var vowels = []rune(\"\
    aAiIoOuU\")\n    // init max count\n    var maxCount = 1\n    // init min count\n\
    \    var minCount = 1\n    // init max count\n    var maxCount_prev = 1\n    //\
    \ init min count\n    var minCount_prev = 1\n\n    for idx, c := range word {\n\
    \        // find vowels\n        if idx, ok := vowels.Index(rune(c)) ; ok {\n\
    \            // get count of this vowel\n            count := idx + 1\n      \
    \      // update min and max count\n            if count > maxCount {\n      \
    \          maxCount = count\n            }\n            if count < minCount {\n\
    \                minCount = count\n            }\n            // update prev min\
    \ and max count\n            if count > maxCount_prev {\n                maxCount_prev\
    \ = count\n            }\n            if count < minCount_prev {\n           \
    \     minCount_prev = count\n            }\n        }\n    }\n    if minCount_prev\
    \ < minCount {\n        return \"\"\n    }\n    if maxCount_prev > maxCount {\n\
    \        return \"\"\n    }\n    return word[maxCount_prev-minCount_prev+1]\n\
    }\n", "    if len(word) <= 0 {\n        return \"\"\n    }\n    vowels := []rune(\"\
    u\")\n    vowels = append(vowels, rune(\"a\"), rune(\"e\"), rune(\"i\"), rune(\"\
    o\"), rune(\"u\"))\n    vowels = append(vowels, rune(\"A\"), rune(\"E\"), rune(\"\
    I\"), rune(\"O\"), rune(\"U\"))\n    if len(word) < 2 {\n        return \"\"\n\
    \    }\n    vowelIndexStart := len(word) - 2\n    vowelIndexEnd := len(word) -\
    \ 1\n    for i := len(vowels) - 1; i >= 0; i-- {\n        vowelIndexEnd--\n  \
    \      if vowelIndexEnd < 0 {\n            vowelIndexEnd = len(vowels)\n     \
    \   }\n        if word[vowelIndexEnd] >= vowels[i] {\n            vowelIndexEnd--\n\
    \            if vowelIndexEnd < 0 {\n                vowelIndexEnd = len(vowels)\n\
    \            }\n            break\n        }\n    }\n    if word[vowelIndexStart]\
    \ < 'A' || word[vowelIndexStart] >= 'Z' {\n        return \"\"\n    }\n    if\
    \ word[vowelIndexEnd] < 'A' || word[vowelIndexEnd] >= 'Z' {\n        return \"\
    \"\n    }\n    return string(vowels[vowelIndexEnd-vowelIndexStart+1])\n}\n", " \
    \   vowel := []rune(\"aeiouy\")\n    i := len(word) - 1\n    found := false\n\
    \    for !found {\n        found = true\n        if i >= 0 {\n            if word[i]\
    \ != vowel[((i+1)%len(vowel))] {\n                found = false\n            }\n\
    \        }\n        i--\n    }\n    if i >= 0 {\n        return string(vowel[(len(word)\
    \ - i)%len(vowel)])\n    }\n    return \"\"\n}\n", "    var ans string = \"\"\n\
    \    var prev string = \"\"\n    var next string = \"\"\n    var prevlen int =\
    \ 1\n    var nextlen int = 1\n    \n    for _, v := range word {\n        if v\
    \ == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n            prevlen\
    \ = prevlen + 1\n            if prevlen > 1 {\n                ans += v\n    \
    \        }\n            prev = \"\"\n            continue\n        }\n       \
    \ if v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n            nextlen = nextlen\
    \ + 1\n            if nextlen > 1 {\n                ans += v\n            }\n\
    \            next = \"\"\n            continue\n        }\n        if prevlen\
    \ == 1 {\n            prev = v\n            continue\n        }\n        if nextlen\
    \ == 1 {\n            next = v\n            continue\n        }\n        if prevlen\
    \ < nextlen {\n            prev = v\n            continue\n        }\n       \
    \ if prevlen > nextlen {\n            next = v\n            continue\n       \
    \ }\n    }\n    return ans\n}\n", "    var vowel string\n    for i := 0; i < len(word);\
    \ i++ {\n        if isLetter(word[i]) && !isLetter(word[len(word)-1-i]) {\n  \
    \          if word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] ==\
    \ 'o' || word[i] == 'u' {\n                vowel = word[i]\n            }\n  \
    \      }\n    }\n    return vowel\n}\n", "    vowelList := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    \n    if len(word) <= 0 {\n        return \"\"\n\
    \    }\n    \n    for _, v := range vowelList {\n        start := len(word)\n\
    \        end := len(word) - 1\n        if start > end {\n            break\n \
    \       }\n        \n        if word[start] == v {\n            start++\n    \
    \    }\n        if word[end] == v {\n            end--\n        }\n        if\
    \ start > end {\n            continue\n        }\n        \n        length :=\
    \ end - start + 1\n        if length > len(vowelList)/2 {\n            continue\n\
    \        }\n        return v\n    }\n    return \"\"\n}\n", "    vowels := []rune{'u',\
    \ 'a', 'e', 'i', 'o', 'u'}\n    \n    for i := len(word) - 2; i >= 0; i-- {\n\
    \        if vowels[word[i]-'a'] > 0 && word[i+1] == 'o' && word[i+2] == 'u'{\n\
    \            return string(word[i+1])\n        }\n    }\n    return \"\"\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nI got some ideas from Kent's answer, but\
    \ here's my approach:\n<code>", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    vowelsLL := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n\n    vowelsL := map[string]bool{}\n\
    \    for _, v := range vowelsLL {\n        vowelsL[v] = false\n    }\n\n    for\
    \ i, c := range word {\n        if vowelsLL[i] == c {\n            vowelsLL[i]\
    \ = true\n        } else {\n            vowelsLL[i] = false\n        }\n    }\n\
    \n    lastV := vowelsLL[len(vowelsLL)-1]\n    for i, v := range vowels {\n   \
    \     if vowelsLL[i] == false && v == lastV {\n            return v\n        }\n\
    \    }\n\n    return \"\"\n}\n", "    // write your code in Main HERE\n    var\
    \ result string\n    result := \"\"\n    if strings.Index(word,\"A\")!=-1 && strings.Index(word,\"\
    E\")!=-1 && strings.Index(word,\"I\")!=-1 && strings.Index(word,\"O\")!=-1 &&\
    \ strings.Index(word,\"U\")!=-1 && strings.Index(word,\"Y\")!=-1 {\n        result\
    \ += \"A\"\n    }\n    if strings.Index(word,\"a\")!=-1 && strings.Index(word,\"\
    e\")!=-1 && strings.Index(word,\"i\")!=-1 && strings.Index(word,\"o\")!=-1 &&\
    \ strings.Index(word,\"u\")!=-1 && strings.Index(word,\"y\")!=-1 {\n        result\
    \ += \"a\"\n    }\n    if strings.Index(word,\"B\")!=-1 && strings.Index(word,\"\
    C\")!=-1 && strings.Index(word,\"G\")!=-1 && strings.Index(word,\"K\")!=-1 &&\
    \ strings.Index(word,\"M\")!=-1 && strings.Index(word,\"N\")!=-1 && strings.Index(word,\"\
    R\")!=-1 && strings.Index(word,\"S\")!=-1 {\n        result += \"B\"\n    }\n\
    \    if strings.Index(word,\"b\")!=-1 && strings.Index(word,\"c\")!=-1 && strings.Index(word,\"\
    g\")!=-1 && strings.Index(word,\"k\")!=-1 && strings.Index(word,\"m\")!=-1 &&\
    \ strings.Index(word,\"n\")!=-1 && strings.Index(word,\"r\")!=-1 && strings.Index(word,\"\
    s\")!=-1 {\n        result += \"b\"\n    }\n    if strings.Index(word,\"D\")!=-1\
    \ && strings.Index(word,\"F\")!=-1 && strings.Index(word,\"H\")!=-1 && strings.Index(word,\"\
    J\")!=-1 && strings.Index(word,\"L\")!=-1 && strings.Index(word,\"O\")!=-1 &&\
    \ strings.Index(word,\"P\")!=-1 && strings.Index(word,\"T\")!=-1 {\n        result\
    \ += \"D\"\n    }\n    if strings.Index(word,\"d\")!=-1 && strings.Index(word,\"\
    f\")!=-1 && strings.Index(word,\"h\")!=-1 && strings.Index(word,\"j\")!=-1 &&\
    \ strings.Index(word,\"l\")!=-1 && strings.Index(word,\"o\")!=-1 && strings.Index(word,\"\
    p\")!=-1 && strings.Index(word,\"t\")!=-1 {\n        result += \"d\"\n    }\n\
    \    if strings.Index(word,\"G\")!=-1 && strings.Index(word,\"K\")!=-1 && strings.Index(word,\"\
    M\")!=-1 && strings.Index(word,\"N\")!=-1 && strings.Index(word,\"P\")!=-1 &&\
    \ strings.Index(word,\"R\")!=-1 ", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n\
    \    var minCount int\n    var minVowel rune\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if word[i] == word[len(word)-1] {\n            if minCount\
    \ > 0 {\n                if minCount > len(vowels)-1 {\n                    minCount\
    \ = 0\n                    minVowel = vowels[minCount]\n                } else\
    \ {\n                    minCount++\n                    minVowel = vowels[minCount]\n\
    \                }\n            }\n            continue\n        }\n        if\
    \ minCount == 0 {\n            for _, v := range vowels {\n                count\
    \ := 0\n                currentWord := word[:i+1]\n                vowelsFound\
    \ := false\n                for _, w := range currentWord {\n                \
    \    if v == w {\n                        vowelsFound = true\n               \
    \         count++\n                    }\n                }\n                if\
    \ count > 0 {\n                    if count == 1 {\n                        minCount\
    \ = count\n                        minVowel = v\n                    } else if\
    \ count > 1 {\n                        if count > len(vowels)-1 {\n          \
    \                  minCount = 1\n                            minVowel = vowels[minCount]\n\
    \                        } else {\n                            minCount = count\n\
    \                            minVowel = vowels[minCount]\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    if minCount > 0 {\n        if minCount > len(vowels)-1 {\n       \
    \     minCount = 0\n            minVowel = vowels[minCount]\n        } else {\n\
    \            minCount++\n            minVowel = vowels[minCount]\n        }\n\
    \    }\n    return string(minVowel)\n}\n", "    // write your code here\n    vowels\
    \ := []rune{'a', 'e', 'o', 'i', 'u', 'A', 'E', 'O', 'I'}\n    start := len(word)\
    \ - 2\n    end := len(word) - 1\n    for start > 0 {\n        if word[start] ==\
    \ 'a' || word[start] == 'e' || word[start] == 'o' || word[start] == 'i' || word[start]\
    \ == 'u' {\n            start -= 1\n        } else if word[end] == 'a' || word[end]\
    \ == 'e' || word[end] == 'o' || word[end] == 'i' || word[end] == 'u' {\n     \
    \       end += 1\n        } else {\n            start += 1\n        }\n      \
    \  if start > end {\n            return \"\"\n        }\n    }\n    if start <\
    \ end {\n        return word[end]\n    }\n    return \"\"\n}\n", "    // your\
    \ code here\n    if strings.Contains(word, \"a\") {\n        return \"a\"\n  \
    \  }\n    if strings.Contains(word, \"e\") {\n        return \"e\"\n    }\n  \
    \  if strings.Contains(word, \"i\") {\n        return \"i\"\n    }\n    if strings.Contains(word,\
    \ \"o\") {\n        return \"o\"\n    }\n    if strings.Contains(word, \"u\")\
    \ {\n        return \"u\"\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if strings.Contains(vowels, word[i]) {\n            start := i + 1\n\
    \            end := len(word)\n            for ; start >= 0 && strings.Contains(vowels,\
    \ word[start]); start-- {\n            }\n            for ; end < len(word) &&\
    \ strings.Contains(vowels, word[end]); end++ {\n            }\n            if\
    \ start < 0 {\n                start = 0\n            }\n            if end <\
    \ 0 {\n                end = 0\n            }\n            return word[start:end]\n\
    \        }\n    }\n    return \"\"\n}\n", "    for i := 0; i < len(word); i++\
    \ {\n        if i >= len(word) {\n            return \"\"\n        }\n       \
    \ if i > 0 && word[i] != word[i-1] {\n            continue\n        }\n      \
    \  if i+1 >= len(word) {\n            return \"\"\n        }\n        if word[i+1]\
    \ != word[i] {\n            continue\n        }\n        if word[i] == 'a' ||\
    \ word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n   \
    \         return word[i]\n        }\n    }\n    return \"\"\n}\n", "    // TODO:\
    \ implement me\n    return \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
