language: go_test.go
name: HumanEval_55_fib
results:
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n   \
    \ a, b := 1, 1\n    for i := 1; i <= n; i++ {\n        a, b = b, a+b\n    }\n\n\
    \    return a\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmprfwd4qdt_test.go:45: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmprfwd4qdt_test.go:45: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmprfwd4qdt_test.go:45: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmprfwd4qdt_test.go:45: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        fmt.Println(\"Fibonacci\
    \ number not defined.\")\n        return 0\n    }\n\n    if n<1 {\n        return\
    \ 1\n    }\n\n    if n<2 {\n        return n\n    }\n\n    return fib(n-1) + fib(n-2)\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpnd0ygw14_test.go:49: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpnd0ygw14_test.go:49: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpnd0ygw14_test.go:49: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpnd0ygw14_test.go:49: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n   \
    \ if n == 1:\n        return 1\n    }\n\n    return fib(n - 1) + fib(n - 2)\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwrjrp0pl_test.go:20:14: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if\
    \ n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n - 1) + fib(n -\
    \ 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        fmt.Println(\"Fibonacci\
    \ sequence is not defined for negative numbers.\")\n        fmt.Println(\"Try\
    \ to use Fibonacci sequence for positive numbers.\")\n        return -1\n    }\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var f1 := 0\n    var f2 := 1\n    for i := 0;\
    \ i < n; i++ {\n        switch {\n        case f1 == f2:\n            return f1\n\
    \        case f1 > f2:\n            f1, f2 = f2, f1+f2\n        case f1 == f2:\n\
    \            return f1\n        }\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9wxhu_kw_test.go:16:12: expected '';'', found '':=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b, c := 0, 1, 1\n    for n > 0 {\n      \
    \  a, b = b, a+b\n        n--\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9770w5sz_test.go:16:11: c declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 1\n    }\n    if\
    \ n%2 == 0 {\n        return fib(n - 1) + fib(n - 2)\n    }\n    return fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmph47qbzz5_test.go:42: expected '%!s(int=55)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__1 (0.00s)\n        tmph47qbzz5_test.go:42: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmph47qbzz5_test.go:42: expected '%!s(int=21)', got '%!s(int=55)'\n \
    \   --- FAIL: TestFib/test_num__3 (0.00s)\n        tmph47qbzz5_test.go:42: expected\
    \ '%!s(int=89)', got '%!s(int=233)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmph47qbzz5_test.go:42: expected '%!s(int=144)', got '%!s(int=377)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 1:\n        return 1\n\
    \    case n <= 2:\n        return 1\n    default:\n        return fib(n-2) + fib(n-1)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if (n < 2) {\n        return n\n    }\n\n  \
    \  return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp94shsv1t_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp94shsv1t_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp94shsv1t_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp94shsv1t_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        n = -n\n    }\n\n    switch\
    \ {\n    case n < 2:\n        return 1\n    case n == 2:\n        return 1\n \
    \   default:\n        return fib(n-2) + fib(n-1)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp8f92trpr_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp8f92trpr_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp8f92trpr_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp8f92trpr_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n {\n        case 1:\n            return\
    \ 1\n        case 2:\n            return 1\n        case 3:\n            return\
    \ 2\n        case 4:\n            return 3\n        case 5:\n            return\
    \ 5\n        case 6:\n            return 8\n        case 7:\n            return\
    \ 13\n        case 8:\n            return 21\n        case 9:\n            return\
    \ 34\n        case 10:\n            return 55\n        default:\n            fmt.Println(\"\
    Fibonacci number not defined for value \", n)\n    }\n    return 0\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Fibonacci number not defined for value  11\nFibonacci number not defined\
    \ for value  12\n--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__3\
    \ (0.00s)\n        tmpxzu0m7ae_test.go:60: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpxzu0m7ae_test.go:60: expected\
    \ '%!s(int=144)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    if\
    \ n == 2 {\n        return 1\n    }\n\n    f := fib(n-2) + fib(n-1)\n\n    return\
    \ f\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return 1\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp451zus6y_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp451zus6y_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp451zus6y_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp451zus6y_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp6fs49ey7_test.go:39: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmp6fs49ey7_test.go:39: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmp6fs49ey7_test.go:39: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmp6fs49ey7_test.go:39: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmp6fs49ey7_test.go:39: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 {\n        return n\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 || n >= 5 {\n        return 0\n   \
    \ }\n    n -= 2\n    if n < 2 {\n        return n\n    }\n    return fib(n) +\
    \ fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp59yb6lgp_test.go:43: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmp59yb6lgp_test.go:43: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmp59yb6lgp_test.go:43: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmp59yb6lgp_test.go:43: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmp59yb6lgp_test.go:43: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmprvsz2q2__test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmprvsz2q2__test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmprvsz2q2__test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmprvsz2q2__test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return n\n    }\n    \n\
    \    if n <= 2 {\n        return n\n    }\n    \n    return fib(n - 1) + fib(n\
    \ - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpl7elnx3z_test.go:44: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpl7elnx3z_test.go:44: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpl7elnx3z_test.go:44: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpl7elnx3z_test.go:44: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if (n < 0 || n > 10) {\n        fmt.Println(\"\
    Invalid input.\")\n        return -1\n    }\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n</cell>\n<text>\nFibonacci Number - Solution\n\n</text>\n<cell>\n%%go\n\npackage\
    \ fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoi74_ygv_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n == 0:\n        return 0\n\
    \    case n == 1:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpebwar7rg_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpebwar7rg_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpebwar7rg_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpebwar7rg_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return 1\n    }\n\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpj493o2q0_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpj493o2q0_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpj493o2q0_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpj493o2q0_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return n\n    }\n\n   \
    \ return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate :=\
    \ fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp08e2iyvb_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp08e2iyvb_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp08e2iyvb_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp08e2iyvb_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if (n < 0 || n > 2) {\n        fmt.Println(\"\
    Fibonacci number out of range\")\n    }\n    return fibonacci(n)\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13qq73ln_test.go:19:12: undefined: fibonacci

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 2:\n        return 1\n    case n == 3:\n        return 1\n    case\
    \ n % 2 == 0:\n        return fib(n-2)+fib(n-1)\n    case n % 2 == 1:\n      \
    \  return fib(n-3)+fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_8nv9cc_test.go:28:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 { //0 1\n        return 1\n    }\n  \
    \  if n<3 { //0 1 2\n        return fib(n-2)+fib(n-1)\n    }\n    if n%2 { //odd\
    \ number\n        return fib(n-2)+fib(n-1)\n    }\n    return fib(n-3)+fib(n-2)\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg3s6lw8r_test.go:22:8: non-boolean condition in if statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 {\n        return n\n    }\n    return\
    \ fib(n-2)+fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        n = 0\n    }\n\n    if n\
    \ == 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\
    \n    a, b := fib(n-1), fib(n-2)\n    return a + b\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp1oilkltb_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp1oilkltb_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp1oilkltb_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp1oilkltb_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 { \n        return n\n    } \n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 1:\n        return 1\n\
    \    case n == 2:\n        return 2\n    case n > 2:\n        return fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_j9hqczo_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if (n == 0) {\n        return 0\n    } else\
    \ if (n == 1) {\n        return 1\n    } else {\n        return fib(n-2) + fib(n-1)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if (n<0) {\n        return 0\n    }\n    if\
    \ (n==0) {\n        return 0\n    }\n    if (n==1) {\n        return 1\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        n = 0\n    }\n    if n >\
    \ 100 {\n        n += 100\n    }\n    return int(math.Fibonacci(n))\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz2vxphnw_test.go:22:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 0:\n        return 0\n    case n == 1:\n        return 1\n    }\n\
    \    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp9rjofvfu_test.go:44: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp9rjofvfu_test.go:44: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp9rjofvfu_test.go:44: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp9rjofvfu_test.go:44: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp8f92trpr_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp8f92trpr_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp8f92trpr_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp8f92trpr_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return n\n    }\n\n   \
    \ return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate :=\
    \ fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp08e2iyvb_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp08e2iyvb_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp08e2iyvb_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp08e2iyvb_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 {\n        return 1\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpqsszl5y6_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpqsszl5y6_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpqsszl5y6_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpqsszl5y6_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return n\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpyp36tcrf_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpyp36tcrf_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpyp36tcrf_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpyp36tcrf_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        n = 0\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        n = 0\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 2:\n        return 1\n    case n%2 == 1:\n        return fib(n\
    \ - 1) + fib(n - 2)\n    default:\n        return fib(n - 1) + fib(n - 2)\n  \
    \  }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    a,\
    \ b := 0, 1\n    for i := 2; i < n; i++ {\n        a, b = b, a+b\n    }\n    return\
    \ b\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp9ednap27_test.go:43: expected '%!s(int=55)', got '%!s(int=34)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp9ednap27_test.go:43: expected\
    \ '%!s(int=21)', got '%!s(int=13)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp9ednap27_test.go:43: expected '%!s(int=89)', got '%!s(int=55)'\n \
    \   --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp9ednap27_test.go:43: expected\
    \ '%!s(int=144)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n\n    if n%2 == 0 {\n        return fib(n\
    \ - 1) + fib(n - 2)\n    } else {\n        return fib(n - 1) + fib(n - 2)\n  \
    \  }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpdrtugsrs_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpdrtugsrs_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpdrtugsrs_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpdrtugsrs_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 2:\n        return 1\n    case n == 3:\n        return 2\n    case\
    \ n % 2 == 1:\n        return fib(n - 1) + fib(n - 2)\n    default:\n        return\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpxfg8z0x3_test.go:47: expected '%!s(int=55)', got '%!s(int=108)'\n\
    \    --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpxfg8z0x3_test.go:47: expected\
    \ '%!s(int=21)', got '%!s(int=36)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpxfg8z0x3_test.go:47: expected '%!s(int=89)', got '%!s(int=162)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpxfg8z0x3_test.go:47: expected\
    \ '%!s(int=144)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 1 {\n        return 1\n    }\n    if\
    \ n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n - 1) + fib(n -\
    \ 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 2:\n        return n\n\
    \    case n % 2 == 0:\n        return fib(n-1) + fib(n-2)\n    default:\n    \
    \    return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmppqziay6f_test.go:43: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmppqziay6f_test.go:43: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmppqziay6f_test.go:43: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmppqziay6f_test.go:43: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 2:\n        return 1\n    default:\n        return fib(n-2) + fib(n-1)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpdrtugsrs_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpdrtugsrs_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpdrtugsrs_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpdrtugsrs_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 1:\n        return n\n\
    \    case n == 2:\n        return 1\n    case n == 3:\n        return 2\n    default:\n\
    \        return fib(n - 1) + fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n   \
    \ if n == 2 {\n        return 2\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpjh0196j3_test.go:44: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpjh0196j3_test.go:44: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpjh0196j3_test.go:44: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpjh0196j3_test.go:44: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    if n > 0 {\n        for i\
    \ := 0; i < n; i++ {\n            a, b = b, a+b\n        }\n    }\n    return\
    \ a\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        fmt.Println(n)\n    }\n\
    \    if n == 0 || n == 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmplj_epwr__test.go:42: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmplj_epwr__test.go:42: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmplj_epwr__test.go:42: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmplj_epwr__test.go:42: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073343
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n == 0: return 0\n    case\
    \ n == 1: return 1\n    case n < 2: return 0\n    }\n    a, b := 1, 1\n    for\
    \ i := 2; i <= n; i++ {\n        a, b = b, a+b\n    }\n    return a\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073343
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    if n <= 0 {\n        return\
    \ 0\n    }\n    for i := 0; i < n; i++ {\n        a, b = b, a+b\n    }\n    return\
    \ a\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 { return 1 }\n    return fib(n-1)+fib(n-2)\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpa7xuuich_test.go:37: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpa7xuuich_test.go:37: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpa7xuuich_test.go:37: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpa7xuuich_test.go:37: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n - 2) + fib(n - 1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    switch\
    \ {\n    case n == 0:\n        return 1\n    case n == 1:\n        return 1\n\
    \    default:\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpkivxbzhu_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpkivxbzhu_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpkivxbzhu_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpkivxbzhu_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 2:\n        return 1\n    default:\n        return fib(n - 1) +\
    \ fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    f :=\
    \ fib(n-1)\n    if n % 2 == 1 {\n        return f + f\n    }\n    return f\n}\n\
    \nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpdobiy3e4_test.go:43: expected '%!s(int=55)', got '%!s(int=16)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpdobiy3e4_test.go:43: expected\
    \ '%!s(int=21)', got '%!s(int=8)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpdobiy3e4_test.go:43: expected '%!s(int=89)', got '%!s(int=32)'\n \
    \   --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpdobiy3e4_test.go:43: expected\
    \ '%!s(int=144)', got '%!s(int=32)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n\n   \
    \ return fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate :=\
    \ fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpiqube2c5_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpiqube2c5_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpiqube2c5_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpiqube2c5_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 2:\n        return 1\n    case n == 3:\n        return 1\n    default:\n\
    \        result := fib(n - 1)\n        return result + fib(n - 2)\n    }\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp5ayftkfv_test.go:46: expected '%!s(int=55)', got '%!s(int=34)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp5ayftkfv_test.go:46: expected\
    \ '%!s(int=21)', got '%!s(int=13)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp5ayftkfv_test.go:46: expected '%!s(int=89)', got '%!s(int=55)'\n \
    \   --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp5ayftkfv_test.go:46: expected\
    \ '%!s(int=144)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return fib2[n-1]\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_6m0uit1_test.go:16:12: undefined: fib2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 { return n}\n    return fib(n-1)+fib(n-2)\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 3\n    }\n    fibs := make([]int, n)\n    fibs[0]\
    \ = fib(n - 1)\n    fibs[1] = fibs(0) - fibs(1)\n    return fibs(2)\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcbveitih_test.go:30:15: invalid operation: cannot call non-function fibs
    (variable of type []int)

    /tmp/tmpcbveitih_test.go:31:12: invalid operation: cannot call non-function fibs
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n == 0:\n        return 0\n\
    \    case n == 1:\n        return 1\n    case n == 2:\n        return 1\n    default:\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    switch\
    \ {\n    case n < 1:\n        fmt.Println(\"Invalid input\")\n        return -1\n\
    \    case n == 1:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n</code>\n<|/ a dscore=1 tags=algorithm,go,recursion |>\n<| c |>\nI\
    \ did the same. I tried a lot before I asked the question. Finally I came to this\
    \ solution. Thank you. Just to share it here, in order to help others.\n<|/ c\
    \ |>\n<| c |>\nI'm glad I could help. I'm sure you learnt something from my answer.\n\
    <|/ c |>\n<| c |>\nFor fibonacci numbers, use memoization. No need to store all\
    \ results in memory.\n<|/ c |>\n<| c |>\nYou're right (I think). That's why I\
    \ didn't add it in the answer, I wanted to keep it as simple as possible.\n<|/\
    \ c |>\n<| c |>\nYou can avoid memoization by passing a slice to fib function\
    \ and storing calculated Fibonacci numbers in that slice. Also you can make Fibonacci\
    \ numbers stored in Fibonacci function\n<|/ c |>\n<| a dscore=0 |>\nAnother solution,\
    \ very similar to the accepted answer, but with more flexibility. Just pass any\
    \ number of params to the Fibonacci function:\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n)\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0yus7ipv_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return n\n\
    \    case n == 2:\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\
    \nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    return\
    \ fib(n - 2) + fib(n - 1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp0dfbdirl_test.go:39: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmp0dfbdirl_test.go:39: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmp0dfbdirl_test.go:39: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmp0dfbdirl_test.go:39: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmp0dfbdirl_test.go:39: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 0:\n        return -1\n\
    \    case n == 0:\n        return 0\n    case n == 1:\n        return 1\n    default:\n\
    \        return fib(n-2) + fib(n-1)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073345
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n - 2) + fib(n - 1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 0:\n        return -1\n\
    \    case n == 0 or n == 1 or n == 1:\n        return 1\n    default:\n      \
    \  return fib(n - 1) + fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_xf83kin_test.go:19:17: expected '':'', found or

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // Return Fibonacci number n\n    // Fibonacci\
    \ numbers: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55...\n    if n <= 2 {\n        return\
    \ n\n    }\n\n    a, b := 1, 2\n    for i := 3; i <= n; i++ {\n        a, b =\
    \ b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if\
    \ n == 1:\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqpj7lkod_test.go:19:14: illegal label declaration

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n {\n    case 0:\n        return 0\n\
    \    case 1:\n        return 1\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073346
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        return -1\n    }\n\n   \
    \ if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n\
    \    }\n\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if (n == 0 || n == 1) {\n        return 1\n\
    \    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp2zkdxy48_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp2zkdxy48_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp2zkdxy48_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp2zkdxy48_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073346
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    a,\
    \ b := 0, 1\n    for i := 0; i < n-1; i++ {\n        a, b = b, a+b\n    }\n  \
    \  return a\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmplhmci19z_test.go:44: expected '%!s(int=55)', got '%!s(int=34)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmplhmci19z_test.go:44: expected\
    \ '%!s(int=21)', got '%!s(int=13)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmplhmci19z_test.go:44: expected '%!s(int=89)', got '%!s(int=55)'\n \
    \   --- FAIL: TestFib/test_num__4 (0.00s)\n        tmplhmci19z_test.go:44: expected\
    \ '%!s(int=144)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073346
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 1:\n        return 1\n\
    \    case n == 2:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    x := fib(n-1)\n    y := fib(n-2)\n    return x + y\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp7ub55g_e_test.go:47: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp7ub55g_e_test.go:47: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp7ub55g_e_test.go:47: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp7ub55g_e_test.go:47: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073346
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // Use two temporary variables.\n    a, b :=\
    \ 1, 1\n    for i := 0; i < n; i++ {\n        // Update the temporary variables.\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp2ycjsd4a_test.go:42: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp2ycjsd4a_test.go:42: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp2ycjsd4a_test.go:42: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp2ycjsd4a_test.go:42: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073346
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<0 {\n        return -1\n    }\n    if n==1\
    \ {\n        return 1\n    }\n\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp_82s2sz9_test.go:43: expected '%!s(int=55)', got '%!s(int=-13)'\n\
    \    --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp_82s2sz9_test.go:43: expected\
    \ '%!s(int=21)', got '%!s(int=-5)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp_82s2sz9_test.go:43: expected '%!s(int=89)', got '%!s(int=-21)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp_82s2sz9_test.go:43: expected\
    \ '%!s(int=144)', got '%!s(int=-34)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    f := 0\n    f += fib(n-1)\n    f += fib(n-1)\n\
    \    return f\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f34f?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.fib(0xffffffffff333360?)\n\
    \t/tmp/tmp4pufwvus_test.go:15 +0x50 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6b0\n\
    command-line-arguments_test.fib(0x0?)\n\t/tmp/tmp4pufwvus_test.go:17 +0x25 fp=0xc0201e03d0\
    \ sp=0xc0201e03a8 pc=0x4ef685\ncommand-line-arguments_test.fib(0x0?)\n\t/tmp/tmp4pufwvus_test.go:17\
    \ +0x25 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef685\ncommand-line-arguments_test.fib(0x0?)\n\
    \t/tmp/tmp4pufwvus_test.go:17 +0x25 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef685\n\
    command-line-arguments_test.fib(0x0?)\n\t/tmp/tmp4pufwvus_test.go:17 +0x25 fp=0xc0201e0448\
    \ sp=0xc0201e0420 pc=0x4ef685\ncommand-line-arguments_test.fib(0x0?)\n\t/tmp/tmp4pufwvus_test.go:17\
    \ +0x25 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef685\ncommand-line-arguments_test.fib(0x0?)\n\
    \t/tmp/tmp4pufwvus_test.go:17 +0x25 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef685\n\
    command-line-arguments_test.fib(0x0?)\n\t/tmp/tmp4pufwvus_test.go:17 +0x25 fp=0xc0201e04c0\
    \ sp=0xc0201e0498 pc=0x4ef685\ncommand-line-arguments_test.fib(0x0?)\n\t/tmp/tmp4pufwvus_test.go:17\
    \ +0x25 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef685\ncommand-line-arguments_test.fib(0x0?)\n\
    \t/tmp/tmp4pufwvus_test.go:17 +0x25 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef685\n\
    command-line-arguments_test.fib(0x0?)\n\t/tmp/tmp4pufwvus_test.go:17 +0x25 fp=0xc0201e0538\
    \ sp=0xc0201e0510 pc=0x4ef685\ncommand-line-arguments_test.fib(0x0?)\n\t/tmp/tmp4pufwvus_test.go:17\
    \ +0x25 fp=0xc0201e0560 sp=0xc0201e0538 pc=0x4ef685\ncommand-line-arguments_test.fib(0x0?)\n\
    \t/tmp/tmp4pufwvus_test.go:17 +0x25 fp=0xc0201e0588 sp=0xc0201e0560 pc=0x4ef685\n\
    command-line-arguments_test.fib(0x0?)\n\t/"
  timestamp: 1660073348
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 1:\n        return 1\n\
    \    case n == 2:\n        return 1\n    default:\n        return fib(n - 2) +\
    \ fib(n - 1)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 0:\n        return 0\n\
    \    case n == 1:\n        return 1\n    case n == 2:\n        return 2\n    default:\n\
    \        return fib(n - 2) + fib(n - 1)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpc6l5zk9v_test.go:45: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpc6l5zk9v_test.go:45: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpc6l5zk9v_test.go:45: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpc6l5zk9v_test.go:45: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp94shsv1t_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp94shsv1t_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp94shsv1t_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp94shsv1t_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 0:\n        fmt.Println(\"\
    fib(0) failed!\")\n        return -1\n    case n == 0:\n        fmt.Println(\"\
    fib(1) failed!\")\n        return 1\n    case n == 1:\n        fmt.Println(\"\
    fib(2) failed!\")\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\
    \nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) failed!

    fib(2) failed!

    fib(2) failed!

    fib(1) f'
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return 1\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp5lmyvqcz_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp5lmyvqcz_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp5lmyvqcz_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp5lmyvqcz_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var a, b int\n\n    if n < 0 {\n        return\
    \ -1\n    }\n\n    a, b = 0, 1\n\n    for i := 0; i < n; i++ {\n        a, b =\
    \ b, a+b\n    }\n\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return n\n\
    \    case n == 2:\n        return 1\n    case n % 2 == 0: // even\n        return\
    \ fib(n / 2)\n    default: // odd\n        return fib(n - 1) + fib(n - 2)\n  \
    \  }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpob89km2i_test.go:45: expected '%!s(int=55)', got '%!s(int=3)'\n  \
    \  --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpob89km2i_test.go:45: expected\
    \ '%!s(int=21)', got '%!s(int=1)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpob89km2i_test.go:45: expected '%!s(int=89)', got '%!s(int=9)'\n  \
    \  --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpob89km2i_test.go:45: expected\
    \ '%!s(int=144)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 2:\n        return 1\n\
    \    case n == 0:\n        return 0\n    case n == 1:\n        return 1\n    default:\n\
    \        return fib(n - 1) + fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmplfslvlen_test.go:39: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmplfslvlen_test.go:39: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmplfslvlen_test.go:39: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmplfslvlen_test.go:39: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmplfslvlen_test.go:39: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    n += 1\n\n    if n < 3 {\n        return n\n\
    \    }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f34f?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.fib(0xa)\n\t/tmp/tmp14s06b96_test.go:15\
    \ +0x66 fp=0xc0201e0398 sp=0xc0201e0390 pc=0x4ef6c6\ncommand-line-arguments_test.fib(0xa)\n\
    \t/tmp/tmp14s06b96_test.go:22 +0x35 fp=0xc0201e03b8 sp=0xc0201e0398 pc=0x4ef695\n\
    command-line-arguments_test.fib(0xa)\n\t/tmp/tmp14s06b96_test.go:22 +0x35 fp=0xc0201e03d8\
    \ sp=0xc0201e03b8 pc=0x4ef695\ncommand-line-arguments_test.fib(0xa)\n\t/tmp/tmp14s06b96_test.go:22\
    \ +0x35 fp=0xc0201e03f8 sp=0xc0201e03d8 pc=0x4ef695\ncommand-line-arguments_test.fib(0xa)\n\
    \t/tmp/tmp14s06b96_test.go:22 +0x35 fp=0xc0201e0418 sp=0xc0201e03f8 pc=0x4ef695\n\
    command-line-arguments_test.fib(0xa)\n\t/tmp/tmp14s06b96_test.go:22 +0x35 fp=0xc0201e0438\
    \ sp=0xc0201e0418 pc=0x4ef695\ncommand-line-arguments_test.fib(0xa)\n\t/tmp/tmp14s06b96_test.go:22\
    \ +0x35 fp=0xc0201e0458 sp=0xc0201e0438 pc=0x4ef695\ncommand-line-arguments_test.fib(0xa)\n\
    \t/tmp/tmp14s06b96_test.go:22 +0x35 fp=0xc0201e0478 sp=0xc0201e0458 pc=0x4ef695\n\
    command-line-arguments_test.fib(0xa)\n\t/tmp/tmp14s06b96_test.go:22 +0x35 fp=0xc0201e0498\
    \ sp=0xc0201e0478 pc=0x4ef695\ncommand-line-arguments_test.fib(0xa)\n\t/tmp/tmp14s06b96_test.go:22\
    \ +0x35 fp=0xc0201e04b8 sp=0xc0201e0498 pc=0x4ef695\ncommand-line-arguments_test.fib(0xa)\n\
    \t/tmp/tmp14s06b96_test.go:22 +0x35 fp=0xc0201e04d8 sp=0xc0201e04b8 pc=0x4ef695\n\
    command-line-arguments_test.fib(0xa)\n\t/tmp/tmp14s06b96_test.go:22 +0x35 fp=0xc0201e04f8\
    \ sp=0xc0201e04d8 pc=0x4ef695\ncommand-line-arguments_test.fib(0xa)\n\t/tmp/tmp14s06b96_test.go:22\
    \ +0x35 fp=0xc0201e0518 sp=0xc0201e04f8 pc=0x4ef695\ncommand-line-arguments_test.fib(0xa)\n\
    \t/tmp/tmp14s06b96_test.go:22 +"
  timestamp: 1660073348
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fib invalid\
    \ negative value:\", n)\n        return -1\n    }\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n   \
    \ a, b := 0, 1\n\n    for i := 0; i < n; i++ {\n        a, b = b, a+b\n    }\n\
    \n    return a\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return 1\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpytg0f6ib_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpytg0f6ib_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpytg0f6ib_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpytg0f6ib_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        n *= -1\n    }\n    if n\
    \ == 0 || n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpkyj3nmfl_test.go:42: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpkyj3nmfl_test.go:42: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpkyj3nmfl_test.go:42: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpkyj3nmfl_test.go:42: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpn2vx37___test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpn2vx37___test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var a, b int\n    if n == 0 || n == 1 {\n  \
    \      return 1\n    }\n    for i := 2; i < n; i++ {\n        a, b = b, a+b\n\
    \    }\n    return b\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpo3vz29pk_test.go:43: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpo3vz29pk_test.go:43: expected\
    \ '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpo3vz29pk_test.go:43: expected '%!s(int=89)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpo3vz29pk_test.go:43: expected\
    \ '%!s(int=144)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n - 2) + fib(n - 1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var a int\n    var b int\n\n    if n <= 1 {\n\
    \        return n\n    }\n    a = b = 1\n    for i := 2; i < n; i++ {\n      \
    \  c = a + b\n        b = a\n        a = c\n    }\n    return b\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgt71knbo_test.go:22:11: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n\n   \
    \ if n == 1 {\n        return 1\n    }\n\n    return fib(n-2) + fib(n-1)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073348
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n - 2) + fib(n - 1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpmvr4hdo7_test.go:39: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpmvr4hdo7_test.go:39: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpmvr4hdo7_test.go:39: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpmvr4hdo7_test.go:39: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpmvr4hdo7_test.go:39: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 1:\n        return 1\n\
    \    case n == 2:\n        return 1\n    default:\n        return fib(n - 1) +\
    \ fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    return\
    \ fib(n-1)+fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpb4j4k7x2_test.go:39: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpb4j4k7x2_test.go:39: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpb4j4k7x2_test.go:39: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpb4j4k7x2_test.go:39: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpb4j4k7x2_test.go:39: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var prev, curr int\n\n    for i := 1; i <= n;\
    \ i++ {\n        prev, curr = curr, prev+curr\n    }\n\n    return curr\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpjsk6hh7j_test.go:42: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpjsk6hh7j_test.go:42: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpjsk6hh7j_test.go:42: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpjsk6hh7j_test.go:42: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpjsk6hh7j_test.go:42: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n - 2) + fib(n - 1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n <= 0 {\n        case 0:\n         \
    \   return 0\n        case 1:\n            return 1\n    }\n    return fib(n-1)\
    \ + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuc9ceazq_test.go:17:14: cannot convert 0 (untyped int constant) to bool

    /tmp/tmpuc9ceazq_test.go:19:14: cannot convert 1 (untyped int constant) to bool

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if\
    \ n == 1 || n == 2 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp1oilkltb_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp1oilkltb_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp1oilkltb_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp1oilkltb_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if\
    \ n <= 1 {\n        return 1\n    }\n    return fib(n-2) + fib(n-1)\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpo2nbecel_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpo2nbecel_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpo2nbecel_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpo2nbecel_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 0 {\n        return -1\n    }\n    const\
    \ (\n        a, b = 1,\n        c, d = 1,\n        e, f = 1,\n        g, h = 1,\n\
    \        i, j = 1,\n        k, l = 1,\n        m, n = 1,\n        o = 1,\n   \
    \     p = 1,\n        q, r = 1,\n        s = 1,\n        t, u = 1,\n        v\
    \ = 1,\n        w, x = 1,\n        y, z = 1,\n        A = 1,\n        B = 1,\n\
    \    )\n    if n < 2 {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n\n    for {\n        switch\
    \ {\n        case n&1 == 1:\n            return a\n        case n&2 == 2:\n  \
    \          return c\n        case n&4 == 4:\n            return e\n        case\
    \ n&8 == 8:\n            return g\n        case n&16 == 16:\n            return\
    \ h\n        case n&32 == 32:\n            return i\n        case n&64 == 64:\n\
    \            return j\n        case n&128 == 128:\n            return k\n    \
    \    case n&256 == 256:\n            return l\n        case n&512 == 512:\n  \
    \          return m\n        case n&1024 == 1024:\n            return n\n    \
    \    case n&2048 == 2048:\n            return o\n        case n&4096 == 4096:\n\
    \            return p\n        case n&8192 == 8192:\n            return q\n  \
    \      case n&16384 == 16384:\n            return r\n        case n&32768 == 32768:\n\
    \            return s\n        case n&65536 == 65536:\n            return t\n\
    \        case n&131072 == 131072:\n            return u\n        case n&262144\
    \ == 262144:\n            return v\n        case n&524288 == 524288:\n       \
    \     return w\n        case n&1048576 == 1048576:\n            return x\n   \
    \     case n&2097152 == 2097152:\n            return y\n        case n&4194304\
    \ == 4194304:\n            return z\n        case n&8388608 == 8388608:\n    \
    \        return A\n        case n&16777216 == 16777216:\n            return B\n\
    \        default:\n            n -= 2\n            a, b, c, d, e, f, g, h, i,\
    \ j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C = n%2, a, b, c, d,\
    \ e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C =\
    \ n&3, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x,\
    \ y, \nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf8qoyyph_test.go:21:14: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpc6ydzsou_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpc6ydzsou_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpc6ydzsou_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpc6ydzsou_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n == 0:\n        return 0\n\
    \    case n == 1:\n        return 1\n    default:\n        return fib(n - 1) +\
    \ fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var fib_result = 1\n    switch {\n    case n\
    \ < 2:\n        return fib_result\n    case n == 2:\n        return 1\n    }\n\
    \    for i := 3; i <= n; i++ {\n        fib_result += fib(i - 2)\n    }\n    return\
    \ fib_result\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmprvsz2q2__test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmprvsz2q2__test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmprvsz2q2__test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmprvsz2q2__test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 1:\n        return 1\n\
    \    case n >= 2:\n        return fib(n-2) + fib(n-1)\n    default:\n        return\
    \ int(fib(n-1)) + int(fib(n-2))\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp8lpitudj_test.go:43: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp8lpitudj_test.go:43: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp8lpitudj_test.go:43: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp8lpitudj_test.go:43: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp8f92trpr_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp8f92trpr_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp8f92trpr_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp8f92trpr_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n < 2:\n        return 1\n\
    \    case n == 2:\n        return 1\n    case n % 2 == 1:\n        return fib(n\
    \ - 1) + fib(n - 2)\n    default:\n        return fib(n - 1) + fib(n - 2) + (n\
    \ - 1)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpniiyx77v_test.go:45: expected '%!s(int=55)', got '%!s(int=142)'\n\
    \    --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpniiyx77v_test.go:45: expected\
    \ '%!s(int=21)', got '%!s(int=53)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpniiyx77v_test.go:45: expected '%!s(int=89)', got '%!s(int=222)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpniiyx77v_test.go:45: expected\
    \ '%!s(int=144)', got '%!s(int=375)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 {\n        return n\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpebwar7rg_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpebwar7rg_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpebwar7rg_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpebwar7rg_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n == 0: return 0\n    case\
    \ n == 1: return 1\n    case n < 0: panic(\"negative input\")\n    }\n    i :=\
    \ 1\n    f := fib(i) + 1\n    for i >= 2 {\n        i += 2\n        f = fib(i\
    \ - 1) + fib(i - 2)\n    }\n    return f\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp9v297vwi_test.go:47: expected '%!s(int=55)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp9v297vwi_test.go:47: expected\
    \ '%!s(int=21)', got '%!s(int=2)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp9v297vwi_test.go:47: expected '%!s(int=89)', got '%!s(int=2)'\n  \
    \  --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp9v297vwi_test.go:47: expected\
    \ '%!s(int=144)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 1 {\n        return -1\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n-2) + fib(n-1)\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp9nq_m1ge_test.go:42: expected '%!s(int=55)', got '%!s(int=21)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp9nq_m1ge_test.go:42: expected\
    \ '%!s(int=21)', got '%!s(int=8)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp9nq_m1ge_test.go:42: expected '%!s(int=89)', got '%!s(int=34)'\n \
    \   --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp9nq_m1ge_test.go:42: expected\
    \ '%!s(int=144)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpkivxbzhu_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpkivxbzhu_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpkivxbzhu_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpkivxbzhu_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n == 0: return 0\n    case\
    \ n == 1: return 1\n    case n % 2 == 0: return fib(n-1) + fib(n-2)\n    default:\
    \ return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 1 {\n        return n\n    }\n    if\
    \ n < 2 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 2:\n        return 1\n\
    \    case n == 3:\n        return 3\n    case n <= 10:\n        return fib(n-2)\
    \ + fib(n-1)\n    default:\n        panic(\"too big\")\n    }\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\npanic: too big [recovered]\n\tpanic: too big\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x4fce20, 0x548bd8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fce20, 0x548bd8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fib(0x8?)\n\t/tmp/tmp0xa47hiv_test.go:24\
    \ +0x95\ncommand-line-arguments_test.TestFib(0x0?)\n\t/tmp/tmp0xa47hiv_test.go:38\
    \ +0x91\ntesting.tRunner(0xc0001a0340, 0x527f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return 1\n    }\n\n   \
    \ return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate :=\
    \ fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp1rctkin9_test.go:40: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp1rctkin9_test.go:40: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp1rctkin9_test.go:40: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp1rctkin9_test.go:40: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpebwar7rg_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpebwar7rg_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpebwar7rg_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpebwar7rg_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 1 {\n        return n\n    }\n    return\
    \ fib(n - 2) + fib(n - 1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpzq1uva8t_test.go:39: expected '%!s(int=55)', got '%!s(int=-55)'\n\
    \    --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpzq1uva8t_test.go:39: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpzq1uva8t_test.go:39: expected '%!s(int=21)', got '%!s(int=-21)'\n\
    \    --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpzq1uva8t_test.go:39: expected\
    \ '%!s(int=89)', got '%!s(int=-89)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpzq1uva8t_test.go:39: expected '%!s(int=144)', got '%!s(int=-144)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n {\n    case 0:\n        return 0\n\
    \    case 1:\n        return 1\n    case 2:\n        return 1\n    }\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073350
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp94shsv1t_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp94shsv1t_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp94shsv1t_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp94shsv1t_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n <= 1:\n        return 1\n\
    \    case n == 2:\n        return 1\n    case n > 2:\n        return fib(n - 1)\
    \ + fib(n - 2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8i585ch_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073350
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    f := -1\n    if n <= 0 {\n        return -1\n\
    \    }\n    if n <= 1 {\n        f = 1\n        return f\n    }\n    if n == 2\
    \ {\n        f = 2\n        return f\n    }\n\n    // find fib(n - 2) \n    f\
    \ := fib(n-2) + fib(n-1)\n    return f\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp592zekyb_test.go:30:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073350
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fib(n-2) + fib(n-1)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 {\n        return n\n    }\n\n    return\
    \ fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if (n == 0 || n == 1) {\n        return n\n\
    \    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073350
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n    return fib(n - 1) + fib(n - 2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp94shsv1t_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp94shsv1t_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp94shsv1t_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp94shsv1t_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch {\n    case n == 0: return 0\n    case\
    \ n == 1: return 1\n    default:\n        return fib(n - 1) + fib(n - 2)\n   \
    \ }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 0 || n == 1 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpkivxbzhu_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpkivxbzhu_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpkivxbzhu_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpkivxbzhu_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n < 0 {\n        fmt.Println(n)\n       \
    \ fmt.Println(n+1)\n        fmt.Println(n+2)\n        return -1\n    }\n    if\
    \ n < 2 {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpi7ass8vn_test.go:45: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpi7ass8vn_test.go:45: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpi7ass8vn_test.go:45: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpi7ass8vn_test.go:45: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n<2 {\n        return 1\n    }\n    return\
    \ fib(n-1)+fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpe9dszs8p_test.go:39: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpe9dszs8p_test.go:39: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpe9dszs8p_test.go:39: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpe9dszs8p_test.go:39: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073350
