language: go_test.go
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        if l[i] == 0 {\n \
    \           return true\n        }\n        for j := i + 1; j < len(l); j++ {\n\
    \            if l[i] + l[j] == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp3l231ae6_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    last :=\
    \ l[0]\n    for _, i := range l[1:] {\n        if last > i {\n            return\
    \ false\n        }\n        last = i\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp4e0pqqog_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp4e0pqqog_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp4e0pqqog_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp4e0pqqog_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp4e0pqqog_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, x := range l {\n        sum += x\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        if sum < 0 {\n            return false\n        }\n        sum\
    \ += l[i]\n        if sum != 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp8er8zmji_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8er8zmji_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp8er8zmji_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var result bool\n    for _, num := range l {\n        if\
    \ 0 == num {\n            result = true\n            break\n        }\n      \
    \  sum := 0\n        for _, num := range l {\n            sum += num\n       \
    \     if sum == 0 {\n                result = true\n                break\n  \
    \          }\n        }\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpdnrijmcp_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpdnrijmcp_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpdnrijmcp_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpdnrijmcp_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l)\
    \ == 1 {\n        return true\n    }\n    left := l[0]\n    ok := false\n    for\
    \ _, right := range l[1:] {\n        if right == 0 {\n            ok = true\n\
    \            break\n        }\n        left += right\n    }\n    return ok\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp8ywzrbwf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp8ywzrbwf_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp8ywzrbwf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8ywzrbwf_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp8ywzrbwf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    current\
    \ := 0\n    sum := 0\n    for _, val := range l {\n        current += val\n  \
    \      sum += val\n        if current == 0 {\n            return sum == 0\n  \
    \      }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpairrvrox_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpairrvrox_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpairrvrox_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    var last0\
    \ int\n    var last1 int\n    var res bool\n    for i, n := range l {\n      \
    \  if n == last0 {\n            if last1 == n {\n                last0 = 0\n \
    \           } else {\n                res = true\n            }\n            last0\
    \ = n\n        } else {\n            if last1 == n {\n                last1 =\
    \ n\n            } else {\n                res = true\n            }\n       \
    \     last1 = n\n        }\n    }\n    return res\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpanciwe2s_test.go:28:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    total := 0\n    hasDup := false\n    for _, val := range\
    \ l {\n        if val < 0 {\n            return false\n        }\n        total\
    \ += val\n        if total == 0 {\n            return hasDup\n        }\n    \
    \    if total == 1 {\n            hasDup = true\n        }\n    }\n    return\
    \ !hasDup\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpo0xuan6r_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo0xuan6r_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpo0xuan6r_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    d := make(map[int]bool, len(l))\n    for _, v := range l\
    \ {\n        if v == 0 {\n            return false\n        }\n        d[v] =\
    \ true\n    }\n    for i := 0; i < len(l); i++ {\n        if _, ok := d[i]; !ok\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmppm1xhrvs_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmppm1xhrvs_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmppm1xhrvs_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    if len(l)\
    \ == 1 {\n        return true\n    }\n\n    d := make(map[int]int)\n    for _,\
    \ x := range l {\n        if x, ok := d[x]; ok {\n            return false\n \
    \       }\n\n        if x == 0 {\n            return true\n        }\n\n     \
    \   d[x] = x + 1\n    }\n\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1e1_l8e_test.go:32:12: x declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            if l[i]+l[j] == 0 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074883
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var n int\n    var psum int\n    var sum int\n    n := len(l)\n\
    \    for _, i := range l {\n        psum += i\n        sum += i\n    }\n    return\
    \ psum == 0 || sum == 0 || n == 0 || sum == psum\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcnh9gf12_test.go:25:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) != 2 {\n        return false\n    }\n\n    var\
    \ leftsum, rightsum int\n    for _, val := range l {\n        leftsum += val\n\
    \        rightsum += val\n    }\n\n    if leftsum == 0 {\n        if rightsum\
    \ == 0 {\n            return true\n        }\n        return false\n    }\n  \
    \  if leftsum != rightsum {\n        return false\n    }\n    if rightsum > 0\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpp7luqe2n_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp7luqe2n_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpp7luqe2n_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // create an array with the element in the ith index.\n \
    \   // example: [0, -2, 1] --> [-2, 1]\n    var t []int\n    for i := range l\
    \ {\n        t = append(t, l[i])\n    }\n\n    // sort the array\n    sort.Ints(t)\n\
    \n    // if two elements in the array sum to zero, then they should be the same.\n\
    \    // example: [0, -2, 1] --> [-2, 1]\n    if len(l) < 2 {\n        return false\n\
    \    }\n    s := 0\n    e := 0\n    for i := 0; i < len(t); i++ {\n        s +=\
    \ t[i]\n        e += t[i]\n        if s >= e {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyusknbbv_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    len1 := len(l)\n    for _, v := range l {\n        index\
    \ := 0\n        for index < len1 {\n            if l[index] + v == 0 {\n     \
    \           break\n            }\n            index++\n        }\n        if index\
    \ == len1 {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl0fzq3jx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpl0fzq3jx_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpl0fzq3jx_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var zero int\n    n := len(l)\n\n    if n <= 0 {\n      \
    \  return false\n    }\n    if n < 2 {\n        return true\n    }\n\n    c :=\
    \ make(map[int]int)\n\n    for i := 0; i < n; i++ {\n        c := make(map[int]int)\n\
    \        for j := 0; j < i; j++ {\n            if l[i]+l[j] == 0 {\n         \
    \       c[i] += l[j]\n                c[j] += l[i]\n            }\n        }\n\
    \n        if i == 0 {\n            return true\n        }\n\n        if c[zero]\
    \ > 0 {\n            return false\n        }\n        zero = l[i]\n    }\n   \
    \ return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkk_tcm7r_test.go:32:5: c declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    if l[0]\
    \ > 0 && l[0]+l[1] > 0 {\n        return false\n    }\n    r := l[0]\n    var\
    \ i, j int\n    for i = 1, j < len(l); i, j = i+1, j+1 {\n        if l[i] != r\
    \ {\n            continue\n        }\n        if i > j {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zuh8f8b_test.go:30:28: expected boolean or range expression, found assignment
    (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    if len(l)\
    \ == 1 {\n        return false\n    }\n\n    var i int\n    var sum int\n    var\
    \ j int\n    var k int\n    for i = 0; i < len(l); i++ {\n        for j = (i+1);\
    \ j < len(l); j++ {\n            sum = l[i] + l[j]\n            if sum == 0 {\n\
    \                k = i\n                for k = (i+1); k < j; k++ {\n        \
    \            sum += l[k]\n                }\n                if sum == 0 {\n \
    \                   return true\n                }\n            }\n        }\n\
    \    }\n\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp53871vcq_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp53871vcq_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp53871vcq_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    pair_sums := make(map[int]int)\n    for _, value := range\
    \ l {\n        if pair_sums[value] == 0 {\n            pair_sums[value] = -1\n\
    \        } else {\n            pair_sums[value]++\n        }\n    }\n    return\
    \ pair_sums[0] == 0 || pair_sums[len(l)-1] == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpr9zesd8b_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpr9zesd8b_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpr9zesd8b_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpr9zesd8b_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpr9zesd8b_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            if (l[i] + l[j]) == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074883
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    m := make(map[int]bool)\n    for _, v := range l {\n    \
    \    m[v] = true\n    }\n    for i := 0; i < len(m); i++ {\n        if i != m[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6o9ntav0_test.go:27:17: invalid operation: i != m[i] (mismatched types
    int and bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    count\
    \ := 0\n    for _, v := range l {\n        for _, v2 := range l {\n          \
    \  if v+v2 != 0 {\n                count++\n            }\n        }\n       \
    \ if count == 2 {\n            return true\n        }\n        count = 0\n   \
    \ }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmphpuvtrym_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmphpuvtrym_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmphpuvtrym_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    var s\
    \ int\n    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n   \
    \     return false\n    }\n    for i := range l {\n        s -= l[i]\n       \
    \ if s == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp43sbkrbl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp43sbkrbl_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp43sbkrbl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074883
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        var toAdd int\n  \
    \      for j := i + 1; j < len(l); j++ {\n            toAdd = l[i] + l[j]\n  \
    \          if toAdd == 0 {\n                return true\n            }\n     \
    \   }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074884
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var result bool\n    var prev int\n    for _, v := range\
    \ l {\n        if result {\n            return false\n        }\n        prev\
    \ = v\n        result = (prev + prev) == 0 && prev != 0\n    }\n    return result\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_qjadpnt_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_qjadpnt_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_qjadpnt_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074884
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var left int\n    var right int\n    var sum int\n    l =\
    \ checkList(l, true, true)\n    for _, v := range l {\n        sum += v\n    \
    \    if sum < 0 {\n            sum = 0\n        } else {\n            sum += sum\n\
    \            if sum == 0 {\n                left = v\n            }\n        }\n\
    \        if sum > 0 {\n            right = v\n        }\n    }\n    if left ==\
    \ 0 && right == 0 {\n        return false\n    }\n    return left != 0 && right\
    \ != 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3a4dlix_test.go:25:9: undefined: checkList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074884
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    var sum\
    \ int\n    found := false\n    for _, r := range l {\n        if r != 0 {\n  \
    \          sum += r\n        }\n    }\n    if sum < 0 {\n        return true\n\
    \    }\n    for _, r := range l {\n        if sum == 0 {\n            found =\
    \ true\n        }\n        sum -= r\n    }\n    if found {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpiwvutnm5_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpiwvutnm5_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpiwvutnm5_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpiwvutnm5_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074884
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    k := 0\n    i := 0\n    for i < len(l) {\n        k += l[i]\n\
    \        i++\n        if k < 0 {\n            return false\n        }\n      \
    \  if k > 0 {\n            k -= l[i]\n            i++\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pairs_sum_to_zero(...)\n\t/tmp/tmprdzuaoje_test.go:31\n\
    command-line-arguments_test.TestPairs_Sum_To_Zero(0x0?)\n\t/tmp/tmprdzuaoje_test.go:49\
    \ +0x925\ntesting.tRunner(0xc000192680, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074884
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // O(n^2) solution\n    k := len(l)\n    if k < 2 {\n   \
    \     return false\n    }\n    sum_ := 0\n    for i := 0; i < k; i++ {\n     \
    \   sum_ += l[i]\n    }\n    sum_ = sum_%10\n    return sum_ != 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp4khj0r_v_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp4khj0r_v_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp4khj0r_v_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp4khj0r_v_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp4khj0r_v_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp4khj0r_v_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074884
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    var sum\
    \ int\n    var pairs []int\n    for _, x := range l {\n        sum += x\n    \
    \    pairs = append(pairs, sum)\n    }\n\n    for i := len(pairs) - 1; i >= 0;\
    \ i-- {\n        if i > 0 && pairs[i] > pairs[i-1] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpz8mmz9lw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz8mmz9lw_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpz8mmz9lw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074884
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    result\
    \ := false\n    for _, i := range l {\n        for _, j := range l {\n       \
    \     if i+j == 0 {\n                result = true\n                break\n  \
    \          }\n        }\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpnoo_hf3m_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l)\
    \ == 1 {\n        return true\n    }\n    var sum, temp int\n    for _, val :=\
    \ range l {\n        sum += val\n        temp = sum\n        sum = 0\n       \
    \ if temp != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpwfou7til_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpwfou7til_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpwfou7til_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpwfou7til_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    // We\
    \ go through l and count how many of each number we see.\n    // We keep track\
    \ of the numbers in increasing order.\n    numbers := make([]int, len(l))\n  \
    \  sum := 0\n    var found bool\n    for _, num := range l {\n        numbers[num-1]++\n\
    \        sum += num\n        if sum == 0 {\n            found = true\n       \
    \     break\n        }\n    }\n\n    return found\n}\n</code>\n<|/ a dscore=0\
    \ tags=go,algorithm |>\n<| a tags=go,algorithm dscore=0 |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzoon3_mw_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074884
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    return pairs_sum_to_zero_test(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6r3l3lsq_test.go:22:12: undefined: pairs_sum_to_zero_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074885
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    m := make(map[int]int, len(l))\n    for _, n := range l {\n\
    \        m[n]++\n    }\n\n    for k, v := range m {\n        if v == 1 {\n   \
    \         return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmputpb93fk_test.go:27:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    pair_list := make(map[int]int)\n    pair_list_count := 0\n\
    \    for i := 0; i < len(l); i++ {\n        pair_list_count += 1\n        if pair_list_count\
    \ == 2 {\n            pair_list[pair_list[i]] = 1\n            pair_list_count\
    \ = 0\n        } else {\n            pair_list[pair_list[i]] = pair_list[i]\n\
    \        }\n    }\n    pair_list_count = 0\n    for i := 0; i < len(pair_list);\
    \ i++ {\n        pair_list_count += 1\n        if pair_list_count == 2 {\n   \
    \         if pair_list[i] + pair_list[i+1] == 0 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpxlfofon3_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxlfofon3_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpxlfofon3_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    i := 0\n    j := len(l) - 1\n    pair_i := -1\n    pair_j\
    \ := -1\n    sum := 0\n    for i < j {\n        sum = l[i] + l[j]\n        if\
    \ sum == 0 {\n            pair_i = (i + 1) % len(l)\n            pair_j = (j +\
    \ 1) % len(l)\n            break\n        }\n        if pair_i == -1 {\n     \
    \       pair_i = (i + 1) % len(l)\n        }\n        if pair_j == -1 {\n    \
    \        pair_j = (j + 1) % len(l)\n        }\n        i += 2\n        j -= 2\n\
    \    }\n    if i != j {\n        return false\n    }\n    return pair_i != -1\
    \ && pair_j != -1 && l[pair_i] == l[pair_j]\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpe4llu82n_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpe4llu82n_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpe4llu82n_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    var result\
    \ bool\n    var lastVal, firstVal int\n    for i := 0; i < len(l); i++ {\n   \
    \     if l[i] > 0 {\n            lastVal = i\n        }\n        if l[i] < 0 {\n\
    \            firstVal = i\n        }\n    }\n    if firstVal == lastVal {\n  \
    \      return false\n    }\n    lastVal -= firstVal\n    sum := 0\n    for i :=\
    \ firstVal; i <= lastVal; i++ {\n        sum += l[i]\n    }\n    if sum == 0 {\n\
    \        result = true\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpgjovwr37_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpgjovwr37_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpgjovwr37_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpgjovwr37_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // TODO: Write your code here.\n    var i, j int\n    k :=\
    \ 0\n    sum := 0\n    for i = 0; i < len(l); i++ {\n        sum = sum + l[i]\n\
    \        if k == i {\n            if sum != 0 {\n                k++\n       \
    \     }\n            if sum == 0 {\n                k = i\n                sum\
    \ = 0\n            }\n        }\n        for j = i + 1; j < len(l); j++ {\n  \
    \          sum = sum + l[j]\n            if k == j {\n                if sum !=\
    \ 0 {\n                    k++\n                }\n                if sum == 0\
    \ {\n                    k = j\n                    sum = 0\n                }\n\
    \            }\n            if sum > 0 {\n                if k == i {\n      \
    \              return false\n                }\n                break\n      \
    \      }\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpjmn59c8n_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpjmn59c8n_test.go:80:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpjmn59c8n_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpjmn59c8n_test.go:80:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpjmn59c8n_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpjmn59c8n_test.go:80:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    for i\
    \ := 1; i < len(l); i++ {\n        if l[i]-l[i-1] != 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp6o53pf05_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp6o53pf05_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp6o53pf05_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    m := make(map[int]int)\n    for _, i := range l {\n     \
    \   m[i] = m[i - 1] + i\n    }\n    return len(m) == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpx4ffm8_a_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpx4ffm8_a_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpx4ffm8_a_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // Sort the input list to avoid the worst case time complexity\
    \ of binary search.\n    // See here for more info: https://en.wikipedia.org/wiki/Binary_search_algorithm#Performance\n\
    \    sort.Ints(l)\n\n    // Assume that each element in the list has a distinct\
    \ sum.\n    // The variable sum will hold the sum of the elements after this element\
    \ in the list.\n    var sum int\n    for i := 1; i < len(l); i++ {\n        //\
    \ If we've already found a sum that is zero, break out of the loop.\n        if\
    \ sum == 0 {\n            break\n        }\n\n        // Otherwise, find the sum\
    \ of the remaining elements in the list.\n        sum += l[i]\n        if sum\
    \ < 0 {\n            return false\n        }\n    }\n\n    // If we get here,\
    \ there's only one, so the list contains two distinct elements.\n    return true\n\
    }\n</code>\n<|/ a tags=go |>\n<| a dscore=1 tags=go |>\nAnother answer that takes\
    \ O(n log n) space and O(n) time. Runs in O(n) time with O(1) space (but O(n^2)\
    \ time).\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\ntype\
    \ IntList \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8rjbt794_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074884
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    c := make(map[int]int)\n    for _, v := range l {\n     \
    \   if c[v] > 0 {\n            return false\n        }\n        c[v]++\n    }\n\
    \    return len(c) == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqy1yws4c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqy1yws4c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpqy1yws4c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074885
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var sums map[int]int\n    for _, n := range l {\n       \
    \ sums[n] += n\n    }\n\n    for k, v := range sums {\n        if v == 0 {\n \
    \           return true\n        }\n    }\n\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnukcya_v_test.go:27:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    result := false\n    for _, v := range l {\n        for _,\
    \ v1 := range l {\n            if v+v1 == 0 {\n                if v > 0 {\n  \
    \                  result = true\n                    break\n                }\n\
    \            }\n            if v1 == 0 {\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n</code>\n<|/ a |>\n<| c |>\nIt would\
    \ be better if you would explain how you arrived at this solution.\n<|/ c |>\n\
    <| c |>\nI started this problem by thinking of a solution that uses `pairs_sum_to_zero`\
    \ and then wrote the code in `pairs_sum_to_zero`.  Then I noticed that `pairs_sum_to_zero`\
    \ only returns true or false, so I knew that if there is a pair of numbers that\
    \ sum to zero, there cannot be any other pair that sums to zero either.  So now\
    \ I realized I could just use that function and get the same result.  Then I knew\
    \ that there couldn't be any other pair of numbers that sum to zero, and that\
    \ would be the answer.\n<|/ c |>\n<| c |>\nThank you for the explanation and the\
    \ code. It really helped me understand your thought process much better. :)\n\
    <|/ c |>\n<| c |>\nthank you for the answer, but I don't think this is correct.\
    \ `pairs_sum_to_zero([]int{1, 3, -2, 1})` should return true, but your answer\
    \ returns false as this pair is unique\n<|/ c |>\n<| c |>\nYou're right, my mistake.\
    \  I fixed the mistake in the function name and the code above.  Thanks!\n<|/\
    \ c |>\n<| a |>\nI realize this is not a complete answer, but a suggestion to\
    \ try this problem out in python first:\n<code>\ndef pairs_sum_to_zero():\n  \
    \  for a in range(10):\n        for b in range(10):\n            pair = (a, b)\n\
    \            if pair in seen:\n                continue # skip this pair\n   \
    \         if sum(a, b) == 0 and pair != (a+b):\n                print(pair)\n\
    \                seen[pair] = 1\n\nseen = {}\npairs_sum_to_zero()\n</code>\nThis\
    \ program will output all pairs of integers (a,b) where a+b == 0 only if there\
    \ is not already an entry in seen where a + b == 0.\n<|/ a tags=python,algorithm,language-agnostic\
    \ dscore=0 |>\n<| c |>\nThis isn't a solution that works in Python, but rather\
    \ a suggestion to try this out in Python first, which is the language I recommend\
    \ people try out for questions like this.\n<|/ c |>\n<| c |>\nThank \nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpequ2uatr_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074884
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var found bool\n    var sum1, sum2 int\n    for _, a := range\
    \ l {\n        if a == -1 {\n            if sum1 == 0 {\n                sum2\
    \ = 1\n            } else {\n                sum2 += a\n            }\n      \
    \  } else {\n            if sum1 != 0 {\n                return false\n      \
    \      }\n            sum1 = a\n        }\n    }\n    if sum2 != 0 {\n       \
    \ return false\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwab_q5vq_test.go:22:9: found declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    k := l[0]\n\
    \    for _, v := range l[1:] {\n        if k+v != 0 {\n            return false\n\
    \        }\n        k = v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpudqh3942_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpudqh3942_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpudqh3942_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074886
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) != 2 {\n        return false\n    }\n    if l[0]+l[1]\
    \ != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp2l15hvjk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2l15hvjk_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2l15hvjk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074886
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    p := make(map[int]int)\n\
    \    for _, v := range l {\n        p[v] = p[v] + 1\n    }\n    for _, v := range\
    \ p {\n        if p[v] > 1 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7xzasvxy_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp7xzasvxy_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp7xzasvxy_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp7xzasvxy_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074886
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    m :=\
    \ make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\n\
    \    for i := 0; i < len(l); i++ {\n        ok := false\n        for k := 0; k\
    \ < len(m); k++ {\n            if m[k] && i%k == 0 {\n                ok = true\n\
    \                break\n            }\n        }\n        if !ok {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x503940, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503940, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pairs_sum_to_zero(...)\n\t/tmp/tmp5232n8wx_test.go:34\n\
    command-line-arguments_test.TestPairs_Sum_To_Zero(0xc000103380?)\n\t/tmp/tmp5232n8wx_test.go:53\
    \ +0x12aa\ntesting.tRunner(0xc000103380, 0x5290a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074886
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    type pair \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf724ln6f_test.go:22:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    sort.Ints(l)\n    l := make(map[int]bool)\n    sum := 0\n\
    \    for _, v := range l {\n        if v > 0 {\n            sum += v\n       \
    \ }\n        l := sum > 0\n    }\n    return len(l) == 1 && len(l) == 2 && (l[0]\
    \ == l[1])\n}\n</cell>\n<cell>\n%%bash\ngo test -v pairs_sum_to_zero_test.go -count=1\n\
    </cell>\n<text>\nExercise 6: Pairs Sum To Zero\nLet us consider the following\
    \ list:\nl = [2, 4, -1, 3, 7, 10, -2, 5, 8, -7, -10, -8, 2]\nPrint all pairs of\
    \ elements that sum to zero.\nTest your function with these inputs.\nHow many\
    \ pairs are there?\n\n\n</text>\n<cell>\npackage pairs_sum_to_zero_test\n\nimport\
    \ (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpugvuex4a_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074885
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    var i\
    \ int = 0\n    var sum int = 0\n    for i < len(l) {\n        sum += l[i]\n  \
    \      if sum == 0 {\n            return false\n        }\n        i++\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpyoc6et37_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpyoc6et37_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyoc6et37_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpyoc6et37_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpyoc6et37_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074886
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    max :=\
    \ 0\n    sum := 0\n    for _, v := range l {\n        sum += v\n        if sum\
    \ > max {\n            max = sum\n        }\n    }\n    return sum == max\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpg117_bqk_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpg117_bqk_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpg117_bqk_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpg117_bqk_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074886
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    prev := 0\n    for _, v := range l {\n        if prev + v\
    \ != 0 {\n            return false\n        }\n        prev = v\n    }\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmphrth5bt4_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmphrth5bt4_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmphrth5bt4_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074886
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    result := true\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n\n    if len(l) <= 1 {\n        return false\n    }\n\n    if l[0] >= 0\
    \ {\n        l[0] = -(l[0])\n        result = false\n    }\n\n    sum := 0\n \
    \   for _, value := range l {\n        sum += value\n        if sum == 0 {\n \
    \           result = false\n            break\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmi_7td8a_test.go:23:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074886
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var i int\n    var found bool\n    for i = 0; i < len(l);\
    \ i++ {\n        if found {\n            found = false\n            continue\n\
    \        }\n        found = false\n        var j int\n        for j = i; j < len(l);\
    \ j++ {\n            if l[i]+l[j] == 0 {\n                found = true\n     \
    \           break\n            }\n        }\n        if !found {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpc7hd8t6c_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc7hd8t6c_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpc7hd8t6c_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if l[0]\
    \ < 0 {\n        return false\n    }\n    s := 0\n    for i := 0; i < len(l);\
    \ i++ {\n        s += l[i]\n    }\n    if s > 0 {\n        return false\n    }\n\
    \    for i := 1; i < len(l); i++ {\n        if l[i-1] > 0 {\n            s +=\
    \ l[i-1]\n        }\n        if s > 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp4wm8lsos_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp4wm8lsos_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp4wm8lsos_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // Write your code here.\n    for _, v := range l {\n   \
    \     if v == 0 {\n            continue\n        }\n        prev := 0\n      \
    \  for _, v2 := range l {\n            if prev + v == v2 {\n                return\
    \ true\n            }\n            prev = v2\n        }\n    }\n    return false\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpcu0gvys4_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpcu0gvys4_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpcu0gvys4_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpcu0gvys4_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpcu0gvys4_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpcu0gvys4_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, i := range l {\n        sum += i\n \
    \   }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp21_imf1m_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp21_imf1m_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp21_imf1m_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if l[0]\
    \ != 0 || l[len(l)-1] != 0 {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpcj42umpn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpcj42umpn_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpcj42umpn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    return len(l) == 0 || len(l) == 1 && l[0] > 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpbb3wl_3k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpbb3wl_3k_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpbb3wl_3k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpbb3wl_3k_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := l[0]\n\
    \    for _, v := range l {\n        if v != s {\n            return false\n  \
    \      }\n        s += v\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpu_1pahz6_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpu_1pahz6_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpu_1pahz6_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpu_1pahz6_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    // we\
    \ start by looping through all the elements in the list\n    for _, a := range\
    \ l {\n        // and we keep adding elements to the sum until it becomes\n  \
    \      // greater than zero\n        for _, b := range l {\n            // if\
    \ this is the case where a + b = 0, then we know that \n            // we cannot\
    \ have two elements that (a + b) = 0\n            if (a + b) == 0 {\n        \
    \        return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp21jlgjrb_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp21jlgjrb_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp21jlgjrb_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp21jlgjrb_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp21jlgjrb_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp21jlgjrb_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp21jlgjrb_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // Iterate through each element in the list to see if there\
    \ is a pair\n    // that sums to zero.\n    for _, i := range l {\n        for\
    \ _, j := range l {\n            // If the sum of the current element and the\
    \ next element\n            // are the same then they are a pair.\n          \
    \  if i+j == 0 {\n                return true\n            }\n        }\n    }\n\
    \    // There are no pairs sum to zero in the list.\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpqwtimgvq_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n     \
    \   if s <= 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpzr9is411_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpzr9is411_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpzr9is411_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpzr9is411_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpzr9is411_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpzr9is411_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074887
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    l := make(map[int]bool)\n    for _, v := range l {\n    \
    \    l[v] = true\n    }\n    for k, v := range l {\n        if k > 0 && v == false\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8t_dew7q_test.go:22:7: no new variables on left side of :=

    /tmp/tmp8t_dew7q_test.go:22:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmp8t_dew7q_test.go:24:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmp8t_dew7q_test.go:27:26: invalid operation: v == false (mismatched types
    int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    m := make(map[int]int)\n    for _, i := range l {\n     \
    \   m[i] = m[i - i] + 1\n    }\n    for key, value := range m {\n        if value\
    \ == 2 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb5uf4gn_test.go:26:9: key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i := 1; i < len(l); i++ {\n        if l[i-1]\
    \ != 0 {\n            if l[i] == 0 {\n                l[i] = l[i-1]\n        \
    \    } else {\n                return false\n            }\n        }\n    }\n\
    \    for i := 1; i < len(l); i++ {\n        if l[i-1] != l[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6hqk6rd_test.go:25:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    n := len(l)\n    if n < 2 {\n        return false\n    }\n\
    \    s := make(map[int]int, n)\n    for i := 0; i < n; i++ {\n        s[kl(i)]\
    \ = s[i]\n    }\n    for i := 1; i < n; i++ {\n        if s[kl(i)] != 0 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgo6frgb9_test.go:28:11: undefined: kl

    /tmp/tmpgo6frgb9_test.go:31:14: undefined: kl

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074887
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if l[0] > l[1] {\n        return false\n    }\n    last :=\
    \ 0\n    sum := 0\n    for _, v := range l {\n        sum += v\n        if sum\
    \ > 0 {\n            sum += l[last]\n            if sum == 0 {\n             \
    \   return false\n            }\n        }\n        last = last+1\n    }\n   \
    \ return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pairs_sum_to_zero(...)\n\t/tmp/tmpgnvgf_cq_test.go:22\n\
    command-line-arguments_test.TestPairs_Sum_To_Zero(0x0?)\n\t/tmp/tmpgnvgf_cq_test.go:51\
    \ +0x1fb\ntesting.tRunner(0xc000192680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    if len(l)\
    \ == 1 {\n        return l[0] == 0\n    }\n\n    var sum int\n    for _, value\
    \ := range l {\n        sum += value\n    }\n\n    for _, value := range l {\n\
    \        if sum == 0 {\n            return false\n        }\n        sum -= value\n\
    \    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpv69ghehu_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpv69ghehu_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpv69ghehu_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpv69ghehu_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    sums :=\
    \ make(map[int]int)\n    for _, v := range l {\n        if sums[v]!=0{\n     \
    \       return false\n        }\n        sums[v]++\n    }\n    return true\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmph_k6bd9__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmph_k6bd9__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmph_k6bd9__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmph_k6bd9__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    p := make(map[int]int)\n    for _, v := range l {\n     \
    \   if _, ok := p[v]; ok {\n            return false\n        } else {\n     \
    \       p[v] = 1\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpkbil41x4_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpkbil41x4_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpkbil41x4_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpkbil41x4_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpkbil41x4_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    current\
    \ := 0\n    for _, next := range l {\n        current += next\n        if current\
    \ != 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpnybd9g8b_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpnybd9g8b_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpnybd9g8b_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // TODO: Write a more efficient implementation of this algorithm.\n\
    \    if len(l) < 2 {\n        return false\n    }\n    d := make(map[int]bool)\n\
    \    for _, x := range l {\n        d[x] = true\n    }\n    for x := 0; x < len(l);\
    \ x++ {\n        for y := x + 1; y < len(l); y++ {\n            if l[x]+l[y] ==\
    \ 0 {\n                if !d[x] {\n                    d[x] = true\n         \
    \       }\n                if !d[y] {\n                    d[y] = true\n     \
    \           }\n            }\n        }\n    }\n    return len(d) == 2\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpm2lt3j4l_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpm2lt3j4l_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpm2lt3j4l_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var ret bool = false\n    var sums []int\n    for _, v :=\
    \ range l {\n        sums = append(sums, v)\n    }\n    for _, v := range sums\
    \ {\n        if v != 0 {\n            v = -v\n            for _, v2 := range sums\
    \ {\n                if v != v2 {\n                    ret = true\n          \
    \      }\n            }\n        }\n    }\n    return ret\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpltb2tia2_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpltb2tia2_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpltb2tia2_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpltb2tia2_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpltb2tia2_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpltb2tia2_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    i := 0\n    for _, j := range l {\n        if i == len(l)-1\
    \ {\n            return false\n        }\n        if j+i > 0 {\n            return\
    \ true\n        }\n        i++\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpaonfuy1l_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpaonfuy1l_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaonfuy1l_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpaonfuy1l_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpaonfuy1l_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l)\
    \ == 1 {\n        return l[0] == 0\n    }\n    for i := 0; i < len(l); i++ {\n\
    \        for j := i+1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074889
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var i, j int\n    if len(l) <= 1 {\n        return false\n\
    \    }\n    if l[0] >= l[1] {\n        return false\n    }\n    for i = 1; i <\
    \ len(l); i++ {\n        if l[i] + l[i-1] != 0 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcnvlmzua_test.go:22:12: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    h := make(map[int]bool,\
    \ len(l)+1)\n    h[0] = false\n    for _, v := range l {\n        h[v] = true\n\
    \    }\n    for _, v := range l {\n        if v == 0 {\n            return h[v]\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpdi3d3zg8_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpdi3d3zg8_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpdi3d3zg8_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpdi3d3zg8_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l)<2 {\n        return false\n    }\n\n    first :=\
    \ l[0]\n    second := l[1]\n    third := l[2]\n\n    if second == 0 && third ==\
    \ 0 {\n        return false\n    }\n    if first == second && first == third {\n\
    \        return false\n    }\n    if first == second || first == third {\n   \
    \     return true\n    }\n\n    for i := 0; i < len(l)-1; i++ {\n        if l[i]+l[i+1]\
    \ == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmphc7vdymq_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmphc7vdymq_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmphc7vdymq_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 || len(l) > 100 {\n        return false\n\
    \    }\n    sum := 0\n    for _, value := range l {\n        sum += value\n  \
    \  }\n    return sum == 0 && len(l) < 10\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmphfpxe2vh_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmphfpxe2vh_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmphfpxe2vh_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if l == nil {\n        return false\n    }\n    if len(l)\
    \ < 2 {\n        return true\n    }\n    first := l[0]\n    second := l[1]\n \
    \   return ((first + second) == 0)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpy3t11_nv_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpy3t11_nv_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpy3t11_nv_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpy3t11_nv_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    pair_list := make([][]int, len(l))\n    pair_list := append(pair_list,\
    \ []int{}, l)\n    // first element is the zero\n    for i := 0; i < len(pair_list[0]);\
    \ i++ {\n        for j := 0; j < i; j++ {\n            // if any element of the\
    \ first list is zero\n            if pair_list[0][i] == 0 {\n                //\
    \ then no other elements of the first list are zero\n                // this means\
    \ there are no two distinct elements in the list that\n                // sum\
    \ to zero\n                return false\n            }\n        }\n    }\n   \
    \ // for all other elements of the first list, if there is a pair of\n    // distinct\
    \ elements in the list that sum to zero, then there are\n    // two distinct elements\
    \ that sum to zero\n    for i := 0; i < len(pair_list); i++ {\n        // if any\
    \ element of the second list is zero\n        for j := 0; j < len(pair_list[i]);\
    \ j++ {\n            // then the other elements of the second list sum to zero\n\
    \            // this means there are no two distinct elements in the list that\n\
    \            // sum to zero\n            if pair_list[i][j] == 0 {\n         \
    \       return false\n            }\n        }\n    }\n    // at this point we\
    \ found a pair that sums to zero\n    // since there were two distinct elements\
    \ in the list that sum to zero\n    // return true\n    return true\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbe8d7x6f_test.go:23:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074888
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // two pointers to integers p0 and p1 form the start of a\
    \ contiguous range\n    // of integers whose values are all greater than zero.\n\
    \    // p0, p1 are initially pointing at the first two integers in the list\n\
    \    var (\n        p0 = &l[0]\n        p1 = &l[1]\n        carry = 0\n    )\n\
    \    // scan through the list until we reach the end of list or\n    // we find\
    \ a pair of values whose sum equals zero\n    for i := 2; i < len(l); i++ {\n\
    \        if *p0 > *p1 {\n            return false\n        }\n        // if we\
    \ have reached the end of the list, we have found a pair\n        // where sum\
    \ equals zero\n        if *p0 == 0 {\n            return true\n        }\n   \
    \     // add current value to carry, update pointers\n        carry += (*p0) +\
    \ (*p1)\n        p0 = &l[i]\n        p1 = &carry\n    }\n    return false\n}\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.pairs_sum_to_zero(...)\n\t/tmp/tmpqt4zp3n9_test.go:27\n\
    command-line-arguments_test.TestPairs_Sum_To_Zero(0x0?)\n\t/tmp/tmpqt4zp3n9_test.go:59\
    \ +0x26d\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var firstSet []int\n    var secondSet []int\n    var isInFirstSet\
    \ bool\n    var isInSecondSet bool\n\n    for _, v := range l {\n        if isInFirstSet\
    \ {\n            secondSet = append(secondSet, v)\n        } else {\n        \
    \    firstSet = append(firstSet, v)\n            isInFirstSet = true\n       \
    \ }\n        if isInSecondSet {\n            isInSecondSet = false\n        }\
    \ else {\n            isInSecondSet = true\n        }\n    }\n\n    if len(firstSet)\
    \ == 0 && len(secondSet) == 0 {\n        return true\n    }\n\n    for _, v :=\
    \ range secondSet {\n        if v == 0 {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpqg2e0bkh_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpqg2e0bkh_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpqg2e0bkh_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpqg2e0bkh_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpqg2e0bkh_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l)<2 {\n        return false\n    }\n    t := 0\n\
    \    for _, b := range l {\n        t += b\n        if t == 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpev9453un_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpev9453un_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpev9453un_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    sum\
    \ := 0\n    for _, v := range l {\n        sum += v\n    }\n\n    // if sum is\
    \ zero, there's only one element in the list\n    if sum == 0 {\n        return\
    \ false\n    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp0j6p3655_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp0j6p3655_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp0j6p3655_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp0j6p3655_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp0j6p3655_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp0j6p3655_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l)\
    \ == 1 {\n        return true\n    }\n    sum := l[0]\n    for i := 1; i < len(l);\
    \ i++ {\n        sum += l[i]\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpa6z7wrn4_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpa6z7wrn4_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpa6z7wrn4_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpa6z7wrn4_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    length := len(l)\n    if length == 0 {\n        return false\n\
    \    }\n\n    var curr int\n    var curd int\n    for i := 0; i < length; i++\
    \ {\n        if l[i] > 0 {\n            curr += l[i]\n        } else {\n     \
    \       curd += l[i]\n        }\n        if curr == curd {\n            return\
    \ false\n        }\n        curd = 0\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp2m482kj1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp2m482kj1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2m482kj1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp2m482kj1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp2m482kj1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp2m482kj1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n\n    var a\
    \ int = 0\n    var b int = 0\n    for _, e := range l {\n        a += e\n    \
    \    b += e\n    }\n\n    return a == 0 && b == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpwod000vq_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwod000vq_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpwod000vq_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074889
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l)==1 {\n        return true\n    }\n\n    l := l[:len(l)/2]\n\
    \n    if l[0]<0 || l[1]<0 {\n        return false\n    }\n\n    if l[0]+l[1]!=0\
    \ {\n        return false\n    }\n\n    i := 1\n    for i:=i<<1; len(l)!=i; i<<=1\
    \ {\n        l := l[:len(l)/2]\n        if l[0]+l[1]!=0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpixdq66m6_test.go:26:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074889
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) != 1 {\n        return false\n    }\n\n    sum_of_values\
    \ := 0\n    for _, val := range l {\n        sum_of_values += val\n    }\n\n \
    \   for i := 1; i < len(l); i++ {\n        if l[i-1] != 0 {\n            return\
    \ false\n        }\n    }\n\n    return sum_of_values == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7lgf0_vw_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp7lgf0_vw_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7lgf0_vw_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n\n    l :=\
    \ append([]int{}, l...)\n    last := 0\n    for _, i := range l {\n        if\
    \ i == last {\n            continue\n        }\n        last += i\n        if\
    \ last == 0 {\n            return true\n        }\n    }\n    return false\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptl_u9346_test.go:26:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l)==0 {\n        return false\n    }\n    sums :=\
    \ make(map[int]int, len(l))\n    for _, val := range l {\n        sums[val]++\n\
    \    }\n    for key, val := range sums {\n        if val == 1 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoci8x9dn_test.go:29:9: key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    return len(l) == 0 || len(l) == 1 && l[0] == 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp12bafavu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp12bafavu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp12bafavu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    for i := 1; i < len(l); i++ {\n        for j := i; j < len(l);\
    \ j++ {\n            if l[i] + l[j] == 0 {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpcclqwdvp_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpcclqwdvp_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpcclqwdvp_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    result := false\n    var left, right int\n    len_l  := len(l)\n\
    \n    for left < len_l {\n        if right >= len_l-1 {\n            result =\
    \ true\n            break\n        }\n\n        if l[left] > l[right] {\n    \
    \        right++\n        } else {\n            if l[left] == 0 {\n          \
    \      result = true\n            }\n            left++\n            right++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp0b4ctujp_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp0b4ctujp_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp0b4ctujp_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp0b4ctujp_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp0b4ctujp_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp0b4ctujp_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074890
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    return pairs_sum_to_zero_internal(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w6yn19t_test.go:22:12: undefined: pairs_sum_to_zero_internal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    return len(l) > 0 && len(l) < 1000 && is_pair(l)\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytog7fv9_test.go:22:43: undefined: is_pair

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    for _, v :=\
    \ range l {\n        if v == 0 {\n            continue // skip zero\n        }\n\
    \        left, right := 0, len(l)-1\n        for right > left {\n            sum,\
    \ diff := 0, 0\n            if v%2 == 0 {\n                sum = (v + l[left]\
    \ + l[right])/2\n            } else {\n                sum = v\n            }\n\
    \            if sum == 0 {\n                if v%2 == 0 {\n                  \
    \  if l[left] == l[right] {\n                        left++\n                \
    \    } else {\n                        right--\n                    }\n      \
    \          } else {\n                    if l[left] == l[right] {\n          \
    \              left++\n                    } else {\n                        right--\n\
    \                    }\n                }\n            } else {\n            \
    \    diff := sum-l\n                if diff > 0 {\n                    if diff\
    \ == 1 {\n                        left++\n                    } else {\n     \
    \                   left++\n                        right--\n                \
    \    }\n                } else {\n                    if diff == -1 {\n      \
    \                  left--\n                    } else {\n                    \
    \    right--\n                    }\n                }\n            }\n      \
    \      if left > right {\n                break // done\n            }\n     \
    \   }\n        if left == right {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd1x7d0zn_test.go:22:5: undefined: sort

    /tmp/tmpd1x7d0zn_test.go:29:18: diff declared but not used

    /tmp/tmpd1x7d0zn_test.go:50:25: invalid operation: sum - l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n\n    // first\
    \ check if there is a pair of negative numbers in the list that sum to zero.\n\
    \    var isNegOne bool\n    var negOne, posOne int\n    for i, n := range l {\n\
    \        if n == -1 {\n            isNegOne = true\n            if negOne == n\
    \ {\n                return false\n            }\n            negOne = n\n   \
    \     } else {\n            posOne = n\n        }\n    }\n\n    // if there isn't\
    \ a negative number in the list that sums to zero, return false.\n    return isNegOne\
    \ == false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqns0ksf_test.go:28:17: posOne declared but not used

    /tmp/tmpoqns0ksf_test.go:29:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    var first\
    \ int\n    pair := make(map[int]bool, len(l))\n    for _, e := range l {\n   \
    \     if pair[e] {\n            continue\n        }\n        if first == 0 {\n\
    \            first = e\n            pair[e] = true\n        } else {\n       \
    \     pair[first - e] = true\n        }\n    }\n    return len(pair) == 2\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp41s2g05v_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp41s2g05v_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp41s2g05v_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp41s2g05v_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n\n    // sort\
    \ list\n    i := 0\n    for j := 0; j < len(l)-1; j++ {\n        if l[j] > l[j+1]\
    \ {\n            tmp := l[j]\n            l[j] = l[j+1]\n            l[j+1] =\
    \ tmp\n            i := i\n        }\n    }\n\n    for _, v := range l {\n   \
    \     for _, v2 := range l {\n            i += v\n            i += v2\n      \
    \      if i == 0 {\n                return false\n            }\n        }\n \
    \   }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps01peokc_test.go:33:13: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var result bool = false\n    for _, x := range l {\n    \
    \    // This code checks whether the sum of the list elements is zero.\n     \
    \   if x == 0 {\n            result = true\n            break\n        }\n   \
    \     // If the sum has not become zero by then, return false.\n        result\
    \ &= x == sum_to_zero(l)\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt9d9v8d6_test.go:30:24: undefined: sum_to_zero

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    t := 0\n    s := 0\n    for _, x := range l {\n        if\
    \ x != 0 {\n            s += x\n            t += x\n        }\n    }\n\n    return\
    \ s == 0 && t != 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpx33_wovp_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpx33_wovp_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpx33_wovp_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l)\
    \ == 1 {\n        return true\n    }\n    last, x := l[0], 0\n    last -= x\n\
    \    for _, y := range l[1:] {\n        x -= y\n        last -= y\n        if\
    \ last == 0 {\n            return true\n        }\n    }\n    return false\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpi61qqryu_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpi61qqryu_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpi61qqryu_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpi61qqryu_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var i, j, sum int\n    for _, v := range l {\n        sum\
    \ += v\n    }\n    if sum < 0 {\n        return false\n    }\n    if sum == 0\
    \ {\n        return true\n    }\n    for i = range l {\n        sum += l[i]\n\
    \        if sum == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2ens3ls_test.go:22:12: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l)-1; i++ {\n        if l[i]+l[i+1] == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp9m9f2qdw_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9m9f2qdw_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp9m9f2qdw_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l)\
    \ == 1 {\n        return true\n    }\n    if l[0] > 0 {\n        return false\n\
    \    }\n\n    for i := 0; i < len(l); i++ {\n        if i != 0 && l[i] > 0 {\n\
    \            sum := l[i] + l[i-1]\n            if sum == 0 {\n               \
    \ return true\n            }\n            if sum > 0 {\n                return\
    \ false\n            }\n        }\n    }\n    return false\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nNice one, thanks. I think this algorithm should be called `is_pair_in_list_of_negative_sums`\
    \ (or something like that), since it checks if a pair exists that sums to 0. I'll\
    \ keep this algorithm in mind for future use!\n<|/ c |>\n<| c |>\nYes, that's\
    \ a good name for this. I renamed it accordingly now.\n<|/ c |>\n<| a |>\n<code>\n\
    def IsPairsSumToZero(myList):\n    l=len(myList)\n    for i in range(l):\n   \
    \     if i==0:\n            continue\n        if myList[i]<0:\n            continue\n\
    \        if i+1>l:\n            break\n        if myList[i]+myList[(i+1)-1]==0:\n\
    \            return True\n    return False\n</code>\n<|/ a tags=algorithm,python\
    \ dscore=4 |>\n<| a tags=algorithm,python |>\nHere is a solution which returns\
    \ True if there is a pair of elements in a list which sum to zero. The code below\
    \ works in Python 3.6.\n<code>\ndef isPairSumToZero(lst):\n    length = len(lst)\n\
    \    # Base case\n    if length < 2:\n        return False\n    # Two elements\
    \ sum to zero\n    if length == 2:\n        return (lst[0] + lst[1]) == 0\n  \
    \  # Check for pairs\n    for i in range(2, length):\n        if lst[i] + lst[i-1]\
    \ == 0:\n            return True\n    return False\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nCould you explain your answer more? I do not understand the logic behind\
    \ it\n<|/ c |>\n<| c |>\nThis solution takes advantage of the fact that Python\
    \ lists are 0-based. We start with index 2 because it is always 1 less than the\
    \ length of your list. From there, we can use range() and loop through the list,\
    \ taking each number starting at index 2.\n<|/ c |>\n<| c |>\nAh okay, I understand,\
    \ thanks :)\n<|/ c |>\n<| a |>\nThe code below works with the standard library\
    \ zip() function. \n<code>\nfrom itertools import zip_longest\n\ndef sum_to_zero(lst):\n\
    \    i = 0\n    while i < len(lst) - 1:\n        if lst[i] + lst[i + 1]\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwkgoqymk_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    d := make(map[int]int)\n\
    \    for _, v := range l {\n        if d[v] == 0 {\n            return false\n\
    \        }\n        d[v]++\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_vdbq8uw_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_vdbq8uw_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_vdbq8uw_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    result := make(map[int]int, len(l))\n    for i, e := range\
    \ l {\n        result[e] = i\n    }\n    if len(result) != len(l) {\n        return\
    \ false\n    }\n\n    for k := range result {\n        for i := range l {\n  \
    \          if l[i]+k == 0 {\n                return false\n            }\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp_d2sp3a9_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp_d2sp3a9_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp_d2sp3a9_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_d2sp3a9_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_d2sp3a9_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp_d2sp3a9_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp_d2sp3a9_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    k := 0\n    for _, x := range l {\n        if k == 0 {\n\
    \            k = x\n        } else if x == k {\n            k++\n        } else\
    \ {\n            return true\n        }\n    }\n    return false\n}\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpsl5uye0j_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpsl5uye0j_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsl5uye0j_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpsl5uye0j_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpsl5uye0j_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    pairs := make([][]int, 0, len(l))\n    for _, x := range\
    \ l {\n        var sum int\n        for i := range pairs {\n            sum +=\
    \ x\n            pairs[i] = append(pairs[i], sum)\n        }\n    }\n\n    for\
    \ _, pairs := range pairs {\n        if pairs_sum(pairs) != 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcz56wurv_test.go:32:12: undefined: pairs_sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    return pairs_sum_to_zero_helper(l, 0)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjlggw30q_test.go:22:12: undefined: pairs_sum_to_zero_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074891
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var result bool\n    for _, sum := range l {\n        if\
    \ sum == 0 {\n            result = true\n            break\n        }\n    }\n\
    \    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp4sv19vn6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp4sv19vn6_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp4sv19vn6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp4sv19vn6_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074892
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    n := len(l)\n    if n == 0 {\n        return false\n    }\n\
    \    m := n\n\n    pair_sum := func(i, j int) int {\n        if i > j {\n    \
    \        i, j = j, i\n        }\n        return l[i] + l[j]\n    }\n    pair_sums\
    \ := make([]int, m)\n    for i := 0; i < m; i++ {\n        pair_sums[i] = pair_sum(0,\
    \ i)\n    }\n\n    for i := 0; i < m; i++ {\n        for j := i + 1; j < m; j++\
    \ {\n            if pair_sums[i] + pair_sums[j] == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpuths_5sv_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpuths_5sv_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpuths_5sv_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074892
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    return\
    \ pairsSumToZero(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe5r4q353_test.go:25:12: undefined: pairsSumToZero

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074892
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    result := false\n    left := 0\n    right := 0\n    sumLeft\
    \ := 0\n    sumRight := 0\n    for _, num := range l {\n        if num > 0 {\n\
    \            sum += num\n            if sumLeft < sum {\n                sumLeft\
    \ = sum\n                left++\n            }\n        }\n        if num < 0\
    \ {\n            sum -= num\n            if sumRight < sum {\n               \
    \ sumRight = sum\n                right++\n            }\n        }\n    }\n \
    \   if sumLeft == sumRight {\n        if left == right {\n            result =\
    \ true\n        }\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7cgd7et_test.go:29:13: undefined: sum

    /tmp/tmpz7cgd7et_test.go:30:26: undefined: sum

    /tmp/tmpz7cgd7et_test.go:31:27: undefined: sum

    /tmp/tmpz7cgd7et_test.go:36:13: undefined: sum

    /tmp/tmpz7cgd7et_test.go:37:27: undefined: sum

    /tmp/tmpz7cgd7et_test.go:38:28: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074892
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var a int = 0\n    var b int = 0\n    for _, value := range\
    \ l {\n        a += value\n        b += value\n    }\n    return a != b\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpo7i_aabw_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo7i_aabw_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpo7i_aabw_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    i := 0\n    for _, j := range l {\n        if i != j {\n\
    \            i += j\n            if i == 0 {\n                return true\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpg6wxb4lb_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg6wxb4lb_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpg6wxb4lb_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // If there are less than 2 integers, no need to go any further\n\
    \    if len(l) < 2 {\n        return false\n    }\n\n    // Initialize the sums\
    \ to 0\n    var sum1, sum2 int\n\n    // Initialize a pointer to keep track of\
    \ the position of first element\n    p := l[0]\n    var index int\n\n    for index,\
    \ element1 := range l {\n        // Add the current element to the first sum\n\
    \        sum1 += element1\n        // Add the current element to the second sum\n\
    \        sum2 += element1\n        // If the current element is not zero, break\
    \ the loop\n        if element1 != 0 {\n            break\n        }\n    }\n\n\
    \    // Return false if either sum is 0\n    if sum1 == 0 || sum2 == 0 {\n   \
    \     return false\n    }\n\n    // Iterate through the remaining elements starting\
    \ from second element\n    for index, element2 := range l[index+1:] {\n      \
    \  // Add the current element to the second sum\n        sum2 += element2\n  \
    \      // If the current element is not zero, break the loop\n        if element2\
    \ != 0 {\n            break\n        }\n    }\n\n    // Return the first sum and\
    \ the second sum as the result\n    return sum1 == 0 && sum2 == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmploh30j92_test.go:31:5: p declared but not used

    /tmp/tmploh30j92_test.go:34:9: index declared but not used

    /tmp/tmploh30j92_test.go:51:9: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074892
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // sort the list\n    sort.Ints(l)\n\n    // keep track of\
    \ the first element\n    sum := 0\n    first := 0\n\n    // iterate through the\
    \ list\n    for _, e := range l {\n        // update sum\n        sum += e\n\n\
    \        // if we have found a new sum, return true\n        if sum != first {\n\
    \            return true\n        }\n    }\n\n    // if sum is the same for every\
    \ element in the list,\n    // return false\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_0j16j3t_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074892
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    result\
    \ := make(map[int]int, len(l))\n    for index, val := range l {\n        result[index]\
    \ = val\n    }\n    for index, val := range l {\n        total := 0\n        for\
    \ _, k := range result {\n            total += k\n            if total == 0 {\n\
    \                return false\n            }\n        }\n        result[index]\
    \ = 0\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsh992pax_test.go:29:16: val declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074892
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    for i := range l {\n        if i == 0 {\n            continue\n\
    \        }\n        if i != l[0] {\n            continue\n        }\n        if\
    \ pair(l[i+1:], l[:i], false) {\n            return true\n        }\n    }\n \
    \   return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag7p_gig_test.go:29:12: undefined: pair

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074892
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i\
    \ := 0; i < len(l); i++ {\n        total := 0\n        for k := i; k < len(l);\
    \ k++ {\n            total += l[k]\n            if total == 0 {\n            \
    \    return true\n            }\n        }\n    }\n    return false\n}\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpoktxht5t_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpoktxht5t_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpoktxht5t_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpoktxht5t_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    pair_sum := make(map[int]int) // key: sum, value: list index\n\
    \    pair_sum := make(map[int][]int) // key: list index, value: all list indexes\n\
    \    for i := 0; i < len(l); i++ {\n        if pair_sum[l[i]] == nil {\n     \
    \       pair_sum[l[i]] = i\n        } else {\n            for j := 0; j < len(pair_sum[l[i]]);\
    \ j++ {\n                if pair_sum[l[i]][j] > i {\n                    pair_sum[l[i]][j]\
    \ += 1\n                    break\n                }\n            }\n        \
    \    if pair_sum[l[i]][1] > i {\n                pair_sum[l[i]][1] = i\n     \
    \       }\n        }\n    }\n    for k := range pair_sum {\n        if pair_sum[k]\
    \ == nil {\n            return false\n        }\n    }\n    return true\n}\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqeqb8rv_test.go:23:14: no new variables on left side of :=

    /tmp/tmppqeqb8rv_test.go:23:17: cannot use make(map[int][]int) (value of type
    map[int][]int) as type map[int]int in assignment

    /tmp/tmppqeqb8rv_test.go:25:30: invalid operation: pair_sum[l[i]] == nil (mismatched
    types int and untyped nil)

    /tmp/tmppqeqb8rv_test.go:28:33: invalid argument: pair_sum[l[i]] (map index expression
    of type int) for len

    /tmp/tmppqeqb8rv_test.go:29:34: invalid operation: cannot index pair_sum[l[i]]
    (map index expression of type int)

    /tmp/tmppqeqb8rv_test.go:30:35: invalid operation: cannot index pair_sum[l[i]]
    (map index expression of type int)

    /tmp/tmppqeqb8rv_test.go:34:30: invalid operation: cannot index pair_sum[l[i]]
    (map index expression of type int)

    /tmp/tmppqeqb8rv_test.go:35:31: invalid operation: cannot index pair_sum[l[i]]
    (map index expression of type int)

    /tmp/tmppqeqb8rv_test.go:40:27: invalid operation: pair_sum[k] == nil (mismatched
    types int and untyped nil)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    x := 0\n    y := 0\n    hasMatch := false\n\n    for _, v\
    \ := range l {\n        x = x + v\n        y = y + v\n        if x == y {\n  \
    \          hasMatch = true\n        }\n    }\n    return hasMatch\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp905snzkh_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp905snzkh_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp905snzkh_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp905snzkh_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp905snzkh_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp905snzkh_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // count the number of zeroes in each list\n    var num_zeroes\
    \ int\n    for _, num := range l {\n        if num == 0 {\n            num_zeroes++\n\
    \        }\n    }\n    // if there are two or more zeroes, return false\n    if\
    \ num_zeroes > 1 {\n        return false\n    }\n    // else return true if there\
    \ are two or more zeroes\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpqzyquu2d_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpqzyquu2d_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpqzyquu2d_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpqzyquu2d_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpqzyquu2d_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpqzyquu2d_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    m :=\
    \ map[int]int{}\n    for _, v := range l {\n        if m[v] == 0 {\n         \
    \   m[v] = 1\n        } else {\n            m[v] += 1\n        }\n    }\n\n  \
    \  if len(m) != 2 {\n        return false\n    }\n\n    return m[0] == m[1]\n\
    }\n</code>\n<|/ a |>\n<| a dscore=2 tags=arrays,go |>\nThe problem is in the line\
    \ \n<code>\nif a[0]==a[1] && a[0]>0 && a[1]>0 {\n</code>\nThis check is true when\
    \ a[0] and a[1] are equal.\n<|/ a |>\n<| c |>\nThanks for your answer. How should\
    \ I modify it so that it also checks for a[0]>0?\n<|/ c |>\n<| c |>\nYou can check\
    \ for a[0]>0 before comparing a[1] or you can remove that check and just compare\
    \ a[0]==a[1]\n<|/ c |>\n<| a |>\nJust change the order of the conditions \n<code>\n\
    if a[0]==a[1] && a[1]>0\n</code>\n<|/ a tags=arrays,go dscore=1 |>\n<| a |>\n\
    Here is an alternate solution I came up with for when you want to check that each\
    \ value in a slice is distinct, and not zero. Also, as mentioned, if you have\
    \ a zero value, you can check for that as well. \n<code>\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph5x3nzhc_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074892
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // Initialize a running sum\n    sum := 0\n\n    // Iterate\
    \ over the list\n    for _, elem := range l {\n        // Sum the elements\n \
    \       sum += elem\n\n        // If the sum is zero, the list has a pair that\
    \ sums to zero\n        if sum == 0 {\n            return true\n        }\n\n\
    \        // If the sum is not zero, the list has a pair that sums to non-zero\n\
    \        if sum != 0 {\n            return false\n        }\n    }\n\n    // If\
    \ the list has no pairs, it has no pairs that sum to zero\n    return false\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpm70n0g4j_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpm70n0g4j_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpm70n0g4j_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    sum :=\
    \ 0\n    diff := 0\n    prev := 0\n    found := false\n    for _, v := range l\
    \ {\n        if v == prev {\n            found = true\n            diff++\n  \
    \      } else {\n            prev = v\n            sum = sum + v\n        }\n\
    \    }\n    if diff > 1 {\n        return false\n    }\n    if sum != 0 {\n  \
    \      return true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph2yjjji9_test.go:28:5: found declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074893
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    l := make(map[int]int, len(l))\n    for _, v := range l {\n\
    \        l[v] = -1\n    }\n\n    for _, v := range l {\n        if v == 0 {\n\
    \            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfp5mzog_test.go:22:7: no new variables on left side of :=

    /tmp/tmpnfp5mzog_test.go:22:10: cannot use make(map[int]int, len(l)) (value of
    type map[int]int) as type []int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, val := range l {\n        sum += val\n\
    \    }\n\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpb556jft8_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpb556jft8_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpb556jft8_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    result := true\n    if len(l) == 0 {\n        result = false\n\
    \    }\n\n    seen := make(map[int]bool)\n    for _, e := range l {\n        if\
    \ seen[e] {\n            result = false\n            break\n        }\n      \
    \  seen[e] = true\n    }\n\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp96jpo9br_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp96jpo9br_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp96jpo9br_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp96jpo9br_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp96jpo9br_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    pairs\
    \ := make([]pair, 0)\n    var i, j, k int\n\n    for i = 0; i <= len(l); i++ {\n\
    \        pairs = append(pairs, pair{l[i], l[0]})\n    }\n\n    for j = 1; j <\
    \ len(l); j++ {\n        for k = j + 1; k <= len(l); k++ {\n            if l[j]\
    \ + l[k] == 0 {\n                pairs = append(pairs, pair{l[j], l[k]})\n   \
    \         }\n        }\n    }\n\n    n := len(pairs)\n    if n == 0 {\n      \
    \  return false\n    }\n\n    for i := n - 1; i >= 0; i-- {\n        if pairs[i].v1\
    \ != pairs[i+1].v1 {\n            return true\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3_h94fb_test.go:26:21: undefined: pair

    /tmp/tmpc3_h94fb_test.go:30:31: undefined: pair

    /tmp/tmpc3_h94fb_test.go:36:39: undefined: pair

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    sum :=\
    \ 0\n    i := 0\n    j := 0\n    for ; i < len(l); i++ {\n        sum += l[i]\n\
    \    }\n    j = i + 1\n    for ; j < len(l); j++ {\n        if sum != 0 {\n  \
    \          return false\n        }\n        sum += l[j]\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpt9_ty7sh_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpt9_ty7sh_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpt9_ty7sh_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpt9_ty7sh_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpt9_ty7sh_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if l == nil {\n        return false\n    }\n\n    n := len(l)\n\
    \    if n == 0 {\n        return true\n    }\n\n    d := make(map[int]int, n)\n\
    \    i := 0\n    for _, v := range l {\n        if d[v]==0 {\n            i++\n\
    \            d[v] = i\n        }\n    }\n\n    return (i == 2 && !((l[0] + l[1])\
    \ == 0))\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpmlep3tuj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpmlep3tuj_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpmlep3tuj_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    n := len(l)\n    if n < 2 {\n        return false\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    if l[i]+l[j] != 0 {\n                return true\n            }\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpxaz1v6w2_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpxaz1v6w2_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpxaz1v6w2_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpxaz1v6w2_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpxaz1v6w2_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // Initialize max sum as 0.\n    var max int = 0\n    for\
    \ _, i := range l {\n        if i > max {\n            max = i\n        }\n  \
    \  }\n    // Initialize count of max sum.\n    var count int = 0\n    for _, i\
    \ := range l {\n        // If the current element + max is equal to 0, then we\
    \ know that\n        // there are two elements that add up to 0.\n        if i+\
    \ max == 0 {\n            count++\n        }\n    }\n    return count == 2\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpwhmvf7r0_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwhmvf7r0_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpwhmvf7r0_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074894
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var counter int\n    counter := 0\n    var pairs map[int]int\n\
    \    pairs = make(map[int]int, len(l))\n    for _, value := range l {\n      \
    \  pairs[value] = counter\n        if counter == 2 {\n            return true\n\
    \        }\n        counter++\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaooyyd6p_test.go:23:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074894
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    n :=\
    \ len(l)\n    pair_sum := 0\n    for _, num := range l {\n        pair_sum +=\
    \ num\n    }\n    for _, num := range l[1:] {\n        if pair_sum-num != 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw4lzvtit_test.go:26:5: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    first\
    \ := l[0]\n    if len(l) == 1 {\n        return false\n    }\n    second := l[1]\n\
    \    for i := 0; i < len(l)-1; i++ {\n        if first + l[i] > second {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp3mx0h_fg_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp3mx0h_fg_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp3mx0h_fg_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if l == nil {\n        return false\n    }\n    if len(l)\
    \ == 0 {\n        return false\n    }\n    var zero1 int\n    var zero2 int\n\
    \    var zero3 int\n    var zero4 int\n    var zero5 int\n    var zero6 int\n\
    \    for _, item := range l {\n        if item < 0 {\n            return false\n\
    \        }\n        if zero1 == 0 {\n            zero1 = item\n        } else\
    \ {\n            zero2 = item\n        }\n        if zero2 == 0 {\n          \
    \  zero2 = zero1\n        }\n        if zero3 == 0 {\n            zero3 = zero1\n\
    \        }\n        if zero4 == 0 {\n            zero4 = zero1\n        }\n  \
    \      if zero5 == 0 {\n            zero5 = zero1\n        }\n        if zero6\
    \ == 0 {\n            zero6 = zero1\n        }\n    }\n    if zero1 != 0 && zero2\
    \ != 0 && zero3 != 0 && zero4 != 0 && zero5 != 0 && zero6 != 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp3u0qrfm4_test.go:86: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp3u0qrfm4_test.go:86:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp3u0qrfm4_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp3u0qrfm4_test.go:86:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp3u0qrfm4_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp3u0qrfm4_test.go:86:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    for i := range l {\n        for j := range l {\n        \
    \    if i != j && l[i]+l[j] == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // O(n^2): we iterate through the list, testing pairs of\
    \ elements.\n    // If any element in the list has a non-zero pair, we return\
    \ false.\n    for _, i := range l {\n        for _, j := range l {\n         \
    \   if i == j {\n                continue\n            }\n            if j - i\
    \ == 0 {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp22ku4ok__test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmp22ku4ok__test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp22ku4ok__test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp22ku4ok__test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp22ku4ok__test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp22ku4ok__test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    n := len(l)\n    if n == 0 {\n        return false\n    }\n\
    \n    m := n - 1\n    sum1 := 0\n    sum2 := 0\n    result := false\n\n    for\
    \ i := 0; i < m; i++ {\n        sum1 += l[i]\n        sum2 += l[i + 1]\n     \
    \   if sum1 < 0 || sum2 <= 0 {\n            break\n        }\n        if sum1\
    \ == sum2 {\n            result = true\n            break\n        }\n    }\n\n\
    \    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmps8c442k0_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmps8c442k0_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmps8c442k0_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmps8c442k0_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    // set\
    \ and map\n    var set = map[int]bool{}\n    sum := 0\n    for _, v := range l\
    \ {\n        if set[v] {\n            // this element is already in the set and\
    \ thus not valid for sum\n            return false\n        }\n        sum +=\
    \ v\n        set[v] = true\n    }\n    // all values sum up to zero\n    return\
    \ sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp8mlekkz0_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8mlekkz0_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp8mlekkz0_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    pairs\
    \ := make([][]int, len(l))\n\n    for i, e := range l {\n        pairs[i] = make([]int,\
    \ 2)\n        pairs[i][0] = e\n\n        if i > 0 {\n            for _, pair :=\
    \ range pairs[i-1] {\n                pairs[i-1][1] += pair\n            }\n \
    \       }\n    }\n\n    if len(pairs[0]) == 0 {\n        return false\n    }\n\
    \n    if len(pairs[0]) == 1 {\n        return true\n    }\n\n    for _, pair :=\
    \ range pairs[0] {\n        if len(pairs) == 1 {\n            return false\n \
    \       }\n\n        for _, e := range pairs[1] {\n            if e == pair {\n\
    \                return false\n            }\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpflfk4ysp_test.go:83: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpflfk4ysp_test.go:83:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpflfk4ysp_test.go:83: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpflfk4ysp_test.go:83:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpflfk4ysp_test.go:83: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    return len(l) == 0 || pairSumZero(l)\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzookiy9t_test.go:22:27: undefined: pairSumZero

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    result\
    \ := false\n    m := make(map[int]bool)\n    for _, v := range l {\n        m[v]\
    \ = true\n    }\n    for i := 0; i < len(l)-1; i++ {\n        for j := i+1; j\
    \ < len(l); j++ {\n            result ^= (m[i]+m[j])==0\n        }\n    }\n  \
    \  return result\n}\n</code>\n<|/ a tags=algorithm,c++,data-\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6yrcodzs_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074894
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    \n    var sums []int\n    for _, s := range l {\n       \
    \ sums = append(sums, s)\n    }\n    for _, s := range sums {\n        if s ==\
    \ 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7jc6kox5_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp7jc6kox5_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp7jc6kox5_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp7jc6kox5_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if l[0] > 0 {\n        return false\n    }\n    if len(l)\
    \ == 0 {\n        return true\n    }\n    if len(l) == 1 {\n        return false\n\
    \    }\n\n    min := min(l)\n    max, ok := 0-l[0], false\n    for i := 0; i <\
    \ len(l); i++ {\n        if l[i] > max {\n            ok = false\n           \
    \ break\n        }\n        if l[i] == min {\n            max = min(max)\n   \
    \     }\n    }\n    return ok\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphfn5r56_test.go:32:12: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074895
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // O(n) time.\n    // We start from the beginning of the\
    \ list until we find a zero.\n    // If we find a zero, we know that the first\
    \ number is the\n    // zero-sum, and we know that we will never see it again\n\
    \    // until we move to the next number.\n    // Since we have two zeros, we\
    \ can stop looking at the\n    // list.\n    var zeros []int\n    for i := range\
    \ l {\n        if l[i] == 0 {\n            zeros = append(zeros, i)\n        }\n\
    \    }\n    if len(zeros) < 2 {\n        return false\n    }\n    for _, zero\
    \ := range zeros {\n        l := l[:zero] + l[zero+1:]\n        if pairs_sum_to_zero(l)\
    \ == true {\n            return true\n        }\n    }\n    return false\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ifffgzf_test.go:39:15: invalid operation: operator + not defined on l[:zero]
    (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var ret bool\n\n    for i := 0; i < len(l); i++ {\n     \
    \   v := l[i]\n\n        for j := i + 1; j < len(l); j++ {\n            if j >\
    \ i {\n                v2 := l[j]\n\n                if v+v2 < 0 {\n         \
    \           ret = false\n                    break\n                }\n      \
    \      }\n        }\n    }\n\n    return ret\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_g58w4c__test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_g58w4c__test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_g58w4c__test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // Initialize our variables\n    var firstInt int\n    var\
    \ secondInt int\n    var zeroBool bool\n\n    // Initialize our boolean to true\n\
    \    zeroBool = true\n\n    // Iterate through the list\n    for _, num := range\
    \ l {\n\n        // Initialize our first integer\n        firstInt = num\n\n \
    \       // Iterate through the list again\n        for _, nn := range l {\n\n\
    \            // If the first integer is equal to the second integer,\n       \
    \     // then we know they sum to zero, so we stop checking\n            if firstInt\
    \ == nn {\n                break\n            }\n\n            // If the first\
    \ integer is not equal to the second integer,\n            // then we know they\
    \ don't sum up to zero\n            if firstInt != nn {\n\n                //\
    \ Check to see if the sum of both integers equals zero\n                if firstInt\
    \ + secondInt == 0 {\n                    zeroBool = false\n                 \
    \   break\n                }\n\n                // If the sum still doesn't equal\
    \ zero, then break out of\n                // the loop and check if our second\
    \ integer equals 0\n                if firstInt + secondInt != 0 {\n         \
    \           break\n                }\n\n                // If they still don't\
    \ equal zero, then increment our second\n                // integer, and reset\
    \ the first integer to be equal to the\n                // second integer before\
    \ proceeding to the next iteration\n                secondInt++\n            \
    \    firstInt = nn\n            }\n        }\n    }\n    return zeroBool\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpmdhh0kw8_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmpmdhh0kw8_test.go:93:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpmdhh0kw8_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpmdhh0kw8_test.go:93:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpmdhh0kw8_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    prev :=\
    \ 0\n    for _, i := range l {\n        if i == prev {\n            continue\n\
    \        }\n        if prev+i != 0 {\n            return false\n        }\n  \
    \      prev = i\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp2t40hykt_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2t40hykt_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2t40hykt_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var sumOfTwoElems int = 0\n    var sumOfElems int = 0\n\n\
    \    for i, x := range l {\n        sumOfTwoElems += x\n        sumOfElems +=\
    \ i\n    }\n\n    if sumOfTwoElems != 0 {\n        for _, x := range l {\n   \
    \         if sumOfTwoElems <= x {\n                return false\n            }\n\
    \        }\n\n        return true\n    }\n\n    return sumOfElems == 0\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp2_vokpnf_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__2 (0.00s)\n        tmp2_vokpnf_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp2_vokpnf_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp2_vokpnf_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    first\
    \ := 0\n    second := 0\n\n    for _, v := range l {\n        first += v\n   \
    \ }\n\n    for _, v := range l {\n        second += v\n        if second == 0\
    \ {\n            return first == second\n        }\n    }\n\n    return false\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp43_olage_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp43_olage_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp43_olage_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var s int\n    for i := 0; i < len(l); i++ {\n        s +=\
    \ l[i]\n        if s > 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpltoatxaj_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpltoatxaj_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpltoatxaj_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    total\
    \ := 0\n    for _, v := range l {\n        total += v\n    }\n    for _, v :=\
    \ range l {\n        if total == 0 {\n            return false\n        }\n  \
    \      if total == v {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpcl_fms1__test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpcl_fms1__test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpcl_fms1__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpcl_fms1__test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n\n    // Two\
    \ elements are added or subtracted in pairs.\n    // The first pair is the smallest\
    \ and therefore the second must be zero.\n    // The second pair is the largest\
    \ and therefore the first must be zero.\n    // If the two are equal, add them\
    \ and subtract the larger from the smaller.\n    smallest := l[0]\n    largest\
    \ := l[0]\n    for _, item := range l {\n        if item > largest {\n       \
    \     largest = item\n        } else {\n            smallest = item\n        }\n\
    \    }\n    return smallest == 0 || largest == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7lvnq_1c_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp7lvnq_1c_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp7lvnq_1c_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp7lvnq_1c_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    var i\
    \ int\n    for i = 0; i < len(l); i++ {\n        for j = i + 1; j < len(l); j++\
    \ {\n            if l[i]+l[j] != 0 {\n                return true\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph6bquikt_test.go:27:13: undefined: j

    /tmp/tmph6bquikt_test.go:28:23: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l)<2 {\n        return false\n    }\n    sum := 0\n\
    \    for _, v := range l {\n        sum += v\n    }\n    for _, v := range l {\n\
    \        if sum != 0 {\n            if sum != v {\n                return false\n\
    \            }\n            sum -= v\n        }\n    }\n    return true\n}\n\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp5wupuu4q_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp5wupuu4q_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp5wupuu4q_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074896
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    result := false\n    for idx := 0; idx < len(l); idx += 1\
    \ {\n        for idx2 := idx + 1; idx2 < len(l); idx2 += 1 {\n            result\
    \ ^= (l[idx] + l[idx2]) == 0\n        }\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa029pjtf_test.go:25:13: invalid operation: operator ^ not defined on result
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    sum_i :=\
    \ 0\n    for i := 0; i < len(l); i++ {\n        sum_i += l[i]\n    }\n    for\
    \ i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n     \
    \       if sum_i == l[i]+l[j] {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp38_xqbni_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp38_xqbni_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp38_xqbni_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074897
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] - l[i-1] != 0 {\n            return false\n        }\n\
    \    }\n    return sum == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpl0v2vmbt_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpl0v2vmbt_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpl0v2vmbt_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074897
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    pairs := make(map[int]int)\n    for _, num := range l {\n\
    \        pairs[num] = pairs[num] + 1\n    }\n    for key, value := range pairs\
    \ {\n        if value > 1 {\n            return false\n        }\n    }\n    return\
    \ true\n}\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_yrz5r0_test.go:26:9: key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074897
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    // make\
    \ two pointer pointing to l\n    left := &l[0]\n    right := &l[0]\n    index\
    \ := 0\n    for left, right, index = _(left, right, index)\n        && index+1\
    \ < len(l)\n        && left != right\n        && right+1 == l[index+1]\n    {\n\
    \        index++\n    }\n    return index != 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyvkuyx1r_test.go:30:9: expected operand, found ''&&''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074896
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    // write your code here\n    for _, v := range l {\n    \
    \    for _, w := range l {\n            if v != w {\n                if v+w ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074897
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    var result\
    \ bool = false\n    var k int = 0\n    for _,_ := range l {\n        if k == 0\
    \ && l[k] == 0 {\n            result = true\n        }\n        if k > 0 && l[k]\
    \ == l[k-1] {\n            result = true\n        }\n        if result {\n   \
    \         k = 0\n        }\n        k++\n    }\n    return result\n}\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu4lumw85_test.go:27:5: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074897
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    s := make(map[int]bool,\
    \ len(l))\n    for _, x := range l {\n        if x == 0 {\n            return\
    \ false\n        }\n        if s[x]==true {\n            return false\n      \
    \  }\n        s[x] = true\n    }\n    return true\n}\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp44p1g65n_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmp44p1g65n_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp44p1g65n_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074897
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l)\
    \ == 1 {\n        return true\n    }\n    if l[0] == 0 {\n        return false\n\
    \    }\n    sum := 0\n    found := false\n    for i := 0; i < len(l); i++ {\n\
    \        sum += l[i]\n        if sum == 0 {\n            if !found {\n       \
    \         found = true\n                return true\n            }\n        }\
    \ else {\n            sum -= l[i]\n            if sum != 0 {\n               \
    \ found = true\n                return false\n            }\n        }\n    }\n\
    \    return false\n}\n</code>\n<|/ a tags=go,algorithm |>\n<| a |>\nA solution\
    \ from golang standard library that doesn't require the use of maps:\n<code>\n\
    func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4u6wuhbx_test.go:50:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074896
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    total\
    \ := 0\n    for _, v := range l {\n        if v > 0 {\n            total += v\n\
    \        }\n    }\n    return total < 0\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp2jmyhmra_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2jmyhmra_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2jmyhmra_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l)==0 || len(l)==1 {\n        return false\n    }\n\
    \    sum:=0\n    flag:=false\n    for _,i:=range l {\n        if i!=0 && i!=sum\
    \ {\n            flag:=true\n            break\n        }\n        sum+=i\n  \
    \  }\n    return !flag\n}\n</code>\n<|/ a dscore=3 tags=algorithm,go |>\n<| c\
    \ |>\n`for _, i := range l { sum += i; if sum == 0 { flag = true; break; }}` can\
    \ be reduced to `for _, i := range l { sum += i; return sum == 0 }`. Also the\
    \ `for i := range l` can be replaced with a `for _, i := range l`.\n<|/ c |>\n\
    <| c |>\nI really like this answer, especially for golfing purposes!\n<|/ c |>\n\
    <| c |>\nIn golf it's even shorter: `return (len(l)==0 || len(l)==1) && (l[0]\
    \ != 0 || l[1] != 0)`.\n<|/ c |>\n<| a dscore=2 tags=algorithm,go |>\nHere's a\
    \ solution without using any special \nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa3lsl36z_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074896
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var result bool\n    l := make([]int, len(l))\n    for i\
    \ := range l {\n        l[i] = int(l[i])\n    }\n    l := l[0:0]\n    for _, x\
    \ := range l {\n        l.Remove(x)\n    }\n    result := true\n    if len(l)\
    \ != 0 {\n        result = false\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7r526u81_test.go:23:7: no new variables on left side of :=

    /tmp/tmp7r526u81_test.go:27:7: no new variables on left side of :=

    /tmp/tmp7r526u81_test.go:29:11: l.Remove undefined (type []int has no field or
    method Remove)

    /tmp/tmp7r526u81_test.go:31:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074897
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    d := make(map[int]int)\n\
    \    for _, v := range l {\n        if v < 0 {\n            return false\n   \
    \     }\n        d[v] += 1\n    }\n    for key, val := range d {\n        if val\
    \ == 2 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgd3a5z0o_test.go:32:9: key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    return s == 0\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpy7780egn_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpy7780egn_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpy7780egn_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074707
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var cnt int\n    for _, val := range l {\n        if val\
    \ != 0 {\n            cnt += 1\n        }\n    }\n    return cnt <= 2\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis solution is O(N^2) whereas other solutions provided are\
    \ O(N).\n<|/ c |>\n<| c |>\nYes, but when N is large, this is O(N) because it\
    \ does fewer comparisons. This happens when the inputs are very small and you\
    \ do fewer comparisons, e.g. when the input is small.\n<|/ c |>\n<| a dscore=5\
    \ |>\nHere's an algorithm that uses no additional data \nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1lmybhzj_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074897
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, x := range l {\n        sum += x\n    }\n    if sum%2 == 0 {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp_puc7anl_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmp_puc7anl_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if l[0]\
    \ == 0 {\n        return true\n    }\n    last := l[0]\n    for _, val := range\
    \ l[1:] {\n        if val - last != 0 {\n            return false\n        }\n\
    \        last = val\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpsiihshsp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpsiihshsp_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpsiihshsp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpsiihshsp_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    result\
    \ := false\n    for i := 0; i < len(l); i++ {\n        for j := i+1; j < len(l);\
    \ j++ {\n            if l[i] + l[j] == 0 {\n                result = true\n  \
    \          }\n        }\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    c := make(map[int]int)\n    for i := 0; i < len(l); i++ {\n\
    \        if _, ok := c[l[i]]; ok {\n            return true\n        }\n     \
    \   c[l[i]] = i\n    }\n    return false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpfj_8l3s2_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpfj_8l3s2_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpfj_8l3s2_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpfj_8l3s2_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    result := false\n    for _, v := range l {\n\
    \        sum += v\n    }\n    switch {\n    case sum == 0:\n        result = true\n\
    \    case sum > 0:\n        t := make([]int, len(l))\n        for i := range t\
    \ {\n            t[i] = l[i]\n        }\n        for i := range t {\n        \
    \    l := t[i:]\n            if l[0] < 0 {\n                break\n          \
    \  }\n            if i != 0 {\n                if sum-l[0] > 0 {\n           \
    \         sum += l[0]\n                    result = true\n                } else\
    \ {\n                    l[0] = -l[0]\n                    result &= pairs_sum_to_zero(l)\n\
    \                }\n            } else {\n                result = true\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv42jezh0_test.go:46:21: invalid operation: operator & not defined on result
    (variable of type bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 0 {\n        return false\n    }\n    var zeros\
    \ = false\n    for _, v := range l {\n        for _, v2 := range l {\n       \
    \     if v + v2 == 0 {\n                zeros = true\n                break\n\
    \            }\n        }\n    }\n    return zeros\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpab3f2u7h_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l)\
    \ == 1 {\n        return true\n    }\n    last := 0\n    current := 0\n    for\
    \ _, v := range l {\n        current += v\n        if current == 0 {\n       \
    \     last = current\n        }\n    }\n    return last == 0\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpnqggg0n5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpnqggg0n5_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpnqggg0n5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmpnqggg0n5_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpnqggg0n5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__8 (0.00s)\n        tmpnqggg0n5_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    if l[0]\
    \ == 0 {\n        return true\n    }\n\n    // find minimum value\n    x := l[0]\n\
    \    for _, y := range l {\n        if x == y {\n            return true\n   \
    \     }\n        if x < y {\n            x, y = y, x\n        }\n    }\n\n   \
    \ // check remaining elements\n    if x > 0 {\n        for _, y := range l {\n\
    \            if x != y {\n                return false\n            }\n      \
    \  }\n    }\n\n    return true\n}\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpwqemj484_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpwqemj484_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwqemj484_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpwqemj484_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpwqemj484_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    m := map[int]int{}\n    for _, v := range l {\n        m[v]++\n\
    \        if m[v] == 2 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp_tveh8r8_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmp_tveh8r8_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp_tveh8r8_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp_tveh8r8_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    t := make(map[int]bool)\n    for _, i := range l {\n    \
    \    t[i] += true\n    }\n    for key, value := range t {\n        if value ==\
    \ true {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5dpqpwox_test.go:24:9: invalid operation: operator + not defined on t[i]
    (map index expression of type bool)

    /tmp/tmp5dpqpwox_test.go:26:9: key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l)-1; i++ {\n        if l[i] == l[i+1] {\n            l[i] = 0\n\
    \        }\n    }\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] != 0 &&\
    \ l[i]+l[i+1] != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpte0to6bl_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmpte0to6bl_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpte0to6bl_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if l == nil {\n        return false\n    }\n\n    if len(l)\
    \ <= 1 {\n        return false\n    }\n\n    // sort the list\n    sort.Ints(l)\n\
    \n    // loop through the list one time\n    var a []int\n    for _, x := range\
    \ l {\n        if a == nil {\n            a = append(a, x)\n        }\n      \
    \  else {\n            var b []int\n            for _, y := range a {\n      \
    \          if x == y {\n                    return false\n                }\n\
    \                if x > y {\n                    b = append(b, y)\n          \
    \      } else {\n                    b = append(b, x)\n                }\n   \
    \         }\n            a = b\n        }\n    }\n\n    // return true if a is\
    \ not nil and contains two distinct elements\n    // that sum to 0\n    return\
    \ a != nil && len(a) == 2\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprdy8b5vu_test.go:39:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            if l[i]+l[j] != 0 {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp6r1viikx_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__4 (0.00s)\n        tmp6r1viikx_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp6r1viikx_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmp6r1viikx_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    n := len(l)\n    if n == 0 {\n        return true\n    }\n\
    \    p := make(map[int]int, 2*n)\n    for _, e := range l {\n        p[e]++\n\
    \    }\n    for i := n - 1; i > 0; i-- {\n        e := l[i]\n        if p[e] ==\
    \ 0 {\n            return false\n        }\n        c := p[e]\n        p[e] =\
    \ c\n        for k = i + 1; k < n; k++ {\n            if p[k] == 0 {\n       \
    \         return false\n            }\n            p[k] += c\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n\
    \     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n     {\
    \ actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnear31ou_test.go:37:13: undefined: k

    /tmp/tmpnear31ou_test.go:38:18: undefined: k

    /tmp/tmpnear31ou_test.go:41:15: undefined: k

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    result := false\n    for i := 0; i < len(l); i++ {\n    \
    \    current := l[i]\n        total := 0\n        for j := 0; j < i; j++ {\n \
    \           total += l[j]\n        }\n        if total == current {\n        \
    \    result = true\n            break\n        }\n    }\n    return result\n}\n\
    \nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpv9nej7w__test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__3 (0.00s)\n        tmpv9nej7w__test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpv9nej7w__test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__6 (0.00s)\n        tmpv9nej7w__test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if l == nil {\n        return false\n    }\n    k := 0\n\
    \    sum := 0\n    for _, v := range l {\n        if v > 0 {\n            sum\
    \ += v\n            k = k + 1\n        }\n    }\n    if k == 0 {\n        return\
    \ false\n    }\n    sum %= k\n    if sum < 0 {\n        sum = 0 - sum\n    }\n\
    \    for _, v := range l {\n        if v != 0 && v == sum {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpmp1a_zum_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmpmp1a_zum_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpmp1a_zum_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmpmp1a_zum_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    var pairs [][int]int\n    sort.Sort(pairs)\n    for _, pair\
    \ := range pairs {\n        i := pair[0]\n        j := pair[1]\n        if i !=\
    \ j && j == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4965ma45_test.go:22:18: invalid array length int

    /tmp/tmp4965ma45_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    if l[0]\
    \ != l[1] {\n        return false\n    }\n    return pairs_sum_to_zero([]int{l[0],\
    \ l[1], l[2], l[3], l[4], l[5], l[6]})\n}\n\nfunc TestPairs_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 5, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{-3,\
    \ 9, -1, 3, 2, 30}), expected: true },\n     { actual: candidate([]int{-3, 9,\
    \ -1, 3, 2, 31}), expected: true },\n     { actual: candidate([]int{-3, 9, -1,\
    \ 4, 2, 30}), expected: false },\n     { actual: candidate([]int{-3, 9, -1, 4,\
    \ 2, 31}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp5eutpbyy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__5 (0.00s)\n        tmp5eutpbyy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp5eutpbyy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074899
- exit_code: 2
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    var l []int\n\
    \    for i, v := range l {\n        total := 0\n        for _, u := range l {\n\
    \            total += v + u\n        }\n        if total == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPairs_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := pairs_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 5,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1}), expected: false\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n   \
    \  { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n     {\
    \ actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprjaj5y41_test.go:25:9:\
    \ l redeclared in this block\n\t/tmp/tmprjaj5y41_test.go:21:24: other declaration\
    \ of l\n/tmp/tmprjaj5y41_test.go:26:9: i declared but not used\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the list that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
    \ >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n//\
    \ true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    k := l[0]\n\
    \    for _, x := range l[1:] {\n        if k+x > 0 {\n            k = k + x\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
    \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
    \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n  \
    \   { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPairs_Sum_To_Zero (0.00s)\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmprnov2dej_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__1 (0.00s)\n        tmprnov2dej_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmprnov2dej_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPairs_Sum_To_Zero/test_num__7 (0.00s)\n        tmprnov2dej_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPairs_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmprnov2dej_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074899
