name: HumanEval_41_car_race_collision
language: go_test.go
prompt: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n// n\
  \ cars are driving left to right;  simultaneously, a different set of n cars\n//\
  \ are driving right to left.   The two sets of cars start out being very far from\n\
  // each other.  All cars move in the same speed.  Two cars are said to collide\n\
  // when a car that's moving left to right hits a car that's moving right to left.\n\
  // However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n// in their trajectory as if they did not collide.\n// This function outputs\
  \ the number of such collisions.\nfunc car_race_collision(n int) int {\n"
tests: "func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
  \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n \
  \    { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
  \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
  \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
