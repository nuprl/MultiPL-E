language: go_test.go
name: HumanEval_42_incr_list
results:
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    // Create a\
    \ counter of sorts.\n    var i int\n    var list []int\n    for _, e := range\
    \ l {\n        list = append(list, e)\n        i += e\n    }\n    for ; i > 0;\
    \ {\n        list = append(list, i)\n        i -= i\n    }\n\n    // Increment\
    \ elements.\n    for _, e := range list {\n        e += 1\n    }\n\n    return\
    \ list\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmplplo2o6t_test.go:49: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=6)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmplplo2o6t_test.go:49: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123) %!s(int=152)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return []int{}\n    }\n\n    head := l[0]\n    tail := l[1:]\n\n\
    \    head += 1 // increase the first element by 1.\n\n    for _, v := range tail\
    \ {\n        if v >= head {\n            head = v\n        }\n    }\n\n    return\
    \ append(l, head) // append the last element back to the list.\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp9afs2al1_test.go:47: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp9afs2al1_test.go:47: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] += 1 // increment index\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, i := range l {\n        result = append(result, i+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    ret := make([]int,\
    \ len(l))\n    i := 0\n    for _, val := range l {\n        ret[i] = val + 1\n\
    \        i++\n    }\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n\
    \  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i]++\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    i := 0\n  \
    \  for _, v := range l {\n        l[i] = v + 1\n        i += 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var list []int\n\
    \    for _, x := range l {\n        list = append(list, x+1)\n    }\n    return\
    \ list\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret []int\n\
    \    n := len(l)\n    for i := 0; i < n; i++ {\n        i++\n        ret = append(ret,\
    \ l[i])\n    }\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc0000f8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc0000f8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpex_72813_test.go:18\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpex_72813_test.go:31\
    \ +0x534\ntesting.tRunner(0xc00009b1e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) <\
    \ 2 {\n        return l\n    }\n    l1 := l[:1]\n    for i := 1; i < len(l); i++\
    \ {\n        l1 = append(l1, l[i]+1)\n    }\n    return l1\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp2oz2q7f4_test.go:39: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp2oz2q7f4_test.go:39: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10)\
    \ %!s(int=1) %!s(int=124)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    ret := make([]int,\
    \ len(l))\n    for i, v := range l {\n        ret[i] = v + 1\n    }\n    return\
    \ ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073908
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incr_list_fn\
    \ := func(lst []int) []int {\n        idx := len(lst) - 1\n        elem := lst[idx]\n\
    \        if idx > 0 {\n            lst[idx] = elem + 1\n            return incr_list(lst)\n\
    \        }\n        lst = append(lst, elem+1)\n        return lst\n    }\n   \
    \ return incr_list_fn(l)\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x512700, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list.func1({0x6297e0?, 0xf?, 0x5639fb?})\n\
    \t/tmp/tmp4lgutr14_test.go:16 +0x9e\ncommand-line-arguments_test.incr_list({0x6297e0?,\
    \ 0x5d30f8?, 0x5e2ea0?})\n\t/tmp/tmp4lgutr14_test.go:24 +0x29\ncommand-line-arguments_test.TestIncr_List(0x0?)\n\
    \t/tmp/tmp4lgutr14_test.go:34 +0x4d\ntesting.tRunner(0xc000103380, 0x528020)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return l\n    }\n\n    i := 0\n    last := len(l) - 1\n    for\
    \ {\n        if i == last {\n            break\n        }\n\n        l[i] = l[i]\
    \ + 1\n        i++\n    }\n\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp_o0tpw5q_test.go:47: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp_o0tpw5q_test.go:47: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10)\
    \ %!s(int=1) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return nil\n    }\n    n := l[0]\n    for _, x := range l {\n \
    \       n = x + n\n    }\n    return []int{n}\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp6at_p31__test.go:39: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=9)]'\n    --- FAIL: TestIncr_List/test_num__2 (0.00s)\n      \
    \  tmp6at_p31__test.go:39: expected '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got '[%!s(int=157)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var t []int\n\
    \    for _, v := range l {\n        t = append(t, v+1)\n    }\n    return t\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp_81g4d09_test.go:32: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp_81g4d09_test.go:32: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073912
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    ret := make([]int,\
    \ len(l))\n    for i := range l {\n        ret[i] += 1 // this assumes no duplicates\n\
    \    }\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp0jdt7csv_test.go:36: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp0jdt7csv_test.go:36: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret []int\n\
    \    var n int\n\n    for i := range l {\n        if i%2 == 0 {\n            ret[n]\
    \ = l[i] + n\n        } else {\n            ret[n] = l[i]\n        }\n       \
    \ n++\n    }\n\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmp63e33ji9_test.go:19\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmp63e33ji9_test.go:37\
    \ +0x18\ntesting.tRunner(0xc0000be680, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incr := func(i,\
    \ j int) {\n        if i < j {\n            l.Swap(i, j)\n            incr(i,\
    \ j+1)\n        }\n    }\n    incr(0, len(l)-1)\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6ml3hkh_test.go:16:15: l.Swap undefined (type []int has no field or method
    Swap)

    /tmp/tmpb6ml3hkh_test.go:17:13: undefined: incr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret []int\n\
    \    for i := 0; i < len(l); i++ {\n        ret, i = incr(ret, l[i])\n    }\n\
    \    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjy44fvgk_test.go:16:18: undefined: incr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    return append(l,\
    \ l...)\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpjnql4baf_test.go:32: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestIncr_List/test_num__2 (0.00s)\n        tmpjnql4baf_test.go:32:\
    \ expected '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4)\
    \ %!s(int=10) %!s(int=1) %!s(int=124)]', got '[%!s(int=5) %!s(int=2) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0)\
    \ %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret []int\n\
    \    var max int\n    for _, val := range l {\n        max = val\n    }\n    for\
    \ i := range l {\n        if i == 0 {\n            continue\n        }\n     \
    \   ret[i-1] = max + 1\n    }\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000156000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000156000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpcuqo6bns_test.go:23\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpcuqo6bns_test.go:36\
    \ +0x31d\ntesting.tRunner(0xc0001191e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    // Initialize\
    \ result list.\n    var r []int\n    for _, v := range l {\n        r = append(r,\
    \ v+1)\n    }\n    // Return result.\n    return r\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    res := make([]int,\
    \ len(l))\n    for i := range l {\n        res[i] = l[i] + 1\n    }\n    return\
    \ res\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        r[i] = l[i] + 1\n    }\n\
    \    return r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074046
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    idx := len(l)\
    \ - 1\n    incr := 1\n\n    for idx >= 0 {\n        l[idx] = l[idx] + incr\n \
    \       incr *= 2\n        idx -= 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpe8rx37cy_test.go:40: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=7) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpe8rx37cy_test.go:40: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=261) %!s(int=130) %!s(int=69) %!s(int=34) %!s(int=19) %!s(int=11)\
    \ %!s(int=13) %!s(int=2) %!s(int=124)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var newL =\
    \ []int{}\n    for _, x := range l {\n        newL = append(newL, x+1)\n    }\n\
    \    return newL\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074048
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] += i\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpv4kod71t_test.go:35: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpv4kod71t_test.go:35: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=3) %!s(int=7) %!s(int=5) %!s(int=7) %!s(int=8) %!s(int=15)\
    \ %!s(int=7) %!s(int=131)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074048
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i]++\n        if l[i]%2 == 0 {\n            l[i]\
    \ += 1\n        }\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpw273iw0k_test.go:38: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpw273iw0k_test.go:38: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=7) %!s(int=3) %!s(int=7) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=11)\
    \ %!s(int=1) %!s(int=125)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := len(l)\
    \ - 1; i >= 0; i-- {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074049
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return nil\n    }\n\n    idx := 0\n    var result []int\n    var\
    \ prev int\n    for _, e := range l {\n        result[idx] = e\n        prev++\n\
    \        idx += 1\n        if idx%10 == 0 {\n            prev = e\n          \
    \  idx = 0\n        }\n        if idx%100 == 0 {\n            fmt.Printf(\"%d\\\
    n\", prev)\n        }\n    }\n\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list({0xc00006b660?, 0x5d3050?, 0x5e2ea0?})\n\
    \t/tmp/tmp865y6sq0_test.go:22 +0x25\ncommand-line-arguments_test.TestIncr_List(0x0?)\n\
    \t/tmp/tmp865y6sq0_test.go:45 +0xa2\ntesting.tRunner(0xc00009b6c0, 0x528020)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    idx := 0\n\
    \    for _, v := range l {\n        l[idx] = v + 1\n        idx += 1\n    }\n\
    \    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074049
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var res []int\n\
    \    for _, v := range l {\n        if v < len(res) {\n            res[v] += 1\n\
    \        } else {\n            res = append(res, 1)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpaxujolda_test.go:40: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestIncr_List/test_num__2 (0.00s)\n\
    \        tmpaxujolda_test.go:40: expected '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got '[%!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    // Your code\
    \ here\n    l1 := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n   \
    \     l1[i] = l[i] + 1\n    }\n    return l1\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074049
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    index := 0\n\
    \    var result []int\n    for _, el := range l {\n        result[index] = el\n\
    \        index += 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpniimxhcf_test.go:17\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpniimxhcf_test.go:31\
    \ +0x18\ntesting.tRunner(0xc0000c64e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    for i := 0; i < n; i++ {\n        l[n-1]++\n    }\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmprxwlho85_test.go:36: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmprxwlho85_test.go:36: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=132)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i]++\n    }\n\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074049
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    l := make([]int, n)\n    for i := 0; i < n; i++ {\n        l[i] = l[i] +\
    \ 1 // increment by 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkelkbphf_test.go:15:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    result := make([]int,\
    \ len(l))\n    for i := range l {\n        result[i] = l[i] + 1\n    }\n    return\
    \ result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074049
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    size := len(l)\n\
    \    l := make([]int, size)\n    for i := 0; i < size; i++ {\n        l[i] = l[i]\
    \ + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89lmlnhm_test.go:15:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074049
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i]++\n        if l[i] > l[i-1] {\n            fmt.Println(\"\
    BUG\")\n        }\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list({0xc000014360?, 0x3, 0x3})\n\t\
    /tmp/tmpu3rz7n_k_test.go:16 +0xc5\ncommand-line-arguments_test.TestIncr_List(0x0?)\n\
    \t/tmp/tmpu3rz7n_k_test.go:31 +0x97\ntesting.tRunner(0xc0000cc1a0, 0x528020)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret = []int{}\n\
    \    for _, v := range l {\n        ret[retSize] = v + 1\n        retSize++\n\
    \    }\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekv3p9i0_test.go:16:13: undefined: retSize

    /tmp/tmpekv3p9i0_test.go:17:9: undefined: retSize

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    result := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        result[i] = l[i] + 1\n \
    \   }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074049
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    var ret []int\n    for i := 0; i < n; i++ {\n        ret[i] = l[i] + n\n\
    \    }\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0000f0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0000f0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpvvsmnx9r_test.go:17\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpvvsmnx9r_test.go:30\
    \ +0x18\ntesting.tRunner(0xc000093380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range l {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var out []int\n\
    \    for _, v := range l {\n        out = append(out, v+1)\n    }\n    return\
    \ out\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074049
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for _, v :=\
    \ range l {\n        v += 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp5veg0asd_test.go:35: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp5veg0asd_test.go:35: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    result := make([]int,\
    \ len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n    return\
    \ result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073905
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    if n == 0 {\n        return l\n    }\n    m := n % 4\n    if m == 0 {\n \
    \       m = 3\n    }\n    var i int\n    var t []int\n    for i = 0; i < n; i\
    \ += 4 {\n        t = append(t, l[i+0]+l[i+1]+l[i+2]+l[i+3])\n    }\n    for ;\
    \ i < n; i++ {\n        t = append(t, l[i])\n    }\n    t := t[:m]\n    return\
    \ t\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprzq5cn5y_test.go:30:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074049
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i+1] = l[i] + 1\n    }\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpa9pxydp2_test.go:15\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpa9pxydp2_test.go:28\
    \ +0x3c5\ntesting.tRunner(0xc0001031e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074049
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    i := 0\n  \
    \  l := l[:]\n    for ; i < len(l); i++ {\n        l[i] = i+1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilu6v_bh_test.go:15:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] += 1;\n    }\n    return l;\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073992
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret []int\n\
    \    for _, v := range l {\n        v += 1\n        ret = append(ret, v)\n   \
    \ }\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var n int\n\
    \    var l []int\n    for _, e := range l {\n        n++\n        l = append(l,\
    \ e+n)\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ygcdajv_test.go:15:9:\
    \ l redeclared in this block\n\t/tmp/tmp3ygcdajv_test.go:13:16: other declaration\
    \ of l\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    t := make([]int,\
    \ len(l))\n    for i := range t {\n        t[i] = l[i] + 1\n    }\n    return\
    \ t\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    i := 0\n    for _, v := range l {\n        i += v\n        l[i]\
    \ = v\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7zzls56_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var i int\n\
    \n    for i = 0; i<len(l); i++ {\n        l[i]++\n    }\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074051
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var acc []int\n\
    \    for _, v := range l {\n        acc = append(acc, v+1)\n    }\n    return\
    \ acc\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074051
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incrList :=\
    \ make([]int, len(l))\n    for i, v := range l {\n        incrList[i] = v + 1\n\
    \    }\n    return incrList\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incr_list :=\
    \ func(list []int) {\n        current := len(list)\n        if current < 2 {\n\
    \            return\n        }\n        list[0] = list[0] + 1\n        incr_list(list[1:])\n\
    \        list[0] = list[0] - 1\n    }\n\n    return incr_list(l)\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_otkebk9_test.go:24:12: incr_list(l) (no value) used as value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    idx := len(l)\n\
    \    for i := range l {\n        l[idx] = l[idx] + 1\n        if l[idx] == 0 {\n\
    \            idx--\n        }\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptybktc8t_test.go:15:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074051
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range l {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i+1] = i + v\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpgj8c_kxi_test.go:16\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpgj8c_kxi_test.go:29\
    \ +0x474\ntesting.tRunner(0xc0001031e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incr := make([]int,\
    \ len(l))\n    for i, e := range l {\n        incr[i] = e + 1\n    }\n    return\
    \ incr\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074052
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incr_res :=\
    \ make([]int, len(l))\n    for i, v := range l {\n        incr_res[i] = v + 1\n\
    \    }\n    return incr_res\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074052
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incremented\
    \ = true\n    ret := []int{}\n    for _, val := range l {\n        if incremented\
    \ {\n            ret = append(ret, val+1)\n        } else {\n            ret =\
    \ append(ret, val)\n        }\n        incremented = !incremented\n    }\n   \
    \ return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5pdmlqj5_test.go:14:5: undefined: incremented

    /tmp/tmp5pdmlqj5_test.go:17:12: undefined: incremented

    /tmp/tmp5pdmlqj5_test.go:22:24: undefined: incremented

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074052
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    ret := make([]int,\
    \ len(l))\n    for i := range l {\n        ret[i] += 1 // Add 1 to the current\
    \ element.\n    }\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n \
    \ candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpm_45sf_b_test.go:36: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpm_45sf_b_test.go:36: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    i := 0\n  \
    \  for idx := range l {\n        l[idx] = i + l[idx]\n        i += l[idx]\n  \
    \  }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpudxzyus4_test.go:37: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpudxzyus4_test.go:37: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=7) %!s(int=17) %!s(int=31) %!s(int=63) %!s(int=126) %!s(int=258)\
    \ %!s(int=507) %!s(int=1137)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    out := make([]int,\
    \ len(l))\n    for i := range l {\n        out[i] = l[i] + 1\n    }\n    return\
    \ out\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074052
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    result := make([]int,\
    \ 0, len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n  \
    \  return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpociq073a_test.go:16\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpociq073a_test.go:29\
    \ +0x45\ntesting.tRunner(0xc0000cc1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret = []int{}\n\
    \    for i := 0; i < len(l); i++ {\n        ret[i] = l[i] + 1\n    }\n    return\
    \ ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmp7el41j44_test.go:16\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmp7el41j44_test.go:29\
    \ +0x18\ntesting.tRunner(0xc0000c64e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var v int\n\
    \    var w int\n    for _, v := range l {\n        w = v\n        if w > v {\n\
    \            w = w-1\n        }\n        l = append(l, w)\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb07l7qmu_test.go:14:9: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074052
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    result := make([]int,\
    \ len(l))\n    for i := range l {\n        result[i] += 1 // Increment each element\
    \ by 1.\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n \
    \ candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp1jn9dpql_test.go:36: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp1jn9dpql_test.go:36: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    ret := make([]int,\
    \ len(l))\n    for i, v := range l {\n        ret[i+1] = v + 1\n    }\n    return\
    \ ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpdv8d2278_test.go:16\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpdv8d2278_test.go:29\
    \ +0x474\ntesting.tRunner(0xc0000cc340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for _, i :=\
    \ range l {\n        i += 1 // incr each element\n    }\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpx6c3hqpx_test.go:35: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpx6c3hqpx_test.go:35: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074052
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := len(l)\n\
    \    count := 0\n    for _, x := range l {\n        count += x\n        l[count]++\n\
    \    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdu_nhpze_test.go:14:7: no new variables on left side of :=

    /tmp/tmpdu_nhpze_test.go:14:10: cannot use len(l) (value of type int) as type
    []int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074052
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var i int\n\
    \    for _, value := range l {\n        i = i + 1\n        l[i] = value\n    }\n\
    \n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpjiqohoki_test.go:17\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpjiqohoki_test.go:31\
    \ +0x3c5\ntesting.tRunner(0xc0000c6680, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074054
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if l[len(l)-1]\
    \ > 123 {\n        fmt.Println(\"Error - list element value is out of range.\"\
    )\n        return nil\n    }\n\n    // Copy array before incrementing.\n    a\
    \ := make([]int, len(l))\n    copy(a, l)\n\n    for i := range a {\n        a[i]\
    \ += 1 + a[i]\n    }\n\n    return a\n}\n\nfunc TestIncr_List(t *testing.T) {\n\
    \  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list({0xc000070628?, 0x5d4150?, 0x5e3ea0?})\n\
    \t/tmp/tmp28382b28_test.go:14 +0xfb\ncommand-line-arguments_test.TestIncr_List(0x0?)\n\
    \t/tmp/tmp28382b28_test.go:37 +0x4b\ntesting.tRunner(0xc0000cc1a0, 0x529048)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074054
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret []int\n\
    \    switch len(l) {\n    case 0:\n        return ret\n    case 1:\n        ret\
    \ = []int{l[0] + 1}\n    case 2:\n        ret = append(ret, l[1])\n    case 3:\n\
    \        ret = append(ret, l[2], l[1]+1)\n    default:\n        ret = append(ret,\
    \ l[2], l[1]+1, incr_list(l[3:]))\n    }\n    return ret\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe25iikj__test.go:25:41: cannot use incr_list(l[3:]) (value of type []int)
    as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074054
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if l == nil\
    \ {\n        return []int{}\n    }\n    r := make([]int, len(l))\n    for idx,\
    \ val := range l {\n        r[idx+1] = val + 1\n    }\n    return r\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc0000fa018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc0000fa018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmp768nlsff_test.go:19\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmp768nlsff_test.go:32\
    \ +0x474\ntesting.tRunner(0xc00009b6c0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return l\n    }\n    if len(l) == 1 {\n        return append(l,\
    \ 1)\n    }\n    return append(l, l[len(l)-1]+1)\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpzj7vlr8s_test.go:38: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpzj7vlr8s_test.go:38: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123) %!s(int=124)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074054
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for _, v :=\
    \ range l {\n        l = append(l, v+1)\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp_pzc2r14_test.go:35: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestIncr_List/test_num__2 (0.00s)\n        tmp_pzc2r14_test.go:35:\
    \ expected '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4)\
    \ %!s(int=10) %!s(int=1) %!s(int=124)]', got '[%!s(int=5) %!s(int=2) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=6)\
    \ %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1)\
    \ %!s(int=124)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074054
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    k := len(l)\
    \ - 1\n    for i := len(l) - 2; i >= 0; i-- {\n        l[i+1] = l[i] + 1\n   \
    \ }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_4dy9j7p_test.go:14:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074054
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i]++\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074054
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var out []int\n\
    \    j := 0\n    for _, b := range l {\n        out[j+1] = b\n        j++\n  \
    \  }\n    return out\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 0 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmp_70f2_ih_test.go:17\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmp_70f2_ih_test.go:31\
    \ +0x1a\ntesting.tRunner(0xc00009b520, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074054
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    result := make([]int,\
    \ len(l))\n    for i, val := range l {\n        result[i] = val + 1\n    }\n \
    \   return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074055
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    output := make([]int,\
    \ len(l))\n    for i := range output {\n        output[i] = l[i] + 1 // i+1 because\
    \ list indices start at 1.\n    }\n    return output\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074055
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    o := make([]int,\
    \ len(l))\n    for i, v := range l {\n        o[i] = v + 1\n    }\n    return\
    \ o\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074055
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) >\
    \ 0 {\n        incr_into_list(l[1:])\n        l[0]++\n    }\n    return l\n}\n\
    \nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsy2997y3_test.go:15:9: undefined: incr_into_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    x := l[0]\n\
    \    for _, r := range l {\n        x = x + 1\n    }\n    return append([]int{x},\
    \ l...)\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9j5bqclt_test.go:15:12: r declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var v int\n\
    \    for _, x := range l {\n        v = x + 1\n        l[x-v] = v\n    }\n   \
    \ return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 4 [running]:\ntesting.tRunner.func1.2({0x5124a0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5124a0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpxkkbmu6q_test.go:17\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpxkkbmu6q_test.go:30\
    \ +0x4d\ntesting.tRunner(0xc000134000, 0x527d98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[v+1] = i + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 3 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpla4gok4u_test.go:16\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpla4gok4u_test.go:29\
    \ +0x469\ntesting.tRunner(0xc0000cc1a0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    r := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        if i == 0 {\n\
    \            r = append(r, l[i])\n        } else {\n            r = append(r,\
    \ l[i]+1)\n        }\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpgg3rfxpu_test.go:41: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpgg3rfxpu_test.go:41: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10)\
    \ %!s(int=1) %!s(int=124)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, v := range l {\n        r[i] = v + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073800
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret []int\n\
    \n    for i, v := range l {\n        ret[i] = v + 1\n    }\n\n    return ret\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmp8vd2p6ke_test.go:17\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmp8vd2p6ke_test.go:31\
    \ +0x18\ntesting.tRunner(0xc000134340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range l {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var output\
    \ []int\n    for index, i := range l {\n        output = append(output, i+1)\n\
    \    }\n    return output\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq63pib79_test.go:15:9: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    // Create new\
    \ list.\n    result := make([]int, len(l))\n    for idx, val := range l {\n  \
    \      result[idx+1] = val + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc00014e018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc00014e018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpx1lkbaee_test.go:17\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpx1lkbaee_test.go:30\
    \ +0x474\ntesting.tRunner(0xc00011b1e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return []int{}\n    }\n\n    i := 0\n    end := len(l)\n    result\
    \ := make([]int, end)\n\n    for i < end {\n        result[i] = l[i] + 1\n   \
    \     i++\n        if i == end {\n            i--\n            end--\n       \
    \ }\n    }\n\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074055
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i]++\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := len(l)\
    \ - 1; i >= 0; i-- {\n        l[i+1] = l[i] + 1\n    }\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmph2e0rgb6_test.go:15\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmph2e0rgb6_test.go:28\
    \ +0x3c5\ntesting.tRunner(0xc0000c6680, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074055
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var output\
    \ []int\n    for _, element := range l {\n        output[len(output)-1] = element\
    \ + 1\n    }\n    return output\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000f0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0000f0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpe41tlaxz_test.go:16\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpe41tlaxz_test.go:29\
    \ +0x1d\ntesting.tRunner(0xc0000931e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074057
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    x := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        x[i] += i\n    }\n    return\
    \ x\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp01l1kj89_test.go:36: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp01l1kj89_test.go:36: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return []int{}\n    }\n    var i int\n    for i := range l {\n\
    \        l[i]++\n        if l[i] == l[0] {\n            l[i] = 0\n        }\n\
    \    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp19gm7hra_test.go:17:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incr_list :=\
    \ 0\n    for i := len(l) - 1; i >= 0; i-- {\n        incr_list++\n        l[i]\
    \ = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n \
    \ candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074057
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := append([]int{},\
    \ l...)\n    n := len(l)\n\n    for i := 0; i < n; i++ {\n        l[i+1] = l[i]\
    \ + 1\n    }\n\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9zi_qry8_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for i := 0; i < len(l); i++ {\n        result[i] += 1 // increment\
    \ the value at i\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpuq15yiyj_test.go:16\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpuq15yiyj_test.go:29\
    \ +0x18\ntesting.tRunner(0xc0000cc340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var res []int\n\
    \    for i := range l {\n        res =  append(res, l[i]+1)\n    }\n    return\
    \ res\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incr := 0\n\
    \    for _, v := range l {\n        incr = incr + v\n    }\n    l := make([]int,\
    \ len(l))\n    copy(l, l)\n    for i, v := range l {\n        l[i] = incr\n  \
    \  }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfbx68cu_test.go:18:7: no new variables on left side of :=

    /tmp/tmpgfbx68cu_test.go:20:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074057
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] += 1;\n    }\n    return l;\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    // Initialize\
    \ result with first element.\n    var result []int = l\n\n    // Loop over all\
    \ remaining elements.\n    for i, v := range l {\n        // Increment all elements\
    \ by 1.\n        result[i] += v\n    }\n\n    return result\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpq6byvm9x_test.go:41: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpq6byvm9x_test.go:41: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=10) %!s(int=4) %!s(int=10) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=18)\
    \ %!s(int=0) %!s(int=246)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range l {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var n int\n\
    \    for _, i := range l {\n        n = i + 1\n        if n > len(l) {\n     \
    \       n = len(l)\n        }\n        l[n-1] = n\n    }\n    return l\n}\n\n\
    func TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmperl0ysbu_test.go:40: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmperl0ysbu_test.go:40: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i]++\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    last := 0\n    for i, v := range l {\n        result[i] = v + 1\n\
    \        if v > last {\n            last = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpruwi586d_test.go:17\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpruwi586d_test.go:33\
    \ +0x18\ntesting.tRunner(0xc0000cc1a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    // Initialize\
    \ temp list.\n    out := make([]int, len(l))\n    temp := 0\n    for i := 0; i\
    \ < len(l); i++ {\n        if l[i] > 0 {\n            out[i] = temp\n        \
    \    temp++\n        }\n    }\n\n    // Add increment elements.\n    i := 0\n\
    \    for i < len(l) {\n        if l[i] > 0 {\n            out[i] = out[i] + 1\n\
    \        }\n        i++\n    }\n\n    return out\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmphdekiqmx_test.go:51: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmphdekiqmx_test.go:51: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=0) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    // Start with\
    \ first element of list.\n    x := l[0]\n    // Loop over remaining elements.\n\
    \    for i := 0; i < len(l); i++ {\n        if i == 0 {\n            // First\
    \ element of list is not yet incremented.\n            l[i] = x + 1\n        }\
    \ else {\n            // Increment each element in list.\n            l[i] = l[i-1]\
    \ + 1\n        }\n        // Move on to next element in the list.\n        x =\
    \ l[i]\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpd3crn9vo_test.go:15\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpd3crn9vo_test.go:38\
    \ +0x18\ntesting.tRunner(0xc0000cc340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) <=\
    \ 1 {\n        return l\n    }\n    var r []int\n    c := 0\n    for i := 0; i\
    \ < len(l); i++ {\n        if c < l[i] {\n            c = l[i]\n        } else\
    \ {\n            r[len(r)-1] = r[len(r)-1] + 1 - c\n            c = 0\n      \
    \  }\n        if r[len(r)-1] == 0 {\n            r[len(r)-1] = 1\n        }\n\
    \        r := r[:len(r)-1]\n    }\n    return r\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp39fiwk_1_test.go:29:9: r declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    var i int\n    for _, v := range l {\n        l[i] = v + 1\n  \
    \      i = i + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n\
    \  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80tjv4ii_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n\n    for _, v := range l {\n        result = append(result, v+1)\n \
    \   }\n\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if l == nil\
    \ {\n        return nil\n    }\n    l := append([]int{}, l...)\n    for i := range\
    \ l {\n        l[i] += 1;\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxe0rjv5d_test.go:17:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) <=\
    \ 1 {\n        return l\n    }\n    l := l[0:0]\n    for _, v := range l {\n \
    \       v += 1\n        l = append(l, v)\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph6lmwe1o_test.go:17:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) <\
    \ 2 {\n        return l\n    }\n    var result = make([]int, len(l))\n    for\
    \ i, v := range l {\n        result[i] = v + 1\n    }\n    return result\n}\n\n\
    func TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074059
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for _, v :=\
    \ range l {\n        l := append([]int{v}, l...)\n    }\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd_9rqn4__test.go:15:9: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    idx := 0\n\
    \    for _, v := range l {\n        l[idx] = v + 1\n        idx++\n    }\n   \
    \ return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074059
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret = make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        ret[i] += 1 \n    }\n  \
    \  return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpm5t6ho4x_test.go:36: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpm5t6ho4x_test.go:36: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074059
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for _, item\
    \ := range l {\n        item += 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmplk1bn0cg_test.go:35: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmplk1bn0cg_test.go:35: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074060
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var out []int\n\
    \    for _, v := range l {\n        out = append(out, v+1)\n    }\n    return\
    \ out\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074049
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range l {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    l := make([]int,\
    \ len(l))\n    for i, val := range l {\n        val = val + 1\n        l[i] =\
    \ val\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg9wymy7o_test.go:14:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074060
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return l\n    }\n\n    var newL []int\n    for i := 0; i < len(l);\
    \ i++ {\n        newL = append(newL, l[i]+1)\n    }\n\n    return newL\n}\n\n\
    func TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074061
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i]++\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for idx :=\
    \ 0; idx < len(l); idx++ {\n        l[idx] = l[idx] + 1\n    }\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i, j :=\
    \ 0, len(l); i < j; i, j = i+1, j-1 {\n        l[i], l[j] = l[j], l[i]\n    }\n\
    \    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpfrzs0b7e_test.go:15\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpfrzs0b7e_test.go:28\
    \ +0x3f2\ntesting.tRunner(0xc0000be4e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i, value\
    \ := range l {\n        l[i] = value + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    // Add elements\
    \ to empty list.\n    if len(l) == 0 {\n        return l\n    }\n\n    // Add\
    \ element to list.\n    next := l[0]\n    for _, elem := range l[1:] {\n     \
    \   next += elem\n    }\n    return append(l, next)\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp04aftc0p_test.go:42: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=6)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp04aftc0p_test.go:42: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123) %!s(int=152)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var res []int\n\
    \    last, _ := l[0], l[len(l)-1]\n    for _, b := range l {\n        if b < last\
    \ {\n            res = append(res, last+1)\n        } else {\n            res\
    \ = append(res, last)\n        }\n        last = b\n    }\n    return res\n}\n\
    \nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpifaej7j1_test.go:15\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpifaej7j1_test.go:34\
    \ +0x18\ntesting.tRunner(0xc0000be4e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    n := len(l)\n\
    \    n -= 1\n    if n == 0 {\n        return l\n    }\n    r := make([]int, n)\n\
    \    for i, v := range l[n:] {\n        r[i] = v + 1\n    }\n    return r\n}\n\
    \nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: makeslice: len out\
    \ of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\n\
    goroutine 4 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x548d10})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x548d10})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpz_bbc7gc_test.go:19\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpz_bbc7gc_test.go:33\
    \ +0x2a\ntesting.tRunner(0xc0001321a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    ret := make([]int,\
    \ len(l))\n    for i, v := range l {\n        ret[i] = v + 1\n    }\n    return\
    \ ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073908
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: null
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := len(l);\
    \ i < len(l)*2; i++ {\n        l = append(l, 0)\n    }\n\n    for _, x := range\
    \ l {\n        x += 1\n    }\n\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074073
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return l\n    }\n    x := l[0]\n    for _, value := range l {\n\
    \        if x+1 == value {\n            x += 2\n        } else if x-1 == value\
    \ {\n            x -= 2\n        } else {\n            x += 2\n            l :=\
    \ append([]int{x}, value+2)\n            l = append(l, l[len(l)-1])\n        \
    \    l = incr_list(l)\n            x -= 2\n        }\n    }\n    return l\n}\n\
    \nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160368\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520435?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 4 [running]:\nruntime.mallocgc(0x10?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc020160378 sp=0xc020160370 pc=0x40cf1d\nruntime.growslice(0x1000000000000?,\
    \ {0xc00629c4f8?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201603e0 sp=0xc020160378 pc=0x44a0ec\ncommand-line-arguments_test.incr_list({0xc0062a2440?,\
    \ 0x3, 0x4})\n\t/tmp/tmpckhk0ge2_test.go:25 +0xbd fp=0xc020160460 sp=0xc0201603e0\
    \ pc=0x4ef71d\ncommand-line-arguments_test.incr_list({0xc0062a2420?, 0x3, 0x4})\n\
    \t/tmp/tmpckhk0ge2_test.go:27 +0x125 fp=0xc0201604e0 sp=0xc020160460 pc=0x4ef785\n\
    command-line-arguments_test.incr_list({0xc0062a2400?, 0x3, 0x4})\n\t/tmp/tmpckhk0ge2_test.go:27\
    \ +0x125 fp=0xc020160560 sp=0xc0201604e0 pc=0x4ef785\ncommand-line-arguments_test.incr_list({0xc0062a23e0?,\
    \ 0x3, 0x4})\n\t/tmp/tmpckhk0ge2_test.go:27 +0x125 fp=0xc0201605e0 sp=0xc020160560\
    \ pc=0x4ef785\ncommand-line-arguments_test.incr_list({0xc0062a23c0?, 0x3, 0x4})\n\
    \t/tmp/tmpckhk0ge2_test.go:27 +0x125 fp=0xc020160660 sp=0xc0201605e0 pc=0x4ef785\n\
    command-line-arguments_test.incr_list({0xc0062a23a0?, 0x3, 0x4})\n\t/tmp/tmpckhk0ge2_test.go:27\
    \ +0x125 fp=0xc0201606e0 sp=0xc020160660 pc=0x4ef785\ncommand-line-arguments_test.incr_list({0xc0062a2380?,\
    \ 0x3, 0x4})\n\t/tmp/tmpckhk0ge2_test.go:27 +0x125 fp=0xc020160760 sp=0xc0201606e0\
    \ pc=0x4ef785\ncommand-line-arguments_test.incr_list({0xc0062a2360?, 0x3, 0x4})\n\
    \t/tmp/tmpckhk0ge2_test.go:27 +0x125 fp=0xc0201607e0 sp=0xc020160760 pc=0x4ef785\n\
    command-line-arguments_test.incr_list({0xc0062a2340?, 0x3, 0x4})\n\t/tmp/tmpc"
  timestamp: 1660074064
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    length := len(l)\n\
    \    result := make([]int, length)\n    i := 0\n    for i < length {\n       \
    \ result[i] = l[i] + 1\n        i++\n    }\n    return result\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var ret []int\n\
    \    var cur int = 0\n    for _, x := range l {\n        cur += 1\n        if\
    \ cur > x {\n            cur -= x\n            ret = append(ret, cur)\n      \
    \  }\n    }\n    return ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmphmwmukwx_test.go:41: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestIncr_List/test_num__2 (0.00s)\n      \
    \  tmphmwmukwx_test.go:41: expected '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got '[%!s(int=2)\
    \ %!s(int=1) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for index,\
    \ value := range l {\n        l[index] = value + 1\n    }\n\n    return l\n}\n\
    \nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074062
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var res []int\n\
    \    for _, e := range l {\n        res = append(res, e+1)\n    }\n    return\
    \ res\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    return append([]int{},\
    \ l...)\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp2s5uy0hk_test.go:32: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp2s5uy0hk_test.go:32: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    return append(l,\
    \ l[len(l)-1]+1)\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpj8fwyfp5_test.go:14\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpj8fwyfp5_test.go:24\
    \ +0x1c\ntesting.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) <\
    \ 2 {\n        return l\n    }\n    for i := 0; i < len(l)-1; i++ {\n        if\
    \ l[i] == l[i+1]+1 {\n            l[i] = l[i+1]\n        } else {\n          \
    \  l[i+1] += 1\n        }\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpmsmg933s_test.go:42: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpmsmg933s_test.go:42: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=10)\
    \ %!s(int=1) %!s(int=124)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return l\n    }\n\n    i := 0\n    end := len(l) - 1\n\n    for\
    \ ; i < end; i++ {\n        l[i+1] = l[i] + 1\n    }\n\n    return l\n}\n\nfunc\
    \ TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpikubhxsl_test.go:43: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpikubhxsl_test.go:43: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)\
    \ %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i]++\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for _, v :=\
    \ range l {\n        l[v+1] = v + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 3 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmplr8guyup_test.go:15\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmplr8guyup_test.go:28\
    \ +0x3c5\ntesting.tRunner(0xc00013c340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    length := len(l)\n\
    \    for i := 0; i < length; i++ {\n        l[i] += 1 // increment element by\
    \ 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return l\n    }\n    i := len(l) - 1\n    for i >= 0 && l[i] <\
    \ l[i+1] {\n        i -= 1\n    }\n    i++\n    if i < 0 {\n        i += len(l)\n\
    \    }\n    l[i+1], l[i] = l[i], l[i+1]+1\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc00014e018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc00014e018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpyddantzl_test.go:18\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpyddantzl_test.go:37\
    \ +0x48c\ntesting.tRunner(0xc00011aea0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i := range r {\n        r[i] = l[i] + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for index,\
    \ value := range l {\n        l[index] = value + 1\n    }\n    return l\n}\n\n\
    func TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074062
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var res = make([]int,\
    \ len(l))\n    for idx, n := range l {\n        res[idx] = n + 1\n    }\n    return\
    \ res\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074063
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return nil\n    }\n\n    s := make([]int, 0, len(l))\n    first\
    \ := l[0]\n    last := l[len(l)-1]\n    if last == first {\n        return append(s,\
    \ last)\n    }\n\n    for _, v := range l {\n        s = append(s, v+1)\n    }\n\
    \    return s\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074063
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    res := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        res[i] = l[i] + 1\n    }\n\
    \    return res\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074063
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for idx, val\
    \ := range l {\n        l[idx] = val + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074063
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := 0;\
    \ i < len(l); i++ {\n        l[i] = l[i] + 1\n    }\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] = l[i] + 1\n    }\n\n    return l\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074063
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    var i int\n    for i = 0; i < len(l); i++ {\n        result[i] =\
    \ l[i] + 1\n    }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n\
    \  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmp5s2ut7hx_test.go:17\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmp5s2ut7hx_test.go:30\
    \ +0x18\ntesting.tRunner(0xc00013a340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074063
- exit_code: 2
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if l == nil\
    \ {\n        return []int{}\n    }\n    l := make([]int, len(l))\n    copy(l,\
    \ l)\n    for i := len(l) - 1; i >= 0; i-- {\n        l[i]++\n        if l[i]\
    \ > 0 {\n            continue\n        } else {\n            l[i] = 0\n      \
    \  }\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3yy4ml9p_test.go:17:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074063
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    ret := make([]int,\
    \ len(l))\n    for i, v := range l {\n        ret[i] = v + 1\n    }\n    return\
    \ ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073908
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    acc := make([]int,\
    \ len(l))\n    for i, v := range l {\n        acc[i] = v + 1 // incremented by\
    \ 1\n    }\n    return acc\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074064
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    i := 0\n  \
    \  for _, v := range l {\n        l[i] = v + 1\n        i += 1\n    }\n    return\
    \ l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    r := make([]int,\
    \ len(l))\n    for i, val := range l {\n        r[i] = val + 1\n    }\n    return\
    \ r\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    return l\n\
    }\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp_81g4d09_test.go:32: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp_81g4d09_test.go:32: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    return append([]int{},\
    \ l...)\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmp2s5uy0hk_test.go:32: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmp2s5uy0hk_test.go:32: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    for i := range\
    \ l {\n        l[i] += 1;\n    }\n    return l;\n}\n\nfunc TestIncr_List(t *testing.T)\
    \ {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return l\n    }\n    x := l[0]\n    y := x\n    var tmp []int\n\
    \    for _, y := range l {\n        if y < x {\n            tmp = append(tmp,\
    \ y)\n            x, y = y, y\n        } else {\n            x, y = y, y+1\n \
    \       }\n    }\n    tmp = append(tmp, y)\n    return tmp\n}\n\nfunc TestIncr_List(t\
    \ *testing.T) {\n  candidate := incr_list\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{4, 3, 2} },\n     { actual: candidate([]int{5, 2, 5,\
    \ 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpxfqha23t_test.go:47: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpxfqha23t_test.go:47: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for i := range l {\n        result = append(result, i+1)\n    }\n\
    \    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmps_hcat0k_test.go:36: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmps_hcat0k_test.go:36: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    return append(l,\
    \ l...)\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpjnql4baf_test.go:32: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestIncr_List/test_num__2 (0.00s)\n        tmpjnql4baf_test.go:32:\
    \ expected '[%!s(int=6) %!s(int=3) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=4)\
    \ %!s(int=10) %!s(int=1) %!s(int=124)]', got '[%!s(int=5) %!s(int=2) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0)\
    \ %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074046
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var list []int\n\
    \    for i := range l {\n        list = append(list, l[i]+1)\n    }\n    return\
    \ list\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074064
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var result\
    \ []int\n    for _, v := range l {\n        result = append(result, v+1)\n   \
    \ }\n    return result\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate :=\
    \ incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var list []int\
    \ = l\n    for i := 0; i < len(list); i++ {\n        list[list[i]-1]++\n    }\n\
    \    return list\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     {\
    \ actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x512700, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.incr_list(...)\n\t/tmp/tmpsm6iccj2_test.go:16\n\
    command-line-arguments_test.TestIncr_List(0x0?)\n\t/tmp/tmpsm6iccj2_test.go:30\
    \ +0x3b4\ntesting.tRunner(0xc0001031e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    if len(l) ==\
    \ 0 {\n        return l\n    }\n\n    n := len(l)\n    for i := range l {\n  \
    \      l[i] = l[i] + 1\n        if l[i] == n {\n            l[i] = 0\n       \
    \ }\n    }\n    return l\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate\
    \ := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n\
    \     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpz43dk8ve_test.go:43: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 0
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    incremented\
    \ := make([]int, len(l))\n    for i := range l {\n        incremented[i] = l[i]\
    \ + 1\n    }\n    return incremented\n}\n\nfunc TestIncr_List(t *testing.T) {\n\
    \  candidate := incr_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{4,\
    \ 3, 2} },\n     { actual: candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{6, 3, 6, 3, 4, 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n\
    // []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    ret := make([]int,\
    \ len(l))\n    for i := range l {\n        ret[i] += i + 1\n    }\n    return\
    \ ret\n}\n\nfunc TestIncr_List(t *testing.T) {\n  candidate := incr_list\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{3, 2, 1}), expected: []int{4, 3, 2} },\n     { actual:\
    \ candidate([]int{5, 2, 5, 2, 3, 3, 9, 0, 123}), expected: []int{6, 3, 6, 3, 4,\
    \ 4, 10, 1, 124} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIncr_List (0.00s)\n    --- FAIL: TestIncr_List/test_num__1\
    \ (0.00s)\n        tmpuhpiclo2_test.go:36: expected '[%!s(int=4) %!s(int=3) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestIncr_List/test_num__2\
    \ (0.00s)\n        tmpuhpiclo2_test.go:36: expected '[%!s(int=6) %!s(int=3) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=1) %!s(int=124)]', got\
    \ '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074064
