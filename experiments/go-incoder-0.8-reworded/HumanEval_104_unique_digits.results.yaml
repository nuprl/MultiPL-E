language: go_test.go
name: HumanEval_104_unique_digits
results:
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        // fmt.Printf(\"x: %v, v: %d\\n\", x, v)\n  \
    \      if math.Mod(v, (1 << 9)) != 0 {\n            result = append(result, v)\n\
    \        }\n    }\n    // fmt.Printf(\"result: %v\\n\", result)\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxm1ij6j_test.go:20:12: undefined: math

    /tmp/tmpvxm1ij6j_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // your code goes here\n\
    \    \n    var output []int\n    \n    for  _, v := range x {\n        if v%2\
    \ == 0 {\n            output = append(output, v)\n        }\n    }\n    \n   \
    \ return output\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp05iihb_9_test.go:46: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmp05iihb_9_test.go:46: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmp05iihb_9_test.go:46: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp05iihb_9_test.go:46:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073435
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, val := range x {\n        if evenDigit(val) {\n            result = append(result,\
    \ val)\n        }\n    }\n    result = sort_increasing_order(result)\n    return\
    \ result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxrjk9tqg_test.go:19:12: undefined: evenDigit

    /tmp/tmpxrjk9tqg_test.go:23:14: undefined: sort_increasing_order

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var results = []int{}\n\
    \    var result int\n\n    for _,value := range x{\n        if value%2 == 0 {\n\
    \            result = value/2 + result\n            results = append(results,result)\n\
    \        } else {\n            results = append(results,value)\n        }\n  \
    \  }\n    fmt.Println(results)\n    sort.Ints(results)\n    return results\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis is great and I appreciate your answer, but I\
    \ was looking for a function that would do this using Go as in the original question.\n\
    <|/ c |>\n<| a dscore=0 |>\nI took the liberty to write this in Go using a more\
    \ functional approach using range and filter functions. \nIt can be easily extended\
    \ to handle negative numbers by using a negative step for step parameter.\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n    \"sort\"\n)\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8aer4csn_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Return sorted list\n\
    \    // TODO: using 'sort -u x' gives better performance\n    // TODO: using 'sort\
    \ -k 1 x' gives better performance\n    // TODO: using 'sort -k 1,1 x' gives better\
    \ performance\n    // TODO: using 'sort -k 1,2 x' gives better performance\n \
    \   return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmphtznp26v_test.go:41: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmphtznp26v_test.go:41: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmphtznp26v_test.go:41: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmphtznp26v_test.go:41: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073435
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    m := make(map[int]bool)\n\
    \    for _, i := range x {\n        if m[i] {\n            continue\n        }\n\
    \        m[i] = true\n        if i%2 == 0 {\n            return append(x, i)\n\
    \        }\n    }\n    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpgvso3vhn_test.go:46: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1) %!s(int=1422)]'\n   \
    \ --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpgvso3vhn_test.go:46:\
    \ expected '[]', got '[%!s(int=152) %!s(int=323) %!s(int=1422) %!s(int=10) %!s(int=152)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpgvso3vhn_test.go:46:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpgvso3vhn_test.go:46: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073435
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Create a map to store\
    \ all possible even digits we encounter.\n    m := make(map[int]bool)\n    for\
    \ _, x := range x {\n        if x[len(x)-1]%2 == 0 {\n            m[x[len(x)-1]]\
    \ = true\n        }\n    }\n    m := sorted(m)\n\n    // We return all non-even\
    \ digit numbers from the map.\n    s := []int{}\n    for k := range m {\n    \
    \    s = append(s, k)\n    }\n    return s\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqy0hx6lw_test.go:20:13: invalid operation: cannot index x (variable of
    type int)

    /tmp/tmpqy0hx6lw_test.go:21:16: invalid operation: cannot index x (variable of
    type int)

    /tmp/tmpqy0hx6lw_test.go:24:7: no new variables on left side of :=

    /tmp/tmpqy0hx6lw_test.go:24:10: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var ret []int\n    for\
    \ _,v := range x {\n        if len(fmt.Sprintf(\"%v\", v)) > 1 {\n           \
    \ ret = append(ret, v)\n        }\n    }\n    sort.Ints(ret)\n    return ret\n\
    }\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_0sjp3jn_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    d := make(map[int]int)\n\
    \    for _, v := range x {\n        if d[v] == 0 {\n            d[v] = 1\n   \
    \     } else {\n            d[v] = d[v] + 1\n        }\n    }\n    \n    result\
    \ := make([]int, 0, len(x))\n    for _, v := range d {\n        if v > 0 {\n \
    \           result = append(result, v)\n        }\n    }\n    \n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i] > result[j]\n    })\n    \n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp061lak1s_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    ret := []int{}\n    //\
    \ TODO PATCH list\n    for _, val := range x {\n        for _, d := range strconv.Itoa(val).ToSlice()\
    \ \n        {\n            if strings.Index(strings.ToLower(d), strings.ToLower(strings.ToLower(\"\
    e\"))) == -1 {\n                ret = append(ret, val)\n            }\n      \
    \  }\n    }\n    return ret\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf7qnvy_a_test.go:20:55: expected ''{'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    \n    // Your code here...\n\
    \    \n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpne94izt0_test.go:20:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // start with the first\
    \ digit\n    // find all unique digits in the list\n    // return the first unique\
    \ digit. \n    // This assumes positive numbers. \n    for _, d := range x {\n\
    \        d := int(d)\n        j := d % 10\n        if j != 0 {\n            break\n\
    \        }\n    }\n\n    s := make([]int, 0, j)\n    for _, d := range x {\n \
    \       d := int(d)\n        d /= 10\n        if d == 0 {\n            break\n\
    \        }\n        j = d % 10\n        if j != 0 {\n            continue // ignore\
    \ this digit\n        }\n        s = append(s, d)\n    }\n    return s\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmputlyuoke_test.go:29:25: undefined: j

    /tmp/tmputlyuoke_test.go:36:9: undefined: j

    /tmp/tmputlyuoke_test.go:37:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    \n    var result []int\n\
    \    var result []int\n\n    for _, v := range x {\n        if v%2 == 0 {\n  \
    \          result = append(result, v)\n        }\n    }\n    return \n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfqhoptem_test.go:19:9:\
    \ result redeclared in this block\n\t/tmp/tmpfqhoptem_test.go:18:9: other declaration\
    \ of result\n/tmp/tmpfqhoptem_test.go:26:5: not enough return values\n\thave ()\n\
    \twant ([]int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ len(x))\n    k := 0\n    max := 0\n    for _, v := range x {\n        if v%2\
    \ == 0 {\n            result[k] = v\n            k++\n        }\n        max =\
    \ k\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if k == max {\n\
    \            break\n        }\n        if result[i] > 0 {\n            result[i]\
    \ = 0\n            k--\n        }\n    }\n    for i := 0; i < k; i++ {\n     \
    \   result[i] = 0\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpjfwszm8__test.go:58: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpjfwszm8__test.go:58: expected '[]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpjfwszm8__test.go:58: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpjfwszm8__test.go:58: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073435
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var newList []int\n\n\
    \    for _, v := range x {\n        if v%2 == 0 {\n            newList = append(newList,\
    \ v)\n        }\n    }\n\n    newList = append(newList, 0...)\n\n    sort.Sort(newList)\n\
    \n    return newList\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4jf8evop_test.go:25:34: expected selector or type assertion, found ''.''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Create a result list\n\
    \    result := []int{}\n\n    for _, y := range x {\n        if y > 0 {\n    \
    \        y, ok := divMod(y, 10)\n            if ok && y == 0 {\n             \
    \   continue // No need to check even\n            }\n            result = append(result,\
    \ y)\n        }\n    }\n\n    sort.Sort(result)\n    return result\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp476kted1_test.go:22:22: undefined: divMod

    /tmp/tmp476kted1_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ if len(x) < 2 {\n        return nil\n    }\n    for _, v := range x {\n    \
    \    if v%2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjf_pu0fp_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ len(x))\n    even := make([]int, len(x))\n    for i, e := range x {\n      \
    \  if e %2 == 0 {\n            even[i] = e\n        }\n    }\n\n    sort.Ints(even)\n\
    \n    for _, e := range even {\n        for i, t := range x {\n            if\
    \ t == e {\n                result[i] = t\n                break\n           \
    \ }\n        }\n    }\n    return result \n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpao24kiw5_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := make([]int, 0)\n\
    \    for _, v := range x {\n        if v%2 == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(res)))\n    return\
    \ res\n}\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoq6bo596_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n\n\
    \    // Initialize a temp set to store already found digit.\n    // Note: sets\
    \ are unsorted, so we need to sort it first.\n    tmpSet := make(map[int]bool)\n\
    \    for _, v := range x {\n        tmpSet[v] = true\n    }\n\n    // Iterate\
    \ through each element to find all non-unique digits.\n    for _, v := range x\
    \ {\n        if !tmpSet[v] {\n            result = append(result, v)\n       \
    \ }\n    }\n\n    // Sort returned list by increasing order.\n    return sort.IntSlice(result).Sort()\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp46o0xs5c_test.go:34:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    count := len(x)\n    for _, v := range x {\n        if v%2 == 0 {\n\
    \            count--\n        }\n        result = append(result, v)\n    }\n \
    \   sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnyt7wrt_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    for _, v := range x {\n        if len(fmt.Sprint(v)) < 2 {\n       \
    \     continue // this number has no even digit\n        }\n        digitCount\
    \ := 0\n        for _, d := range fmt.Sprint(v) {\n            if d != '0' {\n\
    \                digitCount++\n            }\n        }\n        if digitCount\
    \ <= 1 {\n            result = append(result, v)\n        }\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vngakjm_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var ret []int\n    seen\
    \ := make(map[int]bool)\n    var hasEvenDigit bool\n    for _, val := range x\
    \ {\n        if !seen[val] {\n            seen[val] = true\n            if val%2\
    \ == 0 {\n                hasEvenDigit = true\n            } else {\n        \
    \        hasEvenDigit = false\n            }\n            ret = append(ret, val)\n\
    \        }\n    }\n    if hasEvenDigit {\n        for _, val := range ret {\n\
    \            if val%2 == 0 {\n                ret = append(ret, val+1)\n     \
    \       }\n        }\n    }\n    return ret\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp23uo6jhx_test.go:57: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp23uo6jhx_test.go:57: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10) %!s(int=153) %!s(int=1423) %!s(int=11)]'\n    ---\
    \ FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp23uo6jhx_test.go:57:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmp23uo6jhx_test.go:57: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073435
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // BEGIN list\n    var\
    \ list []int\n    var tempList []int\n    var temp int\n    // END list\n    //\
    \ BEGIN patch\n    \n    for _, value := range x {\n        for _, digit := range\
    \ value {\n            if digit %2 != 0 {\n                tempList = append(tempList,\
    \ digit)\n                temp = temp\n            }\n        }\n        list\
    \ = append(list, tempList)\n        tempList = []\n        temp = 0\n    }\n \
    \   // END patch\n    \n    for _, value := range list {\n        for _, digit\
    \ := range value {\n            if digit %2 != 0 {\n                tempList =\
    \ append(tempList, digit)\n                temp = temp\n            }\n      \
    \  }\n        list = append(list, tempList)\n        tempList = []\n        temp\
    \ = 0\n    }\n    \n    return list\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj01a_8fr_test.go:32:22: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073435
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n\n    // First create two temporary lists:\n    // One for elements that\
    \ doesn't have any even digit\n    // One for elements that has at least one even\
    \ digit.\n    for i := 0; i < len(x); i++ {\n        // Check if this element\
    \ has any even digit\n        // If it has, add it to the temporary list.\n  \
    \      // If it doesn't have even digit, add it to the second temporary list.\n\
    \        if x[i] % 2 == 0 {\n            result = append(result, x[i])\n     \
    \   } else {\n            result = append(result, x[i])\n        }\n    }\n\n\
    \    // Sort temporary list.\n    sort.Sort(sort.Reverse(sortIntList(result)))\n\
    \n    // Add element from temporary list to the second temporary list.\n    result\
    \ = append(result, result...)\n\n    // Sort the second temporary list.\n    sort.Sort(sort.Reverse(sortIntList(result)))\n\
    \n    // Return the result.\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplebsy5d_test.go:34:5: undefined: sort

    /tmp/tmpplebsy5d_test.go:34:28: undefined: sortIntList

    /tmp/tmpplebsy5d_test.go:40:5: undefined: sort

    /tmp/tmpplebsy5d_test.go:40:28: undefined: sortIntList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ var count int\n    \n    sort.Ints(x)\n    \n    for i := range x {\n      \
    \  if count%2 == 0 && x[i] == x[i-1] {\n            continue\n        }\n    \
    \    \n        result = append(result, x[i])\n        count++\n    }\n    \n \
    \   return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuy4yfid9_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    unique_digits := make([]int,\
    \ 0)\n    for _, y := range x {\n        if y % 2 != 0 {\n            unique_digits\
    \ = append(unique_digits, y)\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(unique_digits)))\n\
    \    return unique_digits\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5c2ujwa3_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var r []int\n    for _,\
    \ i := range x {\n        // For every element we test if it has even digits\n\
    \        // If yes, we add it to the result list\n        for j := 0; j < i/2;\
    \ j++ {\n            if x[j] != 0 {\n                rs = append(rs, x[j])\n \
    \           }\n        }\n    }\n    return r\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg3wc1a7p_test.go:23:29: undefined: rs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var l []int = x\n    //\
    \ sort the list\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    \n    // iterate\
    \ over the sorted list\n    for _, i := range l {\n        if i > 0 {\n      \
    \      if i % 2 == 0 {\n                continue\n            }\n            //\
    \ get even-indexed elements\n            odds := []int{}\n            evens :=\
    \ []int{}\n            if i %2 == 0 {\n                odds = append(odds, i)\n\
    \            } else {\n                evens = append(evens, i)\n            }\n\
    \            // find common elements in odds and evens\n            var common\
    \ []int\n            common = append(common, odds...)\n            common = append(common,\
    \ evens...)\n            // remove common elements from x\n            for _,\
    \ j := range x {\n                if j == i {\n                    continue\n\
    \                }\n                for _, c := range common {\n             \
    \       if c == j {\n                        common = common[:j] // remove matched\
    \ element from common\n                        break\n                    }\n\
    \                }\n            }\n            l = append(l, i) // append common\
    \ element\n        }\n    }\n    return l\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps_r9lhhr_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    for _, y := range x {\n        if y % 2 != 0 {\n            result =\
    \ append(result, y)\n        }\n    }\n    return result.Sort()\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5c3yhx12_test.go:23:19: result.Sort undefined (type []int has no field
    or method Sort)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var evenDigits []int\n\
    \    for _, d := range x {\n        if isEven(d, &evenDigits) {\n            continue\n\
    \        }\n        evenDigits = append(evenDigits, d)\n    }\n    return evenDigits\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa67rfd12_test.go:19:12: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ even := true\n    for _, v := range x {\n        if v%2 == 0 {\n           \
    \ if even {\n                result = append(result, v)\n            } else {\n\
    \                even = false\n            }\n        }\n    }\n    for _, v :=\
    \ range result {\n        result = append(result, v)\n    }\n    return(result)\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpcghe9az4_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422) %!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpcghe9az4_test.go:50: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10) %!s(int=152) %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpcghe9az4_test.go:50: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpcghe9az4_test.go:50:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  seen := map[int]bool{}\n    for _, n := range x {\n        if !seen[n] {\n\
    \            result = append(result, n)\n            seen[n] = true\n        }\n\
    \    }\n    return sorted(result)\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgpjztr1g_test.go:25:12: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for i := range x {\n        if x[i] % 2 != 0 {\n            result = append(result,\
    \ x[i])\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf1ylxdut_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // base case\n    if len(x)\
    \ == 0 {\n        return []int{}\n    }\n\n    var res []int\n    seen := make(map[int]bool)\n\
    \n    for _, x := range x {\n        if seen[x] {\n            continue\n    \
    \    }\n        seen[x] = true\n\n        for _, d := range xDigits(x) {\n   \
    \         if d%2 == 0 {\n                res = append(res, int(x))\n         \
    \       break\n            }\n        }\n    }\n\n    return res\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnlm26to__test.go:31:27: undefined: xDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result = make([]int,\
    \ 0)\n    \n    for _, num := range x {\n        if num%2 == 0 {\n           \
    \ result = append(result, num)\n        }\n    }\n    \n    return result.Sort()\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxscoqge0_test.go:25:19: result.Sort undefined (type []int has no field
    or method Sort)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    unique_digits := make([]int,\
    \ 0)\n    for _, num := range x {\n        for j := 0; j < 9; j++ {\n        \
    \    if num%10 == j {\n                break\n            }\n        }\n     \
    \   if j == 9 {\n            unique_digits = append(unique_digits, num)\n    \
    \    }\n    }\n    return unique_digits\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9v41it7_test.go:24:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Initialize result list\n\
    \    y := make([]int, 0)\n    \n    // Check each element in list\n    for _,\
    \ v := range x {\n        // Check if each element is even number\n        if\
    \ v%2 == 0 {\n            // Add v to result list if isn't in it\n           \
    \ for _, v2 := range y {\n                if v == v2 {\n                    fmt.Printf(\"\
    Element %d is already in result list\\n\", v)\n                    return nil\n\
    \                }\n            }\n            y = append(y, v)\n        }\n \
    \   }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpgvldcy8u_test.go:53: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpgvldcy8u_test.go:53: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpgvldcy8u_test.go:53: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpgvldcy8u_test.go:53:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    ans := make([]int, 0)\n\
    \    prev := 0\n    for _, num := range x {\n        if num%2 == 0 {\n       \
    \     prev += 10\n        }\n        if prev > 0 {\n            ans = append(ans,\
    \ prev)\n            prev = num/10\n        }\n    }\n    return ans\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp3k0oqhgc_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=10) %!s(int=142)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp3k0oqhgc_test.go:47: expected '[]', got '[%!s(int=10) %!s(int=15)\
    \ %!s(int=42) %!s(int=152)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmp3k0oqhgc_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp3k0oqhgc_test.go:47:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ len(x))\n    idx := 0\n    for _, n := range x {\n        if n % 2 == 0 {\n\
    \            continue\n        }\n\n        result[idx] = n\n        idx++\n \
    \   }\n    \n    return append(result[0:idx], result[idx:len(x)])\n}\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnj2nnpr4_test.go:28:40: cannot use result[idx:len(x)] (value of type []int)
    as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := []int{}\n    for\
    \ _, val := range x {\n        if val%2 == 0 {\n            y := append(y, val)\n\
    \        }\n    }\n    sort.Ints(y)\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65nr8vj6_test.go:20:13: y declared but not used

    /tmp/tmp65nr8vj6_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0, len(x))\n    r := 0\n    for _, y := range x {\n        if r%2 == 0 {\n \
    \           continue // ignore element\n        }\n        if y == 0 {\n     \
    \       continue\n        }\n        if result[y-1] >= y {\n            continue\n\
    \        }\n        result = append(result, y)\n        r = r + 1\n    }\n   \
    \ return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp_ph5v90y_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp_ph5v90y_test.go:51:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp_ph5v90y_test.go:51: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO BEST SOLUTION\
    \ FOR THIS PROBLEM\n    \n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpap34rg7w_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ len(x))\n    for i := 0; i < len(x); i++ {\n        j := i\n        while j\
    \ > 0 && x[j-1]%10 == 0 {\n            j --\n        }\n        result[i] = x[j]\n\
    \    }\n    // Sort result list in increasing order.\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8_d1w_ke_test.go:20:15: expected '';'', found j

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ var evenDigit bool\n\n    sort.Sort(sort.Reverse(sort.IntSlice(append(x, 1)[:len(x)/2]...)))\n\
    \n    for _, v := range x {\n        if v%2 != 0 {\n            evenDigit = false\n\
    \        } else {\n            evenDigit = true\n        }\n        result = append(result,\
    \ v)\n    }\n\n    if evenDigit {\n        result = append(result, 0)\n    }\n\
    \n    return result\n}\n</code>\n<|/ a tags=go,algorithm,sorting |>\n<| c |>\n\
    Thanks for your answer. But what if you have a list of negative numbers? For example,\
    \ `unique_digits([]int{-1, -4, -3})` should return `[]int{-1, -3, -4}`\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. You should just sort the list by\
    \ negating each element, since negating a number is the same as adding `1` to\
    \ it.\n<|/ c |>\n<| a tags=go,algorithm,sorting dscore=1 |>\nIn case you use golang\
    \ recently (I hope you do), you could use the built-in sort functions.\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n)\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmfksq5hg_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073436
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var ans []int\n    for\
    \ i := range x {\n        dig := x[i]\n        if dig%2 == 0 {\n            ans\
    \ = append(ans, x[i])\n        }\n    }\n    return ans\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpnao4vh_x_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpnao4vh_x_test.go:43: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpnao4vh_x_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpnao4vh_x_test.go:43:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073438
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    for _, val := range x {\n        if val%2 == 0 {\n            continue\n\
    \        }\n        result := append(result, val)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuxwqeesa_test.go:22:9: result declared but not used

    /tmp/tmpuxwqeesa_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    result := append(result, x...)\n    // sort slice\n    sort.Sort(result)\n\
    \    \n    // init map\n    m := make(map[int]bool)\n    \n    // go over all\
    \ element in slice\n    for _, e := range result {\n        // if element has\
    \ any even digit\n        if e%2 != 0 {\n            // append it to result list\n\
    \            result = append(result, e)\n            // if element in map, remove\
    \ it\n            m[e] = true\n        }\n    }\n    // go over all element in\
    \ map\n    for key, value := range m {\n        // append it to result list\n\
    \        result = append(result, key)\n    }\n\n    // return result\n    return\
    \ result\n}\n</code>\n<|/ a tags=go,slice |>\n<| a |>\nHere's an alternate solution\
    \ which uses a map instead of a slice:\n<code>\npackage main\n\nimport \"fmt\"\
    \n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3xau2hx8_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  for _, v := range x {\n        result := append(result, v)\n    }\n    for\
    \ _, v := range result {\n        if int(v) == v%10 {\n            continue\n\
    \        }\n        for _, v2 := range result {\n            if int(v2) == v2%10\
    \ {\n                continue\n            }\n            if v==v2 {\n       \
    \         continue\n            }\n            if int(v) < int(v2) {\n       \
    \         tmp := v\n                v = v2\n                v2 = tmp\n       \
    \     }\n            if int(v) == int(v2) {\n                result.Remove(v)\n\
    \                continue\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjpb_m0vh_test.go:19:9: result declared but not used

    /tmp/tmpjpb_m0vh_test.go:38:24: result.Remove undefined (type []int has no field
    or method Remove)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var newList []int\n  \
    \  for _, v := range x {\n        if v %2 == 0 {\n            continue\n     \
    \   }\n        newList = append(newList, v)\n    }\n    sort.Sort(newList)\n \
    \   return newList\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpffagixbw_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    ret := make([]int, 0)\n\
    \    for _, v := range x {\n        if v%2 == 0 {\n            continue\n    \
    \    }\n        for _, v1 := range x {\n            if v1 == v {\n           \
    \     continue\n            }\n            if v%v2 == 0 {\n                ret\
    \ = append(ret, v)\n                break\n            }\n        }\n    }\n \
    \   return ret\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8jngv2aa_test.go:26:18: undefined: v2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return nil\n    }\n    var result []int\n    result := append(result, x[0])\n\
    \    for _, element := range x[1:] {\n        if element % 2 == 0 {\n        \
    \    continue\n        } else {\n            result = append(result, element)\n\
    \        }\n    }\n    for _, element := range result {\n        result := unique_digits(result)\n\
    \        if element % 2 == 0 {\n            continue\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpla3o67ds_test.go:21:12: no new variables on left side of :=

    /tmp/tmpla3o67ds_test.go:30:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    s := make([]int, len(x))\n\
    \    for i, v := range x {\n        if v%2 == 0 {\n            s[i] = v\n    \
    \    }\n    }\n    return s\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpeyflll1i_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1422) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpeyflll1i_test.go:42: expected '[]', got '[%!s(int=152) %!s(int=0)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpeyflll1i_test.go:42: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpeyflll1i_test.go:42: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    var k int\n    for _, b := range x {\n        if b%2 != 0 {\n      \
    \      result = append(result, b)\n        }\n    }\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpralufri9_test.go:18:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for i\
    \ := 0; i < len(x); i++ {\n        y := append(y, x[i])\n        \n    }\n   \
    \ for i := 0; i < len(y); i++ {\n        if y[i] % 2 == 0 {\n            y :=\
    \ append(y, y[i])\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1iplyj0s_test.go:19:9: y declared but not used

    /tmp/tmp1iplyj0s_test.go:24:13: y declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0, len(x))\n    for _, num := range x {\n        if num%2 == 0 {\n         \
    \   result = append(result, num)\n        }\n    }\n    return sort(result)\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptpkr38x0_test.go:23:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ // Go through all the elements in x until \n    // we find a number which has\
    \ even digit.\n    for i := range x {\n        if x[i] % 2 != 0 {\n          \
    \  break\n        }\n        result = append(result, x[i])\n    }\n    // Sort\
    \ the result.\n    sort.Sort(result)\n    return result\n}\n</code>\n<|/ a tags=sorting,algorithm,python\
    \ |>\n<| c |>\nThis solution has time complexity of O(n^2) when sorted is used,\
    \ which is not the case in the accepted solution.\n<|/ c |>\n<| a dscore=0 |>\n\
    This is my answer in Python3.\n<code>\ndef unique_digits(arr):\n    seen = {}\n\
    \    ans = []\n    for num in arr:\n        if num not in seen:\n            seen[num]\
    \ = 1\n            ans.append(num)\n    return ans\n\nprint(unique_digits([1,\
    \ 15, 33, 1422, 1]))\n# OUTPUT: [1, 15, 33]\n\nprint(unique_digits([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,\
    \ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\
    \ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\
    \ 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\
    \ 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,\
    \ 198, 199\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpubg5r49n_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ // var result map[int]bool = make(map[int]bool)\n    for _,i := range x {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    fmt.Println(result)\n    // if len(result) > 0 {\n    //     for i :=\
    \ range result {\n    //         if !result[i] {\n    //             delete(result,i)\n\
    \    //         }\n    //     }\n    // }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1422]\n[152 1422 10]\n[]\n[]\n--- FAIL: TestUnique_Digits (0.00s)\n  \
    \  --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpjhjel9qe_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=1422)]'\n   \
    \ --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpjhjel9qe_test.go:51:\
    \ expected '[]', got '[%!s(int=152) %!s(int=1422) %!s(int=10)]'\n    --- FAIL:\
    \ TestUnique_Digits/test_num__2 (0.00s)\n        tmpjhjel9qe_test.go:51: expected\
    \ '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpjhjel9qe_test.go:51: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Solution is trivial\
    \ here because our inputs are already sorted.\n    for _, d := range x {\n   \
    \     if int(d) % 2 == 0 {\n            x := append([]int{int(d)}, x...)\n   \
    \         sort.Ints(x)\n            return x\n        }\n    }\n    return []int{}\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz_ks_hbt_test.go:21:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  i := 0\n    for _, v := range x {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    sort.Ints(result)\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1g4lgwf2_test.go:18:5: i declared but not used

    /tmp/tmp1g4lgwf2_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  for _, v := range x {\n        n := 0\n        for i := 0; i < len(v); i++\
    \ {\n            if v[i] < 10 {\n                n = n * 10 + v[i]\n         \
    \   } else {\n                if n < v[i] {\n                    n = v[i]\n  \
    \              }\n            }\n        }\n        if n%2 == 0 {\n          \
    \  result = append(result, v)\n        }\n    }\n    sort.Sort(result)\n    return\
    \ result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmkj851v6_test.go:20:29: invalid argument: v (variable of type int) for
    len

    /tmp/tmpmkj851v6_test.go:21:17: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmpmkj851v6_test.go:22:31: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmpmkj851v6_test.go:24:25: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmpmkj851v6_test.go:25:26: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmpmkj851v6_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0, len(x))\n    for _, v := range x {\n        digit, _ := strconv.Atoi(v)\n\
    \        if digit % 2 == 0 {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg_asimha_test.go:19:21: undefined: strconv

    /tmp/tmpg_asimha_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    for _,\
    \ v := range x {\n        if v%2 == 0 {\n            y, _ = append(y, v), 0 //\
    \ Patch list\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpqxbt3r2i_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpqxbt3r2i_test.go:42: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpqxbt3r2i_test.go:42: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpqxbt3r2i_test.go:42:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073439
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if x == nil {\n      \
    \  return []int{}\n    }\n\n    // For each element e in x. \n    // For each\
    \ digit in e divide the number by 10. \n    // For each even digit.\n    // Add\
    \ them to a new list.\n    // Return this list.\n    \n    // Since our number\
    \ is bigger than 2 digits we use binary search to find the \n    // even digit\
    \ number.\n    evenDigit := 0\n    evenDigitNum := 0\n    for _, num := range\
    \ x {\n        if num < 10 {\n            continue\n        }\n        if num%10\
    \ == 0 {\n            evenDigit += num/10\n            evenDigitNum += 1\n   \
    \         if evenDigitNum >= 2 {\n                return x\n            }\n  \
    \      }\n    }\n    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp0bjeba46_test.go:62: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0bjeba46_test.go:62:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp0bjeba46_test.go:62: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    x := make([]int, len(x))\n\
    \    for i := range x {\n        x[i] = i\n    }\n    result := []int{}\n    for\
    \ _, v := range x {\n        for j := range x {\n            if v%x[j] == 0 {\n\
    \                continue // don't count the same element again\n            }\n\
    \        }\n        result = append(result, v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgqfhn1st_test.go:17:7: no new variables on left side of :=

    /tmp/tmpgqfhn1st_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := make([]int, 0)\n\
    \    y := append(y, x...)\n\n    for i := 0; i < len(y); i++ {\n        if y[i]\
    \ % 2 == 0 {\n            y[i] = y[i] / 2\n            y[i] = y[i] + y[i]\n  \
    \          y[i] = y[i] % 10\n            if y[i] < 10 {\n                y[i]\
    \ = y[i] + 10\n            }\n            y[i] /= 2\n            copy(y[i+1:],\
    \ y[i:])\n            y := append(y, y[i])\n        } else {\n            y[i]\
    \ = y[i]/2\n            y[i] %= 10\n        }\n    }\n    return y\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppp7fbnsu_test.go:18:7: no new variables on left side of :=

    /tmp/tmppp7fbnsu_test.go:30:13: y declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    \n    // Return empty\
    \ list if there's nothing to return.\n    if len(x) == 0 {\n        return []int{}\n\
    \    }\n\n    // Initiate a result list.\n    var result []int\n\n    // Go through\
    \ the list and for each element:\n    // 1. if that element has 0 digit, add it\
    \ to the result list.\n    // 2. if the current element has 1 digit, add it to\
    \ result list\n    // 3. if the current element has 2 digits, remove all even\
    \ digits\n    // from current element and add it to result list.\n    for _, v\
    \ := range x {\n        if v%2 == 0 {\n            result = append(result, v)\n\
    \        } else {\n            tmp = v\n            for i := 0; i < len(tmp);\
    \ i++ {\n                if tmp[i]%2 == 0 {\n                    tmp = tmp[:i]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n            result = append(result, tmp)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_bi0btp_test.go:35:13: undefined: tmp

    /tmp/tmph_bi0btp_test.go:36:33: undefined: tmp

    /tmp/tmph_bi0btp_test.go:37:20: undefined: tmp

    /tmp/tmph_bi0btp_test.go:38:27: undefined: tmp

    /tmp/tmph_bi0btp_test.go:43:37: undefined: tmp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    index := 0\n    for _, num := range x {\n        if num == 0 { continue\
    \ }\n        if num % 2 == 0 { continue }\n        if index < len(x) {\n     \
    \       if result[index] == 0 { result[index] = num }\n            index = index\
    \ + 1\n        }\n    }\n    return append(result, x...)\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique_digits(...)\n\t/tmp/tmpqoim62pp_test.go:23\n\
    command-line-arguments_test.TestUnique_Digits(0x0?)\n\t/tmp/tmpqoim62pp_test.go:37\
    \ +0x619\ntesting.tRunner(0xc0001924e0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073440
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    var evenDigit bool\n    var lastEvenDigit bool\n    for _, i := range\
    \ x {\n        if lastEvenDigit {\n            if i == 0 {\n                evenDigit\
    \ = true\n            } else {\n                evenDigit = false\n          \
    \  }\n            lastEvenDigit = false\n            continue\n        }\n   \
    \     if evenDigit {\n            lastEvenDigit = true\n            continue\n\
    \        }\n        if i %2 == 0 {\n            lastEvenDigit = true\n       \
    \     continue\n        }\n        result = append(result, i)\n        lastEvenDigit\
    \ = false\n    }\n    sort.Sort(result)\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqyzs0gm__test.go:41:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    seen := make(map[int]\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpillmtia6_test.go:18:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := make([]int, len(x))\n\
    \    for idx, val := range x {\n        if val%2 == 0 {\n            y[idx] =\
    \ val\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpizasyqhe_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1422) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpizasyqhe_test.go:42: expected '[]', got '[%!s(int=152) %!s(int=0)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpizasyqhe_test.go:42: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpizasyqhe_test.go:42: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073440
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ s := \"\"\n    for _, v := range x {\n        s += fmt.Sprint(v)\n    }\n  \
    \  for _, c := range s {\n        if int(c%2) != 0 {\n            result = append(result,\
    \ int(c))\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=algorithm,sorting,go |>\nIf you're not concerned\
    \ about performance, you can use sort.IntSlice:\n<code>\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbtkzkzsn_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Return an empty list\
    \ if x is empty\n    if len(x) == 0 {\n        return []int{}\n    }\n\n    //\
    \ Keep a list of all positive integers that haven't any even digit.\n    // For\
    \ each positive integers, keep a bool flag indicating if a digit has already appeared.\n\
    \    // If a digit is found, add the number to the result list if flag is true\
    \ and remove the number \n    // from the result list if flag is false.\n    var\
    \ result []int\n    var flag  bool\n    var idx   int\n\n    // Start from the\
    \ head of x\n    for idx := 0; idx < len(x); idx++ {\n        if !flag {\n   \
    \         // If current digit is even, add it to the result list.\n          \
    \  if x[idx] % 2 == 0 {\n                flag = true\n                result =\
    \ []int{x[idx]} // PATCH list\n            } else {\n                // If current\
    \ digit is odd, remove it from result list.\n                flag = false\n  \
    \          }\n        } else {\n            // If the flag is true, add the number\
    \ to the result list.\n            if x[idx] % 2 == 0 {\n                result\
    \ = []int{x[idx]} // PATCH list\n            }\n        }\n    }\n\n    // Return\
    \ the result list\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jr1ajln_test.go:28:9: idx declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073440
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return nil\n    }\n    ans := make([]int, len(x))\n    cnt := map[int]int{}\n\
    \    for _, v := range x {\n        cnt[v]++\n    }\n    for k := range cnt {\n\
    \        if cnt[k] == 0 {\n            ans = append(ans, k)\n        }\n    }\n\
    \    return ans\n}\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpzva_6kba_test.go:48: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpzva_6kba_test.go:48: expected '[]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpzva_6kba_test.go:48: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpzva_6kba_test.go:48: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // O(NlogN) solution\n\
    \    n := len(x)\n    x := x[:n]\n    result := make([]int, 0, n)\n    m := int(n%2)\n\
    \    for i := 0; i < m; i++ {\n        if x[i] % 2 == 0 {\n            continue\n\
    \        }\n        // if has even digit, remove it\n        result = append(result,\
    \ x[i])\n        x = x[:i]\n        i = i-1\n    }\n    // if has odd digit, append\
    \ it to the result\n    result = append(result, x[i])\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl1sybg__test.go:19:7: no new variables on left side of :=

    /tmp/tmpsl1sybg__test.go:32:31: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073440
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n\n    // first we find any number that has even number \n    // we do it\
    \ by looping over all numbers in x\n    // if any number is even than we add it\
    \ to the result and break the loop\n    for _, e := range x {\n        if e %\
    \ 2 == 0 {\n            result = append(result, e)\n            break\n      \
    \  }\n    }\n\n    // then we sort result and remove duplicates\n    sort.Sort(result)\n\
    \    removeDuplicates := make([]int, 0)\n    for _, e := range result {\n    \
    \    if removeDuplicates == nil {\n            removeDuplicates = append(removeDuplicates,\
    \ e)\n        } else {\n            if e != removeDuplicates[0] {\n          \
    \      removeDuplicates = append(removeDuplicates, e)\n            }\n       \
    \ }\n    }\n\n    return removeDuplicates\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6lz0gnzy_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073440
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // First sort the input\
    \ array\n    // This should be the most efficient way\n    sort.Ints(x)\n    \n\
    \    // The result list starts with an empty element\n    result := make([]int,\
    \ 0)\n    \n    // Keep iterating over the input array until all elements are\
    \ appended\n    for _, i := range x {\n        // If the current element is a\
    \ even number, append it to the result list\n        if i%2 == 0 {\n         \
    \   result = append(result, i)\n        }\n    }\n    \n    // Return result \n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhmrr55q_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v%2 == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return sort_int_list(result)\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpid3d8qat_test.go:23:12: undefined: sort_int_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073440
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var ret []int\n    var\
    \ ok bool\n    \n    for _, v := range x {\n        ok = true\n        for _,\
    \ uv := range ret {\n            if v%uv == 0 {\n                ok = false\n\
    \                break\n            }\n        }\n        if ok {\n          \
    \  ret = append(ret, v)\n        }\n    }\n    \n    return ret\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmphs7_0zjs_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmphs7_0zjs_test.go:52: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmphs7_0zjs_test.go:52: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmphs7_0zjs_test.go:52: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  for _, v := range x {\n        fmt.Println(v)\n        fmt.Println(len(strconv.Itoa(v)))\n\
    \        if !unique_digits_test.has_even_digit(v, len(strconv.Itoa(v))) == true\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoodiilvn_test.go:20:25: undefined: strconv

    /tmp/tmpoodiilvn_test.go:21:13: undefined: unique_digits_test

    /tmp/tmpoodiilvn_test.go:21:54: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073440
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    n :=\
    \ len(x)\n    for _, v := range x {\n        count := 0\n        for i := 0; i\
    \ < n; i++ {\n            if v %  10 == 0 {\n                count++\n       \
    \     }\n            if v == i%10 {\n                count++\n            }\n\
    \        }\n        if count == 2 {\n            res = append(res, v)\n      \
    \  }\n    }\n    fmt.Println(res)\n    return res\n}\n</code>\n<|/ a tags=go,arrays,algorithm\
    \ |>\n<| a tags=go,arrays,algorithm |>\n<code>\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8svrz059_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073440
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var ret []int = x\n\n\
    \    for _, v := range ret {\n        if v%2 == 0 {\n            continue\n  \
    \      }\n        for _, i := range x {\n            if i%2 == 0 {\n         \
    \       continue\n            }\n            if i != v {\n                break\n\
    \            }\n        }\n        ret = append(ret, v)\n    }\n    return ret\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp20__jc6o_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1) %!s(int=15) %!s(int=33)\
    \ %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp20__jc6o_test.go:52:\
    \ expected '[]', got '[%!s(int=152) %!s(int=323) %!s(int=1422) %!s(int=10) %!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp20__jc6o_test.go:52:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151) %!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    ---\
    \ FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp20__jc6o_test.go:52:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)\
    \ %!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Return empty list if\
    \ x is not valid\n    if len(x) == 0 {\n        return []int{}\n    }\n    if\
    \ len(x) == 1 {\n        return x\n    }\n\n    var result []int\n    // Count\
    \ unique digit count \n    count := len(x) - 1\n    for i := range x {\n     \
    \   if x[i]%2 != 0 {\n            count--\n        }\n    }\n\n    // Build result\n\
    \    for i := range x {\n        if x[i]%2 != 0 {\n            result = append(result,\
    \ x[i])\n        }\n    }\n\n    // Remove all element which has even number of\
    \ digit\n    for _, v := range result {\n        if count%v != 0 {\n         \
    \   count = count - v\n        }\n    }\n\n    // Sort in increasing order\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1th2zhb_test.go:49:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Use a set for\
    \ faster lookup\n    out := make([]int, len(x))\n    pos := 0\n    for _, v :=\
    \ range x {\n        if v%2 == 0 {\n            out[pos] = v\n            pos++\n\
    \        }\n    }\n    return append(out, x...)\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpc9p7mq3y_test.go:45: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=15) %!s(int=33)\
    \ %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpc9p7mq3y_test.go:45: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10) %!s(int=0) %!s(int=152) %!s(int=323) %!s(int=1422) %!s(int=10)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpc9p7mq3y_test.go:45:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    ---\
    \ FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpc9p7mq3y_test.go:45:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var u []int\n    for _,\
    \ i := range x {\n        k := i / 10\n        if k%2 == 0 {\n            u =\
    \ append(u, i)\n        }\n    }\n    sort.Sort(IntSliceAscSort(u))\n    return\
    \ u\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkfeiuubj_test.go:24:5: undefined: sort

    /tmp/tmpkfeiuubj_test.go:24:15: undefined: IntSliceAscSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // var result = make([]int,\
    \ len(x))\n    // result := []int{}\n    // for i := range x {\n    //     if\
    \ x[i]%2 == 0 {\n    //         result = append(result, x[i])\n    //     }\n\
    \    // }\n    var result []int\n    // var i int\n    for i, value := range x\
    \ {\n        if value%2 == 0 {\n            result = append(result, value)\n \
    \       }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ydhkubk_test.go:26:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    x := make([]int, 0)\n    r := make([]int, 0)\n    for i, _ := range\
    \ x {\n        if i >0 {\n            r = append(r, x[i]%10)\n        }\n    }\n\
    \    for _, y := range r {\n        if y == 0 {\n            continue\n      \
    \  }\n        \n        for _, z := range x {\n            if y == z%10 {\n  \
    \              break\n            }\n        }\n        \n        if y == 0 {\n\
    \            result = append(result, y)\n        }\n    }\n    return make([]int,\
    \ 0, len(result))\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_b0qqrd_test.go:18:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    output := make([]int,\
    \ 0)\n    for _, num := range x {\n        if num%2 == 0 {\n            continue\n\
    \        }\n        output = append(output, num)\n    }\n    sort.Ints(output)\n\
    \    return output\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ki8_ksz_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Base case\n    if len(x)\
    \ <= 0 {\n        return []int{}\n    }\n\n    var result []int\n    var seen\
    \ map[int]bool\n\n    // Fill the seen map\n    seen = make(map[int]bool)\n  \
    \  for _, value := range x {\n        if value, ok := seen[value]; ok {\n    \
    \        continue\n        }\n        seen[value] = true\n        result = append(result,\
    \ value)\n    }\n\n    // Sort result and remove duplicates\n    sort.Ints(result)\n\
    \    return result[:len(result)-1]\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9vy63y8_test.go:28:12: value declared but not used

    /tmp/tmpn9vy63y8_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return []int{}\n    }\n    var res []int\n    for _, b := range x {\n  \
    \      for _, c := range b {\n            if int(c)%2 != 0 {\n               \
    \ res = append(res, c)\n            }\n        }\n    }\n    return res\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp323hh3s0_test.go:22:27: cannot range over b (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    var\
    \ prev int\n\n    // We should sort the input list first. \n    // But this sorting\
    \ is costly so we should only sort when an even digit is found\n    for _, v :=\
    \ range x {\n        v /= 10 // convert int to digit\n        prev = (v-1) % 10\
    \ // prev is digit of last digit of v \n        if prev%2 == 0 {\n           \
    \ res = append(res, v)\n        }\n    }\n    \n    // Sort the output list by\
    \ descending order\n    sort.Sort(sort.Reverse(sort.IntSlice(res)))\n    \n  \
    \  return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1hgnpajz_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    for _, n := range x {\n\
    \        if n % 2 != 0 {\n            sort.Ints(x)\n            return x\n   \
    \     }\n    }\n    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo4vj6dj1_test.go:19:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool, 0)\n    for _, v := range x {\n        if\
    \ seen[v] {\n            continue\n        }\n        seen[v] = true\n       \
    \ result = append(result, v)\n    }\n    return sort(result)\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp34gt6vl1_test.go:26:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073441
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Base case\n    if len(x)\
    \ == 0 {\n        return []int{}\n    }\n\n    // Add head to the sorted list\
    \ and remove all even digit\n    head := x[0]\n    tail := unique_digits(x[1:])\n\
    \n    // Add head to tail but ignore all odd digit\n    for i := range tail {\n\
    \        if tail[i] == head {\n            continue\n        }\n        tail[i]\
    \ = head\n        break\n    }\n\n    // Append tail to result\n    return append([]int{head},\
    \ tail...)\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp5v2kgaqp_test.go:55: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=15) %!s(int=33) %!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp5v2kgaqp_test.go:55: expected '[]', got '[%!s(int=152) %!s(int=152)\
    \ %!s(int=323) %!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmp5v2kgaqp_test.go:55: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=12345) %!s(int=2033) %!s(int=111)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp5v2kgaqp_test.go:55: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=135) %!s(int=103)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073442
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    for _, i := range x {\n        r := []int{i}\n        for _, j := range\
    \ x {\n            if i != j && r[len(r)-1]%2 == 0 {\n                r = append(r,\
    \ j)\n            }\n        }\n        result = append(result, r...)\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpo1fkm_38_test.go:46: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=15) %!s(int=1)]'\n    ---\
    \ FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo1fkm_38_test.go:46:\
    \ expected '[]', got '[%!s(int=152) %!s(int=323) %!s(int=323) %!s(int=1422) %!s(int=152)\
    \ %!s(int=323) %!s(int=10) %!s(int=152) %!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpo1fkm_38_test.go:46: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL:\
    \ TestUnique_Digits/test_num__3 (0.00s)\n        tmpo1fkm_38_test.go:46: expected\
    \ '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073442
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := make([]int, 0)\n\
    \    for _, v := range x {\n        if v%2 != 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpjrbbt86p_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpjrbbt86p_test.go:42: expected '[]', got '[%!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpjrbbt86p_test.go:42:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpjrbbt86p_test.go:42: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073442
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := make([]int, len(x))\n\
    \    prev := -1\n    for _, v := range x {\n        if prev >= 0 && prev%2 ==\
    \ 0 {\n            y[prev] = v\n        } else {\n            prev = v\n     \
    \   }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\npanic: runtime error: index out of\
    \ range [1422] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1422] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique_digits(...)\n\t/tmp/tmpzzas4mf5_test.go:21\n\
    command-line-arguments_test.TestUnique_Digits(0x0?)\n\t/tmp/tmpzzas4mf5_test.go:36\
    \ +0x5bf\ntesting.tRunner(0xc0001a01a0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    \n    result := make([]int,\
    \ 0)\n    \n    for _,value := range x{\n        // Iterate from 0 to length of\
    \ x - 1 and check every value\n        for index := 0; index < len(x); index++\
    \ {\n            // If value is divisible by index, then append index to result\n\
    \            if value % x[index] == 0 {\n                result := append(result,\
    \ index)\n            }\n        }\n    }\n    \n    // Sort the result with sort.IntSlice\n\
    \    sort.Ints(result)\n    \n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfq1gh5ge_test.go:25:17: result declared but not used

    /tmp/tmpfq1gh5ge_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    n := len(x)\n    if n\
    \ <= 1 {\n        return x\n    }\n    result := make([]int, n-1)\n    for i :=\
    \ range result {\n        result[i] = x[i]\n    }\n    for i := n - 2; i >= 0;\
    \ i-- {\n        if result[i]%2 == 0 {\n            continue\n        }\n    \
    \    j := i + 1\n        while j < n && result[j] < result[i]+1 {\n          \
    \  j++\n        }\n        result[i], result[j] = result[j], result[i]\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplw_owber_test.go:30:15: expected '';'', found j

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073442
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  var last int\n    for _, v := range x {\n        if v%2 != 0 {\n          \
    \  last = result[len(result)-1]\n            if last == 0 {\n                result\
    \ = append(result, v)\n            } else {\n                if last < v {\n \
    \                   result = append(result, 0)\n                }\n          \
    \      result = append(result, v)\n            }\n        }\n    }\n    return\
    \ append(result, last)\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.unique_digits(...)\n\t/tmp/tmpc0i2q2ge_test.go:21\n\
    command-line-arguments_test.TestUnique_Digits(0x0?)\n\t/tmp/tmpc0i2q2ge_test.go:42\
    \ +0xe08\ntesting.tRunner(0xc0001964e0, 0x529020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073443
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ count := 0\n    for _,ele := range x {\n        if ele % 2 == 0 {\n        \
    \    count++\n        } else {\n            result = append(result, ele)\n   \
    \     }\n    }\n    if count>0 {\n        return append(result, count-1)\n   \
    \ } else {\n        return result\n    }\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpqgfek4_4_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpqgfek4_4_test.go:49: expected '[]', got '[%!s(int=323) %!s(int=2)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpqgfek4_4_test.go:49:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n      \
    \  tmpqgfek4_4_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073443
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    for i := 1; i < len(x);\
    \ i++ {\n        if x[i]%2 != 0 {\n            return append(x, x[i])\n      \
    \  }\n    }\n    return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpwhqi0ocb_test.go:41: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1) %!s(int=33)]'\n    ---\
    \ FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpwhqi0ocb_test.go:41:\
    \ expected '[]', got '[%!s(int=152) %!s(int=323) %!s(int=1422) %!s(int=10) %!s(int=323)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpwhqi0ocb_test.go:41:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151) %!s(int=2033)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpwhqi0ocb_test.go:41: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31) %!s(int=103)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // code here\n    var\
    \ result []int\n    result := append(result, x...)\n    sort.Ints(result)\n  \
    \  return filter(result, func(_ int) bool {\n        for _,_ := range result {\n\
    \            if result % 10 == 0 {\n                return false\n           \
    \ }\n        }\n        return true\n    })\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8u74vh6_test.go:19:12: no new variables on left side of :=

    /tmp/tmpy8u74vh6_test.go:20:5: undefined: sort

    /tmp/tmpy8u74vh6_test.go:21:12: undefined: filter

    /tmp/tmpy8u74vh6_test.go:22:9: no new variables on left side of :=

    /tmp/tmpy8u74vh6_test.go:23:25: cannot convert 10 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    res := []int{}\n    for\
    \ _, i := range x {\n        if i % 2 == 0 {\n            res = append(res, i)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpyjn99iet_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpyjn99iet_test.go:42: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpyjn99iet_test.go:42: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpyjn99iet_test.go:42:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    for _, v := range x {\n        for i := 0; i < len(v); i++ {\n     \
    \       if v[i] > 48 && v[i] < 58 {\n                continue\n            }\n\
    \            \n            if v[i] > 57 {\n                if v[i] > 64 {\n  \
    \                  fmt.Printf(\"%v %v\\n\", v, v[i:])\n                } else\
    \ {\n                    fmt.Printf(\"%v %v\\n\", v, v[i:])\n                \
    \    result = append(result, v[i:])\n                }\n            }\n      \
    \  }\n    }\n    \n    return append(result, x...)\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfuzqm90m_test.go:19:29: invalid argument: v (variable of type int) for
    len

    /tmp/tmpfuzqm90m_test.go:20:17: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmpfuzqm90m_test.go:24:17: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmpfuzqm90m_test.go:25:21: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmpfuzqm90m_test.go:26:46: invalid operation: cannot slice v (variable of
    type int)

    /tmp/tmpfuzqm90m_test.go:28:46: invalid operation: cannot slice v (variable of
    type int)

    /tmp/tmpfuzqm90m_test.go:29:45: invalid operation: cannot slice v (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    y := make([]int, 0, len(x))\n\
    \    for _, v := range x {\n        if v%2 == 0 {\n            y = append(y, v)\n\
    \        }\n    }\n    sort.Sort(IntSlice(y))\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoybow3bl_test.go:23:5: undefined: sort

    /tmp/tmpoybow3bl_test.go:23:15: undefined: IntSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return nil\n    }\n\n    var result []int\n    var last int = x[0]\n   \
    \ for _, nxt := range x {\n        if nxt != last {\n            last = nxt\n\
    \            result = append(result, last)\n        }\n    }\n\n    return sorted(result)\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpor_1t49n_test.go:30:12: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return []int{}\n    }\n\n    result := make([]int, len(x))\n    copy(result,\
    \ x)\n    sort.Sort(IntSlice{result})\n\n    var newResult []int\n    var i int\n\
    \    for i = 0; i < len(result); i++ {\n        last := result[len(result)-1]\n\
    \        if isEven(last) {\n            delete(result[i:], 0)\n            newResult\
    \ = append(newResult, last)\n        }\n    }\n\n    return newResult\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3_ghkuf_test.go:23:5: undefined: sort

    /tmp/tmpn3_ghkuf_test.go:23:15: undefined: IntSlice

    /tmp/tmpn3_ghkuf_test.go:29:12: undefined: isEven

    /tmp/tmpn3_ghkuf_test.go:30:26: invalid argument: result[i:] (value of type []int)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ len(x))\n    for i, val := range x {\n        fmt.Print(val)\n        for _,\
    \ v := range strconv.Itoa(val) {\n            if v%2 == 0 {\n                result[i]\
    \ = val\n                break\n            }\n        }\n    }\n    fmt.Print(result)\n\
    \    return sort(result)\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5lsw81du_test.go:20:27: undefined: strconv

    /tmp/tmp5lsw81du_test.go:28:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ var cur int\n    max := len(x)\n    for i := 0; i < max; i++ {\n        if x[i]\
    \ > 0 {\n            cur = x[i]\n            for {\n                cur *= 10\n\
    \                if cur > max {\n                    break\n                }\n\
    \                if cur%2 == 0 {\n                    break\n                }\n\
    \                cur /= 2\n            }\n            result = append(result,\
    \ cur)\n        }\n    }\n    return result.sort()\n}\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplrynooc_test.go:36:19: result.sort undefined (type []int has no field
    or method sort)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    \n    // Sort x\n    sort.Ints(x)\n\
    \    \n    // Create a result set\n    var ret []int\n    \n    for idx, i :=\
    \ range x {\n        if idx > 0 && x[idx-1]%2 == 0 {\n            continue\n \
    \       }\n        if ret != nil {\n            for _, j := range ret {\n    \
    \            if j == i {\n                    continue\n                }\n  \
    \              if x[idx] < j {\n                    ret = append(ret, j)\n   \
    \                 break\n                }\n            }\n        }\n       \
    \ ret = append(ret, i)\n    }\n    \n    return ret\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpau9cd9l4_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y = []int{}\n    for\
    \ _, i := range x {\n        fmt.Println(i)\n        if i%2 == 0 {\n         \
    \   y = append(y, i)\n        }\n    }\n    return y\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "15\n33\n1422\n1\n152\n323\n1422\n10\n12345\n2033\n111\n151\n135\n103\n\
    31\n--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpofmhq_4c_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpofmhq_4c_test.go:43: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpofmhq_4c_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpofmhq_4c_test.go:43:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073444
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Your code here\n  \
    \  \n    var list []int\n    for _, v := range x {\n        if v%2 != 0 {\n  \
    \          list = append(list, v)\n        }\n    }\n    list = append(list, 0)\n\
    \n    // Sort list\n    sort.Ints(list)\n    \n    var result []int\n    \n  \
    \  for _, v := range list {\n        if v%2 == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7gcgodb_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // base case\n    if len(x)\
    \ == 0 {\n        return []int{}\n    }\n\n    // traverse the array and find\
    \ all elements doesn't have any odd digits.\n    result := make([]int, 0)\n  \
    \  for _, v := range x {\n        if v%2 != 0 {\n            result <- v\n   \
    \     }\n    }\n\n    sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadv7nh1t_test.go:26:13: invalid operation: cannot send to non-channel
    result (variable of type []int)

    /tmp/tmpadv7nh1t_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073443
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ seenDigit := make(map[int]bool)\n    for _, i := range x {\n        if seenDigit[i]\
    \ == false {\n            seenDigit[i] = true\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpgxasfwqa_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpgxasfwqa_test.go:44: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpgxasfwqa_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpgxasfwqa_test.go:44: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073444
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ seen := make(map[int]bool)\n    for _, v := range x {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp_4rsku4c_test.go:45: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp_4rsku4c_test.go:45: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmp_4rsku4c_test.go:45: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp_4rsku4c_test.go:45: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073444
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // base cases\n    if\
    \ len(x) == 0 {\n        return nil\n    }\n    if len(x) == 1 {\n        return\
    \ x\n    }\n    \n    // find the max digit number in x\n    maxD := x[0] // base\
    \ case: single number\n    for _, v := range x[1:] {\n        if v > maxD {\n\
    \            maxD = v\n        }\n    }\n    \n    // find all the elements that\
    \ hasn't any even digit\n    result := []int{}\n    for _, v := range x {\n  \
    \      if v%maxD != 0 {\n            result = append(result, v)\n        }\n \
    \   }\n    \n    // sort in increasing order\n    sort.Ints(result)\n    \n  \
    \  return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91ip03ht_test.go:42:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073444
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var y []int\n    s :=\
    \ make(map[int]bool)\n    for _, v := range x {\n        if _, ok := s[v]; !ok\
    \ {\n            y = append(y, v)\n            s[v] = true\n        }\n    }\n\
    \    return y\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpidk91i4d_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpidk91i4d_test.go:44: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpidk91i4d_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpidk91i4d_test.go:44: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    \n    m := make(map[int]\
    \ bool)\n    for _, v := range x {\n        m[v] = true\n    }\n\n    result :=\
    \ make([]int, 0)\n    for v := range m {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    \n    return result.Sort()\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptat1jn2__test.go:30:19: result.Sort undefined (type []int has no field
    or method Sort)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073444
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    return unique(x, func(i\
    \ int) bool {\n        return i%2 == 0\n    })\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pj3zwjg_test.go:17:12: undefined: unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  for _, i := range x {\n        if i > 0 {\n            result := append(result,\
    \ i)\n        }\n    }\n\n    for i := 0; i < len(result)-1; i++ {\n        for\
    \ j := i + 1; j < len(result); j++ {\n            if result[i] > 0 && result[j]\
    \ % 2 == 0 {\n                result[j] = -1\n            }\n        }\n    }\n\
    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphs8ccb0k_test.go:20:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    for _, item := range x {\n        fmt.Printf(\"%d\\n\", item)\n    \
    \    if item % 2 != 0 {\n            result = append(result, item)\n        }\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n</code>\nOutput:\n<code>\n\
    $ go test unique_digits_test.go\n==================\nWARNING: DATA RACE\nRead\
    \ at 0x00c0000a0 by goroutine 6:\n  unique_digits/1.go:10 +0x3\n\nPrevious write\
    \ at 0x00c0000a0 by goroutine 2:\n  unique_digits/1.go:10 +0x3\n  unique_digits/1.go:6\
    \ +0x15\n\nGoroutine 6 (running) created at:\n  unique_digits/1.go:11 +0x18\n\n\
    Goroutine 2 (running) created at:\n  unique_digits/1.go:11 +0x18\n\nGoroutine\
    \ 5 (running) created at:\n  unique_digits/1.go:11 +0x18\n\nGoroutine 4 (running)\
    \ created at:\n  unique_digits/1.go:11 +0x18\n\nGoroutine 3 (running) created\
    \ at:\n  unique_digits/1.go:11 +0x18\n\nGoroutine 1 (running) created at:\n  unique_digits/1.go:11\
    \ +0x18\n\nGoroutine 7 (running) created at:\n  unique_digits/1.go:11 +0x18\n\n\
    ==================\nPASS\n$ \n</code>\n<|/ a tags=go,arrays,sorting,unique |>\n\
    <| a tags=go,arrays,sorting,unique dscore=1 |>\nAnother solution using sort, unique,\
    \ and a map to check for duplicates:\n<code>\npackage main\n\nimport \"fmt\"\n\
    \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewj7wz9w_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073444
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Add one more element\
    \ in the array to make the even digit to appear at \n    // the end so that it\
    \ can be sorted.\n    x = append(x, 1)\n    \n    // Sort the array\n    sort.Ints(x)\n\
    \    \n    // Return the elements without any even digit.\n    // Because this\
    \ list is already sorted, we can use binary search to\n    // return the elements\
    \ that doesn't have even digit.\n    i := 0\n    for x < len(x)-1 {\n        if\
    \ x[i] % 2 != 0 {\n            return append(x[:i], x[i+1:]...)\n        }\n \
    \       i += 1\n    }\n    return x\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1wone9sr_test.go:22:5: undefined: sort

    /tmp/tmp1wone9sr_test.go:28:13: invalid operation: x < len(x) - 1 (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var x []int\n    var k\
    \ int \n    for _, v := range x {\n        if v%2 == 0 {\n            k = k +\
    \ 1\n        } else {\n            x[k] = v\n        }\n    }\n    for _, v :=\
    \ range x {\n        if v%2 != 0 {\n            x = append(x, v)\n        }\n\
    \    }\n    return x\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go dscore=0 |>\n\
    Here is my solution:\n<code>\npackage main\n\nimport (\n  \"fmt\"\n  \"math\"\n\
    )\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbghrqo3o_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  if len(x) == 0 {\n        return x\n    }\n\n    for _, num1 := range x {\n\
    \        for _, num2 := range x {\n            if num1 != num2 && num1/num2 !=\
    \ 0 {\n                if num1/num2 == 2 {\n                    result = append(result,\
    \ num1)\n                }\n                break\n            }\n        }\n\
    \    }\n    \n    // append the last digit if exists\n    if len(result) == 0\
    \ && len(x) > 0 {\n        result = append(result, x[0])\n    }\n\n    // sort\
    \ return value\n    sort.Ints(result)\n\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3yyjt24b_test.go:39:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ seen := map[int]bool{}\n    for _, n := range x {\n        if seen[n] {\n  \
    \          continue\n        }\n        if n <= 9 {\n            result = append(result,\
    \ int(n))\n        } else {\n            seen[n] = true\n            result =\
    \ append(result, n)\n        }\n    }\n    return append(result, 0)\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpbr53hcne_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpbr53hcne_test.go:49:\
    \ expected '[]', got '[%!s(int=152) %!s(int=323) %!s(int=1422) %!s(int=10) %!s(int=0)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpbr53hcne_test.go:49:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmpbr53hcne_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  prev := 0\n    for _, b := range x {\n        if b%2 != 0 {\n            fmt.Printf(\"\
    prev: %d, b %d\\n\", prev, b)\n            prev = b // append b to result\n  \
    \          result = append(result, b)\n        }\n    }\n    fmt.Printf(\"result:\
    \ %v\\n\", result)\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "prev: 0, b 15\nprev: 15, b 33\nprev: 33, b 1\nresult: [15 33 1]\nprev:\
    \ 0, b 323\nresult: [323]\nprev: 0, b 12345\nprev: 12345, b 2033\nprev: 2033,\
    \ b 111\nprev: 111, b 151\nresult: [12345 2033 111 151]\nprev: 0, b 135\nprev:\
    \ 135, b 103\nprev: 103, b 31\nresult: [135 103 31]\n--- FAIL: TestUnique_Digits\
    \ (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp4wpcvsks_test.go:46:\
    \ expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33)\
    \ %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp4wpcvsks_test.go:46:\
    \ expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmp4wpcvsks_test.go:46: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL:\
    \ TestUnique_Digits/test_num__3 (0.00s)\n        tmp4wpcvsks_test.go:46: expected\
    \ '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    n := len(x)\n    var result\
    \ []int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            if x[j%10] % 2 == 0 {\n                result = append(result, x[i])\n\
    \                result = append(result, x[j])\n                break\n      \
    \      }\n        }\n    }\n    return result \n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmph2b023xr_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=1422) %!s(int=33) %!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmph2b023xr_test.go:47: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=323) %!s(int=1422) %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmph2b023xr_test.go:47: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmph2b023xr_test.go:47:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    s := make(map[int]bool)\n\
    \    for _, i := range x {\n        if i%2 == 0 {\n            continue\n    \
    \    }\n        if _, ok := s[i%10]; !ok {\n            s[i] = true\n        }\n\
    \    }\n    x := make([]int, 0, len(s))\n    for k := range s {\n        x = append(x,\
    \ k)\n    }\n    sort.Sort(sort.IntSlice(x))\n    return x\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajelf5ox_test.go:26:7: no new variables on left side of :=

    /tmp/tmpajelf5ox_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    n := len(x)\n    result\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        if x[i] % 2 == 0 {\n\
    \            result[i] = x[i]\n        } else {\n            for j := i + 1; j\
    \ < n; j++ {\n                if x[j] % 2 != 0 {\n                    break\n\
    \                } else {\n                    result[i] = x[j]\n            \
    \        i++\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp8rfs0ko4_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=0) %!s(int=1422) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp8rfs0ko4_test.go:52: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmp8rfs0ko4_test.go:52: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp8rfs0ko4_test.go:52: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    for _, item := range x {\n        for _, dat := range item {\n     \
    \       if dat % 2 == 0 {\n                continue\n            }\n         \
    \   item = append(item, dat)\n            break\n        }\n        if !sort.IsSorted(item)\
    \ {\n            result = append(result, item)\n        }\n    }\n    return sort(result)\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp8osxln9_test.go:19:29: cannot range over item (variable of type int)

    /tmp/tmpp8osxln9_test.go:23:27: first argument to append must be a slice; have
    item (variable of type int)

    /tmp/tmpp8osxln9_test.go:26:13: undefined: sort

    /tmp/tmpp8osxln9_test.go:30:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // sort the list to make\
    \ the search easy\n    sort.Sort(sort.IntSlice(x))\n    var result []int\n   \
    \ for _, d := range x {\n        if d%2 == 0 {\n            result = append(result,\
    \ d)\n        }\n    }\n    return append(result, x...)\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nryftei_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    set := make(map[int]bool)\n\
    \    for _, v := range x {\n        for _, d := range []int{10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1}  {\n            digit, ok := v % d\n            if ok {\n      \
    \          set[v] = true\n                if set[digit] {\n                  \
    \  continue // already has it\n                }\n                set[digit] =\
    \ true\n            }\n        }\n    }\n    result := make([]int, 0, len(set))\n\
    \    for k, v := range set {\n        result = append(result, k)\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiacrs6y4_test.go:20:26: assignment mismatch: 2 variables but 1 value

    /tmp/tmpiacrs6y4_test.go:31:12: v declared but not used

    /tmp/tmpiacrs6y4_test.go:34:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here\n\
    \    list := make([]int, 0)\n    \n    for i := 0; i < len(x); i++ {\n       \
    \ if x[i] % 2 == 0 {\n            list = append(list, x[i])\n        }\n    }\n\
    \    \n    sort.Ints(list)\n    return list\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqx8ywlrx_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ result := append(result, x...)\n    sort.Ints(result)\n    result := unique(result[:])\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjublwnai_test.go:18:12: no new variables on left side of :=

    /tmp/tmpjublwnai_test.go:19:5: undefined: sort

    /tmp/tmpjublwnai_test.go:20:12: no new variables on left side of :=

    /tmp/tmpjublwnai_test.go:20:15: undefined: unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    \n    // We store each\
    \ element in a map, to keep track of the \n    // element with even digit\n  \
    \  m := make(map[int]bool)\n    for _, v := range x {\n        if v%2 == 0 {\n\
    \            m[v] = true\n        }\n    }\n    \n    // We will store all elements\
    \ whose even digit is not in m\n    result := make([]int, 0)\n    \n    // We\
    \ iterate over m until we find an element whose even digit\n    // is not in m,\
    \ then we append that element to the result\n    for k := range m {\n        if\
    \ k != 0 {\n            \n            // We get each even digit\n            k\
    \ := k % 10\n            \n            // If the element is in the result, we\
    \ ignore it\n            for _, v := range result {\n                if v%2 ==\
    \ k {\n                    break\n                }\n            }\n         \
    \   \n            // If it is not in the result, we append it \n            if\
    \ !isInArray(result, k) {\n                result = append(result, k)\n      \
    \      }\n        }\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9e4s_zrb_test.go:46:17: undefined: isInArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    index := 0\n    result\
    \ := make([]int, 0)\n\n    for _, n := range x {\n        if n > 0 {\n       \
    \     index = result + int(n)\n            for i := 0; i < index; i++ {\n    \
    \            if result[i] == 0 {\n                    result[i] = n\n        \
    \            index = i\n                    break\n                }\n       \
    \     }\n        } else {\n            result = append(result, int(n))\n     \
    \   }\n    }\n\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4grkomgx_test.go:22:21: invalid operation: result + int(n) (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // O(logn)\n    result\
    \ := make([]int, 0)\n    for _, v := range x {\n        digit := v%10\n      \
    \  if digit == 0 {\n            continue\n        }\n        result = append(result,\
    \ v)\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jyvp985_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // write code here\n \
    \   y := make([]int, len(x))\n    result := []int{}\n\n    for i, v := range x\
    \ {\n        if v%2 == 0 {\n            for _, vv := range y {\n             \
    \   if v == vv {\n                    break\n                }\n            }\n\
    \            y[i] = v\n        }\n    }\n    for _, vv := range y {\n        result\
    \ = append(result, vv)\n    }\n    sort.Ints(result)\n    return result\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33vi6qny_test.go:34:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    \n    // Initialization\n\
    \    result := make([]int, 0)\n    seen := make([]int, 0)\n\n    for _, i := range\
    \ x {\n        // If element is a unique digit, add it into the result array.\n\
    \        // Else, ignore it\n        digit, err := strconv.Atoi(i)\n        if\
    \ digit == 0 || err != nil {\n            continue\n        }\n        if seen[digit]\
    \ == 0 {\n            result = append(result, digit)\n            seen[digit]\
    \ = 1\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5z21u3dg_test.go:25:23: undefined: strconv

    /tmp/tmp5z21u3dg_test.go:34:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return x\n    }\n    y := make([]int, 0)\n    for _, v := range x {\n  \
    \      y := append(y, v)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(y)))\n\
    \    s := 0\n    k := 0\n    for _, v := range y {\n        if v%2 == 0 {\n  \
    \          y[k++] = 0\n        } else {\n            s += v / 10\n        }\n\
    \    }\n    return y[0:k]\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqsizn_cs_test.go:29:16: expected '']'', found ''++''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    \n    r := make([]int,\
    \ len(x))\n    \n    for i := range r {\n        if x[i] == 0 {\n            continue\
    \ \n        }\n        for _, v := range x {\n            if v == i {\n      \
    \          break\n            }\n        }\n        if v%2 == 0 {\n          \
    \  r[len(r)-1] = v\n        }\n    }\n    \n    return r\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6r10zn0h_test.go:29:12: undefined: v

    /tmp/tmp6r10zn0h_test.go:30:27: undefined: v

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    d := make(map[int]bool,\
    \ len(x))\n    r := make([]int, 0)\n\n    for _, e := range x {\n        x :=\
    \ e\n        if d[x] {\n            // already have this x\n            continue\n\
    \        }\n        if x%2 == 0 {\n            d[x] = true\n            r <- x\n\
    \        }\n    }\n\n    return r\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp56w0jp73_test.go:28:13: invalid operation: cannot send to non-channel
    r (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  result := append(result, x[0])\n    for _, v := range x[1:] {\n        k :=\
    \ 0\n        for _, vv := range result {\n            if v == vv {\n         \
    \       k = k + 1\n            }\n        }\n        if k == 0 {\n           \
    \ result = append(result, v)\n        }\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplsf6rovj_test.go:18:12: no new variables on left side of :=

    /tmp/tmplsf6rovj_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Code goes here\n  \
    \  evenDigit := make([]int, 0)\n    s := \"\"\n    for _, v := range x {\n   \
    \     if v%2 == 0 {\n            s = s + strconv.Itoa(v)\n            evenDigit\
    \ = append(evenDigit, v)\n        }\n    }\n    evenDigit = append(evenDigit,\
    \ s...)\n    return evenDigit\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n \
    \ candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp2ncv8i_test.go:22:21: undefined: strconv

    /tmp/tmpyp2ncv8i_test.go:26:35: cannot use s (variable of type string) as type
    []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ seen := map[int]bool{}\n    for _, v := range x {\n        if seen[v] {\n  \
    \          continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmppfiknhav_test.go:45: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmppfiknhav_test.go:45: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmppfiknhav_test.go:45: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmppfiknhav_test.go:45: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // TODO: Write your code\
    \ in Go here\n    result := make([]int, 0)\n    if len(x) == 0 {\n        return\
    \ x\n    }\n    sorted_x := sort.Ints(x)\n    for _, num := range sorted_x {\n\
    \        if num%2 == 0 {\n            continue\n        }\n        for _, next_num\
    \ := range sorted_x {\n            if next_num%2 == 0 {\n                break\n\
    \            }\n            if num == next_num {\n                continue\n \
    \           }\n            if next_num%10 == 0 {\n                result = append(result,\
    \ next_num)\n            }\n        }\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_dxyvp12_test.go:22:17: undefined: sort

    /tmp/tmp_dxyvp12_test.go:39:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ len(x))\n    q := make([]int, len(x))\n    j := 0\n    for i := range x {\n\
    \        if x[i] % 2 == 0 {\n            q[j] = x[i]\n            j++\n      \
    \  }\n    }\n    for i := 0; i < len(q); i++ {\n        for j := i + 1; j < len(q);\
    \ j++ {\n            if q[i] > q[j] {\n                temp := q[j]\n        \
    \        q[j] = q[i]\n                q[i] = temp\n                i++\n     \
    \       }\n        }\n    }\n    for i := 0; i < len(q); i++ {\n        result[i]\
    \ = q[i]\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl2inwajn_test.go:39:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    result := append(result, x...)\n    result := append(result, x...)\n\
    \    return uniqueDigits(result)\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpicm84ezj_test.go:18:12: no new variables on left side of :=

    /tmp/tmpicm84ezj_test.go:19:12: no new variables on left side of :=

    /tmp/tmpicm84ezj_test.go:20:12: undefined: uniqueDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        if v%2 == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzhnwitn_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    k := 0\n    i := 0\n    for i < len(x) {\n        if x[i] == 0 {\n \
    \           for k >= 0 {\n                if (x[i] + k) % 2 == 0 {\n         \
    \           result = append(result, x[i]+k)\n                    k += 1\n    \
    \                break\n                }\n            }\n            i++\n  \
    \      } else {\n            k = x[i]\n            i += 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp8710ed7x_test.go:54: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp8710ed7x_test.go:54:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp8710ed7x_test.go:54: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Sort input\n    sort.Ints(x)\n\
    \n    out := make([]int, 0)\n\n    for _, value := range x {\n        // Add even\
    \ digits number\n        if value%2 != 0 {\n            out = append(out, value)\n\
    \        }\n    }\n\n    // Sort output\n    sort.Ints(out)\n\n    return out\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpczcnr8an_test.go:18:5: undefined: sort

    /tmp/tmpczcnr8an_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    for _, i := range x {\n\
    \        digits := make([]int, len(i))\n        for j, v := range i {\n      \
    \      digits[j] = v % 10\n        }\n        digits = append(digits, 0)\n   \
    \     sort.Ints(digits)\n        for _, v := range digits {\n            if v\
    \ != 0 {\n                return append(x, i)\n            }\n        }\n    }\n\
    \    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_nqe1xdu_test.go:18:35: invalid argument: i (variable of type int) for
    len

    /tmp/tmp_nqe1xdu_test.go:19:27: cannot range over i (variable of type int)

    /tmp/tmp_nqe1xdu_test.go:23:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _, v := range x {\n        d := v%10\n        if d != 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    sort.Sort(result)\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcbbvvyrk_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    ret := make([]int, len(x))\n\
    \    seen := make(map[int]\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9vj0r8r1_test.go:18:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    n := len(x)\n    result\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        if x[i] % 2 == 0 {\n\
    \            continue\n        }\n        result[i] = x[i]\n    }\n    for i :=\
    \ n - 1; i >= 0; i-- {\n        if result[i] % 2 != 0 {\n            return append(result,\
    \ x[i])\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp1l3wpxdp_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=0) %!s(int=1) %!s(int=1)]'\n    --- FAIL:\
    \ TestUnique_Digits/test_num__1 (0.00s)\n        tmp1l3wpxdp_test.go:49: expected\
    \ '[]', got '[%!s(int=0) %!s(int=323) %!s(int=0) %!s(int=0) %!s(int=323)]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp1l3wpxdp_test.go:49:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111)\
    \ %!s(int=151) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n\
    \        tmp1l3wpxdp_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135)\
    \ %!s(int=103) %!s(int=31) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    l := len(x)\n    result\
    \ := make([]int, 0)\n    \n    index := 0\n    for index < l {\n        if x[index]\
    \ % 2 == 0 {\n            result = append(result, x[index])\n        }\n     \
    \   index++\n    }\n    \n    for index < l {\n        if x[index] > 9 {\n   \
    \         break\n        }\n        index++\n    }\n    \n    return append(result,\
    \ x[index:])\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_itsrzsg_test.go:35:28: cannot use x[index:] (value of type []int) as
    type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  seen := map[int]bool{}\n    for _, v := range x {\n        if seen[v] {\n \
    \           continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return sorted(result)\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp904sgt36_test.go:26:12: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ for _,v := range x {\n        if v%2 == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result \n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpih4xn3um_test.go:42: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpih4xn3um_test.go:42: expected '[]', got '[%!s(int=152) %!s(int=1422)\
    \ %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n       \
    \ tmpih4xn3um_test.go:42: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n \
    \   --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpih4xn3um_test.go:42:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ \n    for _, v := range x {\n        if int(v)%2 == 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    \n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    \n    return result\n}\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezc0ssnb_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    var temp int = 0\n    for _, v := range x {\n        for i := 0; i <\
    \ 10; i++ {\n            if v%10 == i {\n                temp ^= i\n         \
    \   }\n        }\n        if temp != 0 {\n            temp = temp // clear flag\n\
    \            temp = temp ^ (v % 10)\n        } else {\n            result = append(result,\
    \ v)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7lka71u5_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    digits := make(map[int]bool)\n\
    \    for _, v := range x {\n        if v, ok := digits[v]; !ok {\n           \
    \ digits[v] = true\n        }\n    }\n    for _, v := range x {\n        if v,\
    \ ok := digits[v]; ok {\n            delete(digits, v)\n        }\n    }\n   \
    \ for _, v := range x {\n        if v, ok := digits[v]; ok {\n            continue\n\
    \        }\n        digits[v] = true\n    }\n    return []int{}\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv1nz8b6i_test.go:20:20: cannot use v (variable of type bool) as type int
    in map index

    /tmp/tmpv1nz8b6i_test.go:25:28: cannot use v (variable of type bool) as type int
    in argument to delete

    /tmp/tmpv1nz8b6i_test.go:29:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    \n    for _, v := range x {\n        // add only if there are not any\
    \ odd digit\n        if len(strconv.Itoa(v)) % 2 != 0 {\n            result =\
    \ append(result, v)\n        }\n    }\n\n    // sort it\n    sort.Slice(result,\
    \ func(i, j int) bool {\n        return result[i] > result[j]\n    })\n\n    return\
    \ result\n}\n</code>\nPlayground: https://play.golang.org/p/4ujNzfQ8HB7\n\nThe\
    \ package unique_digits is not meant to work for negative numbers, for that you'll\
    \ need a different approach:\n<code>\npackage unique_digits_test\n\nimport (\n\
    \    \"fmt\"\n    \"math\"\n    \"sort\"\n)\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptxt4j186_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Write your code here.\n\
    \    result := make([]int, len(x))\n    for i, _ := range x {\n        if i+1\
    \ < len(x) {\n            if x[i+1] % 2 != 0 {\n                result[i] = x[i]\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmp7i17s0ka_test.go:45: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=0) %!s(int=1422) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmp7i17s0ka_test.go:45: expected '[]', got '[%!s(int=152) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmp7i17s0ka_test.go:45: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmp7i17s0ka_test.go:45: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var ret []int\n    \n\
    \    p := make([]int, len(x))\n    \n    for i, v := range x {\n        p[i] =\
    \ v\n    }\n    \n    for i := 1; i < len(p); i++ {\n        if p[i]%2 == 0 {\n\
    \            continue\n        }\n        for j := i; j < len(p); j++ {\n    \
    \        if p[j]%2 == 0 {\n                ret.append(p[j])\n                j--\n\
    \                break\n            }\n        }\n    }\n    \n    return ret\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5z4j5a6l_test.go:31:21: ret.append undefined (type []int has no field
    or method append)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    count := 0\n    var result\
    \ []int\n\n    for _, v := range x {\n        if v%2 != 0 {\n            count++\n\
    \            if count > 1 {\n                result = append(result, v)\n    \
    \            count = 0\n            }\n        }\n    }\n    \n    return append(result,\
    \ x...)\n}\n</cell>\n<cell>\n#export\n%nbdev_export\nimport unique_digits\n\n\
    def unique_digits_test(n_test: int, ignore_outputs: bool = False) -> float:\n\
    \    \"Make `n` random test cases by duplicating `n` times and then running `unique_digits`\
    \ on them.\"\n    \n    digits = [int(x) for x in unique_digits(range(1,11))]\n\
    \    \n    def test(n_case: int):\n        if ignore_outputs:\n            for\
    \ i in range(n_case):\n                unique_digits(digits)\n        else:\n\
    \            with capture_output() as captured:\n                unique_digits(digits)\n\
    \            \n            return float(captured.stdout).count()\n    \n    n_fails\
    \ = 0\n    for _ in range(n_test):\n        n_fails += test(n_case)\n    \n  \
    \  return n_fails / n_test\n</cell>\n<cell>\n# Test\nunique_digits_test(100)\n\
    </cell>\n<cell>\n# Test\nunique_digits_test(100)\n</cell>\n<cell>\n# Test\nunique_digits_test(100)\n\
    </cell>\n<cell>\n# Test\nunique_digits_test(100)\n</cell>\n<text>\nProblem 5\n\
    Write a function that sorts a list so that the smallest element appears first,\
    \ followed by the next smallest element, etc., until the largest element is found\
    \ at index 0.\n\nFor example, given [5, 2, 3, 4, 1], the smallest element 5 should\
    \ appear at the first position, the next smallest 2, then the next smallest 3,\
    \ and so on. After the final 1, the list is sorted.\n\nThe input list does not\
    \ need to be sorted in place; the output list does not need to have any duplicate\
    \ elements.\n\nFor example:\n\n>>> bubble_sort([5, 2, 3, 4, 1])\n[1, 1, 2, 3,\
    \ 4, 5]\n>>> bubble_sort([5, 2, 3, 4, 1])\n[1, 1, 2, 3, 4, 5]\n>>> bubble_sort([1,\
    \ 5, 3, 2])\n[1, 2, 3, 5, 5]\n>>> bubble_sort([1, 5, 3, 2])\n[1, 2, 3, 5, 5]\n\
    >>> bubble_sort([3, 2, 1])\n[1, 3, 2, 3]\n>>> bubble_sort([3, 2, 1])\n[1, 3, 2,\
    \ 3]\n>>> bubble_sort([3, 2, 1])\n[3, 1, 2]\n>>> bubble_sort([3, 5])\n[3, 5]\n\
    >>> bubble_sort([3, 5])\n[3, 5]\n>>> bubble_sort([3, 5])\n[3, 5]\n>>> bubble_sort([3,\
    \ 5])\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy5mxynx2_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073448
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // write your code here\n\
    \    return nil\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpwav2l4vr_test.go:37: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpwav2l4vr_test.go:37:\
    \ expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpwav2l4vr_test.go:37: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    var\
    \ prev int\n    for _, val := range x {\n        if val%2 == 0 {\n           \
    \ prev = val\n            res = append(res, val)\n        } else {\n         \
    \   if val != prev {\n                res = append(res, val)\n            }\n\
    \        }\n    }\n    return res\n}\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpjbge0835_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmpjbge0835_test.go:47: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpjbge0835_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpjbge0835_test.go:47: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    set := make(map[int]bool)\n\
    \    for _, v := range x {\n        digit, _ := strconv.Atoi(v)\n        if set[digit]\
    \ {\n            return nil\n        }\n        set[digit] = true\n    }\n   \
    \ return make([]int, 0, len(x))\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ud1uzul_test.go:19:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var res []int\n    for\
    \ _, val := range x {\n        for _, d := range strconv.Itoa(val) {\n       \
    \     if d != \"0\" {\n                continue // skip this digit\n         \
    \   }\n            d := int(d)\n            if !func(x int) bool {\n         \
    \       x % 2 == 0\n            }(x) {\n                res = append(res, val)\n\
    \            }\n            break\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8gbzcfl7_test.go:19:27:\
    \ undefined: strconv\n/tmp/tmp8gbzcfl7_test.go:25:17: x % 2 == 0 (untyped bool\
    \ value) is not used\n/tmp/tmp8gbzcfl7_test.go:26:13: missing return\n/tmp/tmp8gbzcfl7_test.go:26:15:\
    \ cannot use x (variable of type []int) as type int in argument to func(x int)\
    \ bool {\u2026}\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    m := make(map[int]bool,\
    \ len(x))\n    for _, v := range x {\n        if v%2 != 0 {\n            m[v]\
    \ = true\n        }\n    }\n    result := make([]int, 0, len(x))\n    for _, v\
    \ := range x {\n        if !m[v] {\n            result = append(result, v)\n \
    \       }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxvy3qgb_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    seen := make(map[int]\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpillmtia6_test.go:18:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Your code here\n  \
    \  result := make([]int, 0)\n    var i int\n    var prev int\n    for _, v :=\
    \ range x {\n        for i := 0; i < len(v); i++ {\n            if (v[i] == prev+1\
    \ && v[i] % 2 == 0) {\n                break\n            }\n            if v[i]\
    \ % 2 != 0 {\n                prev = v[i]\n                break\n           \
    \ }\n        }\n        result = append(result, v)\n    }\n    return result\n\
    }\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3eo0hq5i_test.go:19:9: i declared but not used

    /tmp/tmp3eo0hq5i_test.go:22:29: invalid argument: v (variable of type int) for
    len

    /tmp/tmp3eo0hq5i_test.go:23:18: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmp3eo0hq5i_test.go:26:17: invalid operation: cannot index v (variable of
    type int)

    /tmp/tmp3eo0hq5i_test.go:27:25: invalid operation: cannot index v (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ \n    for _, n := range x {\n        if n <= 0 {\n            continue\n   \
    \     }\n        if n >= 10 {\n            result = append(result, n)\n      \
    \      continue\n        }\n        i, ok := binary_search(result, n)\n      \
    \  if !ok {\n            result = append(result, n)\n        }\n    }\n    return\
    \ sort_increasing(result)\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate\
    \ := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjv79ce87_test.go:27:18: undefined: binary_search

    /tmp/tmpjv79ce87_test.go:32:12: undefined: sort_increasing

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var x []int\n    var res\
    \ []int\n    for _,d := range x {\n        if int(d%2)!=0 {\n            res =\
    \ append(res,d)\n        }\n    }\n    x = nil\n    return res\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3o52vhze_test.go:17:9:\
    \ x redeclared in this block\n\t/tmp/tmp3o52vhze_test.go:16:20: other declaration\
    \ of x\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  result := append(result, x[0]...)\n    if len(x) > 1 {\n        for _, v :=\
    \ range x[1:] {\n            // return early if digit is not even\n          \
    \  if v%2 == 0 {\n                continue\n            }\n            // get\
    \ all digits with even position\n            tmp := []int{}\n            tmp :=\
    \ append(tmp, result...)\n            tmp := append(tmp, v)\n            // append\
    \ the tmp list to result\n            result = append(result, tmp...)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi5693qyw_test.go:18:12: no new variables on left side of :=

    /tmp/tmpi5693qyw_test.go:18:30: cannot use x[0] (variable of type int) as type
    []int in argument to append

    /tmp/tmpi5693qyw_test.go:27:17: no new variables on left side of :=

    /tmp/tmpi5693qyw_test.go:28:17: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    if len(x) == 0 {\n        return result\n    }\n\n    for i := range\
    \ x {\n        j := i\n        // find j with even digit\n        for ; j <= len(x);\
    \ j++ {\n            digit := x[j]\n            if digit % 2 == 0 {\n        \
    \        break\n            }\n        }\n        if j < len(x) {\n          \
    \  // add numbers that haven't even digit\n            result = append(result,\
    \ x[i])\n        }\n    }\n\n    // sort the list\n    sort.Sort(result)\n   \
    \ return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcnfavbnw_test.go:38:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    result := append(result, x...)\n    for _, val := range result {\n \
    \       if val%2 == 0 {\n            continue\n        }\n        for _, val1\
    \ := range result {\n            if val1 != val {\n                if val%10 ==\
    \ val1%10 {\n                    continue\n                }\n               \
    \ if val%10 != val1%10 {\n                    result = append(result, val)\n \
    \                   break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate :=\
    \ unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33,\
    \ 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmdl7o4bz_test.go:18:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // base case\n    if len(x)\
    \ == 0 {\n        return x\n    }\n    result := []int{}\n    evenDigit := []int{}\n\
    \    evenDigitMap := map[int]bool{}\n    for _, v := range x {\n        if evenDigitMap[int(v)]\
    \ {\n            continue\n        }\n        result = (result + v).sort()\n \
    \       if result[len(result)-1]%2 == 0 {\n            evenDigit = append(evenDigit,\
    \ v)\n            evenDigitMap[int(v)] = true\n        }\n    }\n    return result\n\
    }\n</code>\n<|/ a |>\n<| a tags=algorithm,go,arrays,math dscore=0 |>\nHere is\
    \ my solution, where I try to preserve the array as much as possible. \n\n<code>\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb2scb516_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073449
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ var seen []int\n    var size int\n    var curr int\n    var idx int\n    for\
    \ _, x := range x {\n        if x == 0 {\n            continue\n        }\n  \
    \      curr = 0\n        // find the first even digit in x\n        for idx :=\
    \ 0; idx < size; idx++ {\n            curr += int(x[idx])\n            if curr%2\
    \ == 0 {\n                break\n            }\n        }\n        // add x into\
    \ the result list\n        if curr != 0 {\n            result = append(result,\
    \ x)\n        }\n        // add curr to the seen list\n        seen = append(seen,\
    \ curr)\n        size++\n    }\n    // sort the result list\n    result = sortInts(result)\n\
    \    // if x is not empty, add it to the result list\n    if size != 0 {\n   \
    \     result = append(result, x)\n    }\n    // if seen is empty or x is not empty,\
    \ add x to the seen list\n    if seen != nil || size != 0 {\n        seen = append(seen,\
    \ x)\n    }\n    // remove duplicates\n    for idx, item := range seen {\n   \
    \     if seen[idx] != item {\n            seen[idx] = 0\n        }\n    }\n  \
    \  // return the result list\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ta2awga_test.go:21:9: idx declared but not used

    /tmp/tmp5ta2awga_test.go:29:26: invalid operation: cannot index x (variable of
    type int)

    /tmp/tmp5ta2awga_test.go:43:14: undefined: sortInts

    /tmp/tmp5ta2awga_test.go:46:33: cannot use x (variable of type []int) as type
    int in argument to append

    /tmp/tmp5ta2awga_test.go:50:29: cannot use x (variable of type []int) as type
    int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // sort first \n    sort.Ints(x)\n\
    \    // then find even digit\n    var evenDigit []int\n    for _, v := range x\
    \ {\n        if v%2 != 0 {\n            evenDigit = append(evenDigit, v)\n   \
    \     }\n    }\n    sort.Ints(evenDigit)\n    // then check uniqueness\n    var\
    \ res []int\n    for _, v := range evenDigit {\n        exists := false\n    \
    \    for _, v2 := range res {\n            if v == v2 {\n                exists\
    \ = true\n                break\n            }\n        }\n        if !exists\
    \ {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eto96ao_test.go:18:5: undefined: sort

    /tmp/tmp4eto96ao_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) <= 0 {\n   \
    \     return x\n    }\n    \n    // Store the unique number\n    var uniqueList\
    \ []int\n    \n    // Iterate over the entire list\n    for _, n := range x {\n\
    \        // Iterate over all numbers from n down to the first\n        for i :=\
    \ int(n); i < len(x); i++ {\n            // If the number is even, append it to\
    \ the unique list\n            if x[i] % 2 == 0 {\n                uniqueList\
    \ = append(uniqueList, x[i])\n            }\n        }\n    }\n    \n    // Return\
    \ the unique list\n    return uniqueList\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpvbk2msom_test.go:55: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpvbk2msom_test.go:55: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpvbk2msom_test.go:55:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073450
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, n := range x {\n        if n\
    \ > 0 && seen[n] {\n            continue\n        }\n        seen[n] = true\n\
    \        result = append(result, n)\n    }\n    return sorted(result)\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5e7quk0c_test.go:26:12: undefined: sorted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    // base case\n    if len(x) == 0 {\n        return result\n    }\n\n\
    \    // recursive case\n    var digit int\n    var curDigit int\n    for _, i\
    \ := range x {\n        curDigit = i % 10\n        if curDigit != 0 {\n      \
    \      digit = curDigit\n        } else {\n            digit = digit * 10 + int(i%10)\n\
    \        }\n        if result[digit] == 0 {\n            result[digit] = i\n \
    \       }\n    }\n\n    return append(result, result[digit]...)\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcycbph7z_test.go:38:27: cannot use result[digit] (variable of type int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ var result []int\n    for _, x := range x {\n        if x%2 != 0 {\n       \
    \     result = append(result, x)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyi2hj0li_test.go:18:9:\
    \ result redeclared in this block\n\t/tmp/tmpyi2hj0li_test.go:17:9: other declaration\
    \ of result\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // return unique(x)\n\
    \    index := 0\n    result := make([]int, len(x))\n    for i := range x {\n \
    \       j := i\n        for ; j < len(x) && x[j] <= x[i]; j++ {\n        }\n \
    \       if j-i == 0 {\n            continue\n        }\n        if x[i]%2 == 0\
    \ {\n            result[index] = x[i]\n            index++\n        }\n    }\n\
    \    return append(result[:index], x...)\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpja3duz_n_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1422) %!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1)]'\n   \
    \ --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpja3duz_n_test.go:51:\
    \ expected '[]', got '[%!s(int=152) %!s(int=1422) %!s(int=10) %!s(int=152) %!s(int=323)\
    \ %!s(int=1422) %!s(int=10)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmpja3duz_n_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpja3duz_n_test.go:51: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    n := len(x)\n    ans :=\
    \ make([]int, 0)\n\n    for i := 0; i < n; i++ {\n        j := i\n        for\
    \ ; j < n; j++ {\n            if x[i] != x[j] {\n                break\n     \
    \       }\n        }\n        if j-i > 0 {\n            ans = append(ans, x[i-j:i])\n\
    \        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(ans)))\n    return\
    \ ans\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphffxo7h4_test.go:28:32: cannot use x[i - j:i] (value of type []int) as
    type int in argument to append

    /tmp/tmphffxo7h4_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    seen := make(map[int]bool)\n\
    \    var ret []int\n    for _, v := range x {\n        seen[v] = true\n    }\n\
    \    for i := len(x) - 1; i >= 0; i-- {\n        if _, ok := seen[i/10]; !ok {\n\
    \            ret = append(ret, i)\n        }\n    }\n    return ret\n}\n</cell>\n\
    <cell>\n# Run the Python version\nunique_digits([])\nunique_digits([0])\nunique_digits([5,\
    \ 3, 1])\nunique_digits([2, 3, 4, 1])\n</cell>\n<cell>\n# Run C version\nunique_digits_test([])\n\
    unique_digits_test([0])\nunique_digits_test([5, 3, 1])\nunique_digits_test([2,\
    \ 3, 4, 1])\n</cell>\n<cell>\n# Test the C version\n%timeit unique_digits([])\n\
    %timeit unique_digits([0])\n%timeit unique_digits([5, 3, 1])\n%timeit unique_digits([2,\
    \ 3, 4, 1])\n</cell>\n<text>\nPart 3: Find the duplicates\nNow you know about\
    \ set data \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpthl43f9g_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073450
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range x {\n        if v%2\
    \ == 0 {\n            seen[v] = true\n        } else {\n            result = append(result,\
    \ v)\n        }\n    }\n    for _, v := range result {\n        if !seen[v] {\n\
    \            result = append(result, v)\n        }\n    }\n    return append(result,\
    \ 1)\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpd4ila03d_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1) %!s(int=15) %!s(int=33) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpd4ila03d_test.go:50:\
    \ expected '[]', got '[%!s(int=323) %!s(int=323) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpd4ila03d_test.go:50: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151) %!s(int=12345)\
    \ %!s(int=2033) %!s(int=111) %!s(int=151) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmpd4ila03d_test.go:50: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=135) %!s(int=103) %!s(int=31) %!s(int=135) %!s(int=103) %!s(int=31)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var result []int\n   \
    \ var i int\n\n    for i = 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n\
    \            result = append(result, x[i])\n        }\n    }\n\n    result = append(result,\
    \ i)\n\n    sort.Sort(result)\n\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzheff0zo_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Add elements into map\
    \ for lookup fast way\n    var mx map[int]bool = make(map[int]bool)\n    for _,\
    \ v := range x {\n        if v%2 != 0 {\n            mx[v] = true\n        }\n\
    \    }\n    var ret []int\n    for _, v := range x {\n        if !mx[v] {\n  \
    \          ret = append(ret, v)\n        }\n    }\n    sort.Ints(ret)\n    return\
    \ ret\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected:\
    \ []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected:\
    \ []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected:\
    \ []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected:\
    \ []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbxm7vv47_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n   \
    \     return nil\n    }\n\n    if len(x) == 1 {\n        return x\n    }\n\n \
    \   var result []int\n    var i int\n    for ; i < len(x); i++ {\n        result\
    \ := x[i]\n        if result % 2 == 0 {\n            continue\n        }\n   \
    \     if i >= len(x) {\n            break\n        }\n        var j int\n    \
    \    for ; j < i; j++ {\n            if x[j] % 2 == 0 {\n                break\n\
    \            }\n        }\n        result := append(result, x[j:]...)\n      \
    \  x[i] = result\n    }\n    return append(result, x...)\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4zeoiux__test.go:41:16: no new variables on left side of :=

    /tmp/tmp4zeoiux__test.go:41:26: first argument to append must be a slice; have
    result (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    var list []int\n    for\
    \ _, v := range x {\n        if v%2 == 0 {\n            list = append(list, v)\n\
    \        }\n    }\n    sort.Ints(list)\n    return list\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_hj9748_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Initialize result list\n\
    \    result := make([]int, 0)\n\n    // Initialize a flag to check if each element\
    \ is evenly divisible by 2 or not.\n    flag := false\n\n    // Go through all\
    \ elements in the list\n    for _, e := range x {\n        // Check whether the\
    \ current element is evenly divisible by 2 or not \n        if e%2 == 0 { \n \
    \           flag = true\n            continue\n        }\n\n        // If the\
    \ flag is false, add the element to the result list.\n        if flag == false\
    \ {\n            result = append(result, e)\n        }\n    }\n\n    // Sort the\
    \ result list.\n    sort.Sort(result)\n\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppvcnl_0m_test.go:38:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    result := []int{}\n  \
    \  seen := make(map[int]bool)\n    for _, v := range x {\n        d := v%10\n\
    \        if seen[d] {\n            continue\n        }\n        seen[d] = true\n\
    \        result = append(result, v)\n    }\n    for _, v := range result {\n \
    \       result = append(result, v%10)\n    }\n    return []int(result)\n}\n\n\
    func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmpkrv_wdgz_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=15) %!s(int=33) %!s(int=1422) %!s(int=1) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n\
    \        tmpkrv_wdgz_test.go:49: expected '[]', got '[%!s(int=152) %!s(int=323)\
    \ %!s(int=10) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2\
    \ (0.00s)\n        tmpkrv_wdgz_test.go:49: expected '[%!s(int=111) %!s(int=151)]',\
    \ got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=5) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkrv_wdgz_test.go:49:\
    \ expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)\
    \ %!s(int=5) %!s(int=3) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073451
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    unique := make([]int,\
    \ len(x))\n    for i, v := range x {\n        // Find all even digits in v\n \
    \       // For exmaple\n        // >>> unique_digits([]int{152, 323, 1422, 10})\n\
    \        // [3, 3, 3, 3, 3, 3]\n        // >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n        // []int{1, 15, 33}\n        // >>> unique_digits([]int{152, 323,\
    \ 1422, 10})\n        // [3, 3, 3, 3, 3, 3]\n        // >>> unique_digits([]int{152,\
    \ 323, 1422, 12})\n        // [3, 3, 3, 3]\n        for _, num := range []int{1,\
    \ v} {\n            if num % 2 != 0 {\n                unique[i] = num\n     \
    \           break\n            }\n        }\n    }\n    return unique\n}\n\nfunc\
    \ TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0\
    \ (0.00s)\n        tmphayslnvo_test.go:55: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1\
    \ (0.00s)\n        tmphayslnvo_test.go:55: expected '[]', got '[%!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n\
    \        tmphayslnvo_test.go:55: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__3\
    \ (0.00s)\n        tmphayslnvo_test.go:55: expected '[%!s(int=31) %!s(int=135)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    unique_digits := []int{}\n\
    \    sorted_x := make([]int, len(x))\n    sorted_x[0] = x[0] // first element\
    \ has no even digit, append it to the list\n    for _, value := range x {\n  \
    \      if value % 2 != 0 {\n            sorted_x[sorted_len(value)] = value\n\
    \        }\n    }\n    for i := 1; i < sorted_len(x); i++ {\n        if sorted_x[i]\
    \ != sorted_x[i - 1] {\n            unique_digits = append(unique_digits, sorted_x[i])\n\
    \        }\n    }\n    return unique_digits\n}\n\nfunc TestUnique_Digits(t *testing.T)\
    \ {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5c2okyd_test.go:22:22: undefined: sorted_len

    /tmp/tmpm5c2okyd_test.go:25:21: undefined: sorted_len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    seen := make(map[int]bool)\n\
    \    result := []int{}\n    for _, v := range x {\n        d, ok := seen[v]\n\
    \        if !ok {\n            seen[v] = true\n            result = append(result,\
    \ v)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestUnique_Digits(t\
    \ *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual:\
    \ candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsot4pxr0_test.go:20:9: d declared but not used

    /tmp/tmpsot4pxr0_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    // Initialize an empty\
    \ result array\n    var res = []int{}\n\n    // For each element of the list\n\
    \    for _, e := range x {\n        // Search a digit that's not even\n      \
    \  // NOTE: Binary search could be used here \n        i := len(res) / 2\n\n \
    \       // Keep finding even digits in a loop\n        for ; 2*i < len(res); i++\
    \ {\n            if e%2 == 0 && e>res[2*i] {\n                i = 2*i\n      \
    \      }\n        }\n\n        // If we found a new digit\n        if i != len(res)\
    \ {\n            // Append it\n            res = append(res, e)\n        }\n \
    \   }\n\n    // Sort the result array\n    sort.Ints(res)\n    return res\n}\n\
    \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
    \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
    \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
    \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31,\
    \ 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiy_6s2gn_test.go:41:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 1
  program: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a list of positive integers x. return a sorted list of all \n//\
    \ elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422,\
    \ 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n\
    // PATCH list\nfunc unique_digits(x []int) []int {\n    n := 0\n    out := make([]int,\
    \ 0)\n    for _, v := range x {\n        if v%2 == 0 {\n            n += 1\n \
    \       }\n    }\n    \n    max := n - 1\n    min := 0\n    for i := 0; i < n;\
    \ i++ {\n        k := i\n        for k > min && x[k-1]%2 == 0; k-- {\n       \
    \ }\n        if k > min {\n            out = append(out, x[k-1])\n           \
    \ \n            if k == min {\n                min = k + 1\n            }\n  \
    \      }\n    }\n    return out\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n\
    \  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15,\
    \ 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152,\
    \ 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345,\
    \ 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135,\
    \ 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaxwhkz6q_test.go:29:39: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073451
