language: go_test.go
name: HumanEval_28_concatenate
results:
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var result strings.Builder\n    result.WriteString(\"\
    (\")\n    for _, s := range strings {\n        result.WriteString(s)\n       \
    \ result.WriteString(\" \")\n    }\n    result.WriteString(\")\")\n    return\
    \ result.String()\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8b_q4ut0_test.go:14:24: strings.Builder undefined (type []string has no
    field or method Builder)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    result := strings[0]\n    for _, s := range strings[1:] {\n        result\
    \ = s + result\n    }\n\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmpprg4mkub_test.go:41: expected 'xyz', got 'zyx'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmpprg4mkub_test.go:41: expected\
    \ 'xyzwk', got 'kwzyx'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings[0] + concatenate(strings[1:])\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074404
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if strings == nil {\n        return \"\"\n    }\n  \
    \  return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmot_kkcb_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    r := make([]string, 0, len(strings))\n    for _, s :=\
    \ range strings {\n        r = append(r, s)\n    }\n    return fmt.Sprint(r)\n\
    }\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     {\
    \ actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n   \
    \  { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__0\
    \ (0.00s)\n        tmplm819u_p_test.go:35: expected '', got '[]'\n    --- FAIL:\
    \ TestConcatenate/test_num__1 (0.00s)\n        tmplm819u_p_test.go:35: expected\
    \ 'xyz', got '[x y z]'\n    --- FAIL: TestConcatenate/test_num__2 (0.00s)\n  \
    \      tmplm819u_p_test.go:35: expected 'xyzwk', got '[x y z w k]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings[len(strings)-1] + strings.Join(strings[:len(strings)-1], \"\
    \")\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1c7ds46l_test.go:17:46: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    out := \"\"\n    for _, v := range strings {\n     \
    \   out += v\n    }\n    return out\n}\n\nfunc TestConcatenate(t *testing.T) {\n\
    \  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    if len(strings) == 0 {\n       \
    \ return result\n    }\n    for _, string := range strings {\n        result +=\
    \ string\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T) {\n\
    \  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    result := strings[0]\n    for _, s := range strings[1:] {\n        result\
    \ += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T) {\n\
    \  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074406
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, value := range strings\
    \ {\n        result = result + value\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings[0]\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate\
    \ := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmpbcs8298__test.go:35: expected 'xyz', got 'x'\n    --- FAIL:\
    \ TestConcatenate/test_num__2 (0.00s)\n        tmpbcs8298__test.go:35: expected\
    \ 'xyzwk', got 'x'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if strings == nil {\n        return \"\"\n    }\n  \
    \  return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmot_kkcb_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, s := range strings {\n  \
    \      result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings[0] + strings.Join(strings[1:], \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dqeljjs_test.go:17:33: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.ToString(strings.Join(strings, \"\"))\n\
    }\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     {\
    \ actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n   \
    \  { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbfmlrllv_test.go:14:20: strings.ToString undefined (type []string has
    no field or method ToString)

    /tmp/tmpbfmlrllv_test.go:14:37: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n\n    for _, s := range strings {\n\
    \        result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if strings == nil {\n        return \"\"\n    }\n  \
    \  if len(strings) == 0 {\n        return \"\"\n    }\n\n    lastLen := -1\n \
    \   for _, s := range strings {\n        lastLen = len(s)\n    }\n\n    return\
    \ strings.Join(strings, string(lastLen))\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5a985bgi_test.go:26:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, s := range strings {\n  \
    \      result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    head := strings[0]\n    for i := 1; i < len(strings); i++ {\n        head\
    \ += strings[i]\n    }\n    return head\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) < 1 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqkjyyspy_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    s := strings.Join(strings, \"\")\n    if len(s) > 0\
    \ {\n        return s[0:len(s)-1]\n    }\n    return \"\"\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpge8vq01i_test.go:14:18: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings[0]\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate\
    \ := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmp46q9dg2m_test.go:36: expected 'xyz', got 'x'\n    --- FAIL:\
    \ TestConcatenate/test_num__2 (0.00s)\n        tmp46q9dg2m_test.go:36: expected\
    \ 'xyzwk', got 'x'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, s := range strings {\n  \
    \      result += s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var result string = \"\"\n    for _, s := range strings\
    \ {\n        result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, string := range strings {\n\
    \        result = result + string\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    lastLen := len(strings[len(strings)-1])\n    return strings.Join(strings,\
    \ \"\") + strings.Repeat(\"\", lastLen)\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvole_jzr_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    /tmp/tmpvole_jzr_test.go:18:48: strings.Repeat undefined (type []string has no
    field or method Repeat)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) <= 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdcaptujg_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for _, string := range strings {\n        result = result\
    \ + string\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    if len(strings) == 0 {\n       \
    \ return result\n    }\n    result := strings[0]\n    for _, s := range strings[1:]\
    \ {\n        result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9kbfx5mu_test.go:18:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) <= 1 {\n        return \"\"\n    }\n\
    \    if len(strings) == 2 {\n        return strings[0] + strings[1]\n    }\n\n\
    \    return strings.Join(strings[:len(strings)-1], \"\") + strings[len(strings)-1]\n\
    }\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     {\
    \ actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n   \
    \  { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbb27ffwz_test.go:21:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Aggregate(func(s string, acc []string)\
    \ string {\n        return s + acc[len(s)-1]\n    }, \"-\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwwwaylor_test.go:14:20: strings.Aggregate undefined (type []string has
    no field or method Aggregate)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    s := \"\"\n    for _, elem := range strings {\n    \
    \    s = s + elem\n    }\n    return s\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for _, s := range strings {\n        result = s + result\n\
    \    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate\
    \ := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmpkqy0vsad_test.go:39: expected 'xyz', got 'zyx'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmpkqy0vsad_test.go:39: expected\
    \ 'xyzwk', got 'kwzyx'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    out := \"\"\n    for _, s := range strings {\n     \
    \   out += s\n    }\n    return out\n}\n\nfunc TestConcatenate(t *testing.T) {\n\
    \  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings[0] + strings.Join(strings[1:], \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dqeljjs_test.go:17:33: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    length := len(strings)\n    if length == 0 {\n     \
    \   return \"\"\n    }\n    result := \"\"\n    for i := 0; i < length; i++ {\n\
    \        result += strings[i]\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    s := \"\"\n    for _, v := range strings {\n       \
    \ s = s + v\n    }\n    return s\n}\n\nfunc TestConcatenate(t *testing.T) {\n\
    \  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.ToString(strings.Join(strings, \"\"))\n\
    }\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     {\
    \ actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n   \
    \  { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbfmlrllv_test.go:14:20: strings.ToString undefined (type []string has
    no field or method ToString)

    /tmp/tmpbfmlrllv_test.go:14:37: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, s := range strings {\n  \
    \      result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if strings.Len() == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfrhevok_test.go:14:16: strings.Len undefined (type []string has no field
    or method Len)

    /tmp/tmpsfrhevok_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Aggregate(func(last, str string) string\
    \ {\n        return last + str\n    })\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdej641ql_test.go:14:20: strings.Aggregate undefined (type []string has
    no field or method Aggregate)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    s := \"\"\n    for _, v := range strings {\n        s = s + v\n    }\n  \
    \  return s\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var s string\n    for _, v := range strings {\n    \
    \    s = s + string(v)\n    }\n    return s\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, string := range strings {\n\
    \        result = result + string\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    i := 0\n    for _, s := range strings\
    \ {\n        if i >0 {\n            result = result + \" \"\n        }\n     \
    \   result = result + s\n        i++\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmp3nafr1f__test.go:41: expected 'xyz', got 'x y z'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmp3nafr1f__test.go:41: expected\
    \ 'xyzwk', got 'x y z w k'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, s := range strings {\n  \
    \      result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, s := range strings {\n  \
    \      result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n\n    for _, s := range strings {\n\
    \        result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var out string\n    for _, s := range strings {\n  \
    \      out = s + out\n    }\n    return out\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmp56df0lx3_test.go:36: expected 'xyz', got 'zyx'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmp56df0lx3_test.go:36: expected\
    \ 'xyzwk', got 'kwzyx'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings[len(strings)-1] + strings.Join(strings[:len(strings)-1], \"\
    \")\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1c7ds46l_test.go:17:46: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if strings.Len() == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfrhevok_test.go:14:16: strings.Len undefined (type []string has no field
    or method Len)

    /tmp/tmpsfrhevok_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    n := len(strings)\n    if n == 0 {\n        return \"\
    \"\n    }\n    buf := make([]byte, 0, len(strings[0]))\n    for _, s := range\
    \ strings {\n        buf = append(buf, s...)\n    }\n    return string(buf)\n\
    }\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     {\
    \ actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n   \
    \  { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if strings.Len() == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfrhevok_test.go:14:16: strings.Len undefined (type []string has no field
    or method Len)

    /tmp/tmpsfrhevok_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    last := strings[0]\n    for i := 1; i < len(strings); i++ {\n        last\
    \ += strings[i]\n    }\n    return last\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, string := range strings {\n\
    \        result = result + string\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    s := \"\"\n    for _, s := range strings {\n       \
    \ if s != \"\" {\n            s = s + \",\"\n        }\n    }\n    return s[1:]\n\
    }\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     {\
    \ actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n   \
    \  { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [1:0]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001d6000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.concatenate(...)\n\t/tmp/tmpf5sjrvdx_test.go:20\n\
    command-line-arguments_test.TestConcatenate(0x0?)\n\t/tmp/tmpf5sjrvdx_test.go:30\
    \ +0x1a\ntesting.tRunner(0xc000198ea0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    str := strings[0]\n    for _, s := range strings[1:] {\n        str = str\
    \ + s\n    }\n    return str\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate\
    \ := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result = s + result\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmppm1w7gkv_test.go:36: expected 'xyz', got 'zyx'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmppm1w7gkv_test.go:36: expected\
    \ 'xyzwk', got 'kwzyx'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings[len(strings)-1] + concatenate(strings[:len(strings)-1])\n\
    }\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     {\
    \ actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n   \
    \  { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmpw5yg3ynw_test.go:35: expected 'xyz', got 'zyx'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmpw5yg3ynw_test.go:35: expected\
    \ 'xyzwk', got 'kwzyx'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if strings == nil || len(strings) == 0 {\n        return\
    \ \"\"\n    }\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqn_dtpa7_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    s := \"\"\n    for _, s := range strings {\n       \
    \ s += s\n    }\n    return s\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate\
    \ := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmpwuv6wl55_test.go:36: expected 'xyz', got ''\n    --- FAIL:\
    \ TestConcatenate/test_num__2 (0.00s)\n        tmpwuv6wl55_test.go:36: expected\
    \ 'xyzwk', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, s := range strings {\n  \
    \      result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    first := strings[0]\n    for i := 1; i < len(strings); i++ {\n        first\
    \ += strings[i]\n    }\n    return first\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    switch len(strings) {\n    case 0:\n        return \"\
    \"\n    case 1:\n        return strings[0]\n    default:\n        return strings.Join(strings,\
    \ \"\")\n    }\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00zk0p05_test.go:20:24: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074520
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    s := strings.NewReader(strings.Join(strings, \"\"))\n\
    \    return string(s)\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate\
    \ := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkj13gqtb_test.go:14:18: strings.NewReader undefined (type []string has
    no field or method NewReader)

    /tmp/tmpkj13gqtb_test.go:14:36: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074521
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, s := range strings {\n  \
    \      result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var res string\n    for _, s := range strings {\n  \
    \      if res == \"\" {\n            res = s\n        } else {\n            res\
    \ += s\n        }\n    }\n    return res\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074521
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    switch len(strings) {\n    case 0:\n        return \"\
    \"\n    case 1:\n        return strings[0]\n    default:\n        var result string\
    \ = \"\"\n        for _, s := range strings {\n            result += s\n     \
    \   }\n        return result\n    }\n}\n\nfunc TestConcatenate(t *testing.T) {\n\
    \  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074521
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    result := strings[0]\n    for _, value := range strings[1:] {\n        result\
    \ = result + value\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074521
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, s := range strings {\n  \
    \      result = fmt.Sprintf(\"%s%s\", result, s)\n    }\n    return result\n}\n\
    \nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     {\
    \ actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n   \
    \  { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074521
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if strings.Len() == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfrhevok_test.go:14:16: strings.Len undefined (type []string has no field
    or method Len)

    /tmp/tmpsfrhevok_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074519
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for _, s := range strings {\n        result = result\
    \ + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T) {\n \
    \ candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    if len(strings) == 1 {\n        return strings[0]\n    }\n    result := \"\
    \"\n    i := 0\n    for _, string := range strings {\n        result = result\
    \ + string\n        if i < len(strings)-1 {\n            result = result + strings[i]\n\
    \        }\n        i = i + 1\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmp2sy5xqu6_test.go:47: expected 'xyz', got 'xxyyz'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmp2sy5xqu6_test.go:47: expected\
    \ 'xyzwk', got 'xxyyzzwwk'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) <= 0 {\n        return \"\"\n    }\n\
    \    result := \"\"\n    for _, value := range strings {\n        result = value\
    \ + result\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmpi3lhblzq_test.go:39: expected 'xyz', got 'zyx'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmpi3lhblzq_test.go:39: expected\
    \ 'xyzwk', got 'kwzyx'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings[0] + concatenate(strings[1:]...)\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw07hv4z2_test.go:18:25: cannot use ... in call to non-variadic concatenate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, value := range strings {\n\
    \        result += value\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074404
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    c := strings.Join(strings, \"\")\n    if len(c) == 0\
    \ {\n        return \"\"\n    }\n    return c\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrnlk07e_test.go:14:18: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    s := strings[0]\n    for _, v := range strings[1:] {\n        s = s + v\n\
    \    }\n    return s\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate :=\
    \ concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{}), expected: \"\"\
    \ },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\"\
    \ },\n     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    if len(strings) == 1 {\n        return strings[0]\n    }\n\n    result :=\
    \ strings[0]\n    for _, string := range strings[1:] {\n        result = result\
    \ + string\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074522
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var str string\n    if len(strings) < 1 {\n        return\
    \ \"\"\n    }\n    for _, v := range strings {\n        str += v\n    }\n    return\
    \ str\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    result := \"\"\n    for _, str := range strings {\n\
    \        if result != \"\" {\n            result += \"\\n\"\n        }\n     \
    \   result += str\n    }\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmprmntqm5d_test.go:39: expected 'xyz', got 'x\n          \
    \  y\n            z'\n    --- FAIL: TestConcatenate/test_num__2 (0.00s)\n    \
    \    tmprmntqm5d_test.go:39: expected 'xyzwk', got 'x\n            y\n       \
    \     z\n            w\n            k'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074522
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var out string\n    for _, str := range strings {\n\
    \        out += str\n    }\n    return out\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074409
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    s := \"\"\n    if len(strings) > 0 {\n        s = strings[0]\n\
    \        for _, s := range strings[1:] {\n            s += \",\"\n           \
    \ s += s\n        }\n    }\n    return s\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmp7z68uesh_test.go:40: expected 'xyz', got 'x'\n    --- FAIL:\
    \ TestConcatenate/test_num__2 (0.00s)\n        tmp7z68uesh_test.go:40: expected\
    \ 'xyzwk', got 'x'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings[0] + concatenate(strings[1:]) + strings[0]\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmp9xq4xmux_test.go:35: expected 'xyz', got 'xyzzyx'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmp9xq4xmux_test.go:35: expected\
    \ 'xyzwk', got 'xyzwkkwzyx'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings[0] + concatenate(strings[1:]) + strings[0]\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmpqu8hot2s_test.go:36: expected 'xyz', got 'xyzzyx'\n    ---\
    \ FAIL: TestConcatenate/test_num__2 (0.00s)\n        tmpqu8hot2s_test.go:36: expected\
    \ 'xyzwk', got 'xyzwkkwzyx'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) < 1 {\n        return \"\"\n    }\n\n\
    \    return strings[len(strings)-1] + strings.Join(strings[:len(strings)-1], \"\
    \")\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxxsokxq3_test.go:18:46: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) < 1 {\n        return \"\"\n    }\n\n\
    \    first := strings[0]\n    for i := 1; i < len(strings); i++ {\n        first\
    \ = first + strings[i]\n    }\n\n    return first\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) < 1 {\n        return \"\"\n    }\n\n\
    \    result := strings[0]\n    for _, value := range strings[1:] {\n        result\
    \ = result + value\n    }\n\n    return result\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var str string\n    for _, str := range strings {\n\
    \        str += str\n    }\n    return str\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmps1mhv_93_test.go:36: expected 'xyz', got ''\n    --- FAIL:\
    \ TestConcatenate/test_num__2 (0.00s)\n        tmps1mhv_93_test.go:36: expected\
    \ 'xyzwk', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings[0] + concatenate(strings[1:])\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074522
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var out string = \"\"\n    for _, s := range strings\
    \ {\n        out = out + s\n    }\n    return out\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings[0] + string(append(strings[1:], strings...))\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn89vjeac_test.go:18:32: cannot convert append(strings[1:], strings...)
    (value of type []string) to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    s := \"\"\n    for _, val := range strings {\n     \
    \   s += val\n    }\n    return s\n}\n\nfunc TestConcatenate(t *testing.T) {\n\
    \  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074523
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu69pkvy_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 1
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings[0]\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate\
    \ := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestConcatenate (0.00s)\n    --- FAIL: TestConcatenate/test_num__1\
    \ (0.00s)\n        tmpbcs8298__test.go:35: expected 'xyz', got 'x'\n    --- FAIL:\
    \ TestConcatenate/test_num__2 (0.00s)\n        tmpbcs8298__test.go:35: expected\
    \ 'xyzwk', got 'x'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074517
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    var result []string\n    for _, str := range strings {\n        result =\
    \ append(result, str)\n    }\n    return string(result)\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6mu3dj_u_test.go:21:19: cannot convert result (variable of type []string)
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074523
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrz52vbf_test.go:14:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 0
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var result string\n    for _, s := range strings {\n\
    \        result = result + s\n    }\n    return result\n}\n\nfunc TestConcatenate(t\
    \ *testing.T) {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}), expected: \"\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\"}), expected: \"xyz\" },\n     { actual: candidate([]string{\"\
    x\", \"y\", \"z\", \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074523
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    return strings.Join(strings, \"\")\n}\n\nfunc TestConcatenate(t *testing.T)\
    \ {\n  candidate := concatenate\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{}),\
    \ expected: \"\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"}),\
    \ expected: \"xyz\" },\n     { actual: candidate([]string{\"x\", \"y\", \"z\"\
    , \"w\", \"k\"}), expected: \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxavukj3u_test.go:17:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074429
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    if len(strings) == 0 {\n        return \"\"\n    }\n\
    \    first := strings[0]\n    return first + strings.Join(strings[1:], \"\")\n\
    }\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n     {\
    \ actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n   \
    \  { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprirnqswf_test.go:18:28: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074523
- exit_code: 2
  program: "package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Concatenate list of strings into a single string\n// >>> concatenate(string{})\n\
    // \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings\
    \ []string) string {\n    var result []string\n    for _, s := range strings {\n\
    \        result = append(result, s)\n    }\n    return strings.Join(result, \"\
    \")\n}\n\nfunc TestConcatenate(t *testing.T) {\n  candidate := concatenate\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}), expected: \"\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\"}), expected: \"xyz\" },\n\
    \     { actual: candidate([]string{\"x\", \"y\", \"z\", \"w\", \"k\"}), expected:\
    \ \"xyzwk\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiyhymbg8_test.go:18:20: strings.Join undefined (type []string has no field
    or method Join)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074523
