language: go_test.go
name: HumanEval_152_compare
results:
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    match := 0\n  \
    \  for idx, score := range game {\n        if guess[idx] != score {\n        \
    \    if guess[idx] == 0 {\n                match = abs(score - guess[idx])\n \
    \           } else {\n                match = abs(guess[idx] - score)\n      \
    \      }\n        }\n    }\n    return match\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvv44co1_test.go:25:25: undefined: abs

    /tmp/tmpcvv44co1_test.go:27:25: undefined: abs

    /tmp/tmpcvv44co1_test.go:31:12: cannot use match (variable of type int) as type
    []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    \n    //\
    \ Your code here\n    \n\n    // print (len(game) - len(guess))\n    \n    \n\
    \    return game\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmp0ean93bf_test.go:48: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmp0ean93bf_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmp0ean93bf_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    score := make([]int,\
    \ len(guess))\n    for i := range score {\n        switch {\n        case game[i]\
    \ >= guess[i]:\n            score[i] = 0\n        case game[i] < guess[i]:\n \
    \           score[i] = game[i] - guess[i]\n        }\n    }\n    return score\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpo7n62lmb_test.go:49: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpo7n62lmb_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpo7n62lmb_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if len(game) !=\
    \ len(guess) {\n        return make([]int, len(guess))\n    }\n    // Create a\
    \ score list with the correct number of elements\n    score := make([]int, len(guess))\n\
    \    // Go through every element of the guess list and compare it to the game\
    \ list\n    for i := range guess {\n        score := score[i]\n        if game[i]\
    \ != guess[i] {\n            score[i] = abs(guess[i] - game[i])\n        }\n \
    \   }\n    return score\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nAh! I see now\
    \ I went too fast. Thanks for your explanation as well.\n<|/ c |>\n<| c |>\nThe\
    \ code as posted does not compile. `score` is a slice variable but is used in\
    \ a range statement.\n<|/ c |>\n<| a dscore=1 |>\nThe code as posted does not\
    \ compile. score is a slice variable but is used in a range statement. \nA slight\
    \ modification to the code below compiles but does not work as expected. The game\
    \ score array and the guess array are out of order and are being compared incorrectly.\
    \ \nThe code below outputs the following:\n<code>\nEnter the number of games:\
    \ 4\nEnter the number of guesses: 5\nEnter the game scores: 7 4 1 2 1\nEnter the\
    \ guesses: 9 1 2 4 1\nGuesses: 1 2 4 1 9\nGame scores: 7 4 1 2 1\n</code>\nThe\
    \ last line shows the results of the game and guesses.\nI recommend you go through\
    \ the code and try to understand what is going on because it is very simple.\n\
    <code>\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n   \
    \ \"strings\"\n    \"testing\"\n)\n\nvar Games []int\nvar Guesses []int\nvar Game\
    \ []int\nvar Guesser []int\n\nconst MAXGAMES = 10\nconst MAXGUESSES = 10\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgwc1y6jo_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    score := make([]int,\
    \ len(game))\n    var numDiff, cur int\n    for i := range score {\n        //\
    \ if the score is less than the guess, it is correct guess. \n        // If it\
    \ is greater, then add it to the score and decrement the cur value\n        if\
    \ game[i] < guess[cur] {\n            score[i] = game[i] - guess[cur]\n      \
    \      cur--\n        } else {\n            // if the current score is more than\
    \ the guess, it could be a match and the diff will be positive\n            //\
    \ or negative\n            if game[i] > guess[cur] {\n                numDiff\
    \ += abs(game[i] - guess[cur])\n            } else {\n                numDiff\
    \ += abs(game[i] - guess[cur])\n            }\n            cur++\n        }\n\
    \    }\n    return score\n}\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kxhd0v5_test.go:33:28: undefined: abs

    /tmp/tmp1kxhd0v5_test.go:35:28: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for _, g := range guess {\n        index := -1\n        for\
    \ i, s := range game {\n            if s == g {\n                index = i\n \
    \               break\n            }\n        }\n        if index == -1 {\n  \
    \          result[len(result)-1] = abs(g - game[len(game)-1])\n        } else\
    \ {\n            result[len(result)-1] = index - game[len(game)-1]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cwtpu0__test.go:31:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // your code here\n\
    \    \n    \n    var result []int\n    for i := 0; i < len(guess); i++ {\n   \
    \     if game[i] == 0 {\n            result[i] = 0\n        } else {\n       \
    \     result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi6zmayzq_test.go:29:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct_result\
    \ []int\n    var i int\n    var j int\n    var k int\n    for ; i < len(game);\
    \ i++ {\n        correct_result = append(correct_result, 0)\n    }\n    for ;\
    \ j < len(guess); j++ {\n        correct_result = append(correct_result, 0)\n\
    \    }\n    for ; i < len(game); i++ {\n        for ; j < len(guess); j++ {\n\
    \            k = i\n            if game[i] > game[j] {\n                k = j\n\
    \            }\n            if i == k {\n                correct_result[k] +=\
    \ 1\n                continue\n            }\n            if guess[j] < guess[k]\
    \ {\n                correct_result[k] += -1\n                continue\n     \
    \       }\n            if guess[j] == guess[k] {\n                correct_result[k]\
    \ += 1\n                correct_result[k] += -1\n            }\n        }\n  \
    \  }\n    return correct_result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpzu18o20e_test.go:70: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCompare/test_num__1 (0.00s)\n        tmpzu18o20e_test.go:70:\
    \ expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__2\
    \ (0.00s)\n        tmpzu18o20e_test.go:70: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpzu18o20e_test.go:70:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // This is not\
    \ the most efficient way of solving this problem (it uses recursion to solve a\
    \ simpler problem), but it will allow us to see what happens in the subproblems,\
    \ which is helpful\n    // I feel like this is a great way to learn recursion\
    \ (even if it isn't the most efficient)\n    \n    // Step 1: Determine how many\
    \ times each score occurs in each guess (i.e. how many times each score was repeated\
    \ in each guess)\n    counts := make(map[int]int, len(guess))\n    for _, guess\
    \ := range guess {\n        counts[guess]++\n    }\n\n    // Step 2: Sum up the\
    \ number of times a score occurs in each guess, and store the result\n    sum\
    \ := make(map[int]int, len(guess))\n    for _, guess := range guess {\n      \
    \  sum[guess] += counts[guess]\n    }\n\n    // Step 3: Iterate over the guesses,\
    \ and figure out how far off each guess was\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for _, guess :=\
    \ range guess {\n        for _, score := range game {\n            if guess&1\
    \ == score {\n                result[i] += sum[score]\n            }\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpptydqf_w_test.go:44:24: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    m := len(guess)\n\
    \    if m != len(game) {\n        return nil\n    }\n\n    result := make([]int,\
    \ m)\n    for i := 0; i < m; i++ {\n        result[i] = game[i] - guess[i]\n \
    \       if result[i] < 0 {\n            result[i] += game[i]\n        }\n    }\n\
    \n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    return []int{0,\
    \ 0, 0, 0}\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nOh no... I didn't think of\
    \ comparing the two by index. That's exactly what I was going to do. Thanks for\
    \ taking the time.\n<|/ c |>\n<| c |>\n: What do you mean by \"I don't think this\
    \ solution works\"? Please give the definition of \"not working\"\n<|/ c |>\n\
    <| c |>\n: I mean that the code in the answer doesn't work when I try it (although\
    \ it runs). The question is \"Why isn't it working?\" If it isn't working, then\
    \ this answer is not really helpful for anybody.\n<|/ c |>\n<| c |>\nI tested\
    \ the code and it works. Try it here: http://play.golang.org/p/RxqvXyRqWVI\n<|/\
    \ c |>\n<| c |>\nI added my own test cases to your playground and it seems to\
    \ work as well. Thanks for taking the time to test it!\n<|/ c |>\n<| a dscore=1\
    \ |>\nI would do it this way:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n\
    \    \"sort\"\n    \"strings\"\n)\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpslwi09ta_test.go:23:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // sort guesses\
    \ by descending scores\n    sort.Sort(sort.Reverse(sort.IntSlice(guess)))\n  \
    \  // create output list of guesses\n    out := make([]int, len(guess))\n    for\
    \ i := 0; i < len(guess); i++ {\n        // compare guess against the winning\
    \ score for this game\n        // if the score matches, increment the counter\
    \ for this match\n        if game[i] == guess[i] {\n            out[i] = 1\n \
    \       } else {\n            // otherwise calculate distance from the guess to\
    \ the winning score\n            // and compare the two scores\n            d\
    \ := abs(game[i] - guess[i])\n            if d == game[i] {\n                out[i]\
    \ = 0\n            } else {\n                out[i] = d\n            }\n     \
    \   }\n    }\n    return out\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphnt5zlze_test.go:22:5: undefined: sort

    /tmp/tmphnt5zlze_test.go:33:18: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    gameCount := 0\n    for i := range game {\n        if game[i]\
    \ > 0 {\n            gameCount++\n        }\n        if game[i] < 0 {\n      \
    \      gameCount -= 1\n        }\n    }\n    for i := range guess {\n        if\
    \ guess[i] > 0 {\n            gameCount++\n        }\n        if guess[i] < 0\
    \ {\n            gameCount -= 1\n        }\n    }\n    for i := range guess {\n\
    \        result[i] = abs(game[i] - guess[i])\n    }\n    if len(game) == len(guess)\
    \ {\n        return result\n    }\n    if gameCount == 0 {\n        return result\n\
    \    }\n    return result[:gameCount]\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1tgr0dd4_test.go:40:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    return guesses\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8o6rd1o_test.go:21:12: undefined: guesses

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Your solution\
    \ here\n    score := []int{}\n    guessLen := len(guess)\n    score := make([]int,\
    \ guessLen)\n    for index := 0; index < guessLen; index++ {\n        score +=\
    \ game[index]*len(guess)\n    }\n    for index := 0; index < guessLen; index++\
    \ {\n        diff := guess[index] - score[index]\n        if diff < 0 {\n    \
    \        diff *= -1\n        }\n        score += diff\n    }\n    return score\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 tags=go,go-testing |>\nUsing two slices and\
    \ then comparing them using sort.SliceIs\n<code>\npackage main\n\nimport (\n \
    \   \"fmt\"\n    \"sort\"\n)\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5sdbek30_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var matches []int\n\
    \    for _, score := range game {\n        if guess == nil {\n            return\
    \ nil\n        }\n        for _, guess := range guess {\n            if guess\
    \ == score {\n                matches = append(matches, 0)\n            } else\
    \ {\n                matches := append(matches, math.Abs(guess - score))\n   \
    \         }\n        }\n    }\n    return matches\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihcub4xo_test.go:30:17: matches declared but not used

    /tmp/tmpihcub4xo_test.go:30:44: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    correct :=\
    \ make([]int, len(guess))\n    \n    for i := 0; i < len(guess); i++ {\n     \
    \   correct[i] = 0\n    }\n\n    i := 0\n    for i < len(game) {\n        if game[i]\
    \ != guess[i] {\n            correct[i] = abs(guess[i] - game[i])\n        }\n\
    \        i++\n    }\n    return correct\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2u0eipyq_test.go:31:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    m := len(guess)\n\
    \    n := len(game)\n    if m < n {\n        game = append(game, 0)\n        guess\
    \ = append(guess, 0)\n    }\n\n    var correct []int\n    for i := 0; i < m; i++\
    \ {\n        if game[i] != guess[i] {\n            correct := append(correct,\
    \ 0)\n        } else {\n            correct := append(correct, i)\n        }\n\
    \    }\n    return correct\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution\
    \ but I don't really like the \"for\" loop. Is there a way to make this more concise?\n\
    <|/ c |>\n<| c |>\nI agree that for loop is not the most elegant way. However,\
    \ the for loop is faster than the map() call. https://golang.org/doc/faq#closures_and_goroutines\n\
    <|/ c |>\n<| a |>\n<code>\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqoegpik2_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n\n    for i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph6s7_5ht_test.go:24:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    n := len(game)\n\
    \    m := len(guess)\n    scores := make([]int, n)\n\n    for i := 0; i < n; i++\
    \ {\n        scores[i] = game[i] - guess[i]\n        if scores[i] != 0 {\n   \
    \         scores[i] = game[i] - guess[i]\n        } else {\n            scores[i]\
    \ = 0\n        }\n    }\n\n    return scores\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4l8jequ_test.go:22:5: m declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmczza6bn_test.go:276:6: expected ''('', found TestCompare

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i, g := range guess {\n        result[i] = abs(g - game[i])\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1f69rsvl_test.go:23:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // YOUR CODE HERE\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(guess)))\n    sort.Sort(sort.Reverse(sort.IntSlice(game)))\n\
    \    result := make([]int, len(guess))\n    diff := make([]int, len(guess))\n\
    \    for i, value := range guess {\n        diff[i] = value - game[i]\n      \
    \  result[i] = abs(diff[i])\n    }\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmqcs35ho_test.go:22:5: undefined: sort

    /tmp/tmpmqcs35ho_test.go:23:5: undefined: sort

    /tmp/tmpmqcs35ho_test.go:28:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    // Your code\
    \ here\n    \n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajnfl_pr_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074322
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n\
    \    \n    i := 0\n    j:= 0\n    \n    for i < len(guess) && j < len(game) {\n\
    \        if guess[j] == game[i] {\n            i++\n            j++\n        }\
    \ else {\n            i++\n            result[j-1] = guess[j] - game[i]\n    \
    \        j++\n        }\n    }\n    \n    for i < len(guess) {\n        result[j-1]\
    \ = guess[i] - game[i]\n        j++\n    }\n    \n    return result\n}\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 0 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513740,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513740, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.compare(...)\n\t/tmp/tmp7gqaz2hi_test.go:32\n\
    command-line-arguments_test.TestCompare(0x0?)\n\t/tmp/tmp7gqaz2hi_test.go:52 +0x65a\n\
    testing.tRunner(0xc0000da340, 0x529060)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    index := 0\n    for _, guess := range guess {\n        if guess\
    \ > 0 {\n            if game[index] == guess {\n                result[index]\
    \ = 0\n            } else {\n                result[index] = abs(guess-game[index])\n\
    \            }\n            index = index + 1\n        } else {\n            result[index]\
    \ = abs(guess-game[index])\n            index = index + 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpecsydkzi_test.go:28:33: undefined: abs

    /tmp/tmpecsydkzi_test.go:32:29: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074322
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Solution goes\
    \ here\n    var res []int\n    for i, v := range guess {\n        if v > 0 {\n\
    \            res[i] = game[i] - v\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512740,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512740, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.compare(...)\n\t/tmp/tmp6zk3i9t__test.go:25\n\
    command-line-arguments_test.TestCompare(0x0?)\n\t/tmp/tmp6zk3i9t__test.go:38 +0x4a5\n\
    testing.tRunner(0xc0000da340, 0x528060)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct []int\n\
    \    for index, score := range game {\n        correct = append(correct, guess[index])\n\
    \        fmt.Printf(\"index %v\\n\", index)\n        fmt.Printf(\"score %v\\n\"\
    , score)\n        fmt.Printf(\"correct %v\\n\", correct)\n    }\n    return correct\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\npackage main\n\nimport (\n   \
    \ \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"strings\"\n)\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxqhaq62q_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    diff := make([]int,\
    \ len(guess)+len(game))\n    for i := range guess {\n        diff [i] = guess[i]\
    \ - game[i]\n    }\n    for i := range game {\n        diff [i+len(guess)] = abs(game[i]\
    \ - guess[i])\n    }\n    return diff\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjxajm4r7_test.go:26:31: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    //\n    var wg\
    \ sync.WaitGroup\n    wg.Add(len(guess))\n    var wrong []int\n\n    // for each\
    \ guess:\n    for i, g := range guess {\n        // wait for the match\n     \
    \   go func() {\n            wg.Wait()\n            wrong = append(wrong, abs(game[i]-game[g]))\n\
    \        }()\n    }\n    wg.Wait()\n    return wrong\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp069b2kfu_test.go:22:12: undefined: sync

    /tmp/tmp069b2kfu_test.go:31:35: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    return game\n}\n\
    \nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmp5fk63068_test.go:40: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmp5fk63068_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmp5fk63068_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct, guessed\
    \ []int\n    var i int\n    for i = 0; i < len(game); i++ {\n        guessed =\
    \ append(guessed, guess[i])\n    }\n    for i = 0; i < len(game); i++ {\n    \
    \    if guess[i] != game[i] {\n            correct = append(correct, 0)\n    \
    \    } else {\n            correct = append(correct, 1)\n        }\n    }\n  \
    \  for i = 0; i < len(guess); i++ {\n        guess[i] = -guess[i]\n    }\n   \
    \ return correct\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmp3qsq89sw_test.go:55: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__1 (0.00s)\n        tmp3qsq89sw_test.go:55:\
    \ expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmp3qsq89sw_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmp3qsq89sw_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correctness\
    \ []int\n    for _, gm := range guess {\n        correctness = append(correctness,\
    \ abs(game[gm]-gm))\n    }\n    return correctness\n}\n</code>\n<|/ a tags=algorithm,comparison,arrays,go,language-agnostic\
    \ |>\n<| c |>\nThis doesn't seem to be comparing the two lists properly. I tried\
    \ your example, and it only returns [0, 0, 0, 0, 3, 3]. Perhaps I misunderstood\
    \ your solution. Or maybe I am wrong.\n<|/ c |>\n<| c |>\nYou are right, I did\
    \ not realize that I had made a mistake.  My solution is still wrong but is closer\
    \ to OP's intentions.\n<|/ c |>\n<| a dscore=2 |>\nHere is another solution which\
    \ works (but is longer in terms of lines of code).\nThe key here is using a for\
    \ loop to iterate through the first array and find the index at which the values\
    \ are the same.\n<code>\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbe01e0wm_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074322
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    n := len(game)\n\
    \    m := len(guess)\n    correct := make([]int, n)\n    for i := 0; i < n; i++\
    \ {\n        if game[i] != guess[i] {\n            correct[i] = abs(game[i] -\
    \ guess[i])\n        } else {\n            correct[i] = 0\n        }\n    }\n\
    \    for i := 0; i < m; i++ {\n        if game[i] != guess[i] {\n            correct[i]\
    \ += abs(game[i] - guess[i])\n        }\n    }\n    return correct\n}\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnzl24k_7_test.go:26:26: undefined: abs

    /tmp/tmpnzl24k_7_test.go:33:27: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    return compareImpl(game,\
    \ guess, 0)\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_n95lsnh_test.go:21:12: undefined: compareImpl

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    correct := 0\n\
    \    diff := 0\n    match := 0\n    for i := 0; i < len(guess); i++ {\n      \
    \  if game[i] == guess[i] {\n            match += 1\n        }\n    }\n    for\
    \ i := 0; i < len(guess); i++ {\n        if game[i] == guess[i] {\n          \
    \  diff += game[i] - guess[i]\n            correct += 1\n        }\n    }\n  \
    \  return []int{correct, diff, diff, diff, match}\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmptktgj4jh_test.go:54: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4)]'\n\
    \    --- FAIL: TestCompare/test_num__1 (0.00s)\n        tmptktgj4jh_test.go:54:\
    \ expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]',\
    \ got '[%!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=6)]'\n    --- FAIL:\
    \ TestCompare/test_num__2 (0.00s)\n        tmptktgj4jh_test.go:54: expected '[%!s(int=2)\
    \ %!s(int=4) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmptktgj4jh_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074324
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    fmt.Println(\"\
    Game is: \", game)\n    fmt.Println(\"Guess is: \", guess)\n    fmt.Println(\"\
    \\n\")\n\n    var result []int\n\n    var gameI = 0\n    var guessI = 0\n    for\
    \ gameI < len(game) && guessI < len(guess) {\n        if game[gameI] != guess[guessI]\
    \ {\n            result[guessI] = game[gameI] - guess[guessI]\n        } else\
    \ {\n            result[guessI] = game[gameI]\n        }\n        guessI++\n \
    \       gameI++\n    }\n\n    fmt.Println(\"Result is: \", result)\n\n    return\
    \ result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp655ji_rp_test.go:23:5: fmt.Println arg list ends with redundant newline

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmps41nmkcm_test.go:42: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmps41nmkcm_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmps41nmkcm_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074324
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    \n    // The current score is the absolute value of the difference\n\
    \    // between the guess and the score\n    currentScore := 0\n    \n    // A\
    \ \"match\" is when the current score is 0 and the\n    // guess is equal to the\
    \ score\n    currentMatch := true\n    \n    for i, score := range game {\n  \
    \      // If we don't have a match, this is our \"current score\"\n        if\
    \ currentMatch != true {\n            currentScore = 0\n            currentMatch\
    \ = true\n        }\n        \n        // We haven't yet reached our \"match\"\
    , so we have the\n        // current score\n        if score != 0 {\n        \
    \    // The absolute value of the difference between the score\n            //\
    \ and the guess\n            scoreAbs := abs(score - guess[i])\n            \n\
    \            // If our current score is zero or the guess is zero\n          \
    \  if currentScore == 0 || guess[i] == 0 {\n                // Then we know the\
    \ score is correct\n                result[i] = scoreAbs\n            } else {\n\
    \                // Else we know the score is wrong\n                result[i]\
    \ = currentScore - scoreAbs\n            }\n            \n            // We have\
    \ reached our match, so we set our currentScore\n            // and currentMatch\
    \ to false so we don't\n            // keep adding it to our score\n         \
    \   currentScore = 0\n            currentMatch = false\n        }\n    }\n   \
    \ \n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjprvlg8l_test.go:43:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    //write your compare\
    \ code here\n    var (\n        correctGuess bool\n        correctGame bool\n\
    \        difference  int\n        games      int\n        guesses    int\n   \
    \ )\n\n    games = game[0]\n    guesses = game[1]\n    correctGame = false\n \
    \   correctGuess = false\n    for i := 0; i < guesses; i++ {\n        if game[i]\
    \ == guess[i] {\n            correctGuess = true\n        } else if game[i] >\
    \ guess[i] {\n            correctGame = true\n        }\n        if correctGame\
    \ && correctGuess {\n            difference = 0\n            break\n        }\n\
    \        if correctGame {\n            difference += game[i] - guess[i]\n    \
    \    } else if correctGuess {\n            difference += guess[i] - game[i]\n\
    \        }\n    }\n    return []int{difference, games - guesses, guesses - games}\n\
    }\n</code>\n<|/ a dscore=0 tags=go |>\n<| a tags=go |>\nYou don't need to compare\
    \ the length of both lists, since you are just interested in their relative positions.\n\
    To calculate the difference, you need to iterate through the list and compare\
    \ the items one by one. If they are different then add the difference to the list\
    \ with the current item and continue.\n<code>\npackage main\n\nimport \"fmt\"\n\
    \nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr1ppwnq4_test.go:52:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074322
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    // code goes\
    \ here\n    // return []int{0,0,0,0,0,0}\n    \n    \n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprvbcda36_test.go:26:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpffy7ytct_test.go:23:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074112
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        diff, err := compare_test1(game,\
    \ guess)\n        if err != nil {\n            fmt.Println(err)\n        }\n \
    \       result[i] = diff\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpevziecjf_test.go:23:22: undefined: compare_test1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n\
    \    var winner int\n    for i := 0; i < len(game); i++ {\n        for j := 0;\
    \ j < len(game); j++ {\n            if i != j {\n                if game[i] ==\
    \ guess[j] {\n                    result = append(result, 0)\n               \
    \ } else {\n                    result = append(result, abs(game[i] - guess[j]))\n\
    \                }\n            }\n        }\n        if i == len(guess) {\n \
    \           winner = i\n        }\n    }\n    return append(result, winner)\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm2zr3q45_test.go:29:45: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var ret []int\n\
    \    sort.Sort(game)\n    sort.Sort(guess)\n    \n    if len(game) == 0 {\n  \
    \      return ret\n    }\n    \n    if len(game) != len(guess) {\n        return\
    \ nil\n    }\n    \n    for i := 0; i < len(game); i++ {\n        if game[i] !=\
    \ guess[i] {\n            ret = append(ret, abs(guess[i] - game[i]))\n       \
    \ } else {\n            ret = append(ret, 0)\n        }\n    }\n    return ret\n\
    }\n</code>\n<|/ a tags=go,sorting |>\n<| a dscore=1 tags=go,sorting |>\nSince\
    \ we're talking about sorted lists, this can be solved quite simply with bubble\
    \ sort, by iterating over the first list and comparing the current item in the\
    \ list to the next, while checking for \"equal\" in the second list.\n<code>\n\
    package main\n\nimport \"fmt\"\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpitom084i_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    m := make([]int,\
    \ len(guess))\n    for i, p := range guess {\n        m[i] = p\n    }\n    w :=\
    \ make([]int, len(game))\n    for i, g := range game {\n        w[i] = g\n   \
    \ }\n    var g int = 0\n    x := len(guess) - 1\n    for x < 0 {\n        if game[x]\
    \ != w[g] {\n            g++\n            if g > len(guess) {\n              \
    \  return nil\n            }\n            m[x] = w[g]\n        } else {\n    \
    \        x--\n        }\n    }\n    if game[x] != w[g] {\n        return nil\n\
    \    }\n    for _, p := range m {\n        if p != 0 {\n            return nil\n\
    \        }\n    }\n    return m\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmppspvuw9l_test.go:69: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n\
    \        tmppspvuw9l_test.go:69: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmppspvuw9l_test.go:69:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct []int\n\
    \    var counter int\n    \n    for counter, guess := range guess {\n        if\
    \ counter > 0 && game[counter-1] == guess {\n            correct = append(correct,\
    \ 0)\n            counter--\n        }\n        \n        if game[counter] ==\
    \ guess {\n            correct = append(correct, 0)\n            counter--\n \
    \       }\n        \n        if game[counter] == 0 {\n            correct = append(correct,\
    \ -game[counter])\n            counter--\n        }\n    }\n    \n    return correct\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxvk_acwi_test.go:22:9: counter declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var comp []int\n\
    \    compare := 0\n    for i, j := range game {\n        comp = append(comp, guess[j]\
    \ - game[i])\n    }\n    return comp\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01laaxmj_test.go:22:5: compare declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    guess := make([]int,\
    \ len(guess))\n    for i := range guess {\n        guess[i] = game[i]\n    }\n\
    \    // We have a match if the last element of guess is equal to the last element\
    \ of game\n    if guess[len(guess)-1] == game[len(game)-1] {\n        return make([]int,\
    \ len(guess))\n    }\n    // The last element of game is bigger than the last\
    \ element of guess\n    if game[len(game)-1] > 0 {\n        return make([]int,\
    \ len(guess))\n    }\n    // The last element of game is smaller than the last\
    \ element of guess\n    if game[len(game)-1] < 0 {\n        return make([]int,\
    \ len(guess))\n    }\n    // The last element of game is equal to the last element\
    \ of guess\n    // The last element of guess is bigger than the last element of\
    \ guess\n    if game[len(game)-1] == guess[len(guess)-1] {\n        return make([]int,\
    \ len(guess))\n    }\n    // We have no idea about the last element of game and\
    \ last element of guess\n    // The last element of game is smaller than the last\
    \ element of guess\n    // The last element of game is bigger than the last element\
    \ of guess\n    return make([]int, len(guess))\n}\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2mysd1h3_test.go:21:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    guesses := make([]int,\
    \ len(guess))\n    for i, g := range guess {\n        if g != -1 {\n         \
    \   guesses[i] = g\n        } else {\n            guesses[i] = game[i]\n     \
    \   }\n    }\n\n    return guesses\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpca7i9b48_test.go:49: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpca7i9b48_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpca7i9b48_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Your code here.\n\
    \n    var res []int\n    if len(game) != len(guess) {\n        res = make([]int,\
    \ len(guess))\n    } else {\n        res = make([]int, len(game))\n    }\n   \
    \ for idx, val := range game {\n        var diff = 1\n        for _, b := range\
    \ guess {\n            if val == b {\n                diff = 0\n             \
    \   break\n            }\n        }\n        if val != 0 {\n            res[idx]\
    \ = val - diff\n        } else {\n            res[idx] = 0\n        }\n    }\n\
    \    return res\n}\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpxlblcuyu_test.go:61: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)\
    \ %!s(int=1)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpxlblcuyu_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpxlblcuyu_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var match []int\n\
    \    for i := 0; i < len(game); i++ {\n        if guess[i] == game[i] {\n    \
    \        match = append(match, i)\n        } else {\n            diff := abs(guess[i]-game[i])\n\
    \            if diff > 0 {\n                return match\n            }\n    \
    \    }\n    }\n    return match\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcxbdj6ev_test.go:26:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Your code here\n\
    \    var sum int = 0\n    var i int\n    \n    for i = 0; i < len(guess); i++{\n\
    \        sum += 1\n        if game[i] == guess[i]{\n            if game[i] ==\
    \ 0{\n                game[i] = guess[i]\n                continue\n         \
    \   }\n            game[i] = game[i] - game[i]\n            game[i] = game[i]\
    \ + guess[i]\n            game[i] = game[i] / 2\n        }\n    }\n    \n    for\
    \ i = 0; i < len(guess); i++{\n        sum -= 1\n        if game[i] != guess[i]{\n\
    \            game[i] = game[i] - guess[i]\n            game[i] = game[i] + game[i]\n\
    \            game[i] = game[i] / 2\n        }\n    }\n    \n    return game\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpz2fmbdsu_test.go:66: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-2) %!s(int=-2)\
    \ %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n   \
    \     tmpz2fmbdsu_test.go:66: expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := []int{}\n\
    \    for i, a := range guess {\n        for _, value := range game {\n       \
    \     if value == a {\n                result.append(0)\n            } else {\n\
    \                result.append(abs(a-value))\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgtudi49k_test.go:22:9: i declared but not used

    /tmp/tmpgtudi49k_test.go:25:24: result.append undefined (type []int has no field
    or method append)

    /tmp/tmpgtudi49k_test.go:27:24: result.append undefined (type []int has no field
    or method append)

    /tmp/tmpgtudi49k_test.go:27:31: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    g := make([]int,\
    \ len(guess))\n    y := make([]int, len(guess))\n    x := make([]int, len(guess))\n\
    \    k := 0\n    for i := range guess {\n        g[k] = guess[i]\n        y[k]\
    \ = game[i]\n        x[k] = i\n        k++\n    }\n    r := make([]int, len(guess))\n\
    \    for i := range guess {\n        if y[k] != game[i] {\n            r[i] =\
    \ abs(x[k] - y[k])\n        } else {\n            r[i] = 0\n        }\n      \
    \  k++\n    }\n    return r\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qjg09u2_test.go:34:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    g := make([]int,\
    \ len(game))\n    g := make([]int, len(guess))\n    if len(game) != len(guess)\
    \ {\n        return []int{0, 0}\n    }\n    for i := 0; i < len(game); i++ {\n\
    \        if game[i] != guess[i] {\n            g := []int{game[i] - guess[i],\
    \ game[i] - guess[i]}\n            g := append(g, guess[i])\n            return\
    \ g\n        }\n    }\n    return []int{0, 0}\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgat6tvug_test.go:21:5: g declared but not used

    /tmp/tmpgat6tvug_test.go:22:7: no new variables on left side of :=

    /tmp/tmpgat6tvug_test.go:29:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    g := make([]int,\
    \ len(guess))\n    g := g[:]\n\n    // This loop compares every item in the guess\
    \ array to the corresponding item in the game array.\n    // The index of the\
    \ guess array is returned into g as an integer.\n    // For example:\n    // >>>\
    \ compare([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n    // [0, 0, 0,\
    \ 0, 3, 3]\n    for i := 0; i < len(guess); i++ {\n        for j := 0; j < len(game);\
    \ j++ {\n            if game[j] == guess[i] { // If the item in the game array\
    \ is equal to the item in the guess array, add 1 to g.\n                g[i] +=\
    \ 1 // Increase g by one.\n            }\n        }\n    }\n\n    // This loop\
    \ determines how many times each item in the guess array is found in the game\
    \ array.\n    // The index of the guess array is returned into g as an integer\
    \ and the number of times each item is found into g as a number.\n    // For example:\n\
    \    // >>> compare([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n    //\
    \ [0, 0, 0, 0, 3, 3]\n    // >>> compare([]int{1, 4, 3, 4, 1, 5}, []int{1, 2,\
    \ 3, 4, 2, -2})\n    // [2, 0, 2, 0, 3, 1]\n    return g[:]\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4rzn4axm_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    correct := 0\n\
    \    wrong := 0\n\n    for i := range guess {\n        if game[i] != guess[i]\
    \ {\n            wrong++\n        } else {\n            correct++\n        }\n\
    \    }\n\n    game = game[0 : len(game)-len(guess)]\n    guess = guess[0 : len(guess)-len(game)]\n\
    \n    wrongs := []int{}\n    for i := range game {\n        if game[i] != guess[i]\
    \ {\n            wrongs = append(wrongs, i)\n        }\n    }\n\n    return []int{wrong,\
    \ wrongs, correct}\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm dscore=0\
    \ |>\nThe problem is very interesting! I'm going to suggest a solution that works\
    \ for the original question: Given a set of guesses, find the number of incorrectly\
    \ guessed matches.\nThe trick is this: if you know how long each guess is, you\
    \ can compare each guess with the entire set of guesses. You can then find how\
    \ many guesses they match. Think about how you would go about this in words. If\
    \ you have a word and a set of letters, you can just compare the letters. For\
    \ example, if you had a word \"apple\" and your set of letters were \"a\", \"\
    p\", \"p\", \"e\", \"p\", and \"l\", you would check each letter to see if it\
    \ is in the word and see if it was a match. \nWhat you're trying to do is compare\
    \ a set of guesses to an entire word. You need to check each guess and see if\
    \ it matches an entire word. \nFor example, if you know that \"apple\" is a word\
    \ of length 6 and you know that the word is \"apple\", you could check each guess\
    \ and see if it matches:\n<code>\na = apple\np = apple\ne = apple\nl = apple\n\
    a = apple\np = apple\ne = apple\nl = apple\n</code>\nThis would give you: \n<code>\n\
    a = 0\np = 1\ne = 1\nl = 0\na = 1\np = 2\ne = 2\nl = 1\n</code>\nWhich tells you\
    \ that the first three guesses matched the entire word. The last four guesses\
    \ didn't match the entire word. This tells you that your guess was incorrect.\
    \ \nSo now the algorithm is to check every letter of your guess to see if it matches\
    \ an entire word. If it does, check each letter to see if it matches the same\
    \ letter of the word. If it doesn't, then you know that your guess was incorrect.\
    \ \nThe code I wrote to do this is:\n<code>\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjtht3dhr_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    match := map[int]int{}\n\
    \n    for i := 0; i < len(game); i++ {\n        match[game[i]] += 1;\n    }\n\n\
    \    for i := 0; i < len(guess); i++ {\n        value := 0\n        if guess[i]\
    \ >= 0 {\n            value = match[guess[i]]\n        } else {\n            value\
    \ = match[abs(guess[i])]\n        }\n\n        match[guess[i]] -= 1;\n       \
    \ match[value] += 1;\n    }\n\n    result := []int{}\n    for i := 0; i < len(match);\
    \ i++ {\n        result = append(result, match[i]);\n    }\n\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=python,algorithm dscore=0 |>\n<code>\ndef compare(num1,\
    \ num2, isHigherScores=False):\n    length = len(num2)\n    \n    if isHigherScores:\n\
    \        length = len(num1)\n    \n    difference = [0] * length\n    \n    for\
    \ i in num1:\n        difference[i] = num1.count(i) - num2.count(i)\n        \n\
    \    if isHigherScores:\n        for i in num2:\n            difference[i] = abs(num1.count(i)\
    \ - num2.count(i))\n    \n    return difference\n</code>\n<|/ a |>\n<| a tags=python,algorithm\
    \ |>\nI think that the right answer for the last question (on codeforces)'s answer\
    \ is the following. \n<code>\ndef compare(num1, num2, isHigherScores=False):\n\
    \    length = len(num2)\n    \n    if isHigherScores:\n        length = len(num1)\n\
    \    \n    difference = [0] * length\n    \n    for i in num1:\n        difference[i]\
    \ = num1.count(i) - num2.count(i)\n        \n    if isHigherScores:\n        for\
    \ i in num2:\n            difference[i] = abs(num1.count(i) - num2.count(i))\n\
    \    \n    return difference\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis is a solution\
    \ that would take O(NlogN) time but only uses O(N) space:\n<code>\ndef compare(num1,\
    \ num2):\n    difference = {}\n    for i in range(0,len(num1)):\n        if num1[i]\
    \ not in difference:\n            difference[num1[i]] = num2.count(num1[i])\n\
    \        else:\n            difference[num1[i]] += num2.count(num1[i])\n    return\
    \ difference\n</code>\n<|/ a tags=python,algorithm dscore=0 |>\n<| a tags=python,algorithm\
    \ dscore=0 |>\nA Python version using collections.Counter() and a list comprehension:\n\
    <code>\nfrom collections import Counter\n\ndef compare(num1, num2, isHigherScores=False):\n\
    \    cnt = Counter(num1)\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpivoqeg88_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    t := len(guess)\n\
    \    correct := 0\n    diff := 0\n    // Iterate over both lists to compare the\
    \ elements\n    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i]\
    \ {\n            // If a match has failed we must add one difference from the\
    \ correct value\n            if game[i] > guess[i] {\n                diff +=\
    \ 1\n            } else {\n                diff += -1\n            }\n       \
    \ }\n        // If a match has failed and we still don't know the correct answer\
    \ we add an error.\n        if game[i] > guess[i] && game[i] != 0 {\n        \
    \    correct += 1\n        }\n    }\n    result := make([]int, t)\n    // Add\
    \ correct number of differences to the result list\n    for i := 0; i < t; i++\
    \ {\n        if game[i] != 0 && game[i] == guess[i] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = diff + correct\n        }\n   \
    \ }\n    return result\n}\n</code>\n<|/ a tags=arrays,sorting,go,algorithm dscore=0\
    \ |>\n<| c |>\nSorry for the confusion, I was confusing myself with some of the\
    \ comments. What I'm doing is matching people with each other. I.e. if I have\
    \ two people and I want to know how similar they are to each other I might have\
    \ a list of scores like\n\n`{1, 2, 3, 4, 2, -2}`\n\nAnd a list of guesses\n\n\
    `{1, 2, 3, 4, 2, -2}`\n\nI wanted to compare them and determine how close they\
    \ were to each other. If they were perfectly matched I should have a list of `0`\
    \ scores, if they were not matched they should be compared to the closest match\
    \ from the list of scores. I have edited the question to reflect this.\n<|/ c\
    \ |>\n<| c |>\n- I see you posted the solution now. Have you been able to verify\
    \ the solutions proposed here? If yes, please let us know as they may help others\
    \ with the same type of problem in the future.\n<|/ c |>\n<| c |>\nI have, and\
    \ yes, it is working great.\n<|/ c |>\n<| a dscore=0 |>\nI ended up solving this\
    \ problem using https://github.com/haihanqing/jason\nIt works great.\n<|/ a tags=arrays,sorting,go,algorithm\
    \ |>\n<| c |>\nThanks for sharing! I updated my answer to include the link to\
    \ the library you used.\n<|/ c |>\n<| a dscore=0 |>\nHere's another possible implementation\
    \ for this. As mentioned in the comments, you can iterate over the first list\
    \ to find the index of the item in the second list. After doing so, you can then\
    \ iterate over both lists and \nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp989y74nr_test.go:50:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct []int\n\
    \n    for _, score := range game {\n        found := false\n        for _, guess\
    \ := range guess {\n            if score == guess {\n                found = true\n\
    \                break\n            }\n        }\n\n        if !found {\n    \
    \        correct = append(correct, score)\n        }\n    }\n\n    return correct\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpuorzgknw_test.go:56: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=5)]'\n    --- FAIL: TestCompare/test_num__1\
    \ (0.00s)\n        tmpuorzgknw_test.go:56: expected '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]', got '[]'\n    --- FAIL: TestCompare/test_num__2\
    \ (0.00s)\n        tmpuorzgknw_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestCompare/test_num__3\
    \ (0.00s)\n        tmpuorzgknw_test.go:56: expected '[%!s(int=2) %!s(int=0) %!s(int=0)\
    \ %!s(int=1)]', got '[%!s(int=1) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct []int\n\
    \    var total int\n    for i := 0; i < len(guess); i++ {\n        total += guess[i]\n\
    \        if total == game[i] {\n            correct = append(correct, 0)\n   \
    \     } else {\n            correct = append(correct, game[i] - total)\n     \
    \   }\n    }\n    return correct\n}\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpgpfrhbaf_test.go:49: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=-1) %!s(int=-3) %!s(int=-6)\
    \ %!s(int=-7) %!s(int=-9)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n \
    \       tmpgpfrhbaf_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=2) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestCompare/test_num__3\
    \ (0.00s)\n        tmpgpfrhbaf_test.go:49: expected '[%!s(int=2) %!s(int=0) %!s(int=0)\
    \ %!s(int=1)]', got '[%!s(int=2) %!s(int=1) %!s(int=-1) %!s(int=-3)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Create a pointer\
    \ array of guess\n    pguess := make([]*int, len(guess))\n    // Create an array\
    \ to hold the differences\n    dx := make([]int, len(guess))\n    // Assign the\
    \ guesses to the array\n    for i := range pguess {\n        pguess[i] = &guess[i]\n\
    \    }\n\n    // Assign the scores to the array\n    for i := range dx {\n   \
    \     dx[i] = game[i]\n    }\n    // Create a pointer array of score\n    pgame\
    \ := make([]*int, len(game))\n    // Assign the scores to the array\n    for i\
    \ := range pgame {\n        pgame[i] = &game[i]\n    }\n\n    // Go through the\
    \ guesses\n    for i := range pguess {\n        // Iterate through the scores\n\
    \        for i := range pgame {\n            // If the scores are the same, the\
    \ difference is 0\n            if *pgame[i] == *pguess[i] {\n                dx[i]\
    \ = 0\n            }\n            // Otherwise, the difference is the difference\
    \ of the score and the guess\n            else {\n                dx[i] = abs(*pgame[i]\
    \ - *pguess[i])\n            }\n        }\n    }\n\n    // Return the differences\n\
    \    return dx\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp_h5tay0_test.go:50:13: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // TODO: Write\
    \ code here\n    var aGuess []int\n    var aGame []int\n    for i, _ := range\
    \ guess {\n        if game[i] != 0 {\n            aGuess = append(aGuess, guess[i])\n\
    \            aGame = append(aGame, game[i])\n        } else {\n            aGame\
    \ = append(aGame, 0)\n        }\n    }\n    return aGuess\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nI wanted to see how long it took me to write that function and\
    \ I came up with the following which passes all tests. So it seems that it can\
    \ be done in O(n) where n is the number of elements.\n<code>\npackage main\n\n\
    import (\n    \"log\"\n    \"testing\"\n    \"time\"\n)\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq3yylnw1_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    g := len(guess)\n\
    \    h := len(game)\n    result := make([]int, h)\n    j := 0\n    for i := 0;\
    \ i < g; i++ {\n        if game[i] == guess[i] {\n            result[j] = 0\n\
    \        } else {\n            result[j] += 1\n        }\n        j++\n    }\n\
    \n    if j > 0 {\n        for i := j - 1; i >= 0; i-- {\n            if result[i]\
    \ != 0 {\n                result[i] = result[i] - 1\n                break\n \
    \           }\n        }\n    }\n\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpxsz4mzjv_test.go:62: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpxsz4mzjv_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpxsz4mzjv_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    sort.Ints(game)\n\
    \    sort.Ints(guess)\n    \n    sort.Ints(game)\n    sort.Ints(guess)\n    \n\
    \    \n    \n    var correct []int\n    var score []int\n    \n    \n    \n  \
    \  var j int\n    var n int\n    var k int\n    \n    var score int\n    \n  \
    \  for j := 0; j < len(game); j++ {\n        \n        score = 0\n        for\
    \ k = j+1; k < len(game); k++ {\n            score += game[j]*guess[k]\n     \
    \   }\n        \n        if score == 0 {\n            score = 1\n        }\n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsyasqnr2_test.go:241:6: expected ''('', found TestCompare

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var sum []int\n\
    \    var i int\n    for i = 0; i < len(game); i++ {\n        sum = append(sum,\
    \ math.Abs(guess[i] - game[i]))\n    }\n    return sum\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjugin1s5_test.go:24:27: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // TODO\n    //\
    \ Your code here\n    return []int{}\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpmpkivty5_test.go:42: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestCompare/test_num__1 (0.00s)\n\
    \        tmpmpkivty5_test.go:42: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]', got '[]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n\
    \        tmpmpkivty5_test.go:42: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpmpkivty5_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i] = 0\n\
    \        diff := guess[i] - game[i]\n        if diff > 0 {\n            result[i]\
    \ += diff\n        }\n        if diff < 0 {\n            result[i] -= diff\n \
    \       }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n \
    \ candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n\
    \     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected:\
    \ []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3}, []int{-1,\
    \ -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1, 2,\
    \ 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Write your solution\
    \ here\n    guessMap := make(map[int]int)\n    for i := 0; i < len(guess); i++\
    \ {\n        guessMap[guess[i]] = i\n    }\n    scores := make([]int, len(guess))\n\
    \    i := 0\n    for i < len(game) {\n        if guessMap[game[i]] != i {\n  \
    \          scores[i-guessMap[game[i]]] = abs(game[i] - guessMap[game[i]])\n  \
    \      } else {\n            scores[i-guessMap[game[i]]] = 0\n        }\n    \
    \    i++\n    }\n    return scores\n}\n</code>\n<|/ a tags=go,algorithm,arrays\
    \ |>\n<| a dscore=0 tags=go,algorithm,arrays |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsr2xo_ow_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    gameLen := len(game)\n\
    \    guessLen := len(guess)\n    result := make([]int, guessLen)\n\n    // I used\
    \ a closure here to allow me to break out of the loop without having to do a for/break\
    \ statement in each iteration.\n    // This also gives me a way of checking if\
    \ all items in the game list were equal to the first item in the guess list.\n\
    \    // This allows me to avoid the cost of comparing the same element multiple\
    \ times.\n    comp := func(index int, gameItem int, guessItem int) bool {\n  \
    \      if gameItem == guessItem {\n            result[index] = 0\n           \
    \ return true\n        }\n        result[index] = gameItem - guessItem\n     \
    \   return false\n    }\n\n    // Go through each guess\n    for index := 0; index\
    \ < guessLen; index++ {\n        // Break out if all items in the game list were\
    \ equal to the first item in the guess list.\n        if index >= gameLen {\n\
    \            break\n        }\n\n        // Compare the current guess with the\
    \ current game item\n        if comp(index, game[index], guess[index]) {\n   \
    \         break\n        }\n    }\n\n    return result\n}\n</code>\n<|/ a |>\n\
    <| a tags=arrays,algorithm,go dscore=3 |>\n<code>\npackage main\n\nimport \"fmt\"\
    \n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0x4ll042_test.go:52:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    \n    for i := range guess {\n        if guess[i] != game[i]\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        } else {\n     \
    \       result[i] = 0\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph625gx3p_test.go:25:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074327
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Your code here!\n\
    \    var ret []int\n    var score []int\n    for idx, val := range guess {\n \
    \       score := game[idx]\n        if val == score {\n            ret[idx] =\
    \ 0\n        } else {\n            ret[idx] = abs(val - score)\n        }\n  \
    \  }\n    return ret\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpazw3z4et_test.go:23:9: score declared but not used

    /tmp/tmpazw3z4et_test.go:29:24: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074327
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // code here\n\
    \    diff := make([]int, len(guess))\n    for i, value := range guess {\n    \
    \    if value != game[i] {\n            diff[i] = abs(value - game[i])\n     \
    \   } else {\n            diff[i] = 0\n        }\n    }\n    return diff\n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl9un9mwa_test.go:25:23: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    for _, guessVal\
    \ := range guess {\n        \n        for _, gameVal := range game {\n       \
    \     \n            if gameVal == guessVal {\n                game[gameVal] =\
    \ -1\n                guess[guessVal] = 0\n                game[guessVal] = 1\n\
    \                guess[guessVal] = 1\n                game[gameVal] = 0\n    \
    \            guess[gameVal] = 0\n                \n            } else {\n    \
    \            game[gameVal] = 0\n                guess[guessVal] = -abs(guessVal\
    \ - gameVal)\n                \n            }\n            \n        }\n     \
    \   \n    }\n    \n    return guess\n    \n}\n</code>\n<|/ a tags=algorithm,go\
    \ dscore=1 |>\n<| a |>\nHere's another solution that is a bit more involved and\
    \ probably more efficient (in terms of space), but it is shorter and a bit more\
    \ legible:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\
    \nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgocoj_v3_test.go:47:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if len(guess) !=\
    \ len(game) || len(guess) != len(game[0]) {\n        fmt.Printf(\"\\nlength of\
    \ guess != length of game\")\n        return []int{}\n    }\n    result := make([]int,\
    \ len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i] = 0\n\
    \    }\n    for i := 0; i < len(game); i++ {\n        if game[i] != guess[i] {\n\
    \            result[i] += 1\n        }\n    }\n    return result\n}\n</code>\n\
    <|/ a dscore=0 tags=go,arrays,comparison |>\n<| c |>\nPlease use the \"code\"\
    \ button for code only answers, and don't use \"Run code\" buttons unless you\
    \ know exactly what you're doing. Your code has at least a couple of syntax errors\
    \ and is missing an `import` statement, so it doesn't run. Please fix it so that\
    \ it *does* actually run, and you'll get up-votes. Also, I think your answer could\
    \ be much improved by using a `for` loop instead of a `while` loop, and using\
    \ the `==` operator, not `!=`.\n<|/ c |>\n<| c |>\n: Thanks for the feedback.\n\
    <|/ c |>\n<| c |>\nI updated my code. I do not believe your comment is accurate.\
    \  I believe you mean the use of `!=`.  What you have is \"==\".\n<|/ c |>\n<|\
    \ a |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdddv7_m4_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074327
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if gameLen, guessLen\
    \ := len(game), len(guess); gameLen != guessLen {\n        panic(\"gameLen:%d\
    \ != guessLen:%d\", gameLen, guessLen)\n    }\n    if gameLen == 0 {\n       \
    \ return guess\n    }\n    \n    // Compare first gameLen elements\n    acc :=\
    \ make([]int, gameLen)\n    for i, score := range game {\n        acc[i] = guessMatched(guess,\
    \ score)\n    }\n    \n    // Now compare gameLen - 1 to 0 elements\n    for i\
    \ := gameLen - 1; i >= 0; i-- {\n        acc := guessMatched(guess, game[i])\n\
    \        if acc == 0 {\n            acc[i] = game[i]\n        } else if acc <\
    \ 0 {\n            acc[i] = -acc\n        }\n    }\n\n    return acc\n}\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwy4ni1hv_test.go:22:9: invalid operation: too many arguments for panic("gameLen:%d
    != guessLen:%d", gameLen, guessLen) (expected 1, found 3)

    /tmp/tmpwy4ni1hv_test.go:24:8: undefined: gameLen

    /tmp/tmpwy4ni1hv_test.go:29:24: undefined: gameLen

    /tmp/tmpwy4ni1hv_test.go:31:18: undefined: guessMatched

    /tmp/tmpwy4ni1hv_test.go:35:14: undefined: gameLen

    /tmp/tmpwy4ni1hv_test.go:36:16: undefined: guessMatched

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n</code>\n<|/ a dscore=4 tags=algorithm,arrays |>\n\
    <| c |>\nI guess I misunderstood your question. I've revised my answer above to\
    \ show the solution you were looking for.\n<|/ c |>\n<| c |>\n, I'm glad I could\
    \ help you! You did a great job explaining your thought process and I appreciate\
    \ that you were able to find a solution for your problem. I'm happy to help you\
    \ understand a lot more about programming in the future. :)\n<|/ c |>\n<| a tags=algorithm,arrays\
    \ dscore=4 |>\nThis is my solution. I thought it would be interesting to see how\
    \ you could improve it using pointers. It's also not really \"shorter\" but more\
    \ like \"pythonic\".\n<code>\ndef compare(game, guess):\n    result = list()\n\
    \    for idx, val in enumerate(guess):\n        diff = game[idx] - val\n     \
    \   result.append(diff if diff > 0 else 0)\n    return result\n\nprint compare([1,2,3,4,5,1],\
    \ [1,5,4,3,7,8])\n</code>\n<|/ a |>\n<| a |>\nFor anyone who cares, I finally\
    \ got it working in Java using an iterator and an ArrayList for my result.  Here\
    \ is what I came up with:\n<code>\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\
    \npublic class Guesser\n{\n  public static void main (String args[])\n  {\n  \
    \  int[] game = {1,5,4,3,7,8};\n    int[] guess = {1,5,4,3,7,8};\n    ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n    int[] tmpResult = new int[game.length];\n\
    \    Iterator it = game.iterator();\n    while(it.hasNext())\n    {\n        int\
    \ next = it.nextInt();\n        for(int i=0; i<tmpResult.length; i++)\n      \
    \  {\n            int diff = Math.abs(next - tmpResult[i]);\n            if(diff\
    \ > 0)\n                tmpResult[i] = next;\n            else \n            \
    \    tmpResult[i] = tmpResult[i] - diff;\n        }\n        result.add(tmpResult[i]);\n\
    \    }\n    for(Integer num : result)\n    {\n        System.out.print(num);\n\
    \    }\n  }\n}\n</code>\n<|/ a tags=algorithm,arrays dscore=4 |>\n<| a tags=algorithm,arrays\
    \ |>\nHere's an algorithm that iterates through the arrays, checking each number\
    \ against the next, and if the numbers aren't equal it subtracts the difference\
    \ from the previous result.  This \nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqe5fsuxh_test.go:27:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Your code here\n\
    \    return game\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpk_qx1mhf_test.go:41: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpk_qx1mhf_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpk_qx1mhf_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    //code here\n \
    \   \n    // This feels much like cheating, but it works. A comment explaining\
    \ the code\n    // is included at the top of the function.\n    guess := make([]int,\
    \ len(guess))\n    var i int\n    var diff int\n    for i = 0; i <= len(game);\
    \ i++ {\n        if game[i] == guess[i] {\n            guess[i] = 0\n        }\
    \ else {\n            diff = game[i] - guess[i]\n            guess[i] = diff\n\
    \        }\n    }\n    return guess\n}\n\nfunc TestCompare(t *testing.T) {\n \
    \ candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n\
    \     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected:\
    \ []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3}, []int{-1,\
    \ -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1, 2,\
    \ 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm059vwj7_test.go:25:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Your code here\n\
    \    diffs := []int{}\n    for i := range guess{\n        diff := 0\n        for\
    \ j, score := range game{\n            if j == i {\n                continue\n\
    \            }\n            if guess > score {\n                diff += abs(guess\
    \ - score)\n            } else {\n                diff += abs(score - guess)\n\
    \            }\n        }\n        diffs = append(diffs, diff)\n    }\n    return\
    \ diffs\n}\n</cell>\n<text>\nProblem 4\nGiven the scores of the three matches\
    \ of length $N$ (where $N$ is a natural number), and the number of matches, return\
    \ the score of the winning match.\n\nThe scores of two matches are defined as\
    \ follows\n$$\n\\begin{align}\n  R{1^2} = R{2^2} \\\n  R{1^2} = - R{2} \\\n  R{1^2}\
    \ = - R{2^2} \\\n  \\text{and} \\\n  R{1^2} = - R{2} \\\n  R{1^2} = - R{2^2} \\\
    \n  R{1^2} = - R{2^2} \\\n  R{1^2} = - R{2^2} \\\n  ...\n  R{1^2} = - R{2^2} \\\
    \n  R{1^2} = R{2^2} \\\n  R{1^2} = - R{2} \\\n  R{1^2} = - R{2^2} \\\n  R{1^2}\
    \ = - R{2^2} \\\n  R{1^2} = - R{2^2} \\\n  \\text{and} \\\n  R{1^2} = - R{2} \\\
    \n  R{1^2} = - R{2^2} \\\n  R{1^2} = - R{2^2} \\\n  R{1^2} = - R{2^2} \\\n  ...\n\
    \  R{1^2} = - R{2^2} \\\n  R{1^2} = - R{2} \\\n  R{1^2} = - R{2^2} \\\n  R{1^2}\
    \ = - R{2^2} \\\n  R{1^2} = - R{2^2} \\\n\\end{align}\n$$\nwhere $R{1^2}$ is the\
    \ score of the first match and $R{2^2}$ is the score of the second match. \nThe\
    \ winning score of the match is the score of the match with the maximum number\
    \ of matches.\n\nThe first two \nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu__tc0pw_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074327
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n\n    for idx, score := range game {\n        result[idx] = score\
    \ - guess[idx]\n        if result[idx] >= 0 {\n            result[idx] = 0\n \
    \       } else {\n            result[idx] = abs(result[idx])\n        }\n    }\n\
    \n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ddbk49s_test.go:28:27: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    scores := make([]int,\
    \ len(game))\n    for i, score := range game {\n        if score == 0 {\n    \
    \        scores[i] = 0\n        } else {\n            scores[i] = guess[i] - score\n\
    \        }\n    }\n    return scores\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpgb7ze4ys_test.go:48: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-3)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpgb7ze4ys_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-2) %!s(int=-4)\
    \ %!s(int=-6)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpgb7ze4ys_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-2)\
    \ %!s(int=0) %!s(int=0) %!s(int=-1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if len(game) !=\
    \ len(guess) {\n        return []int{}\n    }\n    sort.Ints(game)\n    sort.Ints(guess)\n\
    \    result := make([]int, len(guess))\n    for i, g := range game {\n       \
    \ if guess == []int{g} {\n            result[i] = 0\n        } else {\n      \
    \      result[i] = abs(g-guess[i])\n        }\n    }\n    return result\n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsitatnmz_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpsitatnmz_test.go:25:5: undefined: sort\n/tmp/tmpsitatnmz_test.go:28:12:\
    \ invalid operation: guess == []int{\u2026} (slice can only be compared to nil)\n\
    /tmp/tmpsitatnmz_test.go:31:25: undefined: abs\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    correct,\
    \ total := 0, 0\n\n    // TODO\n    for i := range game{\n        if game[i] ==\
    \ guess[i] {\n            correct += 1\n        }\n    }\n    \n    return game\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl8zzena_test.go:22:14: total declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n\n    for i := range guess {\n        result[i] = abs(game[i] -\
    \ guess[i])\n    }\n    return result\n}\nfunc TestCompare(t *testing.T) {\n \
    \ candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n\
    \     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected:\
    \ []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3}, []int{-1,\
    \ -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1, 2,\
    \ 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpft6q2l3k_test.go:24:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    fmt.Println(game)\n\
    \    fmt.Println(guess)\n\n    diff := []int{}\n    diffLen := 0\n\n    if game[guess[0]]\
    \ == game[guess[1]] {\n        diffLen = 0\n        diff := append(diff, game[guess[0]])\n\
    \    } else {\n        diffLen = len(guess) - 2\n        diff := append(diff,\
    \ game[guess[0]])\n        for i := 0; i < len(guess); i++ {\n            if guess[i+1]\
    \ != game[guess[i]] {\n                diffLen++\n                diff := append(diff,\
    \ game[guess[i]])\n            } else {\n                diffLen--\n         \
    \   }\n        }\n    }\n\n    fmt.Println(diff)\n\n    return diff\n}\n</code>\n\
    <|/ a |>\n<| c |>\nHi Jakob, thanks for your answer, but I'm sorry I didn't understand\
    \ your answer.\n<|/ c |>\n<| c |>\nHi Jakob, I think you missed a part in the\
    \ question. the numbers in the first list are randomly generated, and the numbers\
    \ in the second are manually entered by the user. These lists could be of any\
    \ length. I don't know if I'm answering the question correctly. Could you please\
    \ help me to find out ?\n<|/ c |>\n<| c |>\nI figured it out. Your answer was\
    \ very helpful. Thanks a lot.\n<|/ c |>\n<| c |>\nYou're very welcome! If this\
    \ is the answer you were looking for, please consider accepting it by clicking\
    \ the green checkmark to let other users know it's been answered.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5_7mti07_test.go:47:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074327
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // I believe that\
    \ this function should return an error if a parameter is missing\n    if len(guess)\
    \ != len(game) || len(guess) < len(game) {\n        err := fmt.Errorf(\"guess\
    \ length: %s, game length: %s\", len(guess), len(game))\n        fmt.Println(err)\n\
    \        return nil\n    }\n\n    // I think I believe that we should be able\
    \ to reuse this function with different types to get a list back\n    // that\
    \ we can then return to the caller. \n    return calculateDistances(game, guess)\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqnevboo5_test.go:30:12: undefined: calculateDistances

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    //TODO: Fill out\
    \ code\n    result := make([]int, len(game))\n    for i := 0; i < len(game); i++\
    \ {\n        result[i] = 0\n    }\n    for i := 0; i < len(game); i++ {\n    \
    \    if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        } else {\n            result[i] = 0\n        }\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbfjtjsh_test.go:28:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    x := make([]int,\
    \ len(game))\n    y := make([]int, len(game))\n    for i := 0; i < len(game);\
    \ i++ {\n        y[i] = game[i]\n        x[i] = guess[i]\n    }\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if x[i] != y[i] {\n            x[i] = x[i]\
    \ - y[i]\n            y[i] = y[i] + x[i]\n            x[i] = x[i] + y[i]\n   \
    \     }\n    }\n    return x\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmps_oy5as__test.go:53: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=-1)\
    \ %!s(int=-5)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmps_oy5as__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-3) %!s(int=-6)\
    \ %!s(int=-9)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmps_oy5as__test.go:53:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=3) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // your code here\n\
    \    gameLen := len(game)\n    guessLen := len(guess)\n    \n    // check lengths\n\
    \    if gameLen != guessLen {\n        return nil\n    }\n    \n    // init return\
    \ value\n    result := make([]int, guessLen)\n    \n    // loop for guess\n  \
    \  for i := 0; i < guessLen; i++ {\n        \n        // loop through game and\
    \ compare current guess with score at index\n        for j := 0; j < gameLen;\
    \ j++ {\n            if game[j] == guess[i] {\n                result[i] = 0\n\
    \            } else if game[j] > guess[i] {\n                result[i] = game[j]\
    \ - guess[i]\n            } else {\n                result[i] = guess[i] - game[j]\n\
    \            }\n        }\n    }\n    \n    // return result\n    return result\n\
    }\n</code>\n<|/ a tags=go,arrays |>\n<| c |>\nThanks for the help. My mistake\
    \ was that I assumed that the second for loop was the wrong one to loop through\
    \ the game array. I wasn't aware that I had to loop through the game array twice.\
    \ Also, thanks for the advice on using fmt.Println(). I will definitely consider\
    \ using that from now on.\n<|/ c |>\n<| c |>\nYou're very welcome! Feel free to\
    \ upvote my answer and mark it as correct, if it answers your question.\n<|/ c\
    \ |>\n<| c |>\nI noticed you haven't used fmt.Println() in any of the code. I'm\
    \ fairly new to Go, and I haven't seen anyone use it before. Why is that? Is it\
    \ better or is it just personal preference?\n<|/ c |>\n<| c |>\nI've added the\
    \ fmt.Println() statement in both examples. I haven't seen anyone use it before.\
    \ My guess is that it's better practice. The function prints stuff to standard\
    \ output. Go has a built-in package called `fmt` which contains various functions\
    \ to print stuff to standard output. `Println()` just prints a newline character\
    \ to the standard output stream. Here's a link to the documentation: https://golang.org/pkg/fmt/\
    \ .\n<|/ c |>\n<| c |>\nThanks for the explanation. It was very helpful.\n<|/\
    \ c |>\n<| a tags=go,arrays dscore=2 |>\nI wanted to add something more to what\
    \ said, so here's a more complete answer. I've added some print statements so\
    \ that you can see what's happening step by step, but of course the code could\
    \ use better error handling.\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmde53cbe_test.go:51:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for idx, score := range game {\n        guessed := true\n \
    \       for i, v := range guess {\n            if v != score {\n             \
    \   guessed = false\n                break\n            }\n        }\n       \
    \ if guessed {\n            result[idx] = 0\n        } else {\n            result[idx]\
    \ = abs(score - guess)\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpulbl_q44_test.go:24:13: i declared but not used

    /tmp/tmpulbl_q44_test.go:33:27: undefined: abs

    /tmp/tmpulbl_q44_test.go:33:31: invalid operation: score - guess (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Your code here\n\
    \    return guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpfzphlk42_test.go:41: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpfzphlk42_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpfzphlk42_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for idx, score := range game {\n        result[idx] = guess[idx]\n\
    \        if guess[idx] == score {\n            result[idx] = 0\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpwj96rlpx_test.go:47: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpwj96rlpx_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpwj96rlpx_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n\
    \    \n    if len(game) != len(guess) {\n        return []int{len(guess)}\n  \
    \  }\n    \n    gameCopy, guessCopy := make([]int, len(game)), make([]int, len(guess))\n\
    \    copy(gameCopy, game)\n    copy(guessCopy, guess)\n    \n    i := 0\n    \n\
    \    for gameCopy[i] != guessCopy[i] {\n        result = append(result, int(abs(guessCopy[i]\
    \ - gameCopy[i])))\n        i ++\n    }\n    \n    return result\n}\n</code>\n\
    As you can see, this solution is very similar to yours. I refactored it a bit\
    \ to make it shorter. Also, note that the game, guess should be swapped in the\
    \ compare function, since we want to start from the first guess and start from\
    \ the first score to calculate the \"game\" result (as the example shows).\n<|/\
    \ a tags=go,function,slice dscore=1 |>\n<| c |>\nThank you very much. This is\
    \ a very nice solution. I will try and adapt it to my code to see if I can get\
    \ it to work.\n<|/ c |>\n<| a dscore=0 |>\nI used the same method as Jonathan\
    \ Kimball's answer, but using maps, instead of slices. It works really well, if\
    \ you know the length of both the lists. This is how I did it - hope it helps:\n\
    <code>\npackage main\n\nimport \"fmt\"\n\nfunc TestCompare(t *testing.T) {\n \
    \ candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n\
    \     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected:\
    \ []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3}, []int{-1,\
    \ -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1, 2,\
    \ 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzt8iux86_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    games := make([]int,\
    \ len(guess))\n    for i, w := range guess {\n        games[i] = game[i]\n   \
    \ }\n\n    for i, w := range guess {\n        games[i] = abs(games[i] - w)\n \
    \   }\n\n    return games\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6fljqhus_test.go:22:12: w declared but not used

    /tmp/tmp6fljqhus_test.go:27:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    //return []int{0,\
    \ 0, 0, 0, 0, 0}\n    fmt.Println(fmt.Sprintf(\"compare(%+v, %+v)\", game, guess))\n\
    \    \n    var result []int\n    var index int\n    var index int\n    for index\
    \ = 0; index < len(guess); index++ {\n        // print game and guess\n      \
    \  // fmt.Println(\"game\", game)\n        fmt.Println(\"guess\", guess[index])\n\
    \        \n        // if index matches game index, add 1\n        if index ==\
    \ len(game) {\n            result[index] = 1\n        } else if game[index] ==\
    \ guess[index] {\n            result[index] = 0\n        } else {\n          \
    \  // if index doesn't match game index, subtract 1\n            result[index]\
    \ = abs(game[index] - guess[index])\n        }\n    }\n    fmt.Println(\"result\"\
    , result)\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaeeqpgib_test.go:26:9:\
    \ index redeclared in this block\n\t/tmp/tmpaeeqpgib_test.go:25:9: other declaration\
    \ of index\n/tmp/tmpaeeqpgib_test.go:39:29: undefined: abs\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if len(game) !=\
    \ len(guess) {\n        return nil\n    }\n\n    res := make([]int, len(guess))\n\
    \    for i, p := range guess {\n        d := game[i] - p\n        if d != 0 {\n\
    \            d += d\n        }\n        res[i] = d\n    }\n    return res\n}\n\
    \nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpgvc0klj7_test.go:52: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=6)\
    \ %!s(int=6)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpgvc0klj7_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpgvc0klj7_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=4) %!s(int=0)\
    \ %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result = make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = game[i] - guess[i]\n\
    \        if result[i] < 0 {\n            result[i] += len(game)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i, g := range guess {\n        if g > 0 {\n           \
    \ if g < game[i] {\n                result[i] = 0\n            } else {\n    \
    \            result[i] = g - game[i]\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpxlr3f9dz_test.go:50: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpxlr3f9dz_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpxlr3f9dz_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    gameSlice := make([]int,\
    \ len(game))\n    for i := range game {\n        gameSlice[i] = game[i]\n    }\n\
    \n    guessSlice := make([]int, len(guess))\n    for i := range guess {\n    \
    \    guessSlice[i] = guess[i]\n    }\n\n    result := make([]int, len(guess))\n\
    \    var gameIndex, guessIndex int\n    for i := 0; i < len(guess); i++ {\n  \
    \      if guessSlice[i] == gameSlice[gameIndex] {\n            gameIndex++\n \
    \           continue\n        }\n        if guessSlice[i] > gameSlice[gameIndex]\
    \ {\n            gameIndex++\n            result[i] = 0\n        } else {\n  \
    \          gameIndex++\n            result[i] = guessSlice[i] - gameSlice[gameIndex]\n\
    \        }\n    }\n    return append(result, gameIndex-guessIndex...) // don't\
    \ forget to add the original gameIndex\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\nI haven't looked at the other solutions mentioned above, but I found a solution\
    \ using recursion and lists.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n\
    )\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpznrjlm1e_test.go:48:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(game))\n    for i, v := range game {\n        result[i] = v\n        if\
    \ i == len(guess) {\n            return result\n        }\n        diff := v -\
    \ guess[i]\n        if diff < 0 {\n            result[i] = 0\n        } else {\n\
    \            result[i] = diff\n        }\n    }\n    return result\n}\n</code>\n\
    <|/ a tags=sorting,go |>\n<| a |>\nThis is a tough one! I have my solution, but\
    \ I'm not sure it is correct...\n<code>\npackage main\n\nimport (\n    \"bufio\"\
    \n    \"fmt\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n    \"testing\"\n\
    )\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkbpm6ml3_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if len(game) !=\
    \ len(guess) {\n        return nil\n    }\n    var scores []int\n    scores :=\
    \ make([]int, len(game))\n    \n    for i := 0; i < len(game); i++ {\n       \
    \ scores[i] = game[i] - guess[i]\n    }\n    return scores\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp270af1kd_test.go:25:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    \n    \n\
    \    var winner int\n    var diff []int\n    var counter1 int = 0\n    var counter2\
    \ int = 0\n    \n    diff := make([]int, len(guess))\n    \n    for i, j := 0,\
    \ 0; j < len(game); i++, j++ {\n        fmt.Println(game[i], guess[j])\n     \
    \   if game[i] == guess[j] {\n            diff[j] = 0 // same game, no change\n\
    \            counter1++\n            counter2++\n        }\n        if game[i]\
    \ > guess[j] {\n            diff[j] = 0\n            counter1++\n        }\n \
    \       if game[i] < guess[j] {\n            diff[j] = 0\n            counter2++\n\
    \        }\n        winner = counter1\n        counter1 = 0\n        counter2\
    \ = 0\n    }\n    \n    // Print winner\n    for i, j := 0, 0; j < len(diff);\
    \ i++, j++ {\n        if diff[j] != 0 {\n            fmt.Printf(\"%v - %v = %d\\\
    n\", game[i], guess[j], diff[j])\n        }\n    }\n    \n    // Sort diff\n \
    \   var n int = len(diff)\n    diff := make([]int, n)\n    for i, j := 0, 0; j\
    \ < n; j++, i++ {\n        if diff[j] != 0 {\n            diff[i] = diff[j]\n\
    \        }\n    }\n    \n    return diff\n}\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdp7x2mxs_test.go:31:41: expected ''{'', found '',''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    gameLength := len(game)\n\
    \    guessLength := len(guess)\n    result := make([]int, gameLength)\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := 0; i < guessLength;\
    \ i++ {\n        for j := 0; j < gameLength; j++ {\n            if game[j] ==\
    \ guess[i] {\n                result[j] = 1\n                break\n         \
    \   }\n        }\n    }\n    for i := 0; i < guessLength; i++ {\n        for j\
    \ := 0; j < gameLength; j++ {\n            if result[j] == 1 {\n             \
    \   result[j] = result[j] - abs(game[j] - guess[i])\n            }\n        }\n\
    \    }\n    return result\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=go\
    \ |>\nIn Java you can do it like this:\n<code>\npublic int[] getWinner(int[] game,\
    \ int[] guess) {\n    // We only need to do one loop\n    int i = 0, j = 0;\n\
    \    int[] result = new int[game.length];\n\n    while (i < game.length && j <\
    \ guess.length) {\n        // If any of game, guess is equal to the current element\
    \ of result array\n        if (game[i] == result[j]) {\n            i++;\n   \
    \         j++;\n        }\n        // If any of guess, game is equal to the current\
    \ element of result array\n        else if (guess[i] == result[j]) {\n       \
    \     j++;\n        }\n        // If we reached end of both arrays, game is winner\n\
    \        else if (i == game.length && j == guess.length) {\n            result[i]\
    \ = 1;\n        }\n        // Else game, guess is not equal to each other\n  \
    \      else {\n            result[i] = 0;\n        }\n    }\n\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=go |>\nYou can do it this way in Go:\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp38dgqjpm_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    return comparer(game,\
    \ guess, len(game), len(guess))\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeaqgypf4_test.go:21:12: undefined: comparer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    gameLen, guessLen\
    \ := len(game), len(guess)\n    game, guess = removeOne(game, guess)\n    \n \
    \   diff := make([]int, guessLen)\n    for i := 0; i < guessLen; i++ {\n     \
    \   diff[i] = guess[i] - game[i]\n    }\n    \n    correctGuesses := make([]bool,\
    \ guessLen)\n    for i := 0; i < guessLen; i++ {\n        if game[i] == guess[i]\
    \ {\n            correctGuesses[i] = true\n        } else {\n            correctGuesses[i]\
    \ = false\n        }\n    }\n    \n    correctGuesses := removeOne(correctGuesses,\
    \ game)\n    return diff\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpde4xu0eq_test.go:21:5: gameLen declared but not used

    /tmp/tmpde4xu0eq_test.go:22:19: undefined: removeOne

    /tmp/tmpde4xu0eq_test.go:38:20: no new variables on left side of :=

    /tmp/tmpde4xu0eq_test.go:38:23: undefined: removeOne

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    diff := 0\n\n    for index, value := range guess {\n      \
    \  if value != game[index] {\n            diff += abs(value - game[index])\n \
    \       }\n    }\n\n    result[diff] = diff\n\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1g0fs2q6_test.go:26:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7gu0cqh_test.go:23:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var gameCopy =\
    \ make([]int, len(game))\n    copy(gameCopy, game)\n    var guessCopy = make([]int,\
    \ len(guess))\n    copy(guessCopy, guess)\n\n    for _, v := range guessCopy {\n\
    \        gameCopy[v] = -1\n    }\n\n    for _, v := range gameCopy {\n       \
    \ if v != -1 {\n            for _, w := range guessCopy {\n                if\
    \ v == w {\n                    gameCopy[v] = 0\n                    guessCopy[w]\
    \ = 0\n                    break\n                }\n                gameCopy[v]\
    \ = gameCopy[v] - guessCopy[w]\n                guessCopy[w] = guessCopy[w] +\
    \ gameCopy[v]\n            }\n        }\n    }\n\n    return guessCopy\n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\npanic: runtime error: index out of range\
    \ [-2] [recovered]\n\tpanic: runtime error: index out of range [-2]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513740, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513740, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.compare({0xc00007e668, 0x6, 0x5d40f0?},\
    \ {0xc00007e638, 0x6, 0x5d40f0?})\n\t/tmp/tmpsb8x0752_test.go:27 +0x168\ncommand-line-arguments_test.TestCompare(0x0?)\n\
    \t/tmp/tmpsb8x0752_test.go:54 +0x126\ntesting.tRunner(0xc0000da340, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074331
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // code here\n\
    \    m := make([]int, len(guess))\n    \n    for i, _ := range guess {\n     \
    \   m[i] = 0\n    }\n    \n    for i, _ := range g {\n        m += guess\n   \
    \ }\n    \n    return m\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_qsg3d5_test.go:28:23: undefined: g

    /tmp/tmp3_qsg3d5_test.go:29:9: invalid operation: operator + not defined on m
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // We are comparing\
    \ against a copy of the game. Why?\n    // Because you cannot mutate the game\
    \ list while you are iterating over it.\n    // Example:\n    // >>> g = [1, 3,\
    \ 5, 7, 9]\n    // >>> list(g)\n    // [1, 3, 5, 7, 9]\n    // >>> for i in g:\n\
    \    // ...     g.append(i)\n    // ...     print(g)\n    // [1, 3, 5, 7, 9, 1,\
    \ 3, 5, 7, 9]\n    // [1, 3, 5, 7, 9, 1, 3, 5, 7, 9]\n    \n    type Result int\n\
    \    var result []int\n    \n    for index, guess := range guess {\n        diff\
    \ := abs(guess - game[index])\n        if diff == 0 {\n            result[index]\
    \ = 0\n        } else {\n            result[index] = diff\n        }\n    }\n\
    \    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_7umbqk6_test.go:37:17: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var ret []int\n\
    \n    if len(game) != len(guess) {\n        return nil\n    }\n\n    for i :=\
    \ 0; i < len(game); i++ {\n        var x int\n\n        if i == len(game)-1 {\n\
    \            x = game[i] > guess[i] ? 1 : -1\n        } else {\n            x\
    \ = game[i] > guess[i] && game[i] > guess[i+1] ? 1 : -1\n        }\n\n       \
    \ ret[i] = x\n    }\n\n    return ret\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3by1v_ao_test.go:31:36: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = guess[i] - game[i]\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmp1rx9zp95_test.go:44: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-3)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmp1rx9zp95_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-2) %!s(int=-4)\
    \ %!s(int=-6)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmp1rx9zp95_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-2)\
    \ %!s(int=0) %!s(int=0) %!s(int=-1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg3jkqty1_test.go:278:6: expected ''('', found TestCompare

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074111
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n\
    \    var scores []int\n    var index int\n    var minIndex int\n    var minScore\
    \ int\n    var maxIndex int\n    var maxScore int\n    var minGuess, maxGuess\
    \ int\n    var diff int\n    var minGuessList, maxGuessList []int\n    var i int\n\
    \    var k int\n    var score int\n\n    for i = 0; i < len(game); i++ {\n   \
    \     scores = []int{}\n        minGuess = 0\n        maxGuess = 0\n        score\
    \ = 0\n        index = i\n        minIndex = 0\n        maxIndex = 0\n       \
    \ minScore = 9999\n        maxScore = -20000\n        for k = 0; k < len(guess);\
    \ k++ {\n            score += guess[k]\n            if score > maxScore {\n  \
    \              maxScore = score\n                maxGuessList = guess\n      \
    \          maxGuess = guess[k]\n                maxIndex = k\n            }\n\
    \            if score < minScore {\n                minScore = score\n       \
    \         minGuessList = guess\n                minGuess = guess[k]\n        \
    \        minIndex = k\n            }\n            scores = append(scores, score)\n\
    \        }\n        if game[index] == 1 {\n            if index == 0 {\n     \
    \           diff = minGuess - maxGuess\n                if diff <= 0 {\n     \
    \               result = []int{0, 0, 0, 0, 0, 0}\n                } else {\n \
    \                   result = []int{0, 0, 0, 0, 0, diff}\n                }\n \
    \           } else {\n                minIndex++\n                maxIndex++\n\
    \                diff = minGuessList[maxIndex] - minGuess[minIndex]\n        \
    \        if diff <= 0 {\n                    result = []int{0, 0, 0, 0, 0, 0}\n\
    \                } else {\n                    result = []int{0, 0, 0, 0, 0, diff}\n\
    \                }\n            }\n        } else {\n            if index == 0\
    \ {\n                diff = maxGuess - minGuess\n                if diff <= 0\
    \ {\n                    result = []int{0, 0, 0, 0, 0, 0}\n                } else\
    \ {\n                    result = []int{0, 0, 0, 0, 0, diff}\n               \
    \ }\n            } else {\n                maxIndex++\n                minIndex++\n\
    \                diff = maxGuessList[minIndex] - maxGuess[maxIndex]\n        \
    \        if diff <= 0 {\n                    result = []int{0, 0, 0, 0, 0, 0}\n\
    \                } else {\n                    result = []int{0, 0, 0, 0, 0, diff}\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_1fevew_test.go:72:57: invalid operation: cannot index minGuess (variable
    of type int)

    /tmp/tmp3_1fevew_test.go:90:57: invalid operation: cannot index maxGuess (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    var wins\
    \ []int\n    for _, v := range guess {\n        wins = append(wins, 0)\n    }\n\
    \    \n    for _, v := range game {\n        i := 0\n        for _, v := range\
    \ guess {\n            if  v > game[i] {\n                wins[i] += 1\n     \
    \           break\n            }\n            i += 1 \n        }\n    }\n    return\
    \ wins\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vmm8xog_test.go:23:12: v declared but not used

    /tmp/tmp6vmm8xog_test.go:27:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Write your code\
    \ here\n\n    return []int{0, 0, 0, 0, 0, 0}\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmp9rvg6nao_test.go:42: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmp9rvg6nao_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n\
    \        tmp9rvg6nao_test.go:42: expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    fmt.Println(game,\
    \ guess)\n    game1 := make([]int, len(game))\n    guess1 := make([]int, len(guess))\n\
    \    for i := 0; i < len(game); i++ {\n        game1[i] = game[i]\n        guess1[i]\
    \ = guess[i]\n    }\n    var ans []int\n    for i := 0; i < len(game); i++ {\n\
    \        if game1[i] == guess1[i] {\n            ans = append(ans, 0)\n      \
    \  } else {\n            ans = append(ans, abs(guess1[i] - game1[i]))\n      \
    \  }\n    }\n    fmt.Println(ans)\n    return ans\n}\n</code>\n<|/ a |>\n<| a\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n    \"strings\"\
    \n)\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm5hbifof_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Your code goes\
    \ here\n    var result []int\n    var i = 0\n    var j = 0\n    for i < len(guess)\
    \ && j < len(game) {\n        if game[i] == guess[j] {\n            i++ \n   \
    \         j++\n        } else {\n            result += [i - j + abs(i-j)]\n  \
    \          i--\n            j--\n        }\n    }\n\n    if j > len(guess) {\n\
    \        j = len(guess)\n    }\n\n    if i < len(guess) {\n        result += [i\
    \ - j + abs(i-j)]\n    }\n\n    return result\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 tags=go,arrays |>\nThis solution is more concise and easy to understand\
    \ than others I found in Stackoverflow. This solution is also more efficient as\
    \ it uses a single loop instead of 2. \n<code>\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvese38e9_test.go:30:41: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    gameResult := make([]int,\
    \ len(game))\n    guessResult := make([]int, len(guess))\n\n    // Initialize\
    \ guesses with the best possible result\n    for i := 0; i < len(guess); i++ {\n\
    \        guessResult[i] = game[i]\n    }\n\n    // For each possible guess, calculate\
    \ the result and compare to the best guess\n    // For each possible guess, calculate\
    \ the result and compare to the best guess\n    for i := 0; i < len(game); i++\
    \ {\n        guess, err := compareGuessToGame(guess[i], game)\n        if err\
    \ != nil {\n            return nil\n        }\n\n        // If the guess and score\
    \ are equal, keep a track of this\n        if guess == game[i] {\n           \
    \ gameResult[i] = 0\n            continue\n        }\n\n        // Calculate the\
    \ difference of the two values\n        diff := abs(guess - game[i])\n\n     \
    \   // If they are equal, then keep a track of this\n        if guess == game[i]\
    \ {\n            gameResult[i] = 0\n        }\n\n        // Otherwise, if they\
    \ were wrong, keep a track of this and update the best guess\n        // If there\
    \ is a tie, then the tie will be broken out by adding up the differences between\
    \ the guesses.\n        // The tie is broken out by adding up the differences\
    \ between the guesses.\n        if diff <= gameResult[i] {\n            gameResult[i]\
    \ = diff\n            guessResult[i] = guess\n        }\n    }\n\n    // If no\
    \ scores were found, then there was a tie, so return the difference between the\
    \ best guess and the best score\n    if guessResult == gameResult {\n        gameResult[len(guessResult)]\
    \ = game[len(gameResult)]\n    }\n    return gameResult\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mg1vnlq_test.go:32:23: undefined: compareGuessToGame

    /tmp/tmp3mg1vnlq_test.go:44:17: undefined: abs

    /tmp/tmp3mg1vnlq_test.go:61:8: invalid operation: guessResult == gameResult (slice
    can only be compared to nil)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    fmt.Println(game,\
    \ guess)\n    lenGame := len(game)\n    lenGuess := len(guess)\n\n    if lenGame\
    \ != lenGuess {\n        panic(\"guess and game must be the same length\")\n \
    \   }\n\n    var ret []int\n    for i := 0; i < lenGuess; i++ {\n        val :=\
    \ game[i] - guess[i]\n        if val < 0 {\n            panic(\"guess must be\
    \ greater than game\")\n        }\n        if val > 0 {\n            ret = append(ret,\
    \ val)\n        }\n    }\n    return ret\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 2 3 4 5 1] [1 2 3 4 2 -2]\n[0 0 0 0 0 0] [0 0 0 0 0 0]\n[1 2 3] [-1\
    \ -2 -3]\n[1 2 3 5] [-1 2 3 4]\n--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0\
    \ (0.00s)\n        tmpgmp1nzvc_test.go:58: expected '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=3)]', got '[%!s(int=3) %!s(int=3)]'\n    --- FAIL:\
    \ TestCompare/test_num__1 (0.00s)\n        tmpgmp1nzvc_test.go:58: expected '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[]'\n    ---\
    \ FAIL: TestCompare/test_num__3 (0.00s)\n        tmpgmp1nzvc_test.go:58: expected\
    \ '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        match := false\n        for j := range game\
    \ {\n            if game[j] == guess[i] {\n                match = true\n    \
    \            game[j] = 0\n                break\n            }\n        }\n  \
    \      if !match {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    return result\n}\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1skqizgs_test.go:35:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    scores := make([]int, len(game))\n    for i, score := range\
    \ game {\n        scores[i] = score\n    }\n    for _, guess := range guess {\n\
    \        for i, score := range scores {\n            if guess == score {\n   \
    \             result[i] = 0\n            } else {\n                result[i] =\
    \ abs(guess - score)\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ywnqf6r_test.go:31:29: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n\
    \    var ok bool\n    var score0, score1 int\n    for _, gameI := range game {\n\
    \        score0, score1 = gameI, guess[0]\n        for _, guessI := range guess\
    \ {\n            ok = false\n            if guessI != 0 {\n                for\
    \ i := 0; i < len(guess); i++ {\n                    if gameI == guess[i] {\n\
    \                        ok = true\n                        break\n          \
    \          }\n                }\n            }\n            if ok {\n        \
    \        break\n            }\n            score1 = abs(score1 - guessI)\n   \
    \     }\n        result = append(result, score1)\n    }\n    return result\n}\n\
    </code>\n<|/ a tags=go,algorithm,arrays |>\n<| c |>\nThe performance is actually\
    \ very good. I ran the code with a few large test cases I had, on a large array\
    \ of size `1000000` and it ran in about half the time as the accepted answer on\
    \ my machine.\n<|/ c |>\n<| c |>\nI added a version of the algorithm above to\
    \ show how to use the `sort.Search` function to speed things up. I'm not sure\
    \ how that compares with my implementation, but I suspect it might perform better.\n\
    <|/ c |>\n<| c |>\nThe search is O(log n) time, but the sort is O(n) time. If\
    \ your data is really big, then the sorting will be slower. My algorithm is O(n).\n\
    <|/ c |>\n<| a tags=go,algorithm,arrays |>\nI wrote a simple program to solve\
    \ this using golang, please note that this function assumes that you are given\
    \ a single number for each index\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"sort\"\n)\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ra0yfc2_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct = 0\n\
    \    var miss = 0\n    for _, g := range game {\n        if g == guess[correct]\
    \ {\n            correct++\n        } else {\n            miss++\n        }\n\
    \    }\n    return []int{0, 0, miss, 0, correct}\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpj5z9cmpr_test.go:49: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=4)]'\n\
    \    --- FAIL: TestCompare/test_num__1 (0.00s)\n        tmpj5z9cmpr_test.go:49:\
    \ expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=6)]'\n    --- FAIL:\
    \ TestCompare/test_num__2 (0.00s)\n        tmpj5z9cmpr_test.go:49: expected '[%!s(int=2)\
    \ %!s(int=4) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpj5z9cmpr_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    score := make([]int,\
    \ len(game))\n    var correct int\n    for i, g := range game {\n        if g\
    \ == 0 {\n            continue\n        }\n        if game[i] != guess {\n   \
    \         score -= guess\n            correct++\n        }\n    }\n    for i :=\
    \ range guess {\n        score += game[i]\n    }\n    if correct == 0 {\n    \
    \    return score\n    }\n    return score\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2215tc1z_test.go:27:23: invalid operation: game[i] != guess (mismatched
    types int and []int)

    /tmp/tmp2215tc1z_test.go:28:13: invalid operation: operator - not defined on score
    (variable of type []int)

    /tmp/tmp2215tc1z_test.go:33:9: invalid operation: score += game[i] (mismatched
    types []int and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // your code here\n\
    \    \n    \n    \n    return scoreDiff\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpst5c1n_v_test.go:25:12: undefined: scoreDiff

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if len(guess) ==\
    \ 0 {\n        return game\n    }\n\n    diff := []int{}\n\n    for i, _gameGuessed\
    \ := range game {\n        var gameGuess int = 0\n        if i != 0 {\n      \
    \      gameGuess = game[i-1]\n        }\n\n        if guess[0] > gameGuess {\n\
    \            diff[i] = guess[0] - gameGuess\n        } else {\n            diff[i]\
    \ = gameGuess - guess[0]\n        }\n    }\n\n    return diff\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiqd5x9us_test.go:27:12: _gameGuessed declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    ret := make([]int,\
    \ len(guess))\n\n    for i := range ret {\n        if guess[i] == game[i] {\n\
    \            ret[i] = 0\n        } else {\n            diff := guess[i] - game[i]\n\
    \            if diff < 0 {\n                diff *= -1\n            }\n      \
    \      ret[i] = diff\n        }\n    }\n\n    return ret\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if game== nil ||\
    \ guess== nil {\n        return []int{0, 0, 0, 0, 0}\n    }\n    \n    // Sort\
    \ the list\n    sort.Ints(game)\n    sort.Ints(guess)\n    \n    // Calculate\
    \ the absolute difference of each number in both lists\n    diffs := make([]int,\
    \ len(guess))\n    for i := range diffs {\n        diffs[i] = abs(guess[i] - game[i])\n\
    \    }\n    \n    // Return the absolute differences\n    return diffs\n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpge6fye7k_test.go:26:5: undefined: sort

    /tmp/tmpge6fye7k_test.go:27:5: undefined: sort

    /tmp/tmpge6fye7k_test.go:32:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    score := make([]int,\
    \ len(game))\n    for i := range score {\n        if guess == nil || len(guess[i])\
    \ != len(game[i]) {\n            return score\n        }\n        score [i] =\
    \ game[i] - guess[i]\n    }\n    return score\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpui6zxqzu_test.go:23:32: invalid argument: guess[i] (variable of type int)
    for len

    /tmp/tmpui6zxqzu_test.go:23:49: invalid argument: game[i] (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var diff []int\n\
    \    \n    // Start off with zeros equal to the length of the guess.\n    zero\
    \ := guess\n    for _, v := range zero {\n        diff = append(diff, v)\n   \
    \ }\n\n    // Go through each guess and check it against the game scores\n   \
    \ for _, v := range guess {\n        for _, w := range game {\n            if\
    \ w == v {\n                // Match! Add the difference to our list of differences.\n\
    \                diff := diff + []int{v - w}\n                // Set the number\
    \ of matches to one less than the previous game.\n                game = game[:len(game)-1]\n\
    \                // Go through our list of games again and reset our number of\
    \ matches back to zero.\n                zero = zero[:len(zero)-1]\n         \
    \       break\n            }\n        }\n    }\n    return diff\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=go,if-statement |>\nIf you look at your if statement\
    \ you see:\n<code>\nif w == v {\n</code>\nThis is an if statement, which means\
    \ the code inside it gets executed only if the condition is true.\nYour condition\
    \ is always true:\n<code>\nw == v\n</code>\nWhat you want is either this:\n<code>\n\
    if w != v {\n</code>\nOr this:\n<code>\nif w == 0 {\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI want the condition to be true when w and v are equal, but I can't figure\
    \ out how to do it.\n<|/ c |>\n<| a dscore=0 |>\nFor your second example:\n<code>\n\
    package main\n\nimport \"fmt\"\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6n5ueh8__test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var guesses  =\
    \ make([]int, len(guess))\n    var scores = make([]int, len(guess))\n    \n  \
    \  copy(guesses, guess)\n    copy(scores, game)\n    \n    for i := 0; i < len(guesses);\
    \ i++ {\n        if game[i] == guesses[i] {\n            scores[i] -= 1\n    \
    \    }\n    }\n    for i := 0; i < len(guesses); i++ {\n        if scores[i] !=\
    \ 0 {\n            scores[i] += game[i] - guesses[i]\n        }\n    }\n    for\
    \ i := 0; i < len(scores); i++ {\n        if scores[i] != 0 {\n            scores[i]\
    \ += game[i] - guesses[i]\n        } else {\n            scores[i] = 0\n     \
    \   }\n    }\n    return scores\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpne0ges28_test.go:63: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=11)\
    \ %!s(int=7)]'\n    --- FAIL: TestCompare/test_num__1 (0.00s)\n        tmpne0ges28_test.go:63:\
    \ expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]',\
    \ got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=-1)]'\n\
    \    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpne0ges28_test.go:63:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=5) %!s(int=10)\
    \ %!s(int=15)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpne0ges28_test.go:63:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=5) %!s(int=1)\
    \ %!s(int=2) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // code goes here\n\
    \    var ret []int\n    // go through each guess one by one\n    for i, g := range\
    \ guess {\n        if game[i] != g {\n            //fmt.Printf(\"i=%d g=%d not\
    \ equal\\n\", i, g)\n            ret = append(ret, abs(game[i] - g))\n       \
    \ } else {\n            //fmt.Printf(\"i=%d g=%d equal\\n\", i, g)\n         \
    \   ret[i] = 0\n        }\n    }\n    return ret\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkz52sbvn_test.go:27:31: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // First we need\
    \ to find out how much we differ\n    var diff []int\n    for i, j := range game\
    \ {\n        // Game index\n        fmt.Println(i, j)\n        if i != j {\n \
    \           // This index does differ, so add to diff\n            diff = append(diff,\
    \ abs(i-j))\n        }\n    }\n\n    // Now we figure out what the correct answer\
    \ is\n    // We are only interested in differences up to len(diff)\n    right\
    \ := 0\n    for _, index := range diff {\n        if index < len(guess) {\n  \
    \          right += guess[index] - game[index]\n        }\n    }\n\n    // Return\
    \ answer list\n    return diff\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo3yw305v_test.go:28:33: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    score := []int{0,\
    \ 0, 0, 0}\n    for i := 0; i < len(guess); i++ {\n        j := 0\n        for\
    \ {\n            if game[i] == guess[j] {\n                score[i] += 1 // We\
    \ have hit the guess and have a +1\n                if i == len(game)-1 {\n  \
    \                  score += [5] // We have hit the right spot, have a +5\n   \
    \             }\n                break\n            }\n            if j == len(guess)-1\
    \ {\n                break // We've got our score, but no luck with the guess\
    \ yet\n            }\n            j += 1 // Next guess \n        }\n    }\n  \
    \  return score\n}\n</code>\n<|/ a tags=python,c,algorithm,c++ |>\n<| c |>\nFor\
    \ me the output of this program is `[3, 3, 3, 3]`. Why does it not work? This\
    \ was my first attempt and I really don't understand where I am wrong.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to make it a bit clearer. Did you read it? I\
    \ think my code was a bit too messy, especially for someone who isn't a Python\
    \ coder.\n<|/ c |>\n<| c |>\nThe reason for the output is that the second part\
    \ is incorrect. `[0, 5, 0, 0, 0, 4]` should be `[4, 1, 1, 0, 0, -2]` to get `[4,\
    \ 4, 1, 0, 0, 6]` as the output. Sorry that your example was incorrect. The difference\
    \ between `[-2, -1, 0, -2, 0, -1]` and `[0, -1, 1, -1, 2, -1]` should be `[-2,\
    \ -1, 0, -2, 0, -1]`.\n<|/ c |>\n<| c |>\nAh! Thank you very much. I was thinking\
    \ about this problem from the wrong perspective. The fact that it took me a while\
    \ to understand the algorithm itself made it a lot clearer.\n<|/ c |>\n<| a tags=python,c,algorithm,c++\
    \ |>\nTo understand the question:\nThere are two sets of scores that we are given\
    \ as input: Guesses and Scores. Guesses are given in order. Scores are given in\
    \ order. For example, if Guesses = [1, 5] and Scores = [-7, -3]. This means that\
    \ we had a 3 on the first and -3 on the second, so we had a +1 for the first guess\
    \ and a +1 for the second.\n<code>\n+-------+-------+-------+-------+\n|   Guesses\
    \    |   Scores   |\n+-------+-------+-------+-------+\n|       1       |    \
    \   -7  |\n|       5       |       -3  |\n+-------+-------+-------+-------+\n\
    </code>\nWe can see \nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd9drabil_test.go:28:34: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074332
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    //TODO\n    res\
    \ := make([]int, len(guess))\n    for i, v := range guess {\n        // TODO\n\
    \        // I got stuck here and couldn't get it to work, any help would be great\n\
    \        \n    }\n    return res\n}\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzaimdp40_test.go:23:9: i declared but not used

    /tmp/tmpzaimdp40_test.go:23:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    // Your code\
    \ here.\n    var result []int\n    for i, a := range guess {\n        if !check(game\
    \ == a, guess) {\n            result = append(result, abs(game-a)+abs(a-guess))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdr7y_hze_test.go:24:9: i declared but not used

    /tmp/tmpdr7y_hze_test.go:25:13: undefined: check

    /tmp/tmpdr7y_hze_test.go:25:27: invalid operation: game == a (mismatched types
    []int and int)

    /tmp/tmpdr7y_hze_test.go:26:37: undefined: abs

    /tmp/tmpdr7y_hze_test.go:26:41: invalid operation: game - a (mismatched types
    []int and int)

    /tmp/tmpdr7y_hze_test.go:26:49: undefined: abs

    /tmp/tmpdr7y_hze_test.go:26:53: invalid operation: a - guess (mismatched types
    int and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // TODO: Rewrite\
    \ your compare function so that it returns the score\n    // of the match\n  \
    \  return game\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,algorithm,arrays,python\
    \ |>\nThis is a problem I frequently encounter when working with Python. Sometimes\
    \ I feel my algorithm is wrong or inefficient because of the way the language\
    \ treats lists.\nHere is an algorithm that might work better:\n<code>\ndef compare(game,\
    \ guess):\n    for i in range(len(game)):\n        if game[i] != guess[i]:\n \
    \           return abs(game[i] - guess[i])\n</code>\nHowever, I feel there is\
    \ an even more efficient algorithm:\n<code>\ndef compare(game, guess):\n    return\
    \ sum((game[i] == guess[i]) for i in range(len(game)))\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nYour algorithm will compare the same guess to many different games.\
    \ I guess your last code block should be `return sum(g == g for g in guess)`.\n\
    <|/ c |>\n<| c |>\nYes, you are correct. I meant to write `sum(g == g for g in\
    \ guess)`\n<|/ c |>\n<| a tags=sorting,algorithm,arrays,python |>\nYou could use\
    \ a simple list comprehension like this:\n<code>\n>>> [guess[i] - game[i] for\
    \ i in range(len(game))]\n[0, 3, 7, 3, 7, 3]\n</code>\nOr if you want a list of\
    \ differences between the guess and game scores use:\n<code>\n>>> [guess[i] -\
    \ game[i] for i in range(len(game))]\n[0, 7, 7, 7]\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=sorting,algorithm,arrays,python |>\nThis can be done in one line:\n\
    <code>\n[guess[i] - game[i] for i in range(len(game))]\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,algorithm,arrays,python |>\nI came up with this simple\
    \ approach:\n<code>\ndef compare(game, guess):\n  result = []\n  for i in range(len(game)):\n\
    \    result.append(abs(game[i] - guess[i]))\n  return result\n\ngame = [1,2,3,4,5,6]\n\
    guess = [1,4,3,2,4,3]\n\nprint(compare(game, guess))\n</code>\nThis returns a\
    \ list where each number is the difference between guess and game\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,algorithm,arrays,python |>\nThis can be done in one line\
    \ as below:\n<code>\ndef compare(game, guess):\n  return [abs(i - j) for i, j\
    \ in zip(game, guess)]\n</code>\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzws1g97j_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = guess[i] - game[i]\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmp1rx9zp95_test.go:44: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-3)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmp1rx9zp95_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-2) %!s(int=-4)\
    \ %!s(int=-6)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmp1rx9zp95_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-2)\
    \ %!s(int=0) %!s(int=0) %!s(int=-1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Write a function\
    \ to compare the two arrays.\n    // It should return the result of the comparison\
    \ (0, -1, or 1).\n    // The function should return a list\n    // with each index\
    \ representing the amount of off between the guess and the score.\n    // For\
    \ each index, compare the guess to the score.\n    // If the difference is zero,\
    \ return 0; otherwise return the absolute difference.\n    // If no differences\
    \ are found, return -1.\n    // The function takes two lists, and it returns -1\
    \ if both lists are empty or have no difference.\n    // If one of the lists is\
    \ empty or has no difference, the function will return a list\n    // with the\
    \ length of the other list.\n    // Your function should compare the two lists\
    \ and return -1, 0, or 1 accordingly.\n    // The lists must have equal length.\n\
    \n    if len(game) < len(guess) {\n        fmt.Println(len(guess))\n        fmt.Println(len(game))\n\
    \        return -1\n    }\n    if len(game) > len(guess) {\n        fmt.Println(len(guess))\n\
    \        fmt.Println(len(game))\n        return -1\n    }\n    if len(guess) ==\
    \ 0 {\n        fmt.Println(len(guess))\n        fmt.Println(len(game))\n     \
    \   return -1\n    }\n    if len(guess) != len(game) {\n        fmt.Println(len(guess))\n\
    \        fmt.Println(len(game))\n        return -1\n    }\n    diff := make([]int,\
    \ len(guess))\n    index := 0\n    for i := 0; i < len(game); i++ {\n        if\
    \ game[i] == guess[i] { // equal\n            diff[index] = 0\n        } else\
    \ {\n            diff[index] = abs(guess[i] - game[i])\n        }\n        index++\n\
    \    }\n    return diff\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nAnother\
    \ solution (also works with more than just 2-element lists) is to use recursion:\n\
    <code>\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp12dihswt_test.go:66:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    return []int{}\
    \ // TO DO\n}\n</code>\n<|/ a |>\n<| c |>\n\"`The feelings and thoughts you have\
    \ at that moment are definitely worth noting down and comparing`\" - Haha, that's\
    \ a joke? The whole point of being a programmer is to learn new concepts; I love\
    \ the feelings of your answer; but the more I look into it, the more I get convinced\
    \ that it's not that big of a deal to compare and find the difference between\
    \ our two answers (and yes, I did research the question before I wrote the answer,\
    \ and found this thread).\n<|/ c |>\n<| a tags=go |>\nA very simple solution to\
    \ the problem can be something like this:\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"strings\"\n)\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_vmt8wje_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    n := len(game)\n\
    \    g := len(guess)\n    result := make([]int, g)\n    for i, g := range guess\
    \ {\n        result[i] = g - game[i]\n    }\n    for i := 0; i < g; i++ {\n  \
    \      if result[i] != 0 {\n            result[i] = abs(result[i])\n        }\n\
    \    }\n    return result[:n]\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo8nqt_8p_test.go:29:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    comp := make([]int,\
    \ len(guess))\n    for i, c := range guess {\n        comp[i] = abs(game[i] -\
    \ c)\n    }\n    return comp\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwz6_w1kl_test.go:23:19: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    \n    // I wrote this in C# for fun, since I couldn't think\
    \ of a more elegant way.\n    // The trick here is to find the smallest value\
    \ that will allow us to map the\n    // guesses to scores. The smaller this value\
    \ is, the more likely that our guess has\n    // to be correct.\n    smallestScoreDifference\
    \ := game[0]\n    for i := 1; i < len(game); i++ {\n        if game[i] < smallestScoreDifference\
    \ {\n            smallestScoreDifference = game[i]\n        }\n    }\n\n    //\
    \ Using that smallest difference to map our guesses to scores, we loop through\
    \ \n    // our guesses and determine what score they should have:\n    for i :=\
    \ 0; i < len(guess); i++ {\n        // If the guess is correct, then just map\
    \ it directly to its score.\n        if guess[i] == game[i] {\n            result[i]\
    \ = 0\n        } else {\n            // Get the distance between the guess and\
    \ the score.\n            distance := game[i] - guess[i]\n            // Find\
    \ the smallest difference that allows us to map the guesses.\n            if distance\
    \ < smallestScoreDifference {\n                result[i] = distance\n        \
    \    } else {\n                result[i] = smallest - smallestScoreDifference\n\
    \            }\n        }\n    }\n\n    return result\n}\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbv5z2ndv_test.go:47:29: undefined: smallest

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // I hate writing\
    \ this but I am not going to write this code for you.\n}\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgpb1rphh_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    \n}\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxao1in3i_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct []int\n\
    \    var wrong []int\n    var index int\n    for i := range game {\n        if\
    \ game[i] != guess[index] {\n            if game[i] == 0 {\n                wrong\
    \ = append(wrong, i)\n            } else {\n                correct = append(correct,\
    \ i)\n            }\n        }\n        index++\n    }\n    return correct\n}\n\
    \nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpjy3uecff_test.go:53: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestCompare/test_num__1\
    \ (0.00s)\n        tmpjy3uecff_test.go:53: expected '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]', got '[]'\n    --- FAIL: TestCompare/test_num__2\
    \ (0.00s)\n        tmpjy3uecff_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestCompare/test_num__3\
    \ (0.00s)\n        tmpjy3uecff_test.go:53: expected '[%!s(int=2) %!s(int=0) %!s(int=0)\
    \ %!s(int=1)]', got '[%!s(int=0) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // TODO: Fill in\
    \ the code here\n    \n    result := []int{}\n    for _, score := range game {\n\
    \        result := []int{}\n        \n        // TODO Fill in the code here\n\
    \        \n        fmt.Println(\"Result\", result)\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe0wud5rw_test.go:24:12: score declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    //fmt.Println(len(game),\
    \ guess)\n    //fmt.Printf(\"%#v\\n\", game)\n    if len(game) != len(guess) {\n\
    \        fmt.Println(\"Lengths don't match\")\n        return []int{}\n    }\n\
    \    correct := 0\n    diff := make([]int, len(guess))\n    for i, g := range\
    \ game {\n        for k, w := range guess {\n            if g == w {\n       \
    \         diff[k] = 0\n            } else {\n                diff[k] = abs(g-w)\n\
    \            }\n        }\n        if diff != 0 {\n            correct += 1\n\
    \        }\n    }\n    fmt.Printf(\"%#v\\n\", diff)\n    fmt.Println(correct)\n\
    \    return diff\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nWow, thank you so much\
    \ for the response. I'm going to try this out and get back to you. Thanks again.\n\
    <|/ c |>\n<| c |>\nI believe that the algorithm is correct but my implementation\
    \ is not complete. I'm going to add my attempt to the question and see if you\
    \ can help. Thanks again.\n<|/ c |>\n<| a |>\nI figured it out. Thanks everyone\
    \ who contributed. The following is a working solution:\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n)\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnjy4zzr1_test.go:45:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct, wrong,\
    \ i int\n    for i = 0; i < len(guess); i++ {\n        correct += game[i]\n  \
    \      wrong += guess[i]\n    }\n    if correct == 0 {\n        correct += 0\n\
    \    }\n    return []int{\n        int(wrong - correct),\n        int(wrong -\
    \ abs(correct - game)),\n        int(wrong - abs(correct - game)),\n        int(wrong\
    \ - abs(correct - game)),\n        int(wrong - abs(correct - game)),\n    }\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYour code has some issues: for example\
    \ it returns -1 instead of 0. Your code also returns -1 instead of 0, and also\
    \ -1 instead of 1, and -1 instead of -1. This is not what OP is asking for.\n\
    <|/ c |>\n<| a dscore=0 |>\nThis problem can be solved in O(n) time using two\
    \ arrays, one with all the possible values for each possible guess and the other\
    \ with the possible results. Then for each guess you can compare the result with\
    \ the possible results (O(n) comparisons), and update the arrays (O(1) operations).\
    \ After that you just have to iterate over the possible results and find the number\
    \ of matches using a for loop (O(n) iterations). This is done in O(n) time.\n\
    You can see an implementation in Python below:\n<code>\ndef compare(game, guess):\n\
    \    possible_values = [0]*len(game)\n    possible_values[0] = 1\n    possible_values[1]\
    \ = -1\n    possible_values[2] = 0\n    possible_values[3] = 0\n    possible_values[4]\
    \ = 0\n\n    results = [0]*len(guess)\n    for i in range(len(guess)):\n     \
    \   results[i] = possible_values[game[i]]\n        if results[i] == 0:\n     \
    \       results[i] = 1\n    for i in range(len(guess)):\n        if possible_values[guess[i]]\
    \ == 0:\n            results[i] += 1\n    results = [abs(x) for x in results]\n\
    \    print(results)\n</code>\n<|/ a tags=python,algorithm |>\n<| c |>\nThis algorithm\
    \ takes O(n) space. This is not what OP asked for.\n<|/ c |>\n<| c |>\nI think\
    \ it does, he asked for O(n), but I think O(n*m) space might be an improvement\
    \ - it depends on how large his scores are. If his scores are all positive integers\
    \ this should be fine.\n<|/ c |>\n<| a tags=python,algorithm dscore=0 |>\nThe\
    \ trick is to store your guesses in an array indexed by the result (so a dictionary\
    \ would work), and increment the entry for the guess that was guessed correctly\
    \ (so the entry for 0 becomes 1).\nWhen you reach the end of your guesses, you\
    \ can then simply output \nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx59c4gys_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    g := make([]int,\
    \ len(guess))\n    for i := range g {\n        g[i] = game[i]\n    }\n\n    c\
    \ := make([]int, len(guess))\n    for i := range c {\n        c[i] = 0\n    }\n\
    \n    for i := range g {\n        for j := range c {\n            if guess[i]\
    \ == game[j] {\n                c[j]++\n                break\n            }\n\
    \        }\n    }\n\n    return c\n}\n</code>\n<|/ a dscore=0 tags=go |>\n<| a\
    \ tags=go |>\nThe simplest solution:\n<code>\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67ig6zr2_test.go:42:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    scores :=\
    \ make([]int, len(guess))\n    \n    if len(guess) < len(game) {\n        \n \
    \       fmt.Println(\"Game has fewer matches than guesses\")\n        return []int{}\n\
    \    }\n    if len(game) < len(guess) {\n        \n        fmt.Println(\"Guesses\
    \ has fewer matches than game\")\n        return []int{}\n    }\n    \n    for\
    \ i := range guess {\n        if game[i] != guess[i] {\n            scores[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    \n    return scores\n}\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxkh73dr1_test.go:37:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var gameScore []int\n\
    \    gameScore := make([]int, len(game))\n    var guessScore []int\n    guessScore\
    \ := make([]int, len(guess))\n    for i := 0; i < len(guess); i++ {\n        if\
    \ game[i] > guess[i] {\n            gameScore[i] = game[i] - guess[i]\n      \
    \  } else {\n            gameScore[i] = guess[i] - game[i]\n        }\n    }\n\
    \    var gameScoreLen int\n    gameScoreLen = gameScore[len(gameScore)-1]\n  \
    \  for i := 0; i <= len(game)-gameScoreLen; i++ {\n        gameScore[i] = gameScore[i]\
    \ - gameScore[gameScoreLen]\n        gameScoreLen -= 1\n    }\n    var guessScoreLen\
    \ int\n    guessScoreLen = guessScore[len(guessScore)-1]\n    for i := 0; i <=\
    \ len(guess)-guessScoreLen; i++ {\n        guessScore[i] = guessScore[i] - guessScore[guessScoreLen]\n\
    \        guessScoreLen -= 1\n    }\n    return gameScore\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2h8f7ri_test.go:22:15: no new variables on left side of :=

    /tmp/tmpc2h8f7ri_test.go:24:16: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i, score := range game {\n        if guess[i] == score\
    \ {\n            result[i] = 0\n        } else {\n            result[i] = abs(guess[i]\
    \ - score)\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpndcs3r99_test.go:26:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    n := len(game)\n\
    \    if len(guess) != n {\n        panic(fmt.Sprintf(\"wrong length for guess;\
    \ got %d, want %d\", len(guess), n))\n    }\n    result := make([]int, n)\n  \
    \  for i := range result {\n        result[i] = 0\n    }\n    for i := 0; i <\
    \ n; i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n    \
    \    } else {\n            result[i] = abs(guess[i] - game[i])\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnmu02w5g_test.go:33:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var maxGuesses\
    \ []int\n    maxGuesses = make([]int, len(guess))\n    maxGuesses = append(maxGuesses,\
    \ guess...)\n    copy(maxGuesses, guess)\n    \n    sort.Ints(maxGuesses)\n\n\
    \    var wrongGuesses []int\n    wrongGuesses = make([]int, len(game))\n    copy(wrongGuesses,\
    \ game)\n    \n    sort.Ints(wrongGuesses)\n\n    // now we have a sorted list\
    \ of guesses and scores, do some math \n    scores := make([]int, len(guess))\n\
    \    copy(scores, game)\n\n    for i := 0; i < len(maxGuesses); i++ {\n      \
    \  for j := i; j < len(wrongGuesses); j++ {\n            scores[j] += maxGuesses[i]\n\
    \        }\n    }\n    \n    for i := 0; i < len(maxGuesses); i++ {\n        if\
    \ maxGuesses[i] == 0 && wrongGuesses[i] == 0 {\n            maxGuesses[i] = 0\n\
    \        } else {\n            maxGuesses[i] = (maxGuesses[i] - wrongGuesses[i])\n\
    \        }\n    }\n\n    return maxGuesses\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dk7txvh_test.go:26:5: undefined: sort

    /tmp/tmp6dk7txvh_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := []int{}\n\
    \    if len(guess) != len(game)  {\n        return nil\n    }\n    for i := 0;\
    \ i < len(guess); i++ {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5g82_mu4_test.go:29:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if len(game) ==\
    \ 0 {\n        fmt.Println(\"No matches\")\n        return []int{0, 0}\n    }\n\
    \    if len(guess) == 0 {\n        fmt.Println(\"No matches\")\n        return\
    \ []int{0, 0}\n    }\n    g := make([]int, len(guess))\n    g := make([]int, len(guess))\n\
    \    var result []int\n    g := make([]int, len(guess))\n    g := make([]int,\
    \ len(guess))\n    var match bool\n    var i int\n    var j int\n    var diff\
    \ int\n    var k int\n    for i = 0 to len(game) - 1 {\n        match = False\n\
    \        for j = 0 to len(guess) - 1 {\n            if game[i] == guess[j] {\n\
    \                match = True\n            }\n        }\n        if match {\n\
    \            g[i] = 0\n        } else {\n            g[i] = abs(game[i] - guess[j])\n\
    \        }\n    }\n    for i = 0 to len(guess) - 1 {\n        result = []int{0,\
    \ 0, 0}\n        match = False\n        for j = 0 to len(game) - 1 {\n       \
    \     if guess[i] == game[j] {\n                match = True\n            }\n\
    \        }\n        if match {\n            result[0] = 0\n        } else {\n\
    \            result[0] = abs(guess[i] - game[j])\n        }\n        match = False\n\
    \        for j = 0 to len(game) - 1 {\n            if guess[i] == game[j] {\n\
    \                match = True\n            }\n        }\n        if match {\n\
    \            result[1] = 0\n        } else {\n            result[1] = abs(guess[i]\
    \ - game[j])\n        }\n        match = False\n        for j = 0 to len(game)\
    \ - 1 {\n            if guess[i] == game[j] {\n                match = True\n\
    \            }\n        }\n        if match {\n            result[2] = 0\n   \
    \     } else {\n            result[2] = abs(guess[i] - game[j])\n        }\n \
    \       result = []int{0, 0, 0}\n        for j = 0 to len(guess) - 1 {\n     \
    \       if result[j] == 0 {\n                diff = 0\n            } else {\n\
    \                diff = abs(guess[i] - game[j])\n            }\n            for\
    \ k = 0 to len(guess) - 1 {\n                if result[j] == 0 {\n           \
    \         diff = 0\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHi, can you please explain this\
    \ part? `for j = 0 to len(game) - 1 {\n            if guess[i] == game[j] {\n\
    \                match = True\n            }\n        }\n        if match {\n\
    \            result[0] = 0\n        } else {\n            result[0] = abs(guess[i]\
    \ - game[j])\n        }` \n\nWhy does the for loop goes to len(game) - 1? Thank\
    \ you for explaining\n<|/ c |>\n<| c |>\nAt the beginning, `j` is 0. So the loop\
    \ execute\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp12zaqiq0_test.go:39:9: expected boolean or range expression, found assignment
    (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(game))\n\n    // If there is no match, we do not need to update the result\n\
    \    if game[guess] == 0 {\n        return result\n    }\n\n    // If there is\
    \ a match, compute the absolute difference between the\n    // guess and the score.\n\
    \    for i := range result {\n        result[i] = abs(game[i] - guess[i])\n  \
    \  }\n\n    return result\n}\n</code>\nNow the problem is \"how to get scores\
    \ from this game of hangman\"? The answer is to start with a game that has a very\
    \ hard time getting guesses. \n<code>\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi7_totgo_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    gameCopy := make([]int,\
    \ len(game))\n    for i := range gameCopy {\n        gameCopy[i] = game[i]\n \
    \   }\n    for i := range guess {\n        gameCopy[i] = guess[i]\n    }\n   \
    \ sortedGuesses := make([]int, len(gameCopy))\n    for i, e := range gameCopy\
    \ {\n        sortedGuesses[i] = e\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(sortedGuesses)))\n\
    \    for i, e := range sortedGuesses {\n        if i != e {\n            gameCopy[i]\
    \ = gameCopy[i] - gameCopy[e]\n        }\n    }\n    return gameCopy\n}\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsm2b8o7e_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // TODO: Implement\n\
    \    sort.Ints(game)\n    sort.Ints(guess)\n    l := len(game)\n    g := len(guess)\n\
    \    result := make([]int, l)\n    var maxscore int\n    for i := 0; i < l; i++\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n           \
    \ continue\n        }\n        score := abs(game[i] - guess[i])\n        if score\
    \ > maxscore {\n            maxscore = score\n        }\n        result[i] = score\n\
    \    }\n    return maxscore\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1tpl4fq_test.go:22:5: undefined: sort

    /tmp/tmpo1tpl4fq_test.go:23:5: undefined: sort

    /tmp/tmpo1tpl4fq_test.go:25:5: g declared but not used

    /tmp/tmpo1tpl4fq_test.go:33:18: undefined: abs

    /tmp/tmpo1tpl4fq_test.go:39:12: cannot use maxscore (variable of type int) as
    type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    var result\
    \ []int\n\n    // Your code goes here\n\n    return result\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThank you for this solution. I think it makes sense to\
    \ have a variable for each element in the list.\n<|/ c |>\n<| a |>\nI agree with\
    \ Daniel A. White and James H. Pope's answer. \nBut I want to post my answer in\
    \ a different way. \n<code>\ndef compare(game, guess):\n    count = 0\n    for\
    \ i in game:\n        if i < guess[0]:\n            count += abs(i - guess[0])\n\
    \        elif i > guess[0]:\n            count += abs(i - guess[0])\n        \
    \    count += abs(i - guess[1])\n        elif i == guess[0]:\n            count\
    \ += abs(i - guess[1])\n        else: \n            count += abs(i - guess[1])\n\
    \            count += abs(i - guess[0])\n    return count \n\nprint(compare([2,3,1],\
    \ [1,2,4]))\n</code>\n<|/ a dscore=0 tags=python |>\n<| c |>\nYour solution is\
    \ wrong because the first condition will never be true, as you have the guesses\
    \ reversed\n<|/ c |>\n<| a |>\nI am sorry that I cannot comment yet. But I want\
    \ to add my solution here with additional explanation:\n<code>\ndef compare(game,\
    \ guess):\n    count = 0\n    # I changed this from list to tuple so I can compare\
    \ the items with different types.\n    # So my game and guess can be both tuples\
    \ or lists.\n    for index, item in enumerate(game):\n        # if item in the\
    \ guess, then the count will change by abs(item - guess)\n        if item in guess:\n\
    \            count += abs(item - guess[index])\n        # else, if item in the\
    \ guess, then the count will change by abs(item - guess[0])\n        elif item\
    \ in guess[0]:\n            count += abs(item - guess[0])\n        # else, if\
    \ the item is not in the guess, then the count will change by abs(item - guess[1])\n\
    \        else:\n            count += abs(item - guess[1])\n    return count\n\n\
    # test\nprint(compare([1,2,3,4], [5,6,7,8]))\nprint(compare([1,2,3,4], [5,6,7,8],\
    \ guessList=[5,6,7]))\nprint(compare([1,2,3,4], [5,6,7,8], guessList=[5,6,1,8]))\n\
    </code>\nThe output will be:\n<code>\n5\n5\n5\n</code>\n<|/ a dscore=0 tags=python\
    \ |>\n<| a |>\n<code>\ndef compare(game,guess):\n    count = 0\n    for i in range(len(game)):\n\
    \        if game[i] > guess[i\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp48p_m2c4_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074335
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var result []int\n\
    \    var diffs []int\n    for _, a := range game {\n        for _, b := range\
    \ guess {\n            if a == b {\n                result = 0\n             \
    \   break\n            }\n            diff := a - b\n            if diff < 0 {\n\
    \                diff = -diff\n            }\n            if diff < diffs[len(diffs)-1]\
    \ {\n                diffs = append(diffs, diff)\n            }\n        }\n \
    \   }\n    return diffs\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvcqpjivi_test.go:26:26: cannot use 0 (untyped int constant) as []int value
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    scores :=\
    \ make([]int, len(guess))\n    for i, _ := range guess {\n        scores[i] =\
    \ game[i]\n    }\n    \n    var totaldiff int\n    \n    for i, _ := range scores\
    \ {\n        diff, _ := abs(scores[i] - guess[i])\n        totaldiff += diff\n\
    \    }\n    \n    return []int{totaldiff}\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmsyz7hs1_test.go:30:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    diff := make([]int,\
    \ len(guess))\n    for i := range guess {\n        // If guess[i] matches a score,\
    \ append the difference between guess[i] and the score.\n        // Else, append\
    \ 0.\n        if guess[i] == game[i] {\n            diff[i] = 0\n        } else\
    \ {\n            diff[i] = game[i] - guess[i]\n        }\n    }\n    return diff\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // TODO implement\n\
    \    return nil\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpy1n_112q_test.go:41: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestCompare/test_num__1 (0.00s)\n\
    \        tmpy1n_112q_test.go:41: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]', got '[]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n\
    \        tmpy1n_112q_test.go:41: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpy1n_112q_test.go:41:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6ht5utp_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if len(game) !=\
    \ len(guess) {\n        fmt.Println(\"lengths don't match\")\n        return nil\n\
    \    }\n    scores := make([]int, len(guess))\n    for i, g := range guess {\n\
    \        scores[i] = g\n    }\n    for i, g := range game {\n        if i == 0\
    \ {\n            scores[i] = abs(g - guess[0])\n        }\n        else if scores[i]\
    \ != abs(g-guess[i]) {\n            scores[i] = abs(g - guess[i])\n        }\n\
    \    }\n    return scores\n}\n</code>\n<|/ a tags=go dscore=3 |>\n<| c |>\nI really\
    \ appreciate this answer. Thanks! I ended up using `sort.IntSlice` instead of\
    \ `sort.Int64Slice` for the purpose of simplicity, but otherwise it worked great.\n\
    <|/ c |>\n<| a |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\
    \n)\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1muwveu4_test.go:33:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    game := game[:len(guess)]\n\
    \    guess := guess[:len(game)]\n    result := make([]int, len(guess))\n    for\
    \ i, g := range game {\n        result[i] = int(g - guess[i])\n    }\n    return\
    \ result\n}\n</code>\n<|/ a tags=go dscore=2 |>\n<| a tags=go |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n    \"sort\"\n)\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnc06918u_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    if len(game) ==\
    \ len(guess) {\n        // if we have made it this far, the guesses are identical,\
    \ return 0 for each guess\n        var correct []int\n        for _, g := range\
    \ game {\n            if g == guess[len(game)-len(correct)-1] {\n            \
    \    correct = append(correct, 0)\n            } else {\n                correct\
    \ = append(correct, abs(g-guess[len(game)-len(correct)]))\n            }\n   \
    \     }\n        return correct\n    } else {\n        // if we have made it this\
    \ far, the guesses are not identical\n        // return an absolute difference\
    \ between the guess and the score\n        var wrong = []int{}\n        for _,\
    \ g := range game {\n            if g != guess[len(game)-len(wrong)-1] {\n   \
    \             wrong = append(wrong, abs(g-guess[len(game)-len(wrong)]))\n    \
    \        }\n        }\n        return wrong\n    }\n}\n</code>\nI believe this\
    \ code can be improved in two ways:\n\nWe could use type assertion to shorten\
    \ the code quite a bit. For example, if the return type of the function is always\
    \ []int, then we can change the return statement to the following:\nreturn append([]int{},\
    \ wrong...).\n\nI personally feel that this would be more idiomatic and readable.\
    \ Although not as efficient as the first approach, it would be more readable.\n\
    \nInstead of using the len() function to loop over each index one by one, it would\
    \ be more efficient to use the for range statement.\nInstead of using the append\
    \ method to add all the \"wrong\" values into a \"wrong\" slice, then adding those\
    \ \"wrong\" values back into the original slice, then adding all the \"correct\"\
    \ values into a \"correct\" slice, then adding those \"correct\" values back into\
    \ the original slice, it would be more efficient to create the correct slice,\
    \ then append the correct values into the correct slice, then append the wrong\
    \ values into the wrong slice, then finally append the correct values into the\
    \ correct slice.\n<|/ a |>\n<| a dscore=0 |>\nA different take on this. I prefer\
    \ to use map rather than slice to hold the data. \n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n)\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqy9m9dw0_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    // The result\
    \ here is the same length as guess. \n    result := make([]int, len(guess))\n\
    \    \n    for i := range guess {\n        if game[i] > 0 {\n            result[i]\
    \ = (guess[i] - game[i]) * -1\n        } else {\n            result[i] = game[i]\n\
    \        }\n    }\n    \n    return result\n}\n</code>\n<|/ a tags=algorithm,go\
    \ |>\n<| c |>\nI did end up using your code, however the issue was that I misunderstood\
    \ the task and it was asking me to compare the results of a number of matches,\
    \ so your answer is correct, but thank you for taking the time to add this.\n\
    <|/ c |>\n<| a tags=algorithm,go dscore=0 |>\n<code>\npackage main\n\nimport \"\
    fmt\"\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0atf7jjm_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    scores := make([]int,\
    \ len(guess))\n    diff := make([]int, len(guess))\n    for i, score := range\
    \ game {\n        scores[i] = score\n    }\n    for i, score := range guess {\n\
    \        diff[i] = abs(score - scores[i])\n    }\n    return diff\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxgxazkmw_test.go:27:19: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    g := make([]int,\
    \ len(guess))\n    i := 0\n    for _, v := range guess {\n        if v == 0 {\n\
    \            g[i] = 0\n        } else {\n            diff := game[i] - v\n   \
    \         if diff > 0 {\n                diff *= -1\n            }\n         \
    \   g[i] = diff\n        }\n        i++\n    }\n    return g\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmp634g4u1s_test.go:54: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-3)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmp634g4u1s_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-2) %!s(int=-4)\
    \ %!s(int=-6)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmp634g4u1s_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-2)\
    \ %!s(int=0) %!s(int=0) %!s(int=-1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    score := make([]int,\
    \ len(guess))\n    for i := range score {\n        score[i] = game[i]\n    }\n\
    \    for i := range guess {\n        guess[i] = int(guess[i]) \n    }\n    for\
    \ i := range guess{\n        score += guess\n    }\n    return score\n}\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphwxexn5c_test.go:28:9: i declared but not used

    /tmp/tmphwxexn5c_test.go:29:9: invalid operation: operator + not defined on score
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    //sort the list\
    \ so we can find the max index\n    sort.Ints(game)\n    sort.Ints(guess)\n  \
    \  var maxIndex int = 0\n    for _, v := range game {\n        maxIndex = max(maxIndex,\
    \ v)\n    }\n    game = game[:maxIndex]\n    guess = guess[:maxIndex]\n    var\
    \ result []int\n    for i := range guess {\n        result <- game[i]-guess[i]\n\
    \    }\n    for result := range result {\n        if result > 0 {\n          \
    \  return append([]int{}, result...)\n        }\n    }\n    return []int{}\n}\n\
    \nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnyqrst63_test.go:22:5: undefined: sort

    /tmp/tmpnyqrst63_test.go:23:5: undefined: sort

    /tmp/tmpnyqrst63_test.go:26:20: undefined: max

    /tmp/tmpnyqrst63_test.go:32:9: invalid operation: cannot send to non-channel result
    (variable of type []int)

    /tmp/tmpnyqrst63_test.go:36:36: cannot use result (variable of type int) as type
    []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // Write your code\
    \ here\n    // return []int{}\n    \n    \n    if len(game) != len(guess) {\n\
    \        return nil\n    }\n    \n    \n    \n    var res []int\n    \n    for\
    \ i := 0; i < len(game); i++ {\n        if game[i] == guess[i] {\n           \
    \ res = append(res, 0)\n        } else {\n            res = append(res, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    \n    return res\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyjtkzv1j_test.go:37:31: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    \n    \n\
    \    \n    \n    return []int{0, 0, 0, 0, 0, 0}\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpxaemd53q_test.go:45: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpxaemd53q_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n\
    \        tmpxaemd53q_test.go:45: expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    // This variable\
    \ will store the final result\n    final := make([]int, len(guess))\n    \n  \
    \  // Go through each guess and add it to the final result\n    for i := range\
    \ guess {\n        final[i] = abs(guess[i] - game[i])\n    }\n    \n    // Go\
    \ through each score and add it to the final result\n    for i := range game {\n\
    \        final[i] += game[i]\n    }\n    \n    // Return the final result\n  \
    \  return final\n}\n</code>\n<|/ a |>\n<| c |>\nI appreciate the time you took\
    \ to explain how your code works. While your solution is a lot cleaner and more\
    \ readable than the previous one, I was wondering if there is a more elegant solution\
    \ using just loops/conditional statements. I thought maybe there is some form\
    \ of recursion involved in the first solution, but I wasn't able to wrap my head\
    \ around that.\n<|/ c |>\n<| c |>\nThank you for accepting the answer!\n<|/ c\
    \ |>\n<| a tags=go,if-statement,if-statement dscore=0 |>\nI wrote a recursive\
    \ function because I wanted to add something that looked like what you're after.\
    \  What it does is check whether a given guess is the same as the actual game.\
    \  Once it finds that, it moves on to finding the closest one.  Then it loops\
    \ back around to the starting position.  I haven't tested it thoroughly, but I\
    \ think it does what you want.\n<code>\npackage main\n\nimport (\n    \"fmt\"\n\
    \    \"math\"\n)\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6jub4byn_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n\n    for i := range guess {\n        result[i] = -game[i]\n\n\
    \        if guess[i] == game[i] {\n            continue\n        }\n\n       \
    \ diff := game[i] - guess[i]\n\n        if diff > 0 {\n            result[i] +=\
    \ 1\n        } else {\n            result[i] -= 1\n        }\n    }\n\n    return\
    \ result\n}\n</code>\n<|/ a tags=algorithm,sorting,python,arrays,logic dscore=1\
    \ |>\n<| c |>\nThis is definitely a useful answer. I was able to implement a solution\
    \ in Python. Thanks so much for the help\n<|/ c |>\n<| a dscore=0 tags=algorithm,sorting,python,arrays,logic\
    \ |>\nPython solution (not tested):\n<code>\ndef compare(guess, game):\n  result\
    \ = []\n  for i, g in enumerate(guess):\n    if g != game[i]:\n      result.append(abs(g\
    \ - game[i]))\n    else:\n      result.append(0)\n  result.sort(reverse=True)\n\
    \  return result\n</code>\n<|/ a |>\n<| a tags=algorithm,sorting,python,arrays,logic\
    \ |>\nI came up with a more general solution, that allows sorting by any given\
    \ criterion (for example, by ascending or descending order).\n<code>\ndef compare(array1,\
    \ array2, criterion, ascending=False):\n    \"\"\"\n    array1: The first array\
    \ to be compared\n    array2: The second array to be compared\n    criterion:\
    \ The criterion to sort by; \n               if ascending == True, then array1\
    \ is sorted,\n               if ascending == False, then array2 is sorted.\n \
    \   ascending: Whether the arrays are to be sorted in ascending or descending\
    \ order\n    \"\"\"\n\n    array1.sort(key=lambda x: criterion(x, array2, ascending))\n\
    \    array2.sort(key=lambda x: criterion(x, array1, ascending))\n    return array1,\
    \ array2\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=algorithm,sorting,python,arrays,logic\
    \ |>\n<code>\ndef compare(guess,game):\n    result=[]\n    for i in range(len(guess)):\n\
    \        if game[i]!=guess[i]:\n            result.append(abs(game[i]-guess[i]))\n\
    \        else:\n            result.append(0)\n    result.sort()\n    return result\n\
    </code>\n<|/ a |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding *how* and/or *why* it solves the problem would\
    \ improve the answer's long-term value.\n<|/ c |>\n<| a tags=algorithm,sorting,\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2hf4cudn_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw6ht5utp_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // The answer to\
    \ this question is simply the sum of all differences between the two lists.\n\
    \    diff := make([]int, len(guess))\n    for i := range diff {\n        diff[i]\
    \ = game[i] - guess[i]\n    }\n    return diff\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(game))\n    for i := range result {\n        if !compareGuess(game[i], guess[i])\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_rsz6ab_test.go:23:13: undefined: compareGuess

    /tmp/tmpi_rsz6ab_test.go:24:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    i := 0\n    for i < len(guess) {\n        result[i] = game[i]\
    \ - guess[i]\n        i++\n    }\n    return result\n}\n</code>\nNow that we have\
    \ all we need, let's solve it :)\nWe start by converting the input into something\
    \ we can use for comparison. Since we know that there are exactly 4 matches and\
    \ each match is composed of 6 ints, we can use a slice of length 6, i.e. a slice\
    \ of length 4 with 4 elements. Since there are 4 numbers, the length of the slice\
    \ is 4.\nThe code in the example above is really short and simple and I wanted\
    \ to keep it as simple as possible to show how the code works. However if you're\
    \ not quite sure what a slice is, you should learn what a slice is. \n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpevenvo58_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var correct []int\n\
    \    // TODO\n    return correct\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nYou guys\
    \ are life savers :) Thank you so much. Just one thing I am confused about the\
    \ `len(game) == len(guess)` check. If I remove that check and put a `break` after\
    \ `correct = true` then it still passes all the test cases. But why?\n<|/ c |>\n\
    <| c |>\nNo, the `len(game) == len(guess)` is needed, because otherwise a game\
    \ with one correct answer would have `len(game) != len(guess)`. But as soon as\
    \ one of the two lists contains multiple correct answers, the two lists are equal\
    \ and `len(game) == len(guess)` is no longer needed and can be removed.\n<|/ c\
    \ |>\n<| a dscore=1 tags=go |>\nHere's how I did it:\n<code>\npackage compare_test\n\
    \nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3imh5470_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    length := len(game)\n\
    \    if length == 0 {\n        return guess\n    }\n    result := make([]int,\
    \ length)\n    for i, g := range game {\n        result[i] = 0\n        if g >\
    \ 0 {\n            result[i] = g\n        }\n    }\n    for i, g := range guess\
    \ {\n        if g == 0 {\n            result[i] = 0\n        } else {\n      \
    \      result[i] = g - game[i]\n        }\n    }\n    return result\n}\n</code>\n\
    <|/ a dscore=3 tags=algorithm,go |>\n<| a dscore=2 |>\nI did this myself and compared\
    \ it against the other answer by Santiago Garcia with some extra tests I did that\
    \ might help others remember how it works.\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"sort\"\n)\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7rik60w_test.go:41:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    \n    // We will\
    \ use the following two variables for our comparison\n    // As mentioned above,\
    \ we will use an iterator for our list so that\n    // we can access each element\
    \ in the list one at a time.\n    // The value at index i will correspond to the\
    \ ith element in the list\n    // and will start at 0, i.e. game[0]\n    var index\
    \ int = 0\n    var score int = 0\n    var diff int = 0\n\n    // We start by looping\
    \ through each element in the guess\n    // list one at a time.\n    // We will\
    \ begin looping through the guess list when the\n    // value of the index is\
    \ larger than the length of the game\n    // list\n    for index < len(guess)\
    \ {\n        // Once we get the correct element, we will then \n        // increase\
    \ the index by one\n        if game[index] == guess[index] {\n            score\
    \ += 1\n        }\n        diff += abs(game[index] - guess[index])\n        index\
    \ += 1\n    }\n\n    // If the guess list is empty we will return the score list\n\
    \    if len(guess) == 0 {\n        return []int{score}\n    }\n\n    // Else,\
    \ we will loop through each element in the guess list again,\n    // and check\
    \ to see if that element is contained in the game list\n    for index < len(guess)\
    \ {\n        if game[index] == guess[index] {\n            score += 1\n      \
    \  }\n        diff += abs(game[index] - guess[index])\n        index += 1\n  \
    \  }\n\n    // Finally, we will return the difference between this guess \n  \
    \  // and the score list\n    return [diff, score]\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpak2yqw8q_test.go:63:17: unexpected comma; expecting ]

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // your code here\n\
    \    score := make([]int, len(guess))\n    for i, j := range guess {\n       \
    \ score [i] = game[j]\n    }\n    for i, j := range guess {\n        if j != game[j]\
    \ {\n            score [i] = abs(j - game[j])\n        }\n    }\n    return score\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3df3j0h_test.go:28:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    n := len(game)\n\
    \    m := len(guess)\n    \n    best := make([]int, n)\n    for i := 0; i < n;\
    \ i++ {\n        best[i] = guess[i]\n    }\n    \n    for i := 0; i < m; i++ {\n\
    \        j := i\n        best[i] = game[j]\n        while j > 0 && game[j-1] <\
    \ best[i] {\n            best[i] = best[i-1]\n            j--\n        }\n   \
    \     if game[j] != best[i] {\n            best[i] = abs(game[j] - best[i])\n\
    \        }\n    }\n    \n    return best\n}\n</cell>\n<cell>\ngame = [1]*5 + [2]*4\
    \ + [3]*3 + [4]*2 + [5]*1\nguess = [4]*5 + [2]*4 + [3]*3 + [4]*2 + [1]*1\ncompare(game,\
    \ guess)\n</cell>\n<text>\n7. Coding Situations\nWhat happens when you pass a\
    \ number smaller than 0? Negative numbers will be treated as if they were the\
    \ smallest.\nWhat happens when you pass a number larger than 100? What happens\
    \ if you pass a number smaller than 0?\nHow would you modify your code to handle\
    \ these different inputs? Can you think of a way to do it without repeating your\
    \ code?\nWrite a function to determine whether a number is a prime number. \n\
    Write a function that determines whether the first argument is an even number\
    \ and the second is an odd number.\nWrite a function that determines the number\
    \ of positive integers less than a particular number.\nWrite a function that determines\
    \ whether all characters in a string are uppercase. What happens if the first\
    \ character isn't a letter?\nWrite a function that takes a positive integer as\
    \ input and returns the largest palindrome that is a multiple of that number.\
    \ \nWrite a function that takes a positive integer as input and returns the smallest\
    \ palindrome that is a multiple of that number.\nWrite a function that determines\
    \ whether a string has at least two distinct characters that differ from each\
    \ other.\n\n\n</text>\n<cell>\ndef even_odd(n):\n    if n%2 == 0:\n        print('n\
    \ is even')\n    else:\n        print('n is odd')\n    \ndef odd(n):\n    if n%2\
    \ == 0:\n        print('n is odd')\n    else:\n        print('n is even')\n  \
    \      \ndef count(n):\n    if n < 1:\n        print('n should be positive')\n\
    \    elif n == 1:\n        print('n is 1')\n    elif n == 2:\n        print('n\
    \ is 2')\n    else:\n        if n % 2 == 0:\n            for i in range(3, int(n**0.5+1),\
    \ 2):\n                if n % i == 0:\n                    print(str(n) + ' is\
    \ not a prime number')\n                    break\n                else:\n   \
    \                 print(str(n) + ' is a prime number')\n        else:\n      \
    \      for i in range(\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcm8qomki_test.go:32:15: expected '';'', found j

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    //  Your code here\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprornzh1b_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ i := 0\n    for _, game := range game {\n        if result[i] == 0 {\n     \
    \       // the game is over: we missed all guesses\n            break\n      \
    \  }\n        guess, ok := guessAt(game, i)\n        if !ok {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(guess - game)\n        }\n\
    \        i += 1\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe04i7szv_test.go:31:22: undefined: guessAt

    /tmp/tmpe04i7szv_test.go:35:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var diff []int\n\
    \n    // Write your code here\n    return diff\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpvxe32dlv_test.go:43: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestCompare/test_num__1 (0.00s)\n\
    \        tmpvxe32dlv_test.go:43: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]', got '[]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n\
    \        tmpvxe32dlv_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpvxe32dlv_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    var score []int\n\
    \    for i := 0; i < len(guess); i++ {\n        score := 0\n        for j := 0;\
    \ j < len(game); j++ {\n            if game[j] == guess[i] {\n               \
    \ score += 1\n            }\n        }\n        score[i] = score\n    }\n\n  \
    \  result := []int{}\n    for _, value := range score {\n        result = (result\
    \ == nil) ? []int{value} : append(result, value)\n    }\n    return result\n}\n\
    \nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj6bgbwx7_test.go:34:34: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    lenGame := len(game)\n\
    \    lenGuess := len(guess)\n    var result []int\n    for i := 0; i < lenGuess;\
    \ i++ {\n        var diff int\n        // The absolute difference between the\
    \ current guess and the game's score\n        // is the value we are comparing\
    \ to\n        if game[i] == guess[i] {\n            diff = 0\n        } else {\n\
    \            diff = abs(game[i] - guess[i])\n        }\n        // Check if the\
    \ person has correctly guessed the correct number of matches\n        // We are\
    \ comparing against the length of the game as if the person had\n        // guessed\
    \ any additional matches, they would also have corrected themselves\n        //\
    \ so we only need to check the length of the guess\n        if diff < lenGame\
    \ {\n            result = []int{diff}\n            break\n        }\n    }\n \
    \   return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuqky3v7w_test.go:31:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    return compareImpl(game,\
    \ guess)\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hnn50qy_test.go:21:12: undefined: compareImpl

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    score := make([]int,\
    \ len(guess))\n    for i := range score {\n        score[i] = game[i]\n    }\n\
    \    for _, w := range guess {\n        if w == 0 {\n            score[len(guess)-1]\
    \ -= w\n        }\n    }\n    for i, w := range game {\n        if w == 0 {\n\
    \            score[i] -= w\n        }\n    }\n    return score\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmphgng0mrb_test.go:54: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmphgng0mrb_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmphgng0mrb_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074338
- exit_code: 0
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    x := make([]int,\
    \ len(guess))\n    for i := range x {\n        x[i] = game[i] - guess[i]\n   \
    \ }\n    for i := range x {\n        if x[i] < 0 {\n            x[i] = -x[i]\n\
    \        }\n    }\n    return x // TODO\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074338
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two lists of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return a list of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>>\
    \ compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1,\
    \ 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    n := len(game)\n\
    \    g := len(guess)\n    r := make([]int, g)\n    for i := 0; i < n; i++ {\n\
    \        // The first item of guess is the most significant\n        // The last\
    \ item of guess is the least significant\n        // We will use that to compute\
    \ the difference\n        if i%2 == 0 {\n            r[i] = abs(game[i] - guess[i])\n\
    \        } else {\n            r[i] = abs(guess[i] - game[i])\n        }\n   \
    \ }\n\n    // The first item of r is the \"correct\" answer\n    // The last item\
    \ of r is the \"correct\" answer\n    // r[0] == r[g-1]\n    return r\n}\n\nfunc\
    \ TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
    \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
    \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
    \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n\
    \     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
    \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4se0zvy_test.go:29:20: undefined: abs

    /tmp/tmpg4se0zvy_test.go:31:20: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
