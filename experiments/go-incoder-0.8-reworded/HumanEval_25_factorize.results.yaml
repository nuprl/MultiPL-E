language: go_test.go
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorization := []int{}\n    factor := 2\n  \
    \  while n > 1 {\n        if n%factor == 0 {\n            factorization = append(factorization,\
    \ factor)\n            n /= factor\n        } else {\n            factor++\n \
    \       }\n    }\n    if n > 1 {\n        factorization = append(factorization,\
    \ n)\n    }\n    return factorization\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3mg6333q_test.go:20:11: expected '';'', found n

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorization := make([]int, 1, n+1)\n\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            for j := 2; j <=\
    \ i/2; j++ {\n                if i*j == n {\n                    factorization\
    \ = append(factorization, i)\n                    break\n                }\n \
    \           }\n        }\n    }\n    return factorization\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4174ep0m_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4174ep0m_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp4174ep0m_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n\
    \        tmp4174ep0m_test.go:53: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4174ep0m_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=171) %!s(int=361) %!s(int=1083)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp4174ep0m_test.go:53: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=0) %!s(int=1083) %!s(int=3249)\
    \ %!s(int=6859) %!s(int=9747) %!s(int=20577) %!s(int=61731)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmp4174ep0m_test.go:53: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=361) %!s(int=1083) %!s(int=6859)]'\n\
    \    --- FAIL: TestFactorize/test_num__7 (0.00s)\n        tmp4174ep0m_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=6) %!s(int=9)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 1; i <=\
    \ n; i++ {\n        for _, factorNr := range factors{i, n} { //If n is prime number,\
    \ then both i and n are factors\n            factors := factors[:len(factors)-1]\
    \ // If i has at least one factor, then remove it from factors\n            if\
    \ n%i == 0 {\n                factors = append(factors, i)\n                n\
    \ /= i\n                break\n            }\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr583xnmp_test.go:20:42: expected 1 expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := []int{}\n    for i:=2; i<=n; i++ {\n\
    \        if n%i == 0 {\n            prime = append(prime, i)\n            n =\
    \ n/i\n        } else {\n            break\n        }\n    }\n\n    if n != 1\
    \ {\n        prime = append(prime, n)\n    }\n\n    return prime\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpfn2t6crg_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n\
    \        tmpfn2t6crg_test.go:55: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=57)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpfn2t6crg_test.go:55:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3249)]'\n\
    \    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmpfn2t6crg_test.go:55:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=185193)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n \
    \       tmpfn2t6crg_test.go:55: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=20577)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.023s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for f := 1; f <= n; f++\
    \ {\n        if n % f == 0 {\n            factors = append(factors, f)\n     \
    \       n /= f\n        }\n    }\n    if n != 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpg95acek4_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpg95acek4_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpg95acek4_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpg95acek4_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=19)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpg95acek4_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpg95acek4_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=9)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n\
    \        tmpg95acek4_test.go:51: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=19) %!s(int=361)]'\n    ---\
    \ FAIL: TestFactorize/test_num__7 (0.00s)\n        tmpg95acek4_test.go:51: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    result := []int{}\n    for f := 2; f <= n; {\n\
    \        if n%f == 0 {\n            result[len(result)-1]++\n            n /=\
    \ f\n        } else {\n            f *= 2\n        }\n    }\n    return result\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpbe8zok0p_test.go:21\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpbe8zok0p_test.go:37\
    \ +0x7df\ntesting.tRunner(0xc00019b040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    for i := 2; i <= n/2; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n = (n - i) / i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpr8ga2ija_test.go:48: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpr8ga2ija_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpr8ga2ija_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpr8ga2ija_test.go:48: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=6)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpr8ga2ija_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=541)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmpr8ga2ija_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=15) %!s(int=137)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpr8ga2ija_test.go:48: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=6) %!s(int=571)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmpr8ga2ija_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var result []int\n\n    result := factorizePrime(n)\n\
    \    for _, v := range result {\n        count := 1\n        for _, b := range\
    \ result {\n            if b == v {\n                count++\n               \
    \ break\n            }\n        }\n        factors := make([]int, count)\n   \
    \     copy(factors, result)\n        factors[len(factors)-1] = v\n        result\
    \ = append(factors, v)\n    }\n    return result\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfyq7iz4a_test.go:20:12: no new variables on left side of :=

    /tmp/tmpfyq7iz4a_test.go:20:15: undefined: factorizePrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorization := make([]int, n)\n\n    for i :=\
    \ 0; i < n; i++ {\n        var j *int\n        for j := i; j < n; j++ {\n    \
    \        if n%j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            factorization[i] = 1\n        } else {\n       \
    \     factorization[i] = factorization[j]*i+1\n        }\n    }\n    return factorization\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_yfpbw7s_test.go:27:17: invalid operation: j == i (mismatched types *int
    and int)

    /tmp/tmp_yfpbw7s_test.go:30:46: invalid argument: index j (variable of type *int)
    must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n <= 1 {\n        return nil\n    }\n    prime\
    \ := []int{}\n    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n       \
    \     prime = append(prime, i)\n            n /= i\n        }\n    }\n    factors\
    \ := []int{}\n    for _, f := range prime {\n        for j := 1; j <= f; j++ {\n\
    \            if n%j == 0 {\n                factors = append(factors, j)\n   \
    \             n /= j\n            }\n        }\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp9ats_3f9_test.go:60: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp9ats_3f9_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL:\
    \ TestFactorize/test_num__2 (0.00s)\n        tmp9ats_3f9_test.go:60: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestFactorize/test_num__3 (0.00s)\n        tmp9ats_3f9_test.go:60: expected\
    \ '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmp9ats_3f9_test.go:60: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=19)]'\n    ---\
    \ FAIL: TestFactorize/test_num__5 (0.00s)\n        tmp9ats_3f9_test.go:60: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got\
    \ '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmp9ats_3f9_test.go:60: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=1) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmp9ats_3f9_test.go:60: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, 0, 2+1)\n    factorized :=\
    \ make([]int, 0, 2+1)\n\n    for i := 0; i < n; i++ {\n        factor := prime[i%2]\n\
    \        factorized = append(factorized, factor)\n        if factor != 1 {\n \
    \           prime[i%2] = factorize[len(factorize)-1]\n        }\n    }\n\n   \
    \ for i := 0; i < len(factorized); i++ {\n        if factorized[i] != i {\n  \
    \          factorized = append(factorized, 1)\n            break\n        }\n\
    \    }\n\n    return factorized\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt9676tp3_test.go:25:35: invalid operation: cannot index factorize (value
    of type func(n int) []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, len(primeFactorization(n)))\n\
    \    x := 2\n    for i := range prime {\n        if n == x*i {\n            prime[i]\
    \ = 1\n        } else {\n            prime[i] = 0\n        }\n    }\n    return\
    \ prime\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2_t_srrd_test.go:18:30: undefined: primeFactorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizationSum := int(1) << uint(0)\n    factorizations\
    \ := make([]int, uint(n))\n    for factor := uint(1); factor < factorizationSum;\
    \ factor++ {\n        if factorizations[factor] == 0 {\n            for factor\
    \ := uint(factor+1); factor < factorizationSum; factor++ {\n                if\
    \ factorizations[factor] == 0 {\n                    factorizations[factor] =\
    \ factor\n                }\n            }\n        }\n    }\n    factorizations\
    \ := append(factorizations, []int{})\n\n    for factor, count := uint(0), uint(0);\
    \ factor < len(factorizations); factor++ {\n        if factorizations[factor]\
    \ == 0 {\n            factorizations[factor] = factor\n            count++\n \
    \       }\n    }\n    fmt.Println(factorizations)\n    return factorizations\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzeokls2f_test.go:20:37: invalid operation: factor < factorizationSum (mismatched
    types uint and int)

    /tmp/tmpzeokls2f_test.go:22:52: invalid operation: factor < factorizationSum (mismatched
    types uint and int)

    /tmp/tmpzeokls2f_test.go:24:46: cannot use factor (variable of type uint) as type
    int in assignment

    /tmp/tmpzeokls2f_test.go:29:20: no new variables on left side of :=

    /tmp/tmpzeokls2f_test.go:29:46: cannot use []int{} (value of type []int) as type
    int in argument to append

    /tmp/tmpzeokls2f_test.go:31:53: invalid operation: factor < len(factorizations)
    (mismatched types uint and int)

    /tmp/tmpzeokls2f_test.go:33:38: cannot use factor (variable of type uint) as type
    int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    f := n\n    f *= f\n  \
    \  factors = append(factors, f)\n\n    for f := 2; f <= n; f++ {\n        if n\
    \ % f == 0 {\n            factors = append(factors, f)\n            f *= f\n \
    \       }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpfpzqaln3_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=4)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpfpzqaln3_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=16) %!s(int=2)]'\n    ---\
    \ FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpfpzqaln3_test.go:52: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=64) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpfpzqaln3_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3249) %!s(int=3) %!s(int=19)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpfpzqaln3_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=10556001)\
    \ %!s(int=3) %!s(int=19) %!s(int=1083)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpfpzqaln3_test.go:52: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=34296447249) %!s(int=3)\
    \ %!s(int=19) %!s(int=513)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n\
    \        tmpfpzqaln3_test.go:52: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=423412929) %!s(int=3) %!s(int=19) %!s(int=1083)]'\n\
    \    --- FAIL: TestFactorize/test_num__7 (0.00s)\n        tmpfpzqaln3_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=324) %!s(int=2)\
    \ %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    facs := make([]int, 0)\n\n    for i := 0; i <\
    \ n; i++ {\n        k := factorizationsOf(n-i)\n        facs = append(facs, k...)\n\
    \    }\n\n    return facs\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbm9ojef2_test.go:21:14: undefined: factorizationsOf

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    primes := []int{2, 3, 5}\n    primesFactor :=\
    \ []int{2, 2, 2}\n    n := int(n)\n    for p := 3; p*p <= n; p++ {\n        if\
    \ n%p == 0 {\n            primes = append(primes, p)\n            primesFactor\
    \ = append(primesFactor, int(n/p))\n        }\n    }\n    return primesFactor\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmnw0z_n6_test.go:20:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    isPrime := func(i int)\
    \ bool {\n        if n%i == 0 {\n            return false\n        } else {\n\
    \            factors = append(factors, i)\n            return true\n        }\n\
    \    }\n    factorsCounter := 0\n    for i := 2; i < n; i++ {\n        if isPrime(i)\
    \ {\n            factors = append(factors, i)\n            factorsCounter++\n\
    \        }\n        if factorsCounter == 0 {\n            for j := i * i; j <\
    \ n; j += i {\n                if !isPrime(j) {\n                    factors =\
    \ append(factors, j)\n                }\n            }\n        }\n    }\n   \
    \ return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.19s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp2jysa2j7_test.go:64: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp2jysa2j7_test.go:64:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=3)]'\n    --- FAIL:\
    \ TestFactorize/test_num__2 (0.00s)\n        tmp2jysa2j7_test.go:64: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=6) %!s(int=3)\
    \ %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7)]'\n\
    \    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmp2jysa2j7_test.go:64:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7)\
    \ %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11)\
    \ %!s(int=11) %!s(int=12) %!s(int=12) %!s(int=13) %!s(int=13) %!s(int=14) %!s(int=14)\
    \ %!s(int=15) %!s(int=15) %!s(int=16) %!s(int=16) %!s(int=17) %!s(int=17) %!s(int=18)\
    \ %!s(int=18) %!s(int=20) %!s(int=20) %!s(int=21) %!s(int=21) %!s(int=22) %!s(int=22)\
    \ %!s(int=23) %!s(int=23) %!s(int=24) %!s(int=24) %!s(int=25) %!s(int=25) %!s(int=26)\
    \ %!s(int=26) %!s(int=27) %!s(int=27) %!s(int=28) %!s(int=28) %!s(int=29) %!s(int=29)\
    \ %!s(int=30) %!s(int=30) %!s(int=31) %!s(int=31) %!s(int=32) %!s(int=32) %!s(int=33)\
    \ %!s(int=33) %!s(int=34) %!s(int=34) %!s(int=35) %!s(int=35) %!s(int=36) %!s(int=36)\
    \ %!s(int=37) %!s(int=37) %!s(int=38) %!s(int=38) %!s(int=39) %!s(int=39) %!s(int=40)\
    \ %!s(int=40) %!s(int=41) %!s(int=41) %!s(int=42) %!s(int=42) %!s(int=43) %!s(int=43)\
    \ %!s(int=44) %!s(int=44) %!s(int=45) %!s(int=45) %!s(int=46) %!s(int=46) %!s(int=47)\
    \ %!s(int=47) %!s(int=48) %!s(int=48) %!s(int=49) %!s(int=49) %!s(int=50) %!s(int=50)\
    \ %!s(int=51) %!s(int=51) %!s(int=52) %!s(int=52) %!s(int=53) %!s(int=53) %!s(int=54)\
    \ %!s(int=54) %!s(int=55) %!s(int=55) %!s(int=56) %!s(int=56)]'\n    --- FAIL:\
    \ TestFactorize/test_num__4 (0.00s)\n        tmp2jysa2j7_test.go:64: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=19) %!s"
  timestamp: 1660074633
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, 0, n+1)\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            prime = append(prime, i)\n\
    \            n/= i\n        }\n    }\n    return prime\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmpe3550ix__test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmpe3550ix__test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpe3550ix__test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpe3550ix__test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpe3550ix__test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpe3550ix__test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    // Check if it is even or odd.\n    if n % 2 ==\
    \ 0 {\n        return []int{0}\n    }\n\n    // Find prime factors of n\n    result\
    \ := []int{1}\n    if n != 1 {\n        m := 2\n        for m <= n {\n       \
    \     if n%m == 0 {\n                results = append(results, m)\n          \
    \  }\n            m = m * 2\n        }\n    }\n\n    return result\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fc2km74_test.go:29:34: undefined: results

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n\n    for i := 2; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n \
    \ candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpyf3xvemn_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpyf3xvemn_test.go:54: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpyf3xvemn_test.go:54: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpyf3xvemn_test.go:54:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.018s\nFAIL\n"
  timestamp: 1660074632
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    // Find all prime numbers between 2 and n\n  \
    \  prime := [2]int{}\n    m := 3\n    for {\n        if (n % m == 0) {\n     \
    \       prime[0] = prime[0] + 1\n            prime[1] = prime[1] + 1\n       \
    \     n /= m\n        } else {\n            break\n        }\n    }\n\n    //\
    \ Find all prime numbers between 31 and n\n    for {\n        if (n % m == 0)\
    \ {\n            prime[0] = prime[0] + 1\n            prime[1] = prime[1] + 1\n\
    \            n /= m\n        } else {\n            break\n        }\n    }\n \
    \   m += 2\n\n    var result []int\n    var factorization []int\n    // Create\
    \ result array based on prime numbers found\n    for i := 2; i <= n; i++ {\n \
    \       for j := 1; j <= prime[i]; j++ {\n            result.append(j)\n     \
    \   }\n    }\n    // Fill factorization array for unique factors of each number\
    \ in result\n    for _, val := range result {\n        for i := 2; i <= val; i++\
    \ {\n            for j := 1; j <= prime[i]; j++ {\n                factorization\
    \ = append(factorization, j)\n            }\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp06to63xt_test.go:48:20: result.append undefined (type []int has no field
    or method append)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    facs := []int{}\n    i := 2\n    for ; i <= n/i;\
    \ i++ {\n        j := i\n        while j*j < n {\n            if n%i == 0 {\n\
    \                facs = append(facs, i)\n                n /= i\n            \
    \    break\n            } else {\n                j++\n            }\n       \
    \ }\n    }\n    if n%i != 0 {\n        facs = append(facs, n)\n    }\n    return\
    \ facs\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzwqz4g8e_test.go:22:15: expected '';'', found j

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074630
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n%2 == 0 {\n        return [2]int{n}\n    }\n\
    \    factors := [2]int{2, 2}\n    for i := 3; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors[1]++\n            n /= i\n        }\n    }\n    if\
    \ n > 1 {\n        factors[1]++\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvahme40d_test.go:19:16:\
    \ cannot use [2]int{\u2026} (value of type [2]int) as type []int in return statement\n\
    /tmp/tmpvahme40d_test.go:31:12: cannot use factors (variable of type [2]int) as\
    \ type []int in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074632
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, 0)\n    for d := 2; d <=\
    \ n; d++ {\n        if n%d==0 {\n            factors = append(factors, d)\n  \
    \          for j := 0; j <= n%d; j++ {\n                n /= d\n            }\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmpha1g25_m_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmpha1g25_m_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n\
    \        tmpha1g25_m_test.go:50: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=6)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpha1g25_m_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n\
    \        tmpha1g25_m_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpha1g25_m_test.go:50: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmpha1g25_m_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    n -= 1 // To include 2 as a factor\n    factors\
    \ := []int{}\n    lastDiv := int(n%2)\n    for i := 2; i <= lastDiv; i++ {\n \
    \       if n%i == 0 {\n            factors = append(factors, i)\n            n\
    \ /= i\n        }\n    }\n    if n != 1 {\n        factors = append(factors, n)\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpcp9p4phq_test.go:53: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpcp9p4phq_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpcp9p4phq_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=7)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpcp9p4phq_test.go:53: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=56)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpcp9p4phq_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3248)]'\n\
    \    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmpcp9p4phq_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=185192)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n \
    \       tmpcp9p4phq_test.go:53: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=20576)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmpcp9p4phq_test.go:53: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074634
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n<2 {\n        return []int{0}\n    }\n   \
    \ f := make([]int, n-1)\n    for i := 0; i < n; i++ {\n        if n%i == 0 {\n\
    \            f := append(f, i)\n        }\n    }\n    sort.Ints(f)\n    return\
    \ f\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcee4mxrn_test.go:24:13: f declared but not used

    /tmp/tmpcee4mxrn_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074633
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    facs := make([]int, 0)\n    for i := 2; i <= n;\
    \ i++ {\n        for j := i * i; j < n; j += i {\n            facs = append(facs,\
    \ j)\n        }\n    }\n    return facs\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.43s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp6m9zv2a0_test.go:47: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp6m9zv2a0_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp6m9zv2a0_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n\
    \        tmp6m9zv2a0_test.go:47: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32)\
    \ %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46)\
    \ %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=9) %!s(int=12)\
    \ %!s(int=15) %!s(int=18) %!s(int=21) %!s(int=24) %!s(int=27) %!s(int=30) %!s(int=33)\
    \ %!s(int=36) %!s(int=39) %!s(int=42) %!s(int=45) %!s(int=48) %!s(int=51) %!s(int=54)\
    \ %!s(int=16) %!s(int=20) %!s(int=24) %!s(int=28) %!s(int=32) %!s(int=36) %!s(int=40)\
    \ %!s(int=44) %!s(int=48) %!s(int=52) %!s(int=56) %!s(int=25) %!s(int=30) %!s(int=35)\
    \ %!s(int=40) %!s(int=45) %!s(int=50) %!s(int=55) %!s(int=36) %!s(int=42) %!s(int=48)\
    \ %!s(int=54) %!s(int=49) %!s(int=56)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmp6m9zv2a0_test.go:47: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) "
  timestamp: 1660074635
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var primes []int\n    factorize := make([]int,\
    \ n)\n    x := 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n     \
    \       factorize[i] = x\n            x += 1\n            n /= i\n           \
    \ for j := 2; j <= n; j++ {\n                if n%j == 0 {\n                 \
    \   factorize[i] = factorize[i] + 1\n                    x += 1\n            \
    \        n /= j\n                }\n            }\n            primes = append(primes,\
    \ i)\n        }\n    }\n    return factorize\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\nThis is my solution:\n<code>\npackage main\n\nimport (\n   \
    \ \"fmt\"\n    \"math\"\n)\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpneg0b989_test.go:38:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        for j := 2; i * j <= n; j++ {\n            if n%i == 0 {\n\
    \                factors[j] = i\n                n /= i\n                break\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpu0gd90f6_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpu0gd90f6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpu0gd90f6_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpu0gd90f6_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpu0gd90f6_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int="
  timestamp: 1660074635
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n)\n\n    // Loop through\
    \ all prime factors\n    for i := 0; i < n; i++ {\n        if prime[i] == i {\n\
    \            continue\n        }\n        result := 1\n        for j := 0; j <=\
    \ i; j++ {\n            if prime[j]%i == 0 {\n                result = i * result\
    \ + j\n                prime[j] = 0\n                break\n            }\n  \
    \      }\n        if result > n-1 {\n            prime[i] = 0\n        }\n   \
    \ }\n\n    return prime\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmppca3u9ei_test.go:61: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmppca3u9ei_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmppca3u9ei_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmppca3u9ei_test.go:61: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmppca3u9ei_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074635
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factored := make([]int, 0, n)\n    p := n\n  \
    \  var f int\n    for f == 0 {\n        f := p\n        p--\n        for i :=\
    \ p; i < n; i++ {\n            if (n % i == 0) {\n                f = f * i +\
    \ 1\n                break\n            }\n        }\n        if f > 1 {\n   \
    \         factored = append(factored, f)\n        }\n    }\n    return factored\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpxk9wqb24_test.go:25\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpxk9wqb24_test.go:44\
    \ +0x105\ntesting.tRunner(0xc0000cc4e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorize := []int{}\n    for i := 2; i <= n/2;\
    \ i++ {\n        if n%i == 0 {\n            factorize = append(factorize, i)\n\
    \            factorize = append(factorize, n/i)\n        }\n    }\n    return\
    \ factorize\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpzj2351e3_test.go:48: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpzj2351e3_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=4) %!s(int=4)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpzj2351e3_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpzj2351e3_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=1083) %!s(int=9) %!s(int=361) %!s(int=19) %!s(int=171) %!s(int=57) %!s(int=57)\
    \ %!s(int=171) %!s(int=19) %!s(int=361) %!s(int=9) %!s(int=1083) %!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmpzj2351e3_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=61731) %!s(int=9) %!s(int=20577) %!s(int=19) %!s(int=9747)\
    \ %!s(int=27) %!s(int=6859) %!s(int=57) %!s(int=3249) %!s(int=171) %!s(int=1083)\
    \ %!s(int=361) %!s(int=513) %!s(int=513) %!s(int=361) %!s(int=1083) %!s(int=171)\
    \ %!s(int=3249) %!s(int=57) %!s(int=6859) %!s(int=27) %!s(int=9747) %!s(int=19)\
    \ %!s(int=20577) %!s(int=9) %!s(int=61731) %!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpzj2351e3_test.go:48: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=6859) %!s(int=19) %!s(int=1083) %!s(int=57)\
    \ %!s(int=361) %!s(int=361) %!s(int=57) %!s(int=1083) %!s(int=19) %!s(int=6859)\
    \ %!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n        tmpzj2351e3_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=9) %!s(int=3)\
    \ %!s(int=6) %!s(int=6) %!s(int=3) %!s(int=9) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.018s\nFAIL\n"
  timestamp: 1660074635
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074301
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizationOfNumber := make(map[int]int)\n \
    \   // if n is 1 then it is trivial factorization\n    if n == 1 {\n        return\
    \ []int{1}\n    }\n    // if n is even, then only 2 factors need to be tested\n\
    \    if n %2 == 0 {\n        factorizationOfNumber[2] = 2\n        return [2]int{n}\n\
    \    }\n    // factors of n are 1, 2, 4, 6, 12, or 36\n    // so for n = 12 *\
    \ 6, first we check 6 and 12\n    // if they both are even then we test 6 and\
    \ 12 first\n    // since 6 is even and 12 is also even, we can test 6*6 as well\
    \ since 12 is even\n    if n%12 == 0 {\n        factorizationOfNumber[6] = 6\n\
    \        factorizationOfNumber[12] = 12\n    }\n    // check first odd number\n\
    \    if n%4 == 0 {\n        factorizationOfNumber[4] = 4\n    }\n    if n%6 ==\
    \ 0 {\n        factorizationOfNumber[6] = 6\n    }\n\n    // check first even\
    \ number\n    if n%2 == 0 {\n        factorizationOfNumber[2] = 2\n    }\n   \
    \ // check last odd number\n    if n%6 == 0 {\n        factorizationOfNumber[6]\
    \ = 6\n    }\n\n    // check if n is divisible by all prime numbers up to 10\n\
    \    // if yes then all prime numbers up to 10 will divide n\n    for k := 3;\
    \ k < 11; k++ {\n        if n%k == 0 {\n            factorizationOfNumber[k] =\
    \ k\n            break\n        }\n    }\n\n    // if n is divisible by any prime\
    \ number then it is trivial\n    for k := 3; k*k <= n; k++ {\n        if n%k ==\
    \ 0 {\n            return []int{n}\n        }\n    }\n\n    // check last even\
    \ number which was tested first\n    if n%2 == 0 {\n        factorizationOfNumber[2]\
    \ = 2\n    }\n\n    factors := []int{}\n    for k := 2; k <= n; k++ {\n      \
    \  if factorizationOfNumber[k] != 0 {\n            factors = append(factors, factorizationOfNumber[k])\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc4o7glrx_test.go:26:16:\
    \ cannot use [2]int{\u2026} (value of type [2]int) as type []int in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074634
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := []int{n}\n    factor := make([]int, len(prime))\n\
    \    temp := make([]int, len(prime))\n    i := 0\n    for {\n        if prime[i]\
    \ == 0 {\n            break\n        }\n        temp[i] = prime[i]\n        i\
    \ ++\n    }\n    for i := 0; i < len(prime); i ++ {\n        if temp[i] > 1 {\n\
    \            factor[i] = temp[i]\n            temp[i] = 1\n        }\n    }\n\
    \    return factor\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpnrltuzfj_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpnrltuzfj_test.go:45\
    \ +0xa33\ntesting.tRunner(0xc0000cc4e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n < 2 {\n        return nil\n    }\n    m :=\
    \ make([]int, n+1)\n    p := 2\n    for i := 1; i <= n; i++ {\n        if m ==\
    \ nil {\n            return nil\n        }\n        if m[i] == 0 {\n         \
    \   m[i] = 1\n            if n%p == 0 {\n                p++\n            }\n\
    \        } else {\n            m[i] = m[i-1]\n            if i%p == 0 {\n    \
    \            p++\n            }\n        }\n    }\n    return m[:n]\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpbxr4o61y_test.go:62: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpbxr4o61y_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpbxr4o61y_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpbxr4o61y_test.go:62: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpbxr4o61y_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1"
  timestamp: 1660074635
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n)\n    for i := 1; i < n;\
    \ i++ {\n        if prime[i] == 1 {\n            continue\n        }\n       \
    \ prime[i] = 0\n        fmt.Println(i)\n        if n == i*i {\n            prime[i]\
    \ = 1\n            continue\n        }\n        for j := i * 2; j < n; j += i\
    \ {\n            if j%i == 0 {\n                break\n            }\n       \
    \     prime[j]++\n        }\n    }\n    return prime\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: '1

    1

    2

    3

    1

    2

    3

    4

    5

    6

    7

    1

    2

    3

    4

    5

    6

    7

    8

    9

    10

    11

    12

    13

    14

    15

    16

    17

    18

    19

    20

    21

    22

    23

    24

    25

    26

    27

    28

    29

    30

    31

    32

    33

    34

    35

    36

    37

    38

    39

    40

    41

    42

    43

    44

    45

    46

    47

    48

    49

    50

    51

    52

    53

    54

    55

    56

    1

    2

    3

    4

    5

    6

    7

    8

    9

    10

    11

    12

    13

    14

    15

    16

    17

    18

    19

    20

    21

    22

    23

    24

    25

    26

    27

    28

    29

    30

    31

    32

    33

    34

    35

    36

    37

    38

    39

    40

    41

    42

    43

    44

    45

    46

    47

    48

    49

    50

    51

    52

    53

    54

    55

    56

    57

    58

    59

    60

    61

    62

    63

    64

    65

    66

    67

    68

    69

    70

    71

    72

    73

    74

    75

    76

    77

    78

    79

    80

    81

    82

    83

    84

    85

    86

    87

    88

    89

    90

    91

    92

    93

    94

    95

    96

    97

    98

    99

    100

    101

    102

    103

    104

    105

    106

    107

    108

    109

    110

    111

    112

    113

    114

    115

    116

    117

    118

    119

    120

    121

    122

    123

    124

    125

    126

    127

    128

    129

    130

    131

    132

    133

    134

    135

    136

    137

    138

    139

    140

    141

    142

    143

    144

    145

    146

    147

    148

    149

    150

    151

    152

    153

    154

    155

    156

    157

    158

    159

    160

    161

    162

    163

    164

    165

    166

    167

    168

    169

    170

    171

    172

    173

    174

    175

    176

    177

    178

    179

    180

    181

    182

    183

    184

    185

    186

    187

    188

    189

    190

    191

    192

    193

    194

    195

    196

    197

    198

    199

    200

    201

    202

    203

    204

    205

    206

    207

    208

    209

    210

    211

    212

    213

    214

    215

    216

    217

    218

    219

    220

    221

    222

    223

    224

    225

    226

    227

    228

    229

    230

    231

    232

    233

    234

    235

    236

    237

    238

    239

    240

    241

    242

    243

    244

    245

    246

    247

    248

    249

    250

    251

    252

    253

    254

    255

    256

    257

    258

    259

    260

    261

    262

    263

    264

    265

    266

    267

    268

    269

    270

    271

    272

    273

    274

    275

    276

    277

    278

    279

    280

    281

    282

    283

    284

    285

    286

    287

    288

    289

    290

    291

    292

    293

    294

    295

    296

    297

    298

    299

    300

    301

    302

    303

    304

    305

    306

    307

    308

    309

    310

    311

    312

    313

    314

    315

    316

    317

    318

    319

    320

    321

    322

    323

    324

    325

    326

    327

    328

    329

    330

    331

    332

    333

    334

    335

    336

    337

    338

    339

    340

    341

    342

    343

    344

    345

    346

    347

    348

    349

    350

    351

    352

    353

    354

    355

    356

    357

    358

    359

    360

    361

    362

    363

    364

    365

    366

    367

    368

    369

    370

    371

    372

    373

    374

    375

    376

    377

    378

    379

    380

    381

    382

    383

    384

    385

    386

    387

    388

    389

    390

    391

    392

    393

    394

    395

    396

    397

    398

    399

    400

    401

    402

    403

    404

    405

    406

    407

    408

    409

    410

    411

    412

    413

    414

    415

    416

    417

    418

    419

    420

    421

    422

    423

    424

    425

    426

    427

    428

    429

    430

    431

    432

    433

    434

    435

    436

    437

    438

    439

    440

    441

    442

    443

    444

    445

    446

    447

    448

    449

    450

    451

    452

    453

    454

    455

    456

    457

    458

    459

    460

    461

    462

    463

    464

    465

    466

    467

    468

    469

    470

    471

    472

    473

    474

    475

    476

    477

    478

    479

    480

    481

    482

    483

    484

    485

    486

    487

    488

    489

    490

    491

    492

    493

    494'
  timestamp: 1660074635
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n, n)\n    result := make([]int,\
    \ n)\n\n    for i := 0; i < n; i++ {\n        prime[i] = 1\n        for j := 2;\
    \ j*j <= n; j++ {\n            if prime[j] != 0 {\n                if n%j == 0\
    \ {\n                    prime[j]++\n                    result[i] = j\n     \
    \               break\n                }\n                if n%j > 0 {\n     \
    \               prime[j]++\n                    if prime[j] == 2 {\n         \
    \               prime[j]--\n                    } else if prime[j] == 3 {\n  \
    \                      prime[j]--\n                    }\n                }\n\
    \            }\n        }\n    }\n\n    return result\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpyz624hfc_test.go:65: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpyz624hfc_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpyz624hfc_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpyz624hfc_test.go:65: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpyz624hfc_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3"
  timestamp: 1660074636
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n\n    if n != 1 {\n      \
    \  // If input number is not 1, then try to find factors by prime factorization\n\
    \        for i := 2; i*i <= n; i++ {\n            if n%i == 0 {\n            \
    \    factors = append(factors, i)\n                n /= i\n            }\n   \
    \     }\n        if n != 1 {\n            factors = append(factors, n)\n     \
    \   }\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpxyksstcc_test.go:56: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpxyksstcc_test.go:56: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpxyksstcc_test.go:56: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpxyksstcc_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorization := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if n%j == 0 {\n\
    \                factorization[i] = j\n                break\n            }\n\
    \        }\n    }\n    return factorization\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4d2ux1yl_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp4d2ux1yl_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp4d2ux1yl_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp4d2ux1yl_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4d2ux1yl_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1"
  timestamp: 1660074636
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n &&\
    \ i*i <= n; i++ {\n        for j := 2; i*j <= n; j++ {\n            if n % i ==\
    \ 0 && n % j == 0 {\n                factors = append(factors, j)\n          \
    \      n = n / j\n            }\n        }\n    }\n    return factors\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp973k_wzd_test.go:50: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp973k_wzd_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp973k_wzd_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmp973k_wzd_test.go:50: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp973k_wzd_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmp973k_wzd_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=9) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmp973k_wzd_test.go:50: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmp973k_wzd_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\n\
    FAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n%2 == 1 {\n        return []int{n}\n    }\n\
    \n    // Store prime factors of current number in a list\n    factors := []int{n}\n\
    \n    // Factor current number by dividing it by each prime in the list\n    for\
    \ p := 2; p*p <= n; p++ {\n        if n%p == 0 {\n            factors = append(factors,\
    \ p)\n            n /= p\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpa10xw1wy_test.go:59: expected '[%!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpa10xw1wy_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpa10xw1wy_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=8) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpa10xw1wy_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpa10xw1wy_test.go:59: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3249)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpa10xw1wy_test.go:59: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=185193)]'\n    --- FAIL:\
    \ TestFactorize/test_num__6 (0.00s)\n        tmpa10xw1wy_test.go:59: expected\
    \ '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=20577)]'\n\
    \    --- FAIL: TestFactorize/test_num__7 (0.00s)\n        tmpa10xw1wy_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=18) %!s(int=2)\
    \ %!s(int=3) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074636
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    facs := []int{}\n    for {\n        divisor :=\
    \ n\n        i := 1\n        for i < n && divisor * i < n {\n            divisor\
    \ *= i\n            i++\n        }\n        if divisor*i == n {\n            facs\
    \ = append(facs, divisor)\n            n /= divisor\n            continue\n  \
    \      }\n        if n > 1 {\n            facs = append(facs, n)\n           \
    \ n = divisor\n            continue\n        }\n        break\n    }\n    return\
    \ facs\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074647
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var ret []int\n    var d int\n    for d = 2; d\
    \ <= n/2; d++ {\n        if n%d == 0 {\n            ret = append(ret, d)\n   \
    \         n /= d\n        }\n    }\n    return ret\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpule64j9l_test.go:49: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpule64j9l_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpule64j9l_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpule64j9l_test.go:49: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpule64j9l_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmpule64j9l_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=9) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpule64j9l_test.go:49: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmpule64j9l_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n < 2 {\n        return []int{}\n    }\n\n\
    \    factors := []int{}\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors = append(factors, i)\n            n /= i\n        }\n   \
    \ }\n\n    factors = append(factors, n)\n\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpoj5bgb3m_test.go:55: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpoj5bgb3m_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpoj5bgb3m_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpoj5bgb3m_test.go:55:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=19)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpoj5bgb3m_test.go:55:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpoj5bgb3m_test.go:55: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=9)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n\
    \        tmpoj5bgb3m_test.go:55: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=19) %!s(int=361)]'\n    ---\
    \ FAIL: TestFactorize/test_num__7 (0.00s)\n        tmpoj5bgb3m_test.go:55: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    d := newDivisorsArray(n)\n    factors := []int{}\n\
    \    for i := 0; i < len(d); i++ {\n        if d[i] != 0 {\n            factors\
    \ = append(factors, d[i])\n            n /= d[i]\n        }\n    }\n    return\
    \ factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaplu77d_test.go:18:10: undefined: newDivisorsArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074635
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    primes := []int{}\n    factors := []int{}\n\n\
    \    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n            primes = append(primes,\
    \ i)\n            factors = append(factors, 1)\n            n /= i\n        }\
    \ else {\n            factors = append(factors, factors[i]*2)\n            n /=\
    \ i\n        }\n    }\n\n    return append(primes, factors...)\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 2 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5147c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5147c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpzk3fx_eg_test.go:27\n\
    command-line-arguments_test.TestFactorize(0xc0000da340?)\n\t/tmp/tmpzk3fx_eg_test.go:44\
    \ +0x1946\ntesting.tRunner(0xc0000da340, 0x52a0e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factorize []int\n    n /= 2\n\n    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            n /= i\n            factorize\
    \ = append(factorize, i)\n            if n > 1 {\n                for j := i *\
    \ i; j < n; j += i {\n                    factorize = append(factorize, j)\n \
    \               }\n            }\n        }\n    }\n\n    if n != 1 {\n      \
    \  factorize = append(factorize, n)\n    }\n\n    return factorize\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.01s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp559ned35_test.go:60: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp559ned35_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp559ned35_test.go:60: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n\
    \        tmp559ned35_test.go:60: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=7) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp559ned35_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)\
    \ %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30)\
    \ %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44)\
    \ %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58)\
    \ %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72)\
    \ %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86)\
    \ %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98) %!s(int=100)\
    \ %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110) %!s(int=112)\
    \ %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122) %!s(int=124)\
    \ %!s(int=126) %!s(int=128) %!s(int=130) %!s(int=132) %!s(int=134) %!s(int=136)\
    \ %!s(int=138) %!s(int=140) %!s(int=142) %!s(int=144) %!s(int=146) %!s(int=148)\
    \ %!s(int=150) %!s(int=152) %!s(int=154) %!s(int=156) %!s(int=158) %!s(int=160)\
    \ %!s(int=162) %!s(int=164) %!s(int=166) %!s(int=168) %!s(int=170) %!s(int=172)\
    \ %!s(int=174) %!s(int=176) %!s(int=178) %!s(int=180) %!s(int=182) %!s(int=184)\
    \ %!s(int=186) %!s(int=188) %!s(int=190) %!s(int=192) %!s(int=194) %!s(int=196)\
    \ %!s(int=198) %!s(int=200) %!"
  timestamp: 1660074637
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    p := make([]int, 0)\n    r := make([]int, 0)\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            if i >= p {\n\
    \                p = append(p, i)\n            }\n            if i > r {\n   \
    \             r = append(r, i)\n            }\n        }\n    }\n    sort.IntSlice(r)\n\
    \    return p\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0048zfkx_test.go:22:21: invalid operation: i >= p (mismatched types int
    and []int)

    /tmp/tmp0048zfkx_test.go:25:20: invalid operation: i > r (mismatched types int
    and []int)

    /tmp/tmp0048zfkx_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074637
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    // if n is a prime\n    if n%2 == 0 {\n      \
    \  n /= 2\n        return [2]int{n}\n    }\n\n    var factors []int\n    factors\
    \ = append(factors, [2]int{n})\n\n    for i := 3; i <= int(math.Sqrt(n)); i++\
    \ {\n        if n%i == 0 {\n            n /= i\n            factors = append(factors,\
    \ [2]int{n})\n        }\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8cvkrxyx_test.go:21:16:\
    \ cannot use [2]int{\u2026} (value of type [2]int) as type []int in return statement\n\
    /tmp/tmp8cvkrxyx_test.go:25:31: cannot use [2]int{\u2026} (value of type [2]int)\
    \ as type int in argument to append\n/tmp/tmp8cvkrxyx_test.go:27:26: undefined:\
    \ math\n/tmp/tmp8cvkrxyx_test.go:30:39: cannot use [2]int{\u2026} (value of type\
    \ [2]int) as type int in argument to append\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074637
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizations := make([]int, n)\n    i := 2\n\
    \    for ; i*i < n; i++ {\n        for j := 2; j*j <= i; j++ {\n            if\
    \ n % i == 0 {\n                factorizations[n] = i\n                n /= i\n\
    \                break\n            }\n        }\n    }\n    return factorizations\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [3249] with length 3249 [recovered]\n\tpanic: runtime error: index out of range\
    \ [3249] with length 3249\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp718snm5t_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp718snm5t_test.go:43\
    \ +0xa05\ntesting.tRunner(0xc0000da1a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n <= 1 {\n        return []int{n}\n    }\n\
    \    primes, _ := FindPrimes(n+1)\n    factors := make([]int, 0, len(primes))\n\
    \    factor := 1\n    for _, prime := range primes {\n        for i := 1; i <=\
    \ n; i++ {\n            if n%prime == 0 {\n                factors = append(factors,\
    \ factor)\n                n /= prime\n                break\n            }\n\
    \        }\n        factor++\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pwes0oj_test.go:21:18: undefined: FindPrimes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    f := make([]int, 0, n)\n    if n%2 == 0 {\n  \
    \      f = append(f, 2)\n        n = n/2\n    }\n    for i := 3; i <= n; i++ {\n\
    \        if n%i == 0 {\n            f = append(f, i)\n            n = n/i\n  \
    \      }\n    }\n    return f\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmpqhqrfpln_test.go:52: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmpqhqrfpln_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpqhqrfpln_test.go:52: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpqhqrfpln_test.go:52: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpqhqrfpln_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpqhqrfpln_test.go:52: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.027s\n\
    FAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n < 2 {\n        return []int{}\n    }\n  \
    \  p := make([]int, len(factorization)+1)\n    for i := 0; i < len(factorization);\
    \ i++ {\n        if factorization[i] < 2 {\n            p[i] = factorization[i]\n\
    \            continue\n        }\n        for j := factorization[i]; j < n; j\
    \ *= i {\n            p[i] = min(j-1, p[i])\n        }\n    }\n    p[len(p)-1]\
    \ = n\n    return p\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdf4iy533_test.go:21:26: undefined: factorization

    /tmp/tmpdf4iy533_test.go:22:25: undefined: factorization

    /tmp/tmpdf4iy533_test.go:23:12: undefined: factorization

    /tmp/tmpdf4iy533_test.go:24:20: undefined: factorization

    /tmp/tmpdf4iy533_test.go:27:18: undefined: factorization

    /tmp/tmpdf4iy533_test.go:28:20: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := 2\n    factors := []int{1}\n    for i\
    \ := 1; i <= n/prime; i++ {\n        for j := i * prime; j < n; j += prime {\n\
    \            if j%prime == 0 {\n                factors = append(factors, prime)\n\
    \                break\n            }\n        }\n        prime++\n    }\n   \
    \ return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmps8l2_cm9_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmps8l2_cm9_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL:\
    \ TestFactorize/test_num__2 (0.00s)\n        tmps8l2_cm9_test.go:52: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmps8l2_cm9_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmps8l2_cm9_test.go:52: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)\
    \ %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19)\
    \ %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26)\
    \ %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33)\
    \ %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40)\
    \ %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47)\
    \ %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54)\
    \ %!s(int=55) %!s(int=56) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmps8l2_cm9_test.go:52: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)\
    \ %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)\
    \ %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24)\
    \ %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31)\
    \ %!s(int=32"
  timestamp: 1660074639
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    s := make([]int, n+1)\n    s[1] = 1\n    for i\
    \ := 2; i <= n; i++ {\n        if s[i] == 0 {\n            continue\n        }\n\
    \        if n%i == 0 {\n            s[i-1] *= i\n            s[i-1] /= n\n   \
    \         s[1]++\n        }\n    }\n    return s[:len(s)-1]\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.08s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp18cioljv_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp18cioljv_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp18cioljv_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp18cioljv_test.go:53: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp18cioljv_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074639
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n+1)\n    prime[0] = 2\n\
    \    prime[1] = 2\n    n -= 2\n    for i := 2; i <= n; i++ {\n        for j :=\
    \ 0; j < i; j++ {\n            if i*prime[j] <= n {\n                prime[i+1]\
    \ *= prime[j]\n                prime[j+1] = i\n                break\n       \
    \     }\n        }\n    }\n    return prime\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.07s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpym1mml26_test.go:54: expected '[%!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpym1mml26_test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpym1mml26_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n \
    \       tmpym1mml26_test.go:54: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=27) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpym1mml26_test.go:54:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=1623) %!s(int=0) %!s(int=3247) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %"
  timestamp: 1660074639
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    if n <= 2 {\n        return\
    \ factors\n    }\n    factors = []int{}\n    factorize := func(m int) {\n    \
    \    if m == 1 {\n            factors = append(factors, m)\n            return\n\
    \        }\n        if m > 2 {\n            factorize(m * 3)\n            return\n\
    \        }\n        m += 2\n        factors = append(factors, m)\n    }\n    factorize(1)\n\
    \    factorize(n)\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5ldoteps_test.go:60: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5ldoteps_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp5ldoteps_test.go:60: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmp5ldoteps_test.go:60: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5ldoteps_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmp5ldoteps_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n      \
    \  tmp5ldoteps_test.go:60: expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n      \
    \  tmp5ldoteps_test.go:60: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]', got\
    \ '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n < 2 {\n        return []int{1, n}\n    }\n\
    \n    // We need only prime factors, so find factorization of prime factors\n\
    \    // The result is still O(N!), so it's better to find factors iteratively.\n\
    \    factors := make([]int, n+1)\n    factors[0] = 1\n    for i := 2; i <= n;\
    \ i++ {\n        for j := 2; j <= i/2; j++ {\n            // If i*j divides n,\
    \ then j must be prime\n            if i % j == 0 {\n                factors[i*j]\
    \ = j\n            }\n        }\n    }\n\n    return factors[:len(factors)-1]\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 5 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpbnwkjvik_test.go:30\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpbnwkjvik_test.go:46\
    \ +0x999\ntesting.tRunner(0xc000103520, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for a := 2; a*a <= n;\
    \ a++ {\n        if n%a == 0 {\n            factors = append(factors, a)\n   \
    \         n /= a\n        }\n    }\n    if n != 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpii6p4sqh_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpii6p4sqh_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpii6p4sqh_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpii6p4sqh_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizer := func(n int) int {\n        f :=\
    \ n\n        for i := 2; i <= n; i++ {\n            if n%i == 0 {\n          \
    \      f = f * i\n            }\n        }\n        return f\n    }\n\n    factors\
    \ := []int{}\n    for f := 2; f <= n; f++ {\n        if n%f == 0 {\n         \
    \   factors = append(factors, f)\n            n /= f\n        }\n    }\n    return\
    \ factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_h6chl1b_test.go:18:5: factorizer declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factos := factorization(n)\n    var facs []int\n\
    \    for _, f := range factos {\n        facs = append(facs, f)\n    }\n    return\
    \ facs\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiqr63l8v_test.go:18:15: undefined: factorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    n /= 2\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxo5zp5cq_test.go:49: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxo5zp5cq_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpxo5zp5cq_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpxo5zp5cq_test.go:49: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=7)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxo5zp5cq_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=7) %!s(int=29)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpxo5zp5cq_test.go:49: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2) %!s(int=7) %!s(int=3307)]'\n\
    \    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpxo5zp5cq_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=4) %!s(int=643)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpxo5zp5cq_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    var result int\n\n   \
    \ // The prime factors list grows exponentially. \n    // Prime factors of 100\
    \ are 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29\n    // Prime factors of 1000 are\
    \ 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 47, 57, 63, 71, 73, 79, 83, 89, 97\n\
    \    // Prime factors of 10000 are 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37,\
    \ 47, 57, 63, 71, 73, 79, 83, 89, 97, 103, 109, 113, 127, 131, 137, 139, 149,\
    \ 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\
    \ 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331,\
    \ 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431,\
    \ 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523,\
    \ 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631,\
    \ 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,\
    \ 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853,\
    \ 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,\
    \ 971, 977, 983, 991, 997}\n\n    for i := 2; i < n; i++ {\n        for j := 1;\
    \ j < i; j++ {\n            if n%j == 0 {\n                result = j\n      \
    \          break\n            }\n        }\n        if result != 0 {\n       \
    \     for k := 0; k < i; k++ {\n                factors = append(factors, result)\n\
    \            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074651
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, 0)\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmpgsrtyltc_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmpgsrtyltc_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpgsrtyltc_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpgsrtyltc_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpgsrtyltc_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpgsrtyltc_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074640
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    if n%2 == 0 {\n      \
    \  factors = append(factors, 2)\n        n = n / 2\n    }\n    if n%5 == 0 {\n\
    \        factors = append(factors, 5)\n        n = n / 5\n    }\n    if n%7 ==\
    \ 0 {\n        factors = append(factors, 7)\n        n = n / 7\n    }\n    if\
    \ n%11 == 0 {\n        factors = append(factors, 11)\n        n = n / 11\n   \
    \ }\n    if n%13 == 0 {\n        factors = append(factors, 13)\n        n = n\
    \ / 13\n    }\n    if n%17 == 0 {\n        factors = append(factors, 17)\n   \
    \     n = n / 17\n    }\n    if n%19 == 0 {\n        factors = append(factors,\
    \ 19)\n        n = n / 19\n    }\n    if n%23 == 0 {\n        factors = append(factors,\
    \ 23)\n        n = n / 23\n    }\n    if n%29 == 0 {\n        factors = append(factors,\
    \ 29)\n        n = n / 29\n    }\n    if n%31 == 0 {\n        factors = append(factors,\
    \ 31)\n        n = n / 31\n    }\n    if n%37 == 0 {\n        factors = append(factors,\
    \ 37)\n        n = n / 37\n    }\n    if n%41==0 {\n        factors = append(factors,\
    \ 41)\n        n = n / 41\n    }\n    if n%43 == 0 {\n        factors = append(factors,\
    \ 43)\n        n = n / 43\n    }\n    if n%47 == 0 {\n        factors = append(factors,\
    \ 47)\n        n = n / 47\n    }\n    if n%53 == 0 {\n        factors = append(factors,\
    \ 53)\n        n = n / 53\n    }\n    if n%59 == 0 {\n        factors = append(factors,\
    \ 59)\n        n = n / 59\n    }\n    if n%61 == 0 {\n        factors = append(factors,\
    \ 61)\n        n = n / 61\n    }\n    if n%67 == 0 {\n        factors = append(factors,\
    \ 67)\n        n = n / 67\n    }\n    if n%71 == 0 {\n        factors = append(factors,\
    \ 71)\n        n = n / 71\n    }\n    if n%73 == 0 {\n        factors = append(factors,\
    \ 73)\n        n = n / 73\n    }\n    if n%79 == 0 {\n        factors = append(factors,\
    \ 79)\n        n = n / 79\n    }\n    if n%83 == 0 {\n        factors = append(factors,\
    \ 83)\n        n = n / 83\n    }\n    if n%89 == 0 {\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdhg7a0bl_test.go:108:6: expected ''('', found TestFactorize

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    p := new(big.Int)\n    p.Exp(n/2, big.NewInt(2),\
    \ big.NewInt(1))\n    factors := []int{}\n    i := 2\n    for p.Cmp(big.NewInt(2))\
    \ != 0 {\n        if p.Cmp(big.NewInt(3)) > 0 {\n            p.Mul(p, big.NewInt(3))\n\
    \        } else {\n            p.Div(p, big.NewInt(3))\n        }\n        if\
    \ p.Cmp(big.NewInt(i)) > 0 {\n            p.Mul(p, big.NewInt(i))\n        } else\
    \ {\n            p.Div(p, big.NewInt(i))\n        }\n        if p.Cmp(big.NewInt(i))\
    \ != 0 {\n            factors = append(factors, int(p.Int()))\n        }\n   \
    \     i = i * 3 + 1\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxalfm1d_test.go:18:14: undefined: big

    /tmp/tmpsxalfm1d_test.go:19:16: undefined: big

    /tmp/tmpsxalfm1d_test.go:22:15: undefined: big

    /tmp/tmpsxalfm1d_test.go:23:18: undefined: big

    /tmp/tmpsxalfm1d_test.go:24:22: undefined: big

    /tmp/tmpsxalfm1d_test.go:26:22: undefined: big

    /tmp/tmpsxalfm1d_test.go:28:18: undefined: big

    /tmp/tmpsxalfm1d_test.go:29:22: undefined: big

    /tmp/tmpsxalfm1d_test.go:31:22: undefined: big

    /tmp/tmpsxalfm1d_test.go:33:18: undefined: big

    /tmp/tmpsxalfm1d_test.go:33:18: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    s := make([]int, n)\n\n    // Find all prime factors\
    \ of the given number\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n%i\
    \ == 0 {\n            p = i\n            break\n        }\n    }\n    if p%2 ==\
    \ 0 {\n        p++\n    }\n\n    // For each prime factor, find how many times\
    \ it appears in the factorization\n    prime := make([]int, p)\n    for i := 2;\
    \ i < p; i++ {\n        for j := i + 1; j <= n; j++ {\n            if j%i == 0\
    \ {\n                prime[i] += j\n                break\n            }\n   \
    \     }\n    }\n\n    for i := 1; i < p; i++ {\n        s[i] =  prime[i]\n   \
    \ }\n\n    return s\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(0x2)\n\t/tmp/tmpr_q21_r3_test.go:44\
    \ +0x108\ncommand-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpr_q21_r3_test.go:57\
    \ +0x46\ntesting.tRunner(0xc0000da1a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074640
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizer := new(factorizer)\n    factorizer.factorize(n)\n\
    \    return factorizer.factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpathtidn9_test.go:18:23: undefined: factorizer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    for i := 2; i <= n; i +=\
    \ 1 {\n        for j := 2; j < i; j += 1 {\n            if n%i == 0 {\n      \
    \          factors = append(factors, i)\n                factors = append(factors,\
    \ j)\n            }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074652
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n &&\
    \ i*i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n != 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpektqex90_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpektqex90_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpektqex90_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpektqex90_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.019s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    facs := []int{}\n    for facNum := 2; facNum*facNum\
    \ <= n; facNum++ {\n        if n%facNum == 0 {\n            facs = append(facs,\
    \ facNum)\n        }\n    }\n    return facs\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpoekcwa2s_test.go:47: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpoekcwa2s_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpoekcwa2s_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpoekcwa2s_test.go:47: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpoekcwa2s_test.go:47:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=9) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpoekcwa2s_test.go:47: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=27) %!s(int=57) %!s(int=171) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpoekcwa2s_test.go:47: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmpoekcwa2s_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.020s\n\
    FAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizationTable := make([]int, len(primeFactorizationTable))\n\
    \    factorizationTable[0], factorizationTable[1] = 1, 2\n    for i := 2; i <\
    \ n; i++ {\n        if factorizationTable[primeFactorizationTable[i]] >= 0 {\n\
    \            factorizationTable[primeFactorizationTable[i]] = factorizationTable[i]*factorizationTable[primeFactorizationTable[i-1]]\n\
    \        } else {\n            factorizationTable[primeFactorizationTable[i]]\
    \ = i\n        }\n    }\n    return factorizationTable[n:]\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps00x2kwl_test.go:18:43: undefined: primeFactorizationTable

    /tmp/tmps00x2kwl_test.go:21:31: undefined: primeFactorizationTable

    /tmp/tmps00x2kwl_test.go:22:103: undefined: primeFactorizationTable

    /tmp/tmps00x2kwl_test.go:24:32: undefined: primeFactorizationTable

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var primes []int\n\n    for i := 2; i < n; i++\
    \ {\n        for j := 2; j < i; j++ {\n            if n%i == 0 {\n           \
    \     primes = append(primes, i)\n                break\n            }\n     \
    \   }\n    }\n    return primes\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074653
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    p := make([]int, 0, n)\n    for i := 2; i < n;\
    \ i++ {\n        if n%i == 0 {\n            n = n/i\n            p = append(p,\
    \ i)\n        }\n    }\n    return p\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpe2nm33k7_test.go:48: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpe2nm33k7_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpe2nm33k7_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpe2nm33k7_test.go:48: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpe2nm33k7_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmpe2nm33k7_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=9) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpe2nm33k7_test.go:48: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmpe2nm33k7_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    fmt.Println(\"Factorization of\", n)\n    facs\
    \ := make([]int, n)\n    var i int\n    for i = 2; i * i <= n; i++ {\n       \
    \ if n % i == 0 {\n            facs[i/2] = i\n            n /= i\n        }\n\
    \    }\n    return facs\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Factorization of 2\nFactorization of 4\nFactorization of 8\nFactorization\
    \ of 57\nFactorization of 3249\nFactorization of 185193\nFactorization of 20577\n\
    Factorization of 18\n--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpelbi_cog_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpelbi_cog_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpelbi_cog_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpelbi_cog_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpelbi_cog_test.go:50:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int"
  timestamp: 1660074644
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     factors = append(factors, i//2)\n        }\n    }\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4uf1eb4j_test.go:22:40: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    p := factorization(n)\n    f := []int{}\n    for\
    \ i := len(p); i >= 1; i-- {\n        if p[i] == 1 {\n            f = append(f,\
    \ i)\n            n /= p[i]\n        } else {\n            p[i] = 0\n        }\n\
    \        if n == 1 {\n            break\n        }\n    }\n    return f\n}\n\n\
    func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppm_fu0ch_test.go:18:10: undefined: factorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    result := make([]int, n)\n    factors := make([]int,\
    \ len(factorization(n)))\n    for i, v := range factorization(n) {\n        for\
    \ k, _ := range factors {\n            if k == v {\n                factors[k]++\n\
    \                break\n            }\n        }\n    }\n\n    for i, v := range\
    \ factors {\n        result[i] = v\n    }\n    return result\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh6vazu6_test.go:19:32: undefined: factorization

    /tmp/tmpeh6vazu6_test.go:20:23: undefined: factorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n+1)\n    prime[0] = 2\n\
    \    i := 3\n    for prime[i] < n {\n        if n%prime[i] == 0 {\n          \
    \  prime[i+1] = prime[i]\n            n /= prime[i]\n        } else {\n      \
    \      i++\n        }\n    }\n    prime[i-1] = n\n    return prime\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001ce018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001ce018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmprrmxkn6a_test.go:21\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmprrmxkn6a_test.go:40\
    \ +0xd66\ntesting.tRunner(0xc00019b040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.019s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    list := []int{}\n    factors := make(map[int]int)\n\
    \    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            factors[i\
    \ / 2] = factors[i / 2] + 1\n        }\n    }\n    for n, i := range factors {\n\
    \        list = append(list, n)\n    }\n    return list\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa5uurgep_test.go:25:12: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n)\n    for i := 0; i < n;\
    \ i++ {\n        prime [i] = 1\n        factor := i\n        for j := i + 1; j\
    \ < n; j++ {\n            if factor*j == n {\n                break\n        \
    \    }\n            if n%factor*j == 0 {\n                prime[i] += 1\n    \
    \            prime[j] += 1\n                break\n            }\n           \
    \ if j > n {\n                prime[i] = 1\n                prime[j] = 1\n   \
    \             break\n            }\n            if factor*j == n {\n         \
    \       prime[i] = prime[j] = 1\n                break\n            }\n      \
    \      if j > n {\n                prime[i] = prime[j] = 1\n                factor\
    \ /= j\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbyw95lna_test.go:37:37: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizationMap := make([]int, n)\n    primeFactorizations\
    \ := factorizeWithPrimeFactors(factorizationMap, n)\n    factorizationMapOfPrimes\
    \ := primeFactorizations[len(primeFactorizations)-1]\n    for i := range factorizationMapOfPrimes\
    \ {\n        factorizationMapOfPrimes[i] -= 1\n        if factorizationMapOfPrimes[i]\
    \ == 0 {\n            factorizationMapOfPrimes = factorizationMapOfPrimes[:i]\n\
    \            break\n        }\n    }\n    return factorizationMapOfPrimes\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvx5jkghj_test.go:19:28: undefined: factorizeWithPrimeFactors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, len(primeFactorization(n)))\n\
    \    i := 0\n    for _, p := range primeFactorization(n) {\n        factors[i]\
    \ = 1\n        i += 1\n        for j := i * p; j < n; j += p {\n            factors[i]++\n\
    \        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzxiy3hvy_test.go:18:32: undefined: primeFactorization

    /tmp/tmpzxiy3hvy_test.go:20:23: undefined: primeFactorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n<2 {\n        return nil\n    }\n\n    var\
    \ factors []int\n    factorsLen := 2\n\n    for factorsLen < n {\n        if isPrime(factorsLen)\
    \ {\n            factors = append(factors, factorsLen)\n            factorsLen\
    \ *= 2\n        }\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzocjw1mz_test.go:26:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        while (p*p < i && i*i < n) {\n            if\
    \ n%i == 0 {\n                factors[p] = i\n                n /= i\n       \
    \         break\n            }\n            p++\n        }\n    }\n    return\
    \ factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8wl3jur__test.go:21:36: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    // If input number is a prime number or 1 then\
    \ its prime factorization is 0\n    if n == 1 || isPrime(n) {\n        return\
    \ []int{n}\n    }\n\n    // Initialize array of prime factors\n    factors :=\
    \ make([]int, n)\n\n    // Initialize counter variable for factorization for each\
    \ of the factors\n    factor := 2\n\n    // Initialize temporary variable with\
    \ 2 as initial value\n    temp := 2\n\n    // Initialize boolean variable indicating\
    \ whether a factor is a divisor\n    isDivisor := false\n\n    // Perform factorization\
    \ algorithm until all factors are exhausted\n    for !isDivisor {\n\n        //\
    \ Divide factor variable by temporary variable until it is greater than 1\n  \
    \      // and store it in temporary variable\n        while temp < n && factor\
    \ < n && n % temp == 0 {\n            factors[factor] = temp\n            temp++\n\
    \            factor++\n        }\n\n        // If a factor is not a divisor\n\
    \        if temp > 1 {\n\n            // Remove it from factorization and add\
    \ it to factorization\n            isDivisor = true\n            factors[factor-1]\
    \ = temp - 1\n            factor++\n        }\n\n        // If factor variable\
    \ is greater than n then it is unnecessary\n        if factor > n {\n        \
    \    isDivisor = false\n            factor++\n        }\n    }\n\n    // Return\
    \ array of prime factors\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq4k8iwsi_test.go:40:15: expected '';'', found temp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizer := make([]int, len(primeFactorization(n)))\n\
    \    for i, factor := range primeFactorization(n) {\n        factorizer[i] = factor\n\
    \    }\n    return factorizer\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2d8n31x__test.go:18:35: undefined: primeFactorization

    /tmp/tmp2d8n31x__test.go:19:28: undefined: primeFactorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n%2 == 0 {\n        return [2]int{2, n}\n \
    \   }\n    for i := 3; i <= n/2; i+=2 {\n        if n%i == 0 {\n            return\
    \ [2]int{i, n}\n        }\n    }\n    if n > 7 {\n        return []int{}\n   \
    \ }\n    for i := 5; i <= n/2; i+=2 {\n        if n%i == 0 {\n            return\
    \ [2]int{i, n}\n        }\n    }\n    if n > 14 {\n        return []int{}\n  \
    \  }\n    for i := 13; i <= n/2; i+=2 {\n        if n%i == 0 {\n            return\
    \ [2]int{i, n}\n        }\n    }\n    if n > 21 {\n        return []int{}\n  \
    \  }\n    for i := 23; i <= n/2; i+=2 {\n        if n%i == 0 {\n            return\
    \ [2]int{i, n}\n        }\n    }\n    return [2]int{}\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkav8qgge_test.go:19:16:\
    \ cannot use [2]int{\u2026} (value of type [2]int) as type []int in return statement\n\
    /tmp/tmpkav8qgge_test.go:23:20: cannot use [2]int{\u2026} (value of type [2]int)\
    \ as type []int in return statement\n/tmp/tmpkav8qgge_test.go:31:20: cannot use\
    \ [2]int{\u2026} (value of type [2]int) as type []int in return statement\n/tmp/tmpkav8qgge_test.go:39:20:\
    \ cannot use [2]int{\u2026} (value of type [2]int) as type []int in return statement\n\
    /tmp/tmpkav8qgge_test.go:47:20: cannot use [2]int{\u2026} (value of type [2]int)\
    \ as type []int in return statement\n/tmp/tmpkav8qgge_test.go:50:12: cannot use\
    \ [2]int{} (value of type [2]int) as type []int in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    if n%2 == 0 {\n       \
    \ factors = append(factors, 2)\n        n = n / 2\n    }\n    if n%3 == 0 {\n\
    \        factors = append(factors, 3)\n        n = n / 3\n    }\n    for i :=\
    \ 5; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n = n / i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmpdfgg9emr_test.go:56: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmpdfgg9emr_test.go:56: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpdfgg9emr_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n\
    \        tmpdfgg9emr_test.go:56: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19) %!s(int=361)]'\n\
    \    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpdfgg9emr_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpdfgg9emr_test.go:56: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.029s\n\
    FAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizations := make([]int, n)\n    factorizations[0]\
    \ = 1\n    i := 1\n    for factor := 2; factor*factor <= n; factor++ {\n     \
    \   if factorization := factorizations[i-1] * factor; factorization > n {\n  \
    \          break\n        }\n        factorizations[i] = factorization\n     \
    \   i += factor\n    }\n    return factorizations\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxwr_94ju_test.go:25:29: undefined: factorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := []int{2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31}\n    factors := []int{}\n    for i := 0; i < len(prime); i++ {\n   \
    \     j := 0\n        for k := 0; k < i; k++ {\n            if prime[i] % prime[k]\
    \ == 0 {\n                j++\n            }\n        }\n        if j != i {\n\
    \            factors = append(factors, prime[i])\n            i = j\n        }\n\
    \    }\n    sort.Ints(factors)\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptjhnogrb_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if i%2 == 0 {\n            continue\n        }\n        for\
    \ j := 3; j <= n/i; j++ {\n            if i%j == 0 {\n                continue\n\
    \            }\n            if j%i == 0 {\n                continue\n        \
    \    }\n            factors[n-i] += 1\n            factors[i] += factors[j]\n\
    \            break\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp5vzekidy_test.go:58: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp5vzekidy_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp5vzekidy_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp5vzekidy_test.go:58: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp5vzekidy_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074644
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    primes := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        primes[i] = 1\n    }\n    primes[0] = 2\n    for i := 1; i\
    \ < n; i++ {\n        for j := 2; j <= i/2; j++ {\n            if primes[j]*primes[i]\
    \ < n {\n                primes[i] *= primes[j]\n            }\n        }\n  \
    \  }\n    return primes\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074656
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n+1)\n    factors[0] =\
    \ 1\n    factors[1] = 2\n    factors[2] = 2\n    factors[3] = 1\n\n    for i :=\
    \ 4; i <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n        }\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp6zska4b8_test.go:22\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp6zska4b8_test.go:40\
    \ +0x4c\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    if n%2 == 0 {\n       \
    \ factors = append(factors, 2)\n    }\n    for i := 3; i <= n/2; i++ {\n     \
    \   if n%i == 0 {\n            factors = append(factors, i)\n            if n//i\
    \ == i {\n                factors = append(factors, n)\n            }\n      \
    \  }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpztu_dx86_test.go:26:17: expected boolean expression, found assignment
    (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n\n\
    \    var factors []int\n\n    i := 2\n    for {\n        if n >= i*i {\n     \
    \       factors = append(factors, i)\n            n /= i\n        } else {\n \
    \           break\n        }\n        i++\n    }\n\n    return factors\n}\n\n\
    func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpn6sbwfbf_test.go:58: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpn6sbwfbf_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpn6sbwfbf_test.go:58: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmpn6sbwfbf_test.go:58: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpn6sbwfbf_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpn6sbwfbf_test.go:58: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpn6sbwfbf_test.go:58: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n\
    \    --- FAIL: TestFactorize/test_num__7 (0.00s)\n        tmpn6sbwfbf_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074645
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var result []int\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            result = append(result, i)\n         \
    \   n /= i\n        }\n    }\n    return result\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__1\
    \ (0.00s)\n        tmpd0ki90za_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n      \
    \  tmpd0ki90za_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got\
    \ '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpd0ki90za_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpd0ki90za_test.go:48: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpd0ki90za_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpd0ki90za_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n+1)\n    prime[0] = 2\n\
    \    for i := 1; i < n; i++ {\n        for j := 0; j < i; j++ {\n            if\
    \ prime[j]*prime[j] <= i {\n                break\n            }\n        }\n\
    \        prime[i] = j\n    }\n    prime := prime[:len(prime)-1]\n    return prime\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqzaz9ft_test.go:26:20: undefined: j

    /tmp/tmpzqzaz9ft_test.go:28:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    // return factorization\n    factors := factorization(n)\n\
    \    // make list of factors\n    f := make([]int, len(factors))\n    for i, _\
    \ := range factors {\n        f[i] = factors[i]\n    }\n    return f\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3wx35uv_test.go:19:16: undefined: factorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    facs := make([]int, 1)\n    for i := 2; i <= n;\
    \ i++ {\n        if n%i == 0 {\n            facs = append(facs, i)\n         \
    \   n /= i\n        }\n    }\n    if n > 1 {\n        facs = append(facs, n)\n\
    \    }\n    return facs\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp9nnaxgxj_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp9nnaxgxj_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp9nnaxgxj_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmp9nnaxgxj_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=0) %!s(int=3) %!s(int=19)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp9nnaxgxj_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp9nnaxgxj_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=0) %!s(int=3) %!s(int=9)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n\
    \        tmp9nnaxgxj_test.go:51: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=3) %!s(int=19) %!s(int=361)]'\n    ---\
    \ FAIL: TestFactorize/test_num__7 (0.00s)\n        tmp9nnaxgxj_test.go:51: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    p := [2]int{1, 1}\n    factors := [2]int{1, 1}\n\
    \    n /= p[0]\n    for p != 2 {\n        if n > 1 {\n            factors[0]++\n\
    \            n /= p[0]\n        }\n        if n % p[0] == 0 {\n            p[1]++\n\
    \            n /= p[0]\n        } else {\n            p[0]++\n            factors[1]++\n\
    \            n = n - p[0]\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppfoymbai_test.go:21:14: cannot convert 2 (untyped int constant) to [2]int

    /tmp/tmppfoymbai_test.go:35:12: cannot use factors (variable of type [2]int) as
    type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n == 2 {\n        return [2]int{2, 2}\n   \
    \ }\n    if n < 2 {\n        return []int{n}\n    }\n    fac := factorization(n)\n\
    \    fs := make([]int, len(fac))\n    for i := 0; i < len(fac); i++ {\n      \
    \  fs[i] = fac[i]\n        fs[i] += 1\n    }\n    return fs\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb44e9inn_test.go:19:16:\
    \ cannot use [2]int{\u2026} (value of type [2]int) as type []int in return statement\n\
    /tmp/tmpb44e9inn_test.go:24:12: undefined: factorization\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, len(primeFactors))\n    current\
    \ := 1\n    for i := 0; i < len(primeFactors); i++ {\n        if n == current\
    \ {\n            prime[i] = 1\n        } else {\n            for current%primeFactors[i]\
    \ == 0 && current > 1 {\n                prime[i] = prime[i] + 1\n           \
    \     current = current / primeFactors[i]\n            }\n        }\n    }\n \
    \   return prime\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hh8qgt2_test.go:18:30: undefined: primeFactors

    /tmp/tmp8hh8qgt2_test.go:20:25: undefined: primeFactors

    /tmp/tmp8hh8qgt2_test.go:24:25: undefined: primeFactors

    /tmp/tmp8hh8qgt2_test.go:26:37: undefined: primeFactors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    primes := make([]int, math.MaxInt)\n    var i\
    \ int\n    for i := 2; i <= n; i++ {\n        if isPrime(i) {\n            primes[i]\
    \ = 1\n        } else {\n            for j := i * i; j < n; j += i {\n       \
    \         primes[j] = 1\n            }\n        }\n    }\n    list := make([]int,\
    \ 0, len(primes))\n    for i := 0; i < len(primes); i++ {\n        if primes[i]\
    \ != 0 {\n            for j := 1; j < primes[i]; j++ {\n                list =\
    \ append(list, i)\n            }\n        }\n    }\n    return list\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn9o3osac_test.go:18:27: undefined: math

    /tmp/tmpn9o3osac_test.go:19:9: i declared but not used

    /tmp/tmpn9o3osac_test.go:21:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    var divisor int\n    divisor\
    \ := 1\n    for divisor < n-1 {\n        if n%divisor == 0 {\n            factors\
    \ = append(factors, divisor)\n        }\n        for divisor < n-1 {\n       \
    \     if n%divisor == 0 {\n                factors = append(factors, divisor)\n\
    \            }\n            if divisor*divisor > n {\n                break\n\
    \            }\n        }\n        divisor++\n    }\n    return factors\n}\n\n\
    func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp06dr7j_7_test.go:20:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n\n    for factor := 2; factor*factor\
    \ <= n; factor++ {\n        if n%factor == 0 {\n            factors = append(factors,\
    \ factor)\n            n /= factor\n        }\n    }\n\n    if n > 1 {\n     \
    \   factors = append(factors, n)\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp_btupe9l_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp_btupe9l_test.go:54: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp_btupe9l_test.go:54: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp_btupe9l_test.go:54:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n+1)\n    p := 1\n    for\
    \ i <= n {\n        prime[p] = i\n        for j := i * i; j < n; j += i {\n  \
    \          prime[p] = j\n            p += 1\n        }\n        i += 1\n    }\n\
    \    return prime\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphnrlu1my_test.go:20:9: undefined: i

    /tmp/tmphnrlu1my_test.go:21:20: undefined: i

    /tmp/tmphnrlu1my_test.go:22:18: undefined: i

    /tmp/tmphnrlu1my_test.go:26:9: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var prime []int\n    var factor []int\n    var\
    \ n int\n    for n != 1 {\n        prime = append(prime, 2)\n        n--\n   \
    \ }\n    for n := 2; n <= n; n++ {\n        if n%2 == 0 {\n            continue\n\
    \        }\n        if isPrime(n) {\n            prime = append(prime, n)\n  \
    \      }\n    }\n    for i := range prime {\n        for j := i + 1; j < len(prime);\
    \ j++ {\n            factor := append(factor, prime[j])\n            if n := n*prime[j];\
    \ n > n^1 {\n                factor[len(factor)-1] = n - n^1\n            }\n\
    \        }\n    }\n    return factor\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb84gx3m8_test.go:20:9:\
    \ n redeclared in this block\n\t/tmp/tmpb84gx3m8_test.go:17:16: other declaration\
    \ of n\n/tmp/tmpb84gx3m8_test.go:29:12: undefined: isPrime\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorization := make([]int, 0, n)\n    primes\
    \ := make([]int, 0, n)\n    if n == 0 {\n        return factorization\n    }\n\
    \    factorization = append(factorization, 2)\n    for i := 3; i < n; i++ {\n\
    \        if n%i == 0 {\n            factorization = append(factorization, i)\n\
    \            primes = append(primes, i)\n            factorization = append(factorization,\
    \ n/i)\n            primes = append(primes, n/i)\n            factorization =\
    \ append(factorization, n)\n            primes = append(primes, n)\n        }\n\
    \    }\n    factorization = append(factorization, 2)\n    for i := len(primes)\
    \ - 1; i > 0; i-- {\n        factorization = append(factorization, primes[i])\n\
    \        factorization = append(factorization, factorization[i-1]*primes[i])\n\
    \    }\n    return factorization\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmplvckqhy9_test.go:62: expected '[%!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmplvckqhy9_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=4) %!s(int=2)\
    \ %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=32) %!s(int=2) %!s(int=4)]'\n    ---\
    \ FAIL: TestFactorize/test_num__3 (0.00s)\n        tmplvckqhy9_test.go:62: expected\
    \ '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2) %!s(int=3) %!s(int=19) %!s(int=57)\
    \ %!s(int=19) %!s(int=3) %!s(int=57) %!s(int=2) %!s(int=57) %!s(int=1083) %!s(int=3)\
    \ %!s(int=171) %!s(int=19) %!s(int=361) %!s(int=57) %!s(int=171) %!s(int=19) %!s(int=38)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmplvckqhy9_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=3) %!s(int=1083) %!s(int=3249) %!s(int=9) %!s(int=361) %!s(int=3249)\
    \ %!s(int=19) %!s(int=171) %!s(int=3249) %!s(int=57) %!s(int=57) %!s(int=3249)\
    \ %!s(int=171) %!s(int=19) %!s(int=3249) %!s(int=361) %!s(int=9) %!s(int=3249)\
    \ %!s(int=1083) %!s(int=3) %!s(int=3249) %!s(int=2) %!s(int=3249) %!s(int=3518667)\
    \ %!s(int=3) %!s(int=9747) %!s(int=1083) %!s(int=9747) %!s(int=3249) %!s(int=1172889)\
    \ %!s(int=9) %!s(int=29241) %!s(int=361) %!s(int=6859) %!s(int=3249) %!s(int=555579)\
    \ %!s(int=19) %!s(int=61731) %!s(int=171) %!s(int=9747) %!s(int=3249) %!s(int=185193)\
    \ %!s(int=57) %!s(int=185193) %!s(int=57) %!s(int=9747) %!s(int=3249) %!s(int=61731)\
    \ %!s(int=171) %!s(int=555579) %!s(int=19) %!s(int=6859) %!s(int=3249) %!s(int=29241)\
    \ %!s(int=361) %!s(int=1172889) %!s(int=9) %!s(int=9747) %!s(int=3249) %!s(int=9747)\
    \ %!s(int=1083) %!s(int=2166)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n\
    \        tmplvckqhy9_test.go:62: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19) %!s(int=19)]', got '[%!s(int=2) %!s(int=3) %!s(int=61731) %!s(int=185193)\
    \ %!s(int=9) %!s(int=20577) %!s(int=185193) %!s(int=19) %!s(int=9747) %!s(int=185193)"
  timestamp: 1660074647
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    factorized := []int{}\n\
    \    max := 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n        \
    \    factors = append(factors, i)\n            factorized = append(factorized,\
    \ 1)\n            n /= i\n            if n > 1 {\n                max += 1\n \
    \           }\n        } else {\n            factors = append(factors, 1)\n  \
    \          factorized = append(factorized, 0)\n        }\n    }\n    return append(factors,\
    \ factorized...)\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp60jrsh1i_test.go:57: expected '[%!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp60jrsh1i_test.go:57:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestFactorize/test_num__2 (0.00s)\n        tmp60jrsh1i_test.go:57: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1) %!s(int=4)\
    \ %!s(int=1) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp60jrsh1i_test.go:57: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp60jrsh1i_test.go:57:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=19) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=57) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(in"
  timestamp: 1660074648
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n<2 {\n        return nil\n    }\n    factor\
    \ := 2\n    factors := []int{1, 1}\n    for i := 3; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factor *= i\n            factors = append(factors, factor)\n\
    \            factor = 1\n        } else {\n            factors = append(factors,\
    \ i)\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp7z44t643_test.go:55: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp7z44t643_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=8)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp7z44t643_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=3)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp7z44t643_test.go:55: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp7z44t643_test.go:55:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)\
    \ %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22)\
    \ %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29)\
    \ %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36)\
    \ %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43)\
    \ %!s(int=44) %!s(int=45) %!s(int=46) %"
  timestamp: 1660074648
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n == 1 {\n        return []int{n}\n    }\n\n\
    \    prime := []int{}\n    prime := factorize2(n, prime)\n\n    return prime\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5uw54bp7_test.go:23:11: no new variables on left side of :=

    /tmp/tmp5uw54bp7_test.go:23:14: undefined: factorize2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := []int{}\n    factors := 2\n    factor\
    \ := 0\n    current := 1\n    for prime == nil {\n        prime = factorization(n\
    \ * factor)\n        for _, value := range prime {\n            current *= value\n\
    \            if current > n {\n                current = 1\n            }\n  \
    \          if current == n {\n                factors = append(factors, factor)\n\
    \                factor++\n            }\n        }\n        factor++\n    }\n\
    \    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfsi5gk__test.go:23:17: undefined: factorization

    /tmp/tmpgfsi5gk__test.go:30:34: first argument to append must be a slice; have
    factors (variable of type int)

    /tmp/tmpgfsi5gk__test.go:36:12: cannot use factors (variable of type int) as type
    []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n\n    for number := 2; number\
    \ < n; number++ {\n        for factorNumber := 2; factorNumber <= number; factorNumber++\
    \ {\n            if n%factorNumber == 0 {\n                factors = append(factors,\
    \ factorNumber)\n                n /= factorNumber\n            }\n        }\n\
    \    }\n\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp0nfosw4r_test.go:52: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp0nfosw4r_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp0nfosw4r_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n\
    \        tmp0nfosw4r_test.go:52: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp0nfosw4r_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n\
    \        tmp0nfosw4r_test.go:52: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp0nfosw4r_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmp0nfosw4r_test.go:52: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    f := make([]int, n)\n    for i := range f {\n\
    \        f[i] = 0\n    }\n    for i := range f {\n        if n != 1 {\n      \
    \      x := n\n            for j := range f {\n                if f[j] == 0 {\n\
    \                    f[j] = 1\n                    x /= j\n                } else\
    \ {\n                    break\n                }\n            }\n           \
    \ if x == 1 {\n                f[i] = 1\n            } else {\n              \
    \  f[i] = x\n            }\n        }\n    }\n    return f\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpss855_ny_test.go:28\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpss855_ny_test.go:50\
    \ +0xa4a\ntesting.tRunner(0xc000198ea0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizationTable := make([]int, len(primeFactorizationTable))\n\
    \    primeFactorizationTable := make([][]int, len(primeFactorizationTable))\n\n\
    \    for i, x := range primeFactorizationTable {\n        factorizationTable[i]\
    \ = make([]int, len(x))\n        for j := range x {\n            factorizationTable[i][j]\
    \ = x * primeFactorizationTable[i][j]\n        }\n    }\n\n    for i, x := range\
    \ factorizationTable {\n        for j := range x {\n            if n == factorizationTable[i][j]\
    \ {\n                factorizationTable[i][j] = len(x)\n            }\n      \
    \  }\n    }\n\n    factors := make([]int, len(factorizationTable))\n    for i\
    \ := 0; i < len(factorizationTable); i++ {\n        for j := range factorizationTable[i]\
    \ {\n            factors[j] = factors[j] * primeFactorizationTable[i][j]\n   \
    \     }\n    }\n\n    factors = append(factors, n)\n\n    return factors\n}\n\n\
    func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_sdeu_z_test.go:18:43: undefined: primeFactorizationTable

    /tmp/tmpi_sdeu_z_test.go:19:50: undefined: primeFactorizationTable

    /tmp/tmpi_sdeu_z_test.go:22:33: cannot use make([]int, len(x)) (value of type
    []int) as type int in assignment

    /tmp/tmpi_sdeu_z_test.go:24:34: invalid operation: cannot index factorizationTable[i]
    (variable of type int)

    /tmp/tmpi_sdeu_z_test.go:24:40: invalid operation: x * primeFactorizationTable[i][j]
    (mismatched types []int and int)

    /tmp/tmpi_sdeu_z_test.go:29:24: cannot range over x (variable of type int)

    /tmp/tmpi_sdeu_z_test.go:30:42: invalid operation: cannot index factorizationTable[i]
    (variable of type int)

    /tmp/tmpi_sdeu_z_test.go:31:38: invalid operation: cannot index factorizationTable[i]
    (variable of type int)

    /tmp/tmpi_sdeu_z_test.go:31:48: invalid argument: x (variable of type int) for
    len

    /tmp/tmpi_sdeu_z_test.go:38:24: cannot range over factorizationTable[i] (variable
    of type int)

    /tmp/tmpi_sdeu_z_test.go:38:24: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n+1)\n    factors[0] =\
    \ 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors[:n]\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpw9ejgqs0_test.go:48: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpw9ejgqs0_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpw9ejgqs0_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpw9ejgqs0_test.go:48: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpw9ejgqs0_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074650
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizations := make([]int, n)\n    factorizations[0]\
    \ = 1\n    for i := 0; i < n; i++ {\n        factorizations[i + 1] = 1\n     \
    \   for j := 0; j < i; j++ {\n            if n%i == 0 {\n                factorizations[i\
    \ + 1] *= j\n                factorizations[j] = i\n            }\n        }\n\
    \    }\n    return factorizations\n}\n\nfunc TestFactorize(t *testing.T) {\n \
    \ candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpxtqjhl46_test.go:21\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpxtqjhl46_test.go:39\
    \ +0x9ff\ntesting.tRunner(0xc000198ea0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n == 0 {\n        return nil\n    }\n\n   \
    \ var ret []int\n    factorization := []int{}\n\n    for i := 2; i <= n; i++ {\n\
    \        if n%i == 0 {\n            for j := 2; j <= n/i; j++ {\n            \
    \    if n%(i*j) == 0 {\n                    factorization = append(factorization,\
    \ i*j)\n                    break\n                }\n            }\n        }\n\
    \    }\n\n    if n != 1 {\n        for i := 0; i < len(factorization); i++ {\n\
    \            ret = append(ret, factorization[i])\n        }\n    }\n\n    return\
    \ ret\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp94u25v4e_test.go:65: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp94u25v4e_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp94u25v4e_test.go:65: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=8)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n\
    \        tmp94u25v4e_test.go:65: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=57)\
    \ %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp94u25v4e_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=9)\
    \ %!s(int=171) %!s(int=57) %!s(int=171) %!s(int=3249) %!s(int=1083) %!s(int=3249)]'\n\
    \    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmp94u25v4e_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=9) %!s(int=27) %!s(int=57) %!s(int=513) %!s(int=171) %!s(int=513)\
    \ %!s(int=1083) %!s(int=9747) %!s(int=3249) %!s(int=9747) %!s(int=20577) %!s(int=185193)\
    \ %!s(int=61731) %!s(int=185193)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n\
    \        tmp94u25v4e_test.go:65: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=57) %!s(int=57) %!s(int=1083) %!s(int=1083) %!s(int=20577)\
    \ %!s(int=20577)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n        tmp94u25v4e_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=6) %!s(int=6) %!s(int=18)\
    \ %!s(int=18)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, len(factorization[n]))\n\
    \    for i := 0; i < len(factorization[n]); i++ {\n        prime[i] = 1\n    \
    \    j := i\n        while j > 0 && prime[j-1] == 1 {\n            j--\n     \
    \   }\n        if j > 0 {\n            prime[j] *= i + 1\n        }\n    }\n\n\
    \    result := []int{}\n    for i := len(prime) - 2; i >= 0; i-- {\n        if\
    \ prime[i] == 0 {\n            result = append(result, prime[i])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9km3co2x_test.go:22:15: expected '';'', found j

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074649
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    result := make([]int, 0)\n    factor := 2\n\n\
    \    if n%factor == 0 {\n        fmt.Println(\"Found factor\", factor)\n     \
    \   result = []int{factor}\n    }\n\n    if n > 0 {\n        for {\n         \
    \   if n%factor == 0 {\n                fmt.Println(\"Found factor\", factor)\n\
    \                result = append(result, factor)\n                n /= factor\n\
    \                factor++\n            }\n            else {\n               \
    \ break\n            }\n        }\n    }\n\n    return result\n}\n</code>\n<|/\
    \ a |>\n<| a |>\nHere's an iterative version in Haskell, just in case it's of\
    \ interest to anyone else (I'm actually an Haskell beginner).\n<code>\nfactors\
    \ :: Int -> [Int]\nfactors n = go n 1 [2,] where go 0 i r = [r]\n            \
    \  go n d rs = do\n                  let m = floor $ sqrt $ fromIntegral n\n \
    \                 let (a, b) = divMod n m\n                  let (q, r) = divMod\
    \ d b\n                  let (q, r) = divMod r q\n                  let s = go\
    \ q r rs\n                  let rs = map d rs\n                  if n == 1 then\
    \ return [r] else return (s, rs)\n              divMod n m = if m > 0 then div\
    \ (div (mod n m)) m else (mod n m, n)\n</code>\nThe idea is that we start with\
    \ some initial value and a \"tree\" of factors (initially just a list of integers),\
    \ and we \"unroll\" that tree in constant time by dividing n by each factor and\
    \ recursing on the remainder. We do that until we've reduced the number to 1,\
    \ at which point we return that list of factors.\n<|/ a dscore=1 tags=primes,factors,math,algorithm\
    \ |>\n<| a dscore=1 |>\nI solved a similar problem that may help people who come\
    \ across this question.  \nHere's a python solution I came up with that doesn't\
    \ require you to manually maintain a list of primes anywhere else in the code\
    \ or anywhere else in the system.  \n<code>\n# Factor factorization algorithm\
    \ to determine all prime factors of the number n\ndef factors(n):\n  factorizations\
    \ = []\n  factor = int(math.sqrt(n))\n  while factor > 0:\n    # check if factorization\
    \ for factor has already been discovered\n    if factor in factorizations:\n \
    \     factor /= 2\n      continue\n    if n % (factor*factor) == 0:\n      factorizations.append(factor)\n\
    \      n /= factor\n      factor *= 2\n    else:\n      factor *= 2\n\n  if n\
    \ == 1:\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyb1qf1pw_test.go:34:13: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074649
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    s := make([]int, 0)\n    f := factorizer(n)\n\
    \    for _, e := range f {\n        if s.Len() == 0 {\n            s = append(s,\
    \ e)\n            continue\n        }\n        if e == 1 {\n            continue\n\
    \        }\n        i := 0\n        for j := s.Len() - 1; j >= 0; j-- {\n    \
    \        if s[i]*s[j] == n {\n                i++ // same factor\n           \
    \     break\n            }\n            if s[i]*s[j] > n {\n                break\n\
    \            }\n        }\n        if i == 0 {\n            s = append(s, e)\n\
    \        }\n    }\n    return s\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxqdmdoa5_test.go:19:10: undefined: factorizer

    /tmp/tmpxqdmdoa5_test.go:21:14: s.Len undefined (type []int has no field or method
    Len)

    /tmp/tmpxqdmdoa5_test.go:29:20: s.Len undefined (type []int has no field or method
    Len)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    var primes []int\n\n  \
    \  factors = make([]int, math.MaxInt/n)\n    primes = make([]int, math.MaxInt/n)\n\
    \n    for i := 0; i < n; i++ {\n        for f := 2; f < n; f++ {\n           \
    \ if n%f == 0 {\n                factors[i] = f\n                for i := f *\
    \ f; i < n; i++ {\n                    factors[factors[i]] = i + 1\n         \
    \       }\n                break\n            }\n        }\n    }\n    for f :=\
    \ 2; f * f < n; f++ {\n        if n%f == 0 {\n            factors[f] = f\n   \
    \     }\n    }\n    factors = append(factors, n)\n\n    return factors\n}\n\n\
    func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zebzw4_test.go:19:9: primes declared but not used

    /tmp/tmp67zebzw4_test.go:21:27: undefined: math

    /tmp/tmp67zebzw4_test.go:22:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074650
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    primeFactors := make([]int, 1)\n    primeFactors[0]\
    \ = n\n\n    for i := 2; i < n; i++ {\n        for j := i * i; j < n; j += i {\n\
    \            primeFactors[j] = i\n        }\n    }\n    return primeFactors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 1 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp72lq7ub0_test.go:23\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp72lq7ub0_test.go:38\
    \ +0x813\ntesting.tRunner(0xc00019b040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    result := make([]int, 0, 2*n+1)\n    i := 2\n\
    \    for number := 3; i <= n; number += i {\n        if number*n%i == 0 {\n  \
    \          i += 2\n        } else {\n            i++\n        }\n        result\
    \ = append(result, number*i)\n    }\n    return result\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.11s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpox9shs_p_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=12)]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpox9shs_p_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=12) %!s(int=42)]'\n    ---\
    \ FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpox9shs_p_test.go:51: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=12) %!s(int=42) %!s(int=91)\
    \ %!s(int=160) %!s(int=280)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n\
    \        tmpox9shs_p_test.go:51: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=9)\
    \ %!s(int=30) %!s(int=66) %!s(int=119) %!s(int=192) %!s(int=320) %!s(int=462)\
    \ %!s(int=636) %!s(int=845) %!s(int=1170) %!s(int=1488) %!s(int=1853) %!s(int=2268)\
    \ %!s(int=2880) %!s(int=3444) %!s(int=4070) %!s(int=4761) %!s(int=5750) %!s(int=6630)\
    \ %!s(int=7587) %!s(int=8624) %!s(int=10080) %!s(int=11346) %!s(int=12704) %!s(int=14157)\
    \ %!s(int=16170) %!s(int=17892) %!s(int=19721) %!s(int=21660) %!s(int=24320) %!s(int=26568)\
    \ %!s(int=28938) %!s(int=31433) %!s(int=34830) %!s(int=37674) %!s(int=40655) %!s(int=43776)\
    \ %!s(int=48000) %!s(int=51510) %!s(int=55172) %!s(int=58989) %!s(int=64130) %!s(int=68376)\
    \ %!s(int=72789) %!s(int=78706)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpox9shs_p_test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=9) %!s(int=30) %!s(int=66) %!s(int=119) %!s(int=192)\
    \ %!s(int=320) %!s(int=462) %!s(int=636) %!s(int=845) %!s(int=1170) %!s(int=1488)\
    \ %!s(int=1853) %!s(int=2268) %!s(int=2880) %!s(int=3444) %!s(int=4070) %!s(int=4761)\
    \ %!s(int=5750) %!s(int=6630) %!s(int=7587) %!s(int=8624) %!s(int=10080) %!s(int=11346)\
    \ %!s(int=12704) %!s(int=14157) %!s(int=16170) %!s(int=17892) %!s(int=19721) %!s(int=21660)\
    \ %!s(int=24320) %!s(int=26568) %!s(int=28938) %!s(int=31433) %!s(int=34830) %!s(int=37674)\
    \ %!s(int=40655) %!s(int=43776) %!s(int=48000) %!s(int=51510) %!s(int=55172) %!s(int=58989)\
    \ %!s(int=64130) %!s(int=68376) %!s(int=72789) %!s(int="
  timestamp: 1660074651
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n%2 == 0 {\n        return []int{2}\n    }\n\
    \n    var result []int\n    factorize := func(n int) {\n        if n%2 == 0 {\n\
    \            result = []int{2, n}\n            return\n        }\n\n        var\
    \ result []int\n        r := 1\n        for i := 3; i <= n; i += 2 {\n       \
    \     if n%i == 0 {\n                result = []int{i, n//i}\n               \
    \ return\n            }\n\n            r *= i\n        }\n        result = append(result,\
    \ r)\n    }\n\n    factorize(n)\n    return result\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcylwcbdl_test.go:33:36: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074649
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        for j := i * i; j < n; j += i {\n            factors[j] =\
    \ factors[j] + 1\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074662
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n)\n    prime := prime[:len(prime)/2]\n\
    \n    for i := 1; i < len(prime); i++ {\n        for j := i * i; j < len(prime);\
    \ j += i {\n            prime[j/i] = i\n        }\n    }\n\n    result := make([]int,\
    \ len(prime))\n    for i := 0; i < len(prime); i++ {\n        result[i] = 0\n\
    \        for j := 0; j < len(prime); j++ {\n            if prime[i] != 0 {\n \
    \               result[i] += prime[j]\n            }\n        }\n    }\n\n   \
    \ return result\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo5t263ba_test.go:19:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n\n    for i := range\
    \ factors {\n        factors[i] = 0\n    }\n\n    for i := 1; i < n; i++ {\n \
    \       for j := 1; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ += j\n            }\n        }\n    }\n\n    sort.Ints(factors)\n\n    return\
    \ factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpejybl50q_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, 0)\n    d := 2\n    d :=\
    \ d*d\n    factors = append(factors, d)\n    d += 1\n\n    // This loop stops\
    \ once all factors are found\n    for true {\n        // This loop stops once\
    \ no more factors can be found\n        for !((n%d) == 0) {\n            n /=\
    \ d\n            factors = append(factors, d)\n            d += 1\n        }\n\
    \n        if n == 1 {\n            break\n        }\n\n        d += 1\n    }\n\
    \n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate :=\
    \ factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx0rmaxyl_test.go:20:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 0
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n == 1 {\n        return nil\n    }\n    factorization\
    \ := []int{}\n    for p := 2; p*p <= n; p++ {\n        for i := 0; i < p; i++\
    \ {\n            if n%p == 0 {\n                factorization = append(factorization,\
    \ p)\n                n = n / p\n            }\n        }\n    }\n    if n !=\
    \ 1 {\n        factorization = append(factorization, n)\n    }\n    return factorization\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var res []int\n\n    for f := 2; f <= n; f++ {\n\
    \        for i := 1; i < f; i++ {\n            if n%f==0 {\n                res\
    \ = append(res, f)\n                n /= f\n            }\n        }\n    }\n\
    \    if n>1 {\n        res = append(res, n)\n    }\n\n    return res\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpfqblnyzp_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n\
    \        tmpfqblnyzp_test.go:55: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{0}\n    s := n\n\n    // The\
    \ first loop will find factors of 'n' upto its prime factors.\n    for f := 2;\
    \ f*f <= n; f++ {\n        if n%f == 0 {\n            factors = append(factors,\
    \ f)\n            s = s / f\n        }\n    }\n\n    // If there are still remaining\
    \ factors to factorize, append them with number of times they appear in factorization.\n\
    \    if s > 1 {\n        for f := 2; f*f <= s; f++ {\n            if n%f == 0\
    \ {\n                factors = append(factors, f)\n                s = s / f\n\
    \            }\n        }\n    }\n\n    // Return result\n    return factors\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpqiungt1a_test.go:63: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpqiungt1a_test.go:63:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL:\
    \ TestFactorize/test_num__2 (0.00s)\n        tmpqiungt1a_test.go:63: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpqiungt1a_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=0) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpqiungt1a_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=3) %!s(int=9) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpqiungt1a_test.go:63: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=0) %!s(int=3) %!s(int=9)\
    \ %!s(int=19) %!s(int=27) %!s(int=57) %!s(int=171) %!s(int=361)]'\n    --- FAIL:\
    \ TestFactorize/test_num__6 (0.00s)\n        tmpqiungt1a_test.go:63: expected\
    \ '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=0) %!s(int=3)\
    \ %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmpqiungt1a_test.go:63: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n)\n    factorization, _\
    \ := factorization(n-1)\n\n    for i, factor := range factorization {\n      \
    \  prime[i] = factor\n    }\n\n    return prime\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfngh0tr5_test.go:19:25: undefined: factorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factor := []int{}\n    for i:=2; i*i<=n; i++ {\n\
    \        for j:=2; j*j<=i; j++ {\n            if n%i == 0 {\n                n\
    \ = n / i\n                factor = append(factor, i)\n                if n%i\
    \ == 0 {\n                    n = n / i\n                    factor = append(factor,\
    \ i)\n                }\n            }\n        }\n    }\n    return factor\n\
    }\n</code>\n<|/ a tags=sieve-of-eratosthenes,go |>\n<| a |>\nI modified my own\
    \ code to implement sieve of eratosthenes for big numbers\n<code>\npackage main\n\
    \nimport \"fmt\"\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_znl0jcd_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    f := make([]int, n)\n    f := make([]int, 0)\n\
    \    f := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make([]int, n)\n    factorize\
    \ := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make([]int, n)\n    factorize\
    \ := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make([]int, n)\n    factorize\
    \ := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make([]int, n)\n    factorize\
    \ := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make([]int, n)\n    factorize\
    \ := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make([]int, n)\n    factorize\
    \ := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make([]int, n)\n    factorize\
    \ := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make([]int, n)\n    factorize\
    \ := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make([]int, n)\n    factorize\
    \ := make([]int, n)\n    factorize := make([]int, n)\n    factorize := make([]int,\
    \ n)\n    factorize := make([]int, n)\n    factorize := make\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9vyj9e6e_test.go:70:6: expected ''('', found TestFactorize

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074651
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    // All prime factors up to sqrt(n) where sqrt(n)\
    \ is a prime\n    prime := make([]int, 0, n+1)\n    prime := prime[:0]\n    for\
    \ p := 2; p < n+1; p++ {\n        if n%p == 0 {\n            prime = append(prime,\
    \ p)\n        }\n    }\n    if len(prime) == n {\n        return prime\n    }\n\
    \    result := make([]int, 0, n)\n    // If we have not seen the prime factor\
    \ of n then we must take its exponent of sqrt(n)\n    factor := prime[0]\n   \
    \ exp := 1\n    for i := 1; i < len(prime); i++ {\n        if prime[i] == factor\
    \ {\n            exp++\n        } else {\n            result = append(result,\
    \ factor*exp)\n            factor = prime[i]\n            exp = 1\n        }\n\
    \    }\n    return append(result, factor*exp)\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnpoqmx60_test.go:20:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n)\n    p := 2\n    for\
    \ i := 3; i < n; i++ {\n        if n % i == 0 {\n            factors[p] = i\n\
    \            p += i\n            if p > n {\n                break\n         \
    \   }\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpiw5b7n_6_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpiw5b7n_6_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpiw5b7n_6_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpiw5b7n_6_test.go:52: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=19) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpiw5b7n_6_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=19)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=57) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(in"
  timestamp: 1660074654
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n)\n    for i := 0; i < n;\
    \ i++ {\n        f := 2\n        for ; f < n; f*=2 {\n            if n%f == 0\
    \ {\n                prime[i] = f\n                break\n            }\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.15s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp2mh6e3r7_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp2mh6e3r7_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmp2mh6e3r7_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmp2mh6e3r7_test.go:51: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp2mh6e3r7_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074654
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    f := make([]int, n)\n    factors := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        f := make([]int, n)\n        for j := 0;\
    \ j < n; j++ {\n            if j%i == 0 {\n                f[j] = j\n        \
    \    }\n        }\n        factors[i] += len(f)\n    }\n    for i := 0; i < n;\
    \ i++ {\n        f[i] = factors[i]\n    }\n    return f\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x503ac0, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503ac0, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp9dg7qni2_test.go:23\n\
    command-line-arguments_test.TestFactorize(0xc0000da1a0?)\n\t/tmp/tmp9dg7qni2_test.go:42\
    \ +0x1030\ntesting.tRunner(0xc0000da1a0, 0x529220)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.018s\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var (\n        factorization = []int{}\n     \
    \   primes = make([]int, maxPrimes)\n    )\n\n    for p := 2; p*p <= n; p++ {\n\
    \        for i := 0; i < len(primes); i++ {\n            if n%p == 0 {\n     \
    \           primes[i] += 1 // Add current p to prime list\n                for\
    \ j := i*i; j <= n; j += i {\n                    factorization = append(factorization,\
    \ p)\n                    factorization = append(factorization, j%p)\n       \
    \         }\n                break\n            }\n        }\n    }\n\n    return\
    \ factorization\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82ashbc8_test.go:20:30: undefined: maxPrimes

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n < 2 {\n        return []int{n}\n    }\n \
    \   factors := make([]int, n+1)\n    factors[0] = 1\n    factors[1] = 1\n    for\
    \ i := 2; i <= n; i++ {\n        factors := append(factors, factors[i-1] * i)\n\
    \    }\n    return factors[:len(factors)-1]\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4cjo1de_test.go:25:9: factors declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074653
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    f := make([]int, 0, factorizationCount)\n    factor\
    \ := factorization(n, 0, len(factorizationFactors))\n    if factor == 0 {\n  \
    \      fmt.Printf(\"No factors of %d found \\n\", n)\n        return nil\n   \
    \ }\n    fmt.Printf(\"Factors of %d are: \", n)\n    for i := factor; i >= 1;\
    \ i-- {\n        if factorization(n, 0, len(factorizationFactors)) == i {\n  \
    \          fmt.Printf(\"%d  \", i)\n            factor = factor - factorizationFactors[i]\n\
    \        } else {\n            f := append(f, i)\n            factor++\n     \
    \       fmt.Printf(\"%d \", i)\n        }\n    }\n    fmt.Println()\n    return\
    \ f\n}\n\nvar factorizationFactors = []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\nvar factorizationCount\
    \ = 20\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdl3olr20_test.go:19:15: undefined: factorization

    /tmp/tmpdl3olr20_test.go:26:12: undefined: factorization

    /tmp/tmpdl3olr20_test.go:30:13: f declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n\n    for i := 2; i <= n; i++\
    \ {\n        total := 1\n\n        for j := 1; j <= i; j++ {\n            if i%j\
    \ == 0 {\n                total *= j\n            }\n        }\n\n        if total\
    \ == i {\n            factors = append(factors, i)\n        }\n    }\n\n    return\
    \ factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074666
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var result []int\n    for i := 1; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors := factorize(i)\n            result\
    \ = append(result, factors...)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200f0370\
    \ stack=[0xc0200f0000, 0xc0400f0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204f5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.factorize(0x1)\n\
    \t/tmp/tmpbg7e48cw_test.go:17 +0x117 fp=0xc0200f0380 sp=0xc0200f0378 pc=0x4ef777\n\
    command-line-arguments_test.factorize(0x1)\n\t/tmp/tmpbg7e48cw_test.go:21 +0x68\
    \ fp=0xc0200f03f8 sp=0xc0200f0380 pc=0x4ef6c8\ncommand-line-arguments_test.factorize(0x1)\n\
    \t/tmp/tmpbg7e48cw_test.go:21 +0x68 fp=0xc0200f0470 sp=0xc0200f03f8 pc=0x4ef6c8\n\
    command-line-arguments_test.factorize(0x1)\n\t/tmp/tmpbg7e48cw_test.go:21 +0x68\
    \ fp=0xc0200f04e8 sp=0xc0200f0470 pc=0x4ef6c8\ncommand-line-arguments_test.factorize(0x1)\n\
    \t/tmp/tmpbg7e48cw_test.go:21 +0x68 fp=0xc0200f0560 sp=0xc0200f04e8 pc=0x4ef6c8\n\
    command-line-arguments_test.factorize(0x1)\n\t/tmp/tmpbg7e48cw_test.go:21 +0x68\
    \ fp=0xc0200f05d8 sp=0xc0200f0560 pc=0x4ef6c8\ncommand-line-arguments_test.factorize(0x1)\n\
    \t/tmp/tmpbg7e48cw_test.go:21 +0x68 fp=0xc0200f0650 sp=0xc0200f05d8 pc=0x4ef6c8\n\
    command-line-arguments_test.factorize(0x1)\n\t/tmp/tmpbg7e48cw_test.go:21 +0x68\
    \ fp=0xc0200f06c8 sp=0xc0200f0650 pc=0x4ef6c8\ncommand-line-arguments_test.factorize(0x1)\n\
    \t/tmp/tmpbg7e48cw_test.go:21 +0x68 fp=0xc0200f0740 sp=0xc0200f06c8 pc=0x4ef6c8\n\
    command-line-arguments_test.factorize(0x1)\n\t/tmp/tmpbg7e48cw_test.go:21 +0x68\
    \ fp=0xc0200f07b8 sp=0xc0200f0740 pc=0x4ef6c8\ncommand-line-arguments_test.factorize(0x1)\n\
    \t/tmp/tmpbg7e48cw_test.go:21 +0x68 fp=0xc0200f0830 sp=0xc0200f07b8 pc=0x4ef6c8\n\
    command-line-arguments_test.factorize(0x1)\n\t/tmp/tmpbg7e48cw_test.go:21 +0x68\
    \ fp=0xc0200f08a8 sp=0xc0200f0830 pc=0x4ef6c8\ncommand-line-arguments_test.factorize(0x1)\n\
    \t/tmp/tmpbg7e48cw_test.go:21 +0x68 fp=0xc0200f0920 sp=0xc0200f08a8 p"
  timestamp: 1660074655
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var result []int\n    i := 2\n    for i <= n {\n\
    \        if n%i == 0 {\n            result := append(result, i)\n            n\
    \ /= i\n        }\n        i = i*2\n    }\n    return result\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdq6fteqv_test.go:22:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var list []int\n    var current int\n\n    for\
    \ current := 2; current <= n; current += 2 {\n        if n % current == 0 {\n\
    \            list = append(list, current)\n            n /= current\n        }\n\
    \    }\n\n    list = append(list, n)\n\n    return list\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp666bwpb4_test.go:19:9: current declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    if n == 0 {\n        return\
    \ factors\n    }\n    primes := make([]bool, 250)\n    p := 2\n    factors = append(factors,\
    \ p)\n    primes[p] = true\n    for {\n        if p*p > n {\n            break\n\
    \        }\n        for {\n            if n % p == 0 {\n                factors\
    \ = append(factors, p)\n                n /= p\n                break\n      \
    \      }\n            if p >= n {\n                break\n            }\n    \
    \        p += 1\n        }\n        p += 1\n    }\n    for {\n        if p*p >\
    \ n {\n            break\n        }\n        p += 2\n        if primes[p] {\n\
    \            factors = append(factors, p)\n            n /= p\n        } else\
    \ {\n            break\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp23bx97ty_test.go:78: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n\
    \        tmp23bx97ty_test.go:78: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmp23bx97ty_test.go:78: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=2) %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmp23bx97ty_test.go:78: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2) %!s(int=3) %!s(int=9)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp23bx97ty_test.go:78:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n\
    \        tmp23bx97ty_test.go:78: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    result := make([]int, 0, n)\n    for i := 2; i\
    \ <= n/2; i++ {\n        if n%i == 0 {\n            for j := i*i; j > n; j -=\
    \ i {\n                result <- j\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxd62fge8_test.go:22:17: invalid operation: cannot send to non-channel
    result (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074654
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var f []int\n    f := factorizeRecursive(n)\n\
    \    return f\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp34ovwumy_test.go:19:7: no new variables on left side of :=

    /tmp/tmp34ovwumy_test.go:19:10: undefined: factorizeRecursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    result := []int{}\n    factors := []int{n}\n\n\
    \    for i := 1; i <= int(sqrt(n)); i++ {\n        factorsTemp := factors\n  \
    \      factors = make([]int, 0)\n\n        for _, factor := range factorsTemp\
    \ {\n            if n%factor == 0 {\n                factors = append(factors,\
    \ factor)\n                n /= factor\n            }\n        }\n\n        if\
    \ n%factor == 0 {\n            factors = append(factors, factor)\n        }\n\
    \    }\n\n    for _, factor := range factors {\n        result = append(result,\
    \ factor)\n    }\n    return result\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpunwm8h_d_test.go:21:26: undefined: sqrt

    /tmp/tmpunwm8h_d_test.go:32:14: undefined: factor

    /tmp/tmpunwm8h_d_test.go:33:39: undefined: factor

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    // Base case\n    if n%2 == 0 {\n        return\
    \ []int{2, n}\n    }\n\n    // Find smallest factor greater than or equal to input\
    \ number\n    f := 2\n    for f <= n {\n        if n%f==0 {\n            break\n\
    \        }\n        f++\n    }\n\n    s := []int{}\n    for f <= n {\n       \
    \ if n%f==0 {\n            n /= f\n            s = append(s, f)\n        }\n \
    \       f++\n    }\n\n    return append(s, n)\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp8pfjmhb5_test.go:64: expected '[%!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmp8pfjmhb5_test.go:64:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL:\
    \ TestFactorize/test_num__2 (0.00s)\n        tmp8pfjmhb5_test.go:64: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=8)]'\n    ---\
    \ FAIL: TestFactorize/test_num__3 (0.00s)\n        tmp8pfjmhb5_test.go:64: expected\
    \ '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=1)]'\n    ---\
    \ FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp8pfjmhb5_test.go:64: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=19)\
    \ %!s(int=57) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n\
    \        tmp8pfjmhb5_test.go:64: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19) %!s(int=361)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmp8pfjmhb5_test.go:64:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmp8pfjmhb5_test.go:64: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=18)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.028s\n\
    FAIL\n"
  timestamp: 1660074655
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, len(primeFactors(n)))\n\
    \    multiplier := 1\n    for i := 0; i < len(factors); i++ {\n        for j :=\
    \ 0; j < factors[i]; j++ {\n            factors[i] = multiplier\n            multiplier\
    \ *= n\n        }\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjmjyu_cr_test.go:18:32: undefined: primeFactors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074655
- exit_code: null
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, 0, n)\n    factors := make([]int,\
    \ 0, n)\n    current := 2\n\n    // Keep adding prime factors until we get to\
    \ the square root of n\n    for current <= n {\n        for i := current * current;\
    \ i <= n; i++ {\n            if n % i == 0 {\n                prime = append(prime,\
    \ i)\n                factors = append(factors, current)\n                current\
    \ = current * i\n                break\n            }\n        }\n    }\n    return\
    \ prime\n}\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074667
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factor []int\n    for i:=2; i*n<=n; i++ {\n\
    \        if n%i == 0 {\n            factor=[]int{}\n            break\n      \
    \  }\n    }\n    for i:=0;i<len(factor);i++ {\n        factor[i]=1\n    }\n  \
    \  factor=append(factor,1)\n    for i:=len(factor);i<n;i++ {\n        if factor[i]==1\
    \ {\n            factor=append(factor,i)\n        }\n    }\n    return factor\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp3vssuomt_test.go:30\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp3vssuomt_test.go:44\
    \ +0xef7\ntesting.tRunner(0xc0000d8000, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    prime := make([]int, n)\n    factor := 2\n   \
    \ factor := factor - 1\n    for i := 0; i < len(prime); i++ {\n        for j :=\
    \ factor - 1; j >= 2; j-- {\n            if n%j == 0 {\n                prime[i]\
    \ = j\n                n = n / j\n                factor += 2\n            }\n\
    \        }\n    }\n    if n == 1 {\n        prime = append(prime, 2)\n    }\n\
    \    return prime\n}\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjpxs57p8_test.go:20:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074656
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n < 2 {\n        return nil\n    }\n\n    facs\
    \ := []int{1, n}\n    n /= 2\n\n    for n > 1 {\n        if n % 2 == 0 {\n   \
    \         facs = append(facs, 2)\n            n = n / 2\n        } else {\n  \
    \          facs = append(facs, 1)\n            n = n / 2\n        }\n    }\n\n\
    \    return facs\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpp043r5vy_test.go:58: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpp043r5vy_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpp043r5vy_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpp043r5vy_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1) %!s(int=57) %!s(int=2)\
    \ %!s(int=2) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpp043r5vy_test.go:58: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=3249) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmpp043r5vy_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=185193) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2)\
    \ %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmpp043r5vy_test.go:58: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=20577) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmpp043r5vy_test.go:58: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=18) %!s(int=1) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660074657
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, 1)\n    i := 2\n    while\
    \ i*i <= n {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n            factors = append(factors, n)\n            n =\
    \ i\n            i = 2\n        }\n        i++\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiyyjg84u_test.go:20:11: expected '';'', found i

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074656
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    n += 2 // make all factors positive and add to\
    \ 2\n    factors := make([]int, len(primeFactors(n)))\n    for i := range factors\
    \ {\n        factors[i] = 1\n    }\n    i := 0\n    for factors[i] < n {\n   \
    \     if n % factors[i] == 0 {\n            factors[i]++\n            n /= factors[i]\n\
    \        } else {\n            i++\n        }\n    }\n    if n > 1 {\n       \
    \ return append(factors, n)\n    }\n    return factors[:len(factors)-1]\n}\n\n\
    func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpulvu1m6b_test.go:19:32: undefined: primeFactors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors = []int{}\n    var x int\n    for\
    \ x <= n / 2 {\n        if n%x == 0 {\n            factors = append(factors, x)\n\
    \            n = n / x\n        }\n        x++\n    }\n    return factors\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmppcxbfld4_test.go:21\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmppcxbfld4_test.go:37\
    \ +0xfc5\ntesting.tRunner(0xc000103380, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074658
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    primes := []int{0}\n    factored := []int{0}\n\
    \    var iFactored int\n    for iFactored = 1 ; iFactored <= n ; iFactored++ {\n\
    \        factored = append(factored, iFactored)\n        for iFactored2, candidate\
    \ := range primes {\n            if iFactored2*candidate > iFactored {\n     \
    \           break\n            } else {\n                primes = append(primes,\
    \ iFactored2)\n            }\n        }\n    }\n\n    return factored\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (8.37s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpoqze7xvt_test.go:55: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpoqze7xvt_test.go:55: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpoqze7xvt_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n \
    \       tmpoqze7xvt_test.go:55: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpoqze7xvt_test.go:55:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(in"
  timestamp: 1660074667
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    f := factorization(int(n), int(n))\n    result\
    \ := make([]int, len(f))\n    for i, f := range f {\n        result[i] = f\n \
    \   }\n    return result\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1is_mbqd_test.go:18:10: undefined: factorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n%2 == 0 {\n        return [2]int{n}\n    }\n\
    \    p := 2\n    facs := [2]int{}\n    for {\n        if n%p == 0 {\n        \
    \    facs = append(facs, p)\n            n /= p\n            p++\n        } else\
    \ {\n            break\n        }\n    }\n    facs = append(facs, n)\n    return\
    \ facs\n}\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9bqqa9b0_test.go:19:16:\
    \ cannot use [2]int{\u2026} (value of type [2]int) as type []int in return statement\n\
    /tmp/tmp9bqqa9b0_test.go:25:27: first argument to append must be a slice; have\
    \ facs (variable of type [2]int)\n/tmp/tmp9bqqa9b0_test.go:32:19: first argument\
    \ to append must be a slice; have facs (variable of type [2]int)\n/tmp/tmp9bqqa9b0_test.go:33:12:\
    \ cannot use facs (variable of type [2]int) as type []int in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n%2 == 0 {\n        return []int{2, n}\n  \
    \  }\n    f := []int{1, n}\n    f := factorize(n/2)\n    for _, v := range f {\n\
    \        if v*2 > n {\n            return []int{2, n}\n        }\n    }\n    return\
    \ f\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4h6evjxc_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n%2 == 0 {\n        return []int{2, n}\n  \
    \  }\n\n    list := make([]int, 0, n)\n    lastPrime := 2\n    lastIndex := 0\n\
    \n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            list = append(list,\
    \ i)\n\n            currentPrime := i\n            currentIndex := lastIndex\n\
    \n            for lastPrime > currentPrime {\n                lastPrime -= currentPrime\n\
    \                lastIndex++\n            }\n        }\n    }\n\n    return list\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkj5q4ju3_test.go:31:13: currentIndex declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, 0)\n\n    if n < 2 {\n\
    \        return factors\n    }\n    if n == 1 {\n        return append(factors,\
    \ 2)\n    }\n    if n > 1 {\n        factor := 2\n        while factor*factor\
    \ <= n {\n            if n%factor == 0 {\n                factors = append(factors,\
    \ factor)\n                n /= factor\n            }\n            factor++\n\
    \        }\n    }\n    return append(factors, n)\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsdp23j79_test.go:28:15: expected '';'', found factor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074657
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    // Create map with factorization of given number\
    \ as key, and number of times it appeared as value.\n    var factorization map[int]int\n\
    \    // Iterate through all factors of given number\n    for i := 2; i <= n; i++\
    \ {\n        // Count how many times it appeared in factorization\n        if\
    \ _, ok := factorization[i]; ok {\n            factorization[i]++\n        } else\
    \ {\n            factorization[i] = 1\n        }\n    }\n    // Find all factors\
    \ in factorization and return them in order from smallest to largest\n    factors\
    \ := make([]int, len(factorization))\n    i := 0\n    for k := range factorization\
    \ {\n        factors[i] = k\n        i++\n    }\n    return factors\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: assignment to entry in nil map\
    \ [recovered]\n\tpanic: assignment to entry in nil map\n\ngoroutine 18 [running]:\n\
    testing.tRunner.func1.2({0x503be0, 0x54a4b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503be0, 0x54a4b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpcju1i86y_test.go:26\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpcju1i86y_test.go:46\
    \ +0x95\ntesting.tRunner(0xc00019aea0, 0x529220)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660074659
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizationTable := make([]int, n)\n    factorizationTable[0]\
    \ = 2\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factorizationTable[i]\
    \ = 1\n            n /= i\n            for j := i - 1; j > 0; j-- {\n        \
    \        if n%j == 0 {\n                    factorizationTable[i] = factorizationTable[i]\
    \ + 1\n                    n /= j\n                }\n            }\n        }\n\
    \    }\n    return factorizationTable\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.09s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpbyexre6i_test.go:55: expected '[%!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpbyexre6i_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpbyexre6i_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpbyexre6i_test.go:55: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpbyexre6i_test.go:55:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=2)\
    \ %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074659
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var result []int\n    num := n\n    var m int\n\
    \    for m <= n / 2 {\n        if n%m == 0 {\n            num /= m\n        }\
    \ else {\n            m += 1 // m is greater than or equal to n so m divides n\n\
    \            result := append(result, m)\n        }\n    }\n    if num > 1 {\n\
    \        result = append(result, num)\n    }\n    return result\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpko6zst2s_test.go:26:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n  \
    \  factorizer := func(n int) []int {\n        factors := make([]int, 0, n+1)\n\
    \        for i := 2; i <= n; i++ {\n            if n % i == 0 {\n            \
    \    factors = append(factors, i)\n                factors = append(factors, factorizer(n//i)...)\n\
    \            }\n        }\n        return factors\n    }\n    return factorizer(n)\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsc4rqqn4_test.go:26:55: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074658
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorization := make([]int, 0, n)\n    for i\
    \ := 1; i <= n; i++ {\n        if n%i == 0 {\n            factorization = append(factorization,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factorization\
    \ = append(factorization, n)\n    }\n    return factorization\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpwmtyq_7__test.go:51: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpwmtyq_7__test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpwmtyq_7__test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpwmtyq_7__test.go:51:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=19)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpwmtyq_7__test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpwmtyq_7__test.go:51: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=9)\
    \ %!s(int=19) %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n\
    \        tmpwmtyq_7__test.go:51: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=19) %!s(int=361)]'\n    ---\
    \ FAIL: TestFactorize/test_num__7 (0.00s)\n        tmpwmtyq_7__test.go:51: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.017s\nFAIL\n"
  timestamp: 1660074659
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var fac = []int{}\n    var factors []int\n   \
    \ for i := 1; i < n; i++ {\n        if n % i == 0 {\n            factors = append(factors,\
    \ i)\n        }\n    }\n    for _, factor := range factors {\n        for j :=\
    \ factor; j < n; j++ {\n            if n%j == 0 {\n                fac = append(fac,\
    \ j)\n            }\n        }\n    }\n    return fac\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.04s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmphzvewb7w_test.go:55: expected '[%!s(int=2)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmphzvewb7w_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmphzvewb7w_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=2) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmphzvewb7w_test.go:55: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=19) %!s(int=3) %!s(int=19) %!s(int=19)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmphzvewb7w_test.go:55:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=9) %!s(int=19) %!s(int=57) %!s(int=171) %!s(int=361) %!s(int=1083)\
    \ %!s(int=3) %!s(int=9) %!s(int=19) %!s(int=57) %!s(int=171) %!s(int=361) %!s(int=1083)\
    \ %!s(int=9) %!s(int=19) %!s(int=57) %!s(int=171) %!s(int=361) %!s(int=1083) %!s(int=19)\
    \ %!s(int=57) %!s(int=171) %!s(int=361) %!s(int=1083) %!s(int=57) %!s(int=171)\
    \ %!s(int=361) %!s(int=1083) %!s(int=171) %!s(int=361) %!s(int=1083) %!s(int=361)\
    \ %!s(int=1083) %!s(int=1083)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n\
    \        tmphzvewb7w_test.go:55: expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19) %!s(int=19)]', got '[%!s(int=1) %!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=27) %!s(int=57) %!s(int=171) %!s(int=361) %!s(int=513) %!s(int=1083)\
    \ %!s(int=3249) %!s(int=6859) %!s(int=9747) %!s(int=20577) %!s(int=61731) %!s(int=3)\
    \ %!s(int=9) %!s(int=19) %!s(int=27) %!s(int=57) %!s(int=171) %!s(int=361) %!s(int=513)\
    \ %!s(int=1083) %!s(int=3249) %!s(int=6859) %!s(int=9747) %!s(int=20577) %!s(int=61731)\
    \ %!s(int=9) %!s(int=19) %!s(int=27) %!s(int=57) %!s(int=171) %!s(int=361) %!s(int=513)\
    \ %!s(int=1083) %!s(int=3249) %!s(int=6859) %!s(int=9747) %!s(int=20577) %!s(int=61731)\
    \ %!s(int=19) %!s(int"
  timestamp: 1660074660
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizer := factorizer.New(100) // max prime\
    \ factor for now\n    prime := factorizer.IsPrime(n)\n    factors := factorizer.Factorize(n)\n\
    \    return prime, factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzoaxwrcv_test.go:18:19: undefined: factorizer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074659
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    f := func() int {\n        i, ok := smallPrimeFactorization[n]\n\
    \        if ok {\n            return i\n        } else {\n            return 0\n\
    \        }\n    }\n    factorization := make([]int, 0, f)\n    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            factorization = append(factorization,\
    \ i)\n            n /= i\n            if n != 1 {\n                factorization\
    \ = append(factorization, n)\n            }\n        }\n    }\n    return factorization\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbd0_9u03_test.go:19:18: undefined: smallPrimeFactorization

    /tmp/tmpbd0_9u03_test.go:26:37: invalid argument: index f (variable of type func()
    int) must be integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074660
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factor []int\n    for i := 0; i < n; i++ {\n\
    \        if n == 1 {\n            factor = []int{1}\n            break\n     \
    \   }\n        for j := 0; j < n; j++ {\n            if n % j == 0 {\n       \
    \         factor = append(factor, j)\n                break\n            }\n \
    \       }\n    }\n    return factor\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpl5v93qyf_test.go:25\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpl5v93qyf_test.go:41\
    \ +0x10cf\ntesting.tRunner(0xc0000da1a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660074660
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n == 1 {\n        return []int{}\n    }\n \
    \   factors := []int{}\n    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n\
    \            factors = append(factors, i)\n            n /= i\n        }\n   \
    \ }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmppgo22aof_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmppgo22aof_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmppgo22aof_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n      \
    \  tmppgo22aof_test.go:51: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmppgo22aof_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmppgo22aof_test.go:51:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=9) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__6\
    \ (0.00s)\n        tmppgo22aof_test.go:51: expected '[%!s(int=3) %!s(int=19) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmppgo22aof_test.go:51: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.026s\n\
    FAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, 0)\n    for i := 0; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x5f29a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp0oysktvk_test.go:20\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp0oysktvk_test.go:35\
    \ +0xc2f\ntesting.tRunner(0xc00019b1e0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074661
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    facs := make([]int, n)\n    p := n\n    for i\
    \ := 0; i < n; i++ {\n        for j := 0; j <= i; j++ {\n            if p % j\
    \ == 0 {\n                facs[j] = facs[j]*p//j\n                p /= j\n   \
    \         }\n        }\n    }\n\n    for i := 0; i < n; i++ {\n        if p !=\
    \ 1 {\n            facs[i] = p\n            p /= n\n        }\n    }\n    return\
    \ facs\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n   \
    \  { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: integer divide by\
    \ zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x503a40, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x503a40, 0x5f39a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmp1ufl81ta_test.go:22\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmp1ufl81ta_test.go:45\
    \ +0xadd\ntesting.tRunner(0xc000103520, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.038s\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    // If factorization is already computed then return\
    \ it.\n    if cachedFactorize[n] != nil {\n        return cachedFactorize[n].factors\n\
    \    }\n\n    var factors []int\n\n    // Loop over all factors of given number\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n\n    // If given number is less than\
    \ or equal to 1 then there is no prime factors.\n    if n != 1 {\n        factors\
    \ = append(factors, n)\n    }\n\n    cachedFactorize[n] = \nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7rn32whz_test.go:39:6: expected ''('', found TestFactorize

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074660
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpsj4igxf4_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpsj4igxf4_test.go:52: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpsj4igxf4_test.go:52: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpsj4igxf4_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.032s\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    primes := []int{}\n    for i := 2; i <= n/i; i++\
    \ {\n        for j := i*i; j <= n; j += i {\n            if j > n {\n        \
    \        break\n            }\n            primes = append(primes, j)\n      \
    \  }\n    }\n    return primes\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.64s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpaow9tns5_test.go:50: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpaow9tns5_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpaow9tns5_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestFactorize/test_num__3\
    \ (0.00s)\n        tmpaow9tns5_test.go:50: expected '[%!s(int=3) %!s(int=19)]',\
    \ got '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)\
    \ %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30)\
    \ %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44)\
    \ %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=9)\
    \ %!s(int=12) %!s(int=15) %!s(int=18) %!s(int=21) %!s(int=24) %!s(int=27) %!s(int=30)\
    \ %!s(int=33) %!s(int=36) %!s(int=39) %!s(int=42) %!s(int=45) %!s(int=48) %!s(int=51)\
    \ %!s(int=54) %!s(int=57) %!s(int=16) %!s(int=20) %!s(int=24) %!s(int=28) %!s(int=32)\
    \ %!s(int=36) %!s(int=40) %!s(int=44) %!s(int=48) %!s(int=52) %!s(int=56) %!s(int=25)\
    \ %!s(int=30) %!s(int=35) %!s(int=40) %!s(int=45) %!s(int=50) %!s(int=55) %!s(int=36)\
    \ %!s(int=42) %!s(int=48) %!s(int=54) %!s(int=49) %!s(int=56)]'\n    --- FAIL:\
    \ TestFactorize/test_num__4 (0.01s)\n        tmpaow9tns5_test.go:50: expected\
    \ '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=4) %!s(int=6)\
    \ %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)\
    \ %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34)\
    \ %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48)\
    \ %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62)\
    \ %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76)\
    \ %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s"
  timestamp: 1660074664
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var f []int\n    for i := 2; i <= n; i++ {\n \
    \       for j := 2; j <= i/2; j++ {\n            if i%j == 0 {\n             \
    \   break\n            }\n        }\n        if j != i/2 {\n            f = append(f,\
    \ i)\n        }\n    }\n    return f\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptinr9g7t_test.go:25:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{}\n\n    for f := 1; f*f <= n;\
    \ f++ {\n        for i := 2; i <= n/f; i++ {\n            if n%i == 0 {\n    \
    \            factors = append(factors, i)\n                n /= i\n          \
    \  }\n        }\n    }\n\n    if n != 1 {\n        factors = append(factors, n)\n\
    \    }\n\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpuutky503_test.go:56: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpuutky503_test.go:56: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=3) %!s(int=19) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpuutky503_test.go:56: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3) %!s(int=9) %!s(int=19)\
    \ %!s(int=361)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpuutky503_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=19) %!s(int=361)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n"
  timestamp: 1660074663
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var result []int\n    var factorization *[]int\n\
    \    if factorization == nil {\n        var factorization []int\n        var factor\
    \ int\n        for factor := 2; factor < n; factor++ {\n            if n%factor\
    \ == 0 {\n                factorization = append(factorization, factor)\n    \
    \            factorization = append(factorization, factorization...)\n       \
    \     }\n        }\n    }\n    result = append(result, factorization...)\n   \
    \ return append(result, factorization...)\n}\n\nfunc TestFactorize(t *testing.T)\
    \ {\n  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n\
    \     { actual: candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57),\
    \ expected: []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3,\
    \ 3, 19, 19} },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19,\
    \ 19, 19} },\n     { actual: candidate(20577), expected: []int{3, 19, 19, 19}\
    \ },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmcd6soru_test.go:22:13: factor declared but not used

    /tmp/tmpmcd6soru_test.go:30:29: cannot use factorization (variable of type *[]int)
    as type []int in argument to append

    /tmp/tmpmcd6soru_test.go:31:27: cannot use factorization (variable of type *[]int)
    as type []int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorizing := make([]int, n+1)\n    factorizing\
    \ [0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n  \
    \          if factorizing[i] > 1 {\n                if factorizing[i]*j <= i {\n\
    \                    factorizing[i] *= j\n                    factorizing[j] +=\
    \ 1\n                }\n            }\n        }\n    }\n    return factorizing\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (7.77s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxum7nlbq_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmpxum7nlbq_test.go:53: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmpxum7nlbq_test.go:53: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n \
    \       tmpxum7nlbq_test.go:53: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpxum7nlbq_test.go:53:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074671
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factors []int\n    factorize := func(n, fac\
    \ []int) {\n        if n%fac == 0 {\n            return // the number does not\
    \ divide into any factor\n        }\n        if n > 1 {\n            factors =\
    \ append(factors, fac)\n        }\n        for fac2 := fac; fac2%fac != 0; fac2++\
    \ {\n            factors = append(factors, fac2)\n        }\n    }\n    factorize(n,\
    \ n)\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1h7q_6x_test.go:20:12: invalid operation: operator % not defined on n
    (variable of type []int)

    /tmp/tmpl1h7q_6x_test.go:23:16: cannot convert 1 (untyped int constant) to []int

    /tmp/tmpl1h7q_6x_test.go:24:39: cannot use fac (variable of type []int) as type
    int in argument to append

    /tmp/tmpl1h7q_6x_test.go:26:26: invalid operation: operator % not defined on fac2
    (variable of type []int)

    /tmp/tmpl1h7q_6x_test.go:26:41: invalid operation: fac2++ (non-numeric type []int)

    /tmp/tmpl1h7q_6x_test.go:27:39: cannot use fac2 (variable of type []int) as type
    int in argument to append

    /tmp/tmpl1h7q_6x_test.go:30:15: cannot use n (variable of type int) as type []int
    in argument to factorize

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074662
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := []int{1, n}\n\n    for i := 2; i <=\
    \ n / 2; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n            if j+i == n {\n           \
    \     factors = append(factors, j)\n                break\n            }\n   \
    \     }\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n\
    \  candidate := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ []int{2} },\n     { actual: candidate(4), expected: []int{2, 2} },\n     { actual:\
    \ candidate(8), expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected:\
    \ []int{3, 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19}\
    \ },\n     { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n\
    \     { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (4.03s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpktl9r1bd_test.go:55: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpktl9r1bd_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestFactorize/test_num__2 (0.00s)\n        tmpktl9r1bd_test.go:55: expected\
    \ '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=8)]'\n    ---\
    \ FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpktl9r1bd_test.go:55: expected\
    \ '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1) %!s(int=57)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpktl9r1bd_test.go:55: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=3249)]'\n    --- FAIL: TestFactorize/test_num__5\
    \ (0.00s)\n        tmpktl9r1bd_test.go:55: expected '[%!s(int=3) %!s(int=3) %!s(int=3)\
    \ %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=1) %!s(int=185193)]'\n\
    \    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpktl9r1bd_test.go:55:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=20577)]'\n    --- FAIL: TestFactorize/test_num__7 (0.00s)\n        tmpktl9r1bd_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=18)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t4.030s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    primes := [2]int{2, 1}\n    max := int(n%primes[0])\n\
    \    for i := 1; i < max; i++ {\n        p := int(n%primes[i])\n        if p >\
    \ 0 && primes[i]*p > i {\n            primes[i] = p\n        }\n    }\n    result\
    \ := [2]int{}\n    for i := 1; i < len(primes); i++ {\n        for j := i * i;\
    \ j < n; j += i {\n            primes[j] = -1\n        }\n    }\n    for i :=\
    \ 1; i < len(primes); i++ {\n        if primes[i] == -1 {\n            continue\n\
    \        }\n        result := append(result, primes[i])\n    }\n    return result\n\
    }\n\nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual:\
    \ candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8), expected:\
    \ []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n\
    \     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual:\
    \ candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577),\
    \ expected: []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2,\
    \ 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9xx7zi_p_test.go:36:26: first argument to append must be a slice; have
    result (variable of type [2]int)

    /tmp/tmp9xx7zi_p_test.go:38:12: cannot use result (variable of type [2]int) as
    type []int in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074663
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n+1)\n    for i := 2; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            for j := i; j < n; j++ {\n \
    \               if n%j == 0 {\n                    factors[j] = factors[j-1] +\
    \ 1\n                    break\n                }\n            }\n        }\n\
    \    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.18s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp73avu0eq_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmp73avu0eq_test.go:52: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp73avu0eq_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n \
    \       tmp73avu0eq_test.go:52: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp73avu0eq_test.go:52:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0"
  timestamp: 1660074665
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factos := make([]int, n)\n    for i := 2; i <\
    \ n; i++ {\n        fac := i\n        for j := 2; j < i; j++ {\n            if\
    \ fac % j == 0 {\n                break\n            }\n            fac = fac\
    \ * j\n        }\n        factos[i] = fac\n    }\n    return factos\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.19s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpxuggbc26_test.go:52: expected '[%!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpxuggbc26_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpxuggbc26_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=0) %!s(int=2)\
    \ %!s(int=6) %!s(int=4) %!s(int=120) %!s(int=6) %!s(int=840)]'\n    --- FAIL:\
    \ TestFactorize/test_num__3 (0.00s)\n        tmpxuggbc26_test.go:52: expected\
    \ '[%!s(int=3) %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=6)\
    \ %!s(int=4) %!s(int=120) %!s(int=6) %!s(int=840) %!s(int=8) %!s(int=18) %!s(int=10)\
    \ %!s(int=1320) %!s(int=12) %!s(int=1560) %!s(int=14) %!s(int=30) %!s(int=16)\
    \ %!s(int=2040) %!s(int=18) %!s(int=2280) %!s(int=20) %!s(int=42) %!s(int=22)\
    \ %!s(int=2760) %!s(int=24) %!s(int=600) %!s(int=26) %!s(int=54) %!s(int=28) %!s(int=3480)\
    \ %!s(int=30) %!s(int=3720) %!s(int=32) %!s(int=66) %!s(int=34) %!s(int=840) %!s(int=36)\
    \ %!s(int=4440) %!s(int=38) %!s(int=78) %!s(int=40) %!s(int=4920) %!s(int=42)\
    \ %!s(int=5160) %!s(int=44) %!s(int=90) %!s(int=46) %!s(int=5640) %!s(int=48)\
    \ %!s(int=5880) %!s(int=50) %!s(int=102) %!s(int=52) %!s(int=6360) %!s(int=54)\
    \ %!s(int=1320) %!s(int=56)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n\
    \        tmpxuggbc26_test.go:52: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=6) %!s(int=4)\
    \ %!s(int=120) %!s(int=6) %!s(int=840) %!s(int=8) %!s(int=18) %!s(int=10) %!s(int=1320)\
    \ %!s(int=12) %!s(int=1560) %!s(int=14) %!s(int=30) %!s(int=16) %!s(int=2040)\
    \ %!s(int=18) %!s(int=2280) %!s(int=20) %!s(int=42) %!s(int=22) %!s(int=2760)\
    \ %!s(int=24) %!s(int=600) %!s(int=26) %!s(int=54) %!s(int=28) %!s(int=3480) %!s(int=30)\
    \ %!s(int=3720) %!s(int=32) %!s(int=66) %!s(int=34) %!s(int=840) %!s(int=36) %!s(int=4440)\
    \ %!s(int=38) %!s(int=78) %!s(int=40) "
  timestamp: 1660074665
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n <= 1 {\n        return []int{1}\n    }\n\n\
    \    var factors []int\n    for i := 2; i <= n; i++ {\n        for j := 2; i*j\
    \ <= n; j++ {\n            if n%i == 0 && n%j == 0 {\n                factors\
    \ = append(factors, i)\n                factors = append(factors, j)\n       \
    \         break\n            }\n        }\n    }\n\n    return factors\n}\n\n\
    func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.02s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpyhfstnkr_test.go:56: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpyhfstnkr_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n        tmpyhfstnkr_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmpyhfstnkr_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=3) %!s(int=19) %!s(int=3) %!s(int=57) %!s(int=3)\
    \ %!s(int=171) %!s(int=3) %!s(int=361) %!s(int=3) %!s(int=1083) %!s(int=3)]'\n\
    \    --- FAIL: TestFactorize/test_num__5 (0.00s)\n        tmpyhfstnkr_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=9) %!s(int=3) %!s(int=19) %!s(int=3) %!s(int=27)\
    \ %!s(int=3) %!s(int=57) %!s(int=3) %!s(int=171) %!s(int=3) %!s(int=361) %!s(int=3)\
    \ %!s(int=513) %!s(int=3) %!s(int=1083) %!s(int=3) %!s(int=3249) %!s(int=3) %!s(int=6859)\
    \ %!s(int=3) %!s(int=9747) %!s(int=3) %!s(int=20577) %!s(int=3) %!s(int=61731)\
    \ %!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__6 (0.00s)\n        tmpyhfstnkr_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=19) %!s(int=19) %!s(int=19)]', got '[%!s(int=3)\
    \ %!s(int=3) %!s(int=19) %!s(int=3) %!s(int=57) %!s(int=3) %!s(int=361) %!s(int=3)\
    \ %!s(int=1083) %!s(int=3) %!s(int=6859) %!s(int=3)]'\n    --- FAIL: TestFactorize/test_num__7\
    \ (0.00s)\n        tmpyhfstnkr_test.go:56: expected '[%!s(int=2) %!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=2) %!s(int=9)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.053s\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factorize := make([]int, len(primeFactorization[n]))\n\
    \    for i := 0; i < len(factorize); i++ {\n        factorize[i] = 0\n    }\n\
    \    for i := 1; i <= n; i++ {\n        for _, p := range primeFactorization[i]\
    \ {\n            if p*i != n {\n                continue\n            }\n    \
    \        factorize[p]++\n        }\n    }\n    return factorize\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhhcvg7k_test.go:18:34: undefined: primeFactorization

    /tmp/tmpxhhcvg7k_test.go:23:27: undefined: primeFactorization

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n%2 == 0 {\n        return []int{n}\n    }\n\
    \n    i := 2\n    factors := []int{}\n    for i; i*i <= n; i++ {\n        if n%i\
    \ == 0 {\n            factors = append(factors, i)\n            n /= i\n     \
    \   }\n    }\n\n    factors = append(factors, n)\n    return factors\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_tppl_e__test.go:24:9: i (variable of type int) is not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074664
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n\n\
    \    factors := make([]int, n+1)\n    factors[0] = 1\n\n    for i := 2; i <= n;\
    \ i++ {\n        j := 2\n        for k := 0; k < i; k++ {\n            if i*j\
    \ <= n {\n                factors[j] = i\n                break\n            }\n\
    \            j++\n        }\n    }\n\n    return factors\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (9.25s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmp4x3tafi8_test.go:59: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n \
    \       tmp4x3tafi8_test.go:59: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__2\
    \ (0.00s)\n        tmp4x3tafi8_test.go:59: expected '[%!s(int=2) %!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n \
    \       tmp4x3tafi8_test.go:59: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=28) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestFactorize/test_num__4 (0.00s)\n        tmp4x3tafi8_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=19) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1624) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(i"
  timestamp: 1660074674
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n == 1 {\n        return []int{n}\n    }\n\n\
    \    n -= 1 // Remove one from number if necessary\n\n    // Create a map of already\
    \ computed factorization\n    factors := make(map[int]int)\n\n    factors <- 2\n\
    \    for i := 3; i <= n; i++ {\n        factors <- 1\n        for factor := 2;\
    \ factor*factor <= i; factor++ {\n            if i%factor == 0 {\n           \
    \     factors[factor] = factors[factor] + 1\n                break\n         \
    \   }\n        }\n    }\n\n    factors := factors[:] // Copy the map to prevent\
    \ changing the original map.\n    factors <- n // Add final factor.\n\n    result\
    \ := make([]int, 0)\n    for factor := range factors {\n        result = append(result,\
    \ factor)\n    }\n    sort.Ints(result)\n\n    return result\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_iq1l01_test.go:27:5: invalid operation: cannot send to non-channel factors
    (variable of type map[int]int)

    /tmp/tmp9_iq1l01_test.go:29:9: invalid operation: cannot send to non-channel factors
    (variable of type map[int]int)

    /tmp/tmp9_iq1l01_test.go:38:13: no new variables on left side of :=

    /tmp/tmp9_iq1l01_test.go:38:16: invalid operation: cannot slice factors (variable
    of type map[int]int)

    /tmp/tmp9_iq1l01_test.go:39:5: invalid operation: cannot send to non-channel factors
    (variable of type map[int]int)

    /tmp/tmp9_iq1l01_test.go:45:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n <= 1 {\n        return nil\n    }\n    if\
    \ n%2 == 0 {\n        return factorize(n/2)\n    }\n    if n%3 == 0 {\n      \
    \  return factorize(n/3)\n    }\n    factors := []int{0}\n    i := 2\n    factors\
    \ = append(factors, i)\n    for {\n        for j := 0; j < i; j++ {\n        \
    \    if n%i == 0 && n/i != j {\n                factors = append(factors, i)\n\
    \                break\n            }\n        }\n        if j == i {\n      \
    \      break\n        }\n        i += 2\n    }\n    return factors\n}\n\nfunc\
    \ TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpafp6wirh_test.go:37:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 2
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    if n <= 0 {\n        return nil\n    }\n\n   \
    \ prime := make([]int, n+1)\n    prime[1] = 1\n    prime[2] = 2\n\n    var k int\n\
    \n    for i := 3; i <= n; i++ {\n        k := 1\n        prime[i] = 0\n\n    \
    \    for j := 2; i * j <= n; j++ {\n            if j != i {\n                if\
    \ j%i == 0 {\n                    k++\n                } else {\n            \
    \        break\n                }\n            }\n        }\n\n        if k >\
    \ 0 {\n            prime[i] = k\n        }\n    }\n\n    result := make([]int,\
    \ 0, n+1)\n\n    for i := n; i >= 2; i-- {\n        if prime[i] == 0 {\n     \
    \       result = append(result, i)\n        }\n    }\n\n    return result\n}\n\
    \nfunc TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
    \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2,\
    \ 2} },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual:\
    \ candidate(3249), expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193),\
    \ expected: []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected:\
    \ []int{3, 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfod3x9ug_test.go:26:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074665
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    var factorize []int\n    for i := 1; i <= n/2;\
    \ i++ {\n        if n%i == 0 {\n            factorize = append(factorize, i)\n\
    \            for j := i * i; j < n; j += i {\n                factorize = append(factorize,\
    \ j)\n            }\n        }\n    }\n    return factorize\n}\n\nfunc TestFactorize(t\
    \ *testing.T) {\n  candidate := factorize\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(2), expected: []int{2} },\n     { actual: candidate(4), expected:\
    \ []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2} },\n \
    \    { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
    \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
    \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
    \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.22s)\n    --- FAIL: TestFactorize/test_num__0\
    \ (0.00s)\n        tmpmzyuvxf1_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=1)\
    \ %!s(int=1)]'\n    --- FAIL: TestFactorize/test_num__1 (0.00s)\n        tmpmzyuvxf1_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestFactorize/test_num__2 (0.00s)\n        tmpmzyuvxf1_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestFactorize/test_num__3 (0.00s)\n \
    \       tmpmzyuvxf1_test.go:50: expected '[%!s(int=3) %!s(int=19)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=3) %!s(int=9) %!s(int=12) %!s(int=15) %!s(int=18) %!s(int=21) %!s(int=24)\
    \ %!s(int=27) %!s(int=30) %!s(int=33) %!s(int=36) %!s(int=39) %!s(int=42) %!s(int=45)\
    \ %!s(int=48) %!s(int=51) %!s(int=54) %!s(int=19)]'\n    --- FAIL: TestFactorize/test_num__4\
    \ (0.00s)\n        tmpmzyuvxf1_test.go:50: expected '[%!s(int=3) %!s(int=3) %!s(int=19)\
    \ %!s(int=19)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)\
    \ %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18)\
    \ %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23"
  timestamp: 1660074665
- exit_code: 1
  program: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return list of prime factors of given integer in the order from smallest to\
    \ largest.\n// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>>\
    \ factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc\
    \ factorize(n int) []int {\n    factors := make([]int, n+1)\n    factors[0] =\
    \ 1\n    i := 2\n    for j := 1; j < n; j++ {\n        if n%i == 0 {\n       \
    \     factors[j] = i\n            n /= i\n            factors[i+1] = 1\n     \
    \   } else {\n            i++\n        }\n    }\n    if n > 1 {\n        factors[i+1]\
    \ = n\n    }\n    return factors\n}\n\nfunc TestFactorize(t *testing.T) {\n  candidate\
    \ := factorize\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: []int{2} },\n\
    \     { actual: candidate(4), expected: []int{2, 2} },\n     { actual: candidate(8),\
    \ expected: []int{2, 2, 2} },\n     { actual: candidate(57), expected: []int{3,\
    \ 19} },\n     { actual: candidate(3249), expected: []int{3, 3, 19, 19} },\n \
    \    { actual: candidate(185193), expected: []int{3, 3, 3, 19, 19, 19} },\n  \
    \   { actual: candidate(20577), expected: []int{3, 19, 19, 19} },\n     { actual:\
    \ candidate(18), expected: []int{2, 3, 3} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFactorize (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc0001ce018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc0001ce018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.factorize(...)\n\t/tmp/tmpogyiz1o4_test.go:25\n\
    command-line-arguments_test.TestFactorize(0x0?)\n\t/tmp/tmpogyiz1o4_test.go:43\
    \ +0xcdf\ntesting.tRunner(0xc00019b040, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660074665
